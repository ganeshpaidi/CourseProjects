Continuing.

Program received signal SIGINT, Interrupt.
0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
26	in ../sysdeps/unix/sysv/linux/read.c
#0  0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
#1  0x00007f56b4390b9f in _IO_new_file_underflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#2  0x00007f56b4391f86 in __GI__IO_default_uflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#3  0x00005561e0de1afd in interactive_getc () at postgres.c:325
#4  0x00005561e0de1a58 in InteractiveBackend (inBuf=0x7ffe2637ba40) at postgres.c:240
#5  0x00005561e0de1d74 in ReadCommand (inBuf=0x7ffe2637ba40) at postgres.c:476
#6  0x00005561e0de70c4 in PostgresMain (argc=3, argv=0x5561e2105830, dbname=0x5561e21277a0 "test", username=0x5561e210c2e0 "karthikeya") at postgres.c:4403
#7  0x00005561e0c2a721 in main (argc=3, argv=0x5561e2105830) at main.c:205
Continuing.

Program received signal SIGINT, Interrupt.
0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
26	in ../sysdeps/unix/sysv/linux/read.c
#0  0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
#1  0x00007f56b4390b9f in _IO_new_file_underflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#2  0x00007f56b4391f86 in __GI__IO_default_uflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#3  0x00005561e0de1afd in interactive_getc () at postgres.c:325
#4  0x00005561e0de1a58 in InteractiveBackend (inBuf=0x7ffe2637ba40) at postgres.c:240
#5  0x00005561e0de1d74 in ReadCommand (inBuf=0x7ffe2637ba40) at postgres.c:476
#6  0x00005561e0de70c4 in PostgresMain (argc=3, argv=0x5561e2105830, dbname=0x5561e21277a0 "test", username=0x5561e210c2e0 "karthikeya") at postgres.c:4403
#7  0x00005561e0c2a721 in main (argc=3, argv=0x5561e2105830) at main.c:205
Continuing.

Program received signal SIGINT, Interrupt.
0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
26	in ../sysdeps/unix/sysv/linux/read.c
#0  0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
#1  0x00007f56b4390b9f in _IO_new_file_underflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#2  0x00007f56b4391f86 in __GI__IO_default_uflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#3  0x00005561e0de1afd in interactive_getc () at postgres.c:325
#4  0x00005561e0de1a58 in InteractiveBackend (inBuf=0x7ffe2637ba40) at postgres.c:240
#5  0x00005561e0de1d74 in ReadCommand (inBuf=0x7ffe2637ba40) at postgres.c:476
#6  0x00005561e0de70c4 in PostgresMain (argc=3, argv=0x5561e2105830, dbname=0x5561e21277a0 "test", username=0x5561e210c2e0 "karthikeya") at postgres.c:4403
#7  0x00005561e0c2a721 in main (argc=3, argv=0x5561e2105830) at main.c:205
Continuing.

Program received signal SIGINT, Interrupt.
0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
26	in ../sysdeps/unix/sysv/linux/read.c
#0  0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
#1  0x00007f56b4390b9f in _IO_new_file_underflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#2  0x00007f56b4391f86 in __GI__IO_default_uflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#3  0x00005561e0de1afd in interactive_getc () at postgres.c:325
#4  0x00005561e0de1a58 in InteractiveBackend (inBuf=0x7ffe2637ba40) at postgres.c:240
#5  0x00005561e0de1d74 in ReadCommand (inBuf=0x7ffe2637ba40) at postgres.c:476
#6  0x00005561e0de70c4 in PostgresMain (argc=3, argv=0x5561e2105830, dbname=0x5561e21277a0 "test", username=0x5561e210c2e0 "karthikeya") at postgres.c:4403
#7  0x00005561e0c2a721 in main (argc=3, argv=0x5561e2105830) at main.c:205
Detaching from program: /home/karthikeya/Desktop/6th_sem/dbms/lab6/postgresql/install/bin/postgres, process 100764
[Inferior 1 (process 100764) detached]
Continuing.

Program received signal SIGINT, Interrupt.
0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
26	in ../sysdeps/unix/sysv/linux/read.c
#0  0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
#1  0x00007f56b4390b9f in _IO_new_file_underflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#2  0x00007f56b4391f86 in __GI__IO_default_uflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#3  0x00005561e0de1afd in interactive_getc () at postgres.c:325
#4  0x00005561e0de1a58 in InteractiveBackend (inBuf=0x7ffe2637ba40) at postgres.c:240
#5  0x00005561e0de1d74 in ReadCommand (inBuf=0x7ffe2637ba40) at postgres.c:476
#6  0x00005561e0de70c4 in PostgresMain (argc=3, argv=0x5561e2105830, dbname=0x5561e21277a0 "test", username=0x5561e210c2e0 "karthikeya") at postgres.c:4403
#7  0x00005561e0c2a721 in main (argc=3, argv=0x5561e2105830) at main.c:205
Continuing.

Program received signal SIGINT, Interrupt.
0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
26	in ../sysdeps/unix/sysv/linux/read.c
#0  0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
#1  0x00007f56b4390b9f in _IO_new_file_underflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#2  0x00007f56b4391f86 in __GI__IO_default_uflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#3  0x00005561e0de1afd in interactive_getc () at postgres.c:325
#4  0x00005561e0de1a58 in InteractiveBackend (inBuf=0x7ffe2637ba40) at postgres.c:240
#5  0x00005561e0de1d74 in ReadCommand (inBuf=0x7ffe2637ba40) at postgres.c:476
#6  0x00005561e0de70c4 in PostgresMain (argc=3, argv=0x5561e2105830, dbname=0x5561e21277a0 "test", username=0x5561e210c2e0 "karthikeya") at postgres.c:4403
#7  0x00005561e0c2a721 in main (argc=3, argv=0x5561e2105830) at main.c:205
Breakpoint 1 at 0x5561e0de237b: file postgres.c, line 951.
Continuing.

Breakpoint 1, exec_simple_query (query_string=0x5561e2183c58 "select * from X natural join r;\n") at postgres.c:951
warning: Source file is more recent than executable.
951	{
Continuing.

Program received signal SIGINT, Interrupt.
0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
26	../sysdeps/unix/sysv/linux/read.c: No such file or directory.
#0  0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
#1  0x00007f56b4390b9f in _IO_new_file_underflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#2  0x00007f56b4391f86 in __GI__IO_default_uflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#3  0x00005561e0de1afd in interactive_getc () at postgres.c:325
#4  0x00005561e0de1a58 in InteractiveBackend (inBuf=0x7ffe2637ba40) at postgres.c:240
#5  0x00005561e0de1d74 in ReadCommand (inBuf=0x7ffe2637ba40) at postgres.c:476
#6  0x00005561e0de70c4 in PostgresMain (argc=3, argv=0x5561e2105830, dbname=0x5561e21277a0 "test", username=0x5561e210c2e0 "karthikeya") at postgres.c:4403
#7  0x00005561e0c2a721 in main (argc=3, argv=0x5561e2105830) at main.c:205
Continuing.

Breakpoint 1, exec_simple_query (query_string=0x5561e2183c58 "select * from X natural join r;\n") at postgres.c:951
951	{
#0  exec_simple_query (query_string=0x5561e2183c58 "select * from X natural join r;\n") at postgres.c:951
#1  0x00005561e0de71fd in PostgresMain (argc=3, argv=0x5561e2105830, dbname=0x5561e21277a0 "test", username=0x5561e210c2e0 "karthikeya") at postgres.c:4471
#2  0x00005561e0c2a721 in main (argc=3, argv=0x5561e2105830) at main.c:205
Continuing.

Program received signal SIGINT, Interrupt.
0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
26	../sysdeps/unix/sysv/linux/read.c: No such file or directory.
#0  0x00007f56b440dfd2 in __GI___libc_read (fd=0, buf=0x5561e21be870, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
#1  0x00007f56b4390b9f in _IO_new_file_underflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#2  0x00007f56b4391f86 in __GI__IO_default_uflow (fp=0x7f56b44ec980 <_IO_2_1_stdin_>) at libioP.h:948
#3  0x00005561e0de1afd in interactive_getc () at postgres.c:325
#4  0x00005561e0de1a58 in InteractiveBackend (inBuf=0x7ffe2637ba40) at postgres.c:240
#5  0x00005561e0de1d74 in ReadCommand (inBuf=0x7ffe2637ba40) at postgres.c:476
#6  0x00005561e0de70c4 in PostgresMain (argc=3, argv=0x5561e2105830, dbname=0x5561e21277a0 "test", username=0x5561e210c2e0 "karthikeya") at postgres.c:4403
#7  0x00005561e0c2a721 in main (argc=3, argv=0x5561e2105830) at main.c:205
All defined functions:

File ../../../../src/include/access/gin_private.h:
485:	static int ginCompareItemPointers(ItemPointer, ItemPointer);

File ../../../../src/include/access/gist.h:
215:	static FullTransactionId GistPageGetDeleteXid(Page);
204:	static void GistPageSetDeleted(Page, FullTransactionId);

File ../../../../src/include/access/nbtree.h:
259:	static FullTransactionId BTPageGetDeleteXid(Page);
290:	static _Bool BTPageIsRecyclable(Page);
238:	static void BTPageSetDeleted(Page, FullTransactionId);
549:	static BlockNumber BTreeTupleGetDownLink(IndexTuple);
631:	static ItemPointer BTreeTupleGetHeapTID(IndexTuple);
657:	static ItemPointer BTreeTupleGetMaxHeapTID(IndexTuple);
511:	static uint16 BTreeTupleGetNPosting(IndexTuple);
530:	static ItemPointer BTreeTupleGetPosting(IndexTuple);
537:	static ItemPointer BTreeTupleGetPostingN(IndexTuple, int);
522:	static uint32 BTreeTupleGetPostingOffset(IndexTuple);
613:	static BlockNumber BTreeTupleGetTopParent(IndexTuple);
473:	static _Bool BTreeTupleIsPivot(IndexTuple);
485:	static _Bool BTreeTupleIsPosting(IndexTuple);
555:	static void BTreeTupleSetDownLink(IndexTuple, BlockNumber);
588:	static void BTreeTupleSetNAtts(IndexTuple, uint16, _Bool);
497:	static void BTreeTupleSetPosting(IndexTuple, uint16, int);
619:	static void BTreeTupleSetTopParent(IndexTuple, BlockNumber);

File ../../../../src/include/access/tableam.h:
883:	static TableScanDesc table_beginscan(Relation, Snapshot, int, struct ScanKeyData *);
907:	static TableScanDesc table_beginscan_strat(Relation, Snapshot, int, struct ScanKeyData *, _Bool, _Bool);
967:	static TableScanDesc table_beginscan_tid(Relation, Snapshot);
991:	static void table_endscan(TableScanDesc);
1778:	static double table_index_build_range_scan(Relation, Relation, struct IndexInfo *, _Bool, _Bool, _Bool, BlockNumber, BlockNumber, IndexBuildCallback, void *, TableScanDesc);
1745:	static double table_index_build_scan(Relation, Relation, struct IndexInfo *, _Bool, _Bool, IndexBuildCallback, void *, TableScanDesc);
1325:	static TransactionId table_index_delete_tuples(Relation, TM_IndexDeleteOp *);
1161:	static IndexFetchTableData *table_index_fetch_begin(Relation);
1180:	static void table_index_fetch_end(struct IndexFetchTableData *);
1171:	static void table_index_fetch_reset(struct IndexFetchTableData *);
1210:	static _Bool table_index_fetch_tuple(struct IndexFetchTableData *, ItemPointer, Snapshot, TupleTableSlot *, _Bool *, _Bool *);
1907:	static void table_relation_estimate_size(Relation, int32 *, BlockNumber *, double *, double *);
1886:	static void table_relation_fetch_toast_slice(Relation, Oid, int32, int32, int32, struct varlena *);
1590:	static void table_relation_set_new_filenode(Relation, const RelFileNode *, char, TransactionId *, MultiXactId *);
1838:	static uint64 table_relation_size(Relation, ForkNumber);
1032:	static _Bool table_scan_getnextslot(TableScanDesc, ScanDirection, TupleTableSlot *);
1460:	static TM_Result table_tuple_delete(Relation, ItemPointer, CommandId, Snapshot, Snapshot, _Bool, TM_FailureData *, _Bool);
1371:	static void table_tuple_insert(Relation, TupleTableSlot *, CommandId, int, struct BulkInsertStateData *);
1304:	static _Bool table_tuple_satisfies_snapshot(Relation, TupleTableSlot *, Snapshot);
1504:	static TM_Result table_tuple_update(Relation, ItemPointer, TupleTableSlot *, CommandId, Snapshot, Snapshot, _Bool, TM_FailureData *, LockTupleMode *, _Bool *);

File ../../../../src/include/access/transam.h:
128:	static void FullTransactionIdAdvance(FullTransactionId *);
71:	static FullTransactionId FullTransactionIdFromEpochAndXid(uint32, TransactionId);
81:	static FullTransactionId FullTransactionIdFromU64(uint64);
355:	static FullTransactionId FullTransactionIdNewer(FullTransactionId, FullTransactionId);
103:	static void FullTransactionIdRetreat(FullTransactionId *);
310:	static TransactionId ReadNextTransactionId(void);
329:	static TransactionId TransactionIdOlder(TransactionId, TransactionId);
317:	static TransactionId TransactionIdRetreatedBy(TransactionId, uint32);

File ../../../../src/include/catalog/index.h:
206:	static void itemptr_decode(ItemPointer, int64);
185:	static int64 itemptr_encode(ItemPointer);

File ../../../../src/include/common/hashfn.h:
31:	static Datum hash_any(const unsigned char *, int);
37:	static Datum hash_any_extended(const unsigned char *, int, uint64);
68:	static uint32 hash_combine(uint32, uint32);
43:	static Datum hash_uint32(uint32);
49:	static Datum hash_uint32_extended(uint32, uint64);
92:	static uint32 murmurhash32(uint32);

File ../../../../src/include/common/int.h:
47:	static _Bool pg_add_s16_overflow(int16, int16, int16 *);
104:	static _Bool pg_add_s32_overflow(int32, int32, int32 *);
161:	static _Bool pg_add_s64_overflow(int64, int64, int64 *);
376:	static _Bool pg_add_u64_overflow(uint64, uint64, uint64 *);
83:	static _Bool pg_mul_s16_overflow(int16, int16, int16 *);
140:	static _Bool pg_mul_s32_overflow(int32, int32, int32 *);
215:	static _Bool pg_mul_s64_overflow(int64, int64, int64 *);
410:	static _Bool pg_mul_u64_overflow(uint64, uint64, uint64 *);
65:	static _Bool pg_sub_s16_overflow(int16, int16, int16 *);
122:	static _Bool pg_sub_s32_overflow(int32, int32, int32 *);
188:	static _Bool pg_sub_s64_overflow(int64, int64, int64 *);

File ../../../../src/include/common/int128.h:
62:	static void int128_add_int64_mul_int64(INT128 *, int64, int64);
71:	static int int128_compare(INT128, INT128);
94:	static int64 int128_to_int64(INT128);
84:	static INT128 int64_to_int128(int64);

File ../../../../src/include/common/kwlookup.h:
39:	static const char *GetScanKeyword(int, const ScanKeywordList *);

File ../../../../src/include/executor/executor.h:
316:	static Datum ExecEvalExpr(ExprState *, ExprContext *, _Bool *);
331:	static Datum ExecEvalExprSwitchContext(ExprState *, ExprContext *, _Bool *);
396:	static _Bool ExecQual(ExprState *, ExprContext *);
423:	static _Bool ExecQualAndReset(ExprState *, ExprContext *);

File ../../../../src/include/executor/tuptable.h:
425:	static TupleTableSlot *ExecClearTuple(TupleTableSlot *);
475:	static TupleTableSlot *ExecCopySlot(TupleTableSlot *, TupleTableSlot *);
463:	static MinimalTuple ExecCopySlotMinimalTuple(TupleTableSlot *);
367:	static _Bool slot_attisnull(TupleTableSlot *, int);
354:	static void slot_getallattrs(TupleTableSlot *);
381:	static Datum slot_getattr(TupleTableSlot *, int, _Bool *);
341:	static void slot_getsomeattrs(TupleTableSlot *, int);
402:	static Datum slot_getsysattr(TupleTableSlot *, int, _Bool *);

File ../../../../src/include/lib/ilist.h:
358:	static void dlist_delete(dlist_node *);
421:	static _Bool dlist_has_next(dlist_head *, dlist_node *);
431:	static _Bool dlist_has_prev(dlist_head *, dlist_node *);
458:	static void *dlist_head_element_off(dlist_head *, size_t);
468:	static dlist_node *dlist_head_node(dlist_head *);
278:	static void dlist_init(dlist_head *);
334:	static void dlist_insert_after(dlist_node *, dlist_node *);
346:	static void dlist_insert_before(dlist_node *, dlist_node *);
289:	static _Bool dlist_is_empty(dlist_head *);
385:	static void dlist_move_head(dlist_head *, dlist_node *);
440:	static dlist_node *dlist_next_node(dlist_head *, dlist_node *);
368:	static dlist_node *dlist_pop_head_node(dlist_head *);
450:	static dlist_node *dlist_prev_node(dlist_head *, dlist_node *);
300:	static void dlist_push_head(dlist_head *, dlist_node *);
317:	static void dlist_push_tail(dlist_head *, dlist_node *);
475:	static void *dlist_tail_element_off(dlist_head *, size_t);
485:	static dlist_node *dlist_tail_node(dlist_head *);
671:	static void slist_delete_current(slist_mutable_iter *);
573:	static void slist_init(slist_head *);
582:	static _Bool slist_is_empty(slist_head *);
615:	static slist_node *slist_pop_head_node(slist_head *);
593:	static void slist_push_head(slist_head *, slist_node *);

File ../../../../src/include/lib/qunique.h:
21:	static size_t qunique(void *, size_t, size_t, int (*)(const void *, const void *));
46:	static size_t qunique_arg(void *, size_t, size_t, int (*)(const void *, const void *, void *), void *);

File ../../../../src/include/lib/sort_template.h:
279:	void qsort_interruptible(void *, size_t, size_t, qsort_arg_comparator, void *);
248:	static void *qsort_interruptible_med3(void *, void *, void *, qsort_arg_comparator, void *);
260:	static void qsort_interruptible_swap(uint8 *, uint8 *);
269:	static void qsort_interruptible_swapn(uint8 *, uint8 *, size_t);
279:	static void qsort_ssup(SortTuple *, size_t, SortSupportData *);
248:	static SortTuple *qsort_ssup_med3(SortTuple *, SortTuple *, SortTuple *, SortSupportData *);
260:	static void qsort_ssup_swap(SortTuple *, SortTuple *);
269:	static void qsort_ssup_swapn(SortTuple *, SortTuple *, size_t);
279:	static void qsort_tuple(SortTuple *, size_t, qsort_tuple_compare_function, Tuplesortstate *);
248:	static SortTuple *qsort_tuple_med3(SortTuple *, SortTuple *, SortTuple *, qsort_tuple_compare_function, Tuplesortstate *);
260:	static void qsort_tuple_swap(SortTuple *, SortTuple *);
269:	static void qsort_tuple_swapn(SortTuple *, SortTuple *, size_t);
279:	static void sort_checkpoint_bufferids(CkptSortItem *, size_t);
248:	static CkptSortItem *sort_checkpoint_bufferids_med3(CkptSortItem *, CkptSortItem *, CkptSortItem *);
260:	static void sort_checkpoint_bufferids_swap(CkptSortItem *, CkptSortItem *);
269:	static void sort_checkpoint_bufferids_swapn(CkptSortItem *, CkptSortItem *, size_t);
279:	static void sort_pending_writebacks(PendingWriteback *, size_t);
248:	static PendingWriteback *sort_pending_writebacks_med3(PendingWriteback *, PendingWriteback *, PendingWriteback *);
260:	static void sort_pending_writebacks_swap(PendingWriteback *, PendingWriteback *);
269:	static void sort_pending_writebacks_swapn(PendingWriteback *, PendingWriteback *, size_t);

File ../../../../src/include/libpq/pqformat.h:
161:	static void pq_sendbyte(StringInfo, uint8);
172:	static void pq_sendint(StringInfo, uint32, int);
137:	static void pq_sendint16(StringInfo, uint16);
145:	static void pq_sendint32(StringInfo, uint32);
153:	static void pq_sendint64(StringInfo, uint64);
129:	static void pq_sendint8(StringInfo, uint8);
61:	static void pq_writeint16(StringInfoData * restrict, uint16);
75:	static void pq_writeint32(StringInfoData * restrict, uint32);
89:	static void pq_writeint64(StringInfoData * restrict, uint64);
47:	static void pq_writeint8(StringInfoData * restrict, uint8);
109:	static void pq_writestring(StringInfoData * restrict, const char * restrict);

File ../../../../src/include/mb/pg_wchar.h:
545:	static _Bool is_utf16_surrogate_first(pg_wchar);
551:	static _Bool is_utf16_surrogate_second(pg_wchar);
539:	static _Bool is_valid_unicode_codepoint(pg_wchar);
557:	static pg_wchar surrogate_pair_to_codepoint(pg_wchar, pg_wchar);

File ../../../../src/include/nodes/nodeFuncs.h:
73:	static Node *get_leftop(const void *);
124:	static Expr *get_notclausearg(const void *);
85:	static Node *get_rightop(const void *);
97:	static _Bool is_andclause(const void *);
59:	static _Bool is_funcclause(const void *);
115:	static _Bool is_notclause(const void *);
66:	static _Bool is_opclause(const void *);
106:	static _Bool is_orclause(const void *);

File ../../../../src/include/nodes/pg_list.h:
426:	static ForEachState for_each_cell_setup(const List *, const ListCell *);
402:	static ForEachState for_each_from_setup(const List *, int);
312:	static int list_cell_number(const List *, const ListCell *);
125:	static ListCell *list_head(const List *);
267:	static ListCell *list_last_cell(const List *);
149:	static int list_length(const List *);
278:	static void *list_nth(const List *, int);
256:	static ListCell *list_nth_cell(const List *, int);
289:	static int list_nth_int(const List *, int);
300:	static Oid list_nth_oid(const List *, int);
139:	static ListCell *list_second_cell(const List *);
322:	static ListCell *lnext(const List *, const ListCell *);

File ../../../../src/include/port/atomics.h:
386:	static uint32 pg_atomic_add_fetch_u32(volatile pg_atomic_uint32 *, int32);
504:	static uint64 pg_atomic_add_fetch_u64(volatile pg_atomic_uint64 *, int64);
311:	static _Bool pg_atomic_compare_exchange_u32(volatile pg_atomic_uint32 *, uint32 *, uint32);
292:	static uint32 pg_atomic_exchange_u32(volatile pg_atomic_uint32 *, uint32);
328:	static uint32 pg_atomic_fetch_add_u32(volatile pg_atomic_uint32 *, int32);
467:	static uint64 pg_atomic_fetch_add_u64(volatile pg_atomic_uint64 *, int64);
358:	static uint32 pg_atomic_fetch_and_u32(volatile pg_atomic_uint32 *, uint32);
372:	static uint32 pg_atomic_fetch_or_u32(volatile pg_atomic_uint32 *, uint32);
223:	static void pg_atomic_init_u32(volatile pg_atomic_uint32 *, uint32);
415:	static void pg_atomic_init_u64(volatile pg_atomic_uint64 *, uint64);
241:	static uint32 pg_atomic_read_u32(volatile pg_atomic_uint32 *);
429:	static uint64 pg_atomic_read_u64(volatile pg_atomic_uint64 *);
401:	static uint32 pg_atomic_sub_fetch_u32(volatile pg_atomic_uint32 *, int32);
277:	static void pg_atomic_unlocked_write_u32(volatile pg_atomic_uint32 *, uint32);
258:	static void pg_atomic_write_u32(volatile pg_atomic_uint32 *, uint32);
438:	static void pg_atomic_write_u64(volatile pg_atomic_uint64 *, uint64);

File ../../../../src/include/port/atomics/arch-x86.h:
168:	static _Bool pg_atomic_compare_exchange_u32_impl(volatile pg_atomic_uint32 *, uint32 *, uint32);
189:	static uint32 pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *, int32);
226:	static uint64 pg_atomic_fetch_add_u64_impl(volatile pg_atomic_uint64 *, int64);

File ../../../../src/include/port/atomics/generic-gcc.h:
202:	static uint32 pg_atomic_fetch_and_u32_impl(volatile pg_atomic_uint32 *, uint32);
211:	static uint32 pg_atomic_fetch_or_u32_impl(volatile pg_atomic_uint32 *, uint32);
193:	static uint32 pg_atomic_fetch_sub_u32_impl(volatile pg_atomic_uint32 *, int32);

File ../../../../src/include/port/atomics/generic.h:
231:	static uint32 pg_atomic_add_fetch_u32_impl(volatile pg_atomic_uint32 *, int32);
388:	static uint64 pg_atomic_add_fetch_u64_impl(volatile pg_atomic_uint64 *, int64);
170:	static uint32 pg_atomic_exchange_u32_impl(volatile pg_atomic_uint32 *, uint32);
161:	static void pg_atomic_init_u32_impl(volatile pg_atomic_uint32 *, uint32);
331:	static void pg_atomic_init_u64_impl(volatile pg_atomic_uint64 *, uint64);
46:	static uint32 pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *);
299:	static uint64 pg_atomic_read_u64_impl(volatile pg_atomic_uint64 *);
240:	static uint32 pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *, int32);
64:	static void pg_atomic_unlocked_write_u32_impl(volatile pg_atomic_uint32 *, uint32);
55:	static void pg_atomic_write_u32_impl(volatile pg_atomic_uint32 *, uint32);
266:	static void pg_atomic_write_u64_impl(volatile pg_atomic_uint64 *, uint64);

File ../../../../src/include/port/pg_bitutils.h:
235:	static uint32 pg_ceil_log2_32(uint32);
248:	static uint64 pg_ceil_log2_64(uint64);
32:	static int pg_leftmost_one_pos32(uint32);
55:	static int pg_leftmost_one_pos64(uint64);
146:	static uint32 pg_nextpower2_32(uint32);
85:	static int pg_rightmost_one_pos32(uint32);

File ../../../../src/include/postgres.h:
708:	static float4 DatumGetFloat4(Datum);
746:	static float8 DatumGetFloat8(Datum);
725:	static Datum Float4GetDatum(float4);
771:	static Datum Float8GetDatum(float8);

File ../../../../src/include/replication/walreceiver.h:
433:	static void walrcv_clear_result(WalRcvExecResult *);

File ../../../../src/include/replication/worker_internal.h:
94:	static _Bool am_tablesync_worker(void);

File ../../../../src/include/storage/bufmgr.h:
279:	static void TestForOldSnapshot(Snapshot, Relation, Page);

File ../../../../src/include/storage/checksum_impl.h:
187:	uint16 pg_checksum_page(char *, BlockNumber);
146:	static uint32 pg_checksum_block(const PGChecksummablePage *);

File ../../../../src/include/storage/proclist.h:
146:	static _Bool proclist_contains_offset(proclist_head *, int, size_t);
115:	static void proclist_delete_offset(proclist_head *, int, size_t);
29:	static void proclist_init(proclist_head *);
38:	static _Bool proclist_is_empty(proclist_head *);
48:	static proclist_node *proclist_node_get(int, size_t);
173:	static PGPROC *proclist_pop_head_node_offset(proclist_head *, size_t);
59:	static void proclist_push_head_offset(proclist_head *, int, size_t);
87:	static void proclist_push_tail_offset(proclist_head *, int, size_t);

File ../../../../src/include/storage/s_lock.h:
1078:	static void init_spin_delay(SpinDelayStatus *, const char *, int, const char *);
240:	static void spin_delay(void);
224:	static int tas(volatile slock_t *);

File ../../../../src/include/utils/arrayaccess.h:
81:	static Datum array_iter_next(array_iter *, _Bool *, int, int, _Bool, char);
49:	static void array_iter_setup(array_iter *, AnyArrayType *);

File ../../../../src/include/utils/expandedrecord.h:
208:	static TupleDesc expanded_record_get_tupdesc(ExpandedRecordHeader *);

File ../../../../src/include/utils/float.h:
221:	static float4 float4_div(const float4, const float4);
261:	static _Bool float4_eq(const float4, const float4);
321:	static _Bool float4_ge(const float4, const float4);
309:	static _Bool float4_gt(const float4, const float4);
297:	static _Bool float4_le(const float4, const float4);
285:	static _Bool float4_lt(const float4, const float4);
169:	static float4 float4_mi(const float4, const float4);
193:	static float4 float4_mul(const float4, const float4);
273:	static _Bool float4_ne(const float4, const float4);
145:	static float4 float4_pl(const float4, const float4);
237:	static float8 float8_div(const float8, const float8);
267:	static _Bool float8_eq(const float8, const float8);
327:	static _Bool float8_ge(const float8, const float8);
315:	static _Bool float8_gt(const float8, const float8);
303:	static _Bool float8_le(const float8, const float8);
291:	static _Bool float8_lt(const float8, const float8);
351:	static float8 float8_max(const float8, const float8);
181:	static float8 float8_mi(const float8, const float8);
339:	static float8 float8_min(const float8, const float8);
207:	static float8 float8_mul(const float8, const float8);
279:	static _Bool float8_ne(const float8, const float8);
157:	static float8 float8_pl(const float8, const float8);
73:	static float4 get_float4_infinity(void);
110:	static float4 get_float4_nan(void);
93:	static float8 get_float8_infinity(void);
122:	static float8 get_float8_nan(void);

File ../../../../src/include/utils/geo_decls.h:
47:	static _Bool FPeq(double, double);
77:	static _Bool FPge(double, double);
71:	static _Bool FPgt(double, double);
65:	static _Bool FPle(double, double);
59:	static _Bool FPlt(double, double);
53:	static _Bool FPne(double, double);

File ../../../../src/include/utils/memutils.h:
114:	static MemoryContext GetMemoryChunkContext(void *);

File ../../../../src/include/utils/palloc.h:
131:	static MemoryContext MemoryContextSwitchTo(MemoryContext);

File ../../../../src/include/utils/rel.h:
544:	static SMgrRelation RelationGetSmgr(Relation);

File ../../../../src/include/utils/relptr.h:
64:	static Size relptr_store_eval(char *, char *);

File ../../../../src/include/utils/snapmgr.h:
102:	static _Bool OldSnapshotThresholdActive(void);

File ../../../../src/include/utils/sortsupport.h:
238:	static int ApplySortAbbrevFullComparator(Datum, _Bool, Datum, _Bool, SortSupport);
200:	static int ApplySortComparator(Datum, _Bool, Datum, _Bool, SortSupport);

File ../../../../src/include/utils/wait_event.h:
279:	static void pgstat_report_wait_end(void);
263:	static void pgstat_report_wait_start(uint32);

File ../../../src/include/access/tableam.h:
883:	static TableScanDesc table_beginscan(Relation, Snapshot, int, struct ScanKeyData *);
980:	static TableScanDesc table_beginscan_analyze(Relation);
928:	static TableScanDesc table_beginscan_bm(Relation, Snapshot, int, struct ScanKeyData *);
944:	static TableScanDesc table_beginscan_sampling(Relation, Snapshot, int, struct ScanKeyData *, _Bool, _Bool, _Bool);
907:	static TableScanDesc table_beginscan_strat(Relation, Snapshot, int, struct ScanKeyData *, _Bool, _Bool);
967:	static TableScanDesc table_beginscan_tid(Relation, Snapshot);
1057:	static TableScanDesc table_beginscan_tidrange(Relation, Snapshot, ItemPointer, ItemPointer);
991:	static void table_endscan(TableScanDesc);
1564:	static void table_finish_bulk_insert(Relation, int);
1161:	static IndexFetchTableData *table_index_fetch_begin(Relation);
1180:	static void table_index_fetch_end(struct IndexFetchTableData *);
1210:	static _Bool table_index_fetch_tuple(struct IndexFetchTableData *, ItemPointer, Snapshot, TupleTableSlot *, _Bool *, _Bool *);
1809:	static void table_index_validate_scan(Relation, Relation, struct IndexInfo *, Snapshot, struct ValidateIndexState *);
1426:	static void table_multi_insert(Relation, TupleTableSlot **, int, CommandId, int, struct BulkInsertStateData *);
1143:	static void table_parallelscan_reinitialize(Relation, ParallelTableScanDesc);
1619:	static void table_relation_copy_data(Relation, const RelFileNode *);
1646:	static void table_relation_copy_for_cluster(Relation, Relation, Relation, _Bool, TransactionId, TransactionId *, MultiXactId *, double *, double *, double *);
1847:	static _Bool table_relation_needs_toast_table(Relation);
1607:	static void table_relation_nontransactional_truncate(Relation);
1590:	static void table_relation_set_new_filenode(Relation, const RelFileNode *, char, TransactionId *, MultiXactId *);
1857:	static Oid table_relation_toast_am(Relation);
1675:	static void table_relation_vacuum(Relation, struct VacuumParams *, BufferAccessStrategy);
1000:	static void table_rescan(TableScanDesc, struct ScanKeyData *);
1015:	static void table_rescan_set_params(TableScanDesc, struct ScanKeyData *, _Bool, _Bool, _Bool);
1078:	static void table_rescan_tidrange(TableScanDesc, ItemPointer, ItemPointer);
1690:	static _Bool table_scan_analyze_next_block(TableScanDesc, BlockNumber, BufferAccessStrategy);
1708:	static _Bool table_scan_analyze_next_tuple(TableScanDesc, TransactionId, double *, double *, TupleTableSlot *);
1931:	static _Bool table_scan_bitmap_next_block(TableScanDesc, struct TBMIterateResult *);
1955:	static _Bool table_scan_bitmap_next_tuple(TableScanDesc, struct TBMIterateResult *, TupleTableSlot *);
1032:	static _Bool table_scan_getnextslot(TableScanDesc, ScanDirection, TupleTableSlot *);
1094:	static _Bool table_scan_getnextslot_tidrange(TableScanDesc, ScanDirection, TupleTableSlot *);
1982:	static _Bool table_scan_sample_next_block(TableScanDesc, struct SampleScanState *);
2004:	static _Bool table_scan_sample_next_tuple(TableScanDesc, struct SampleScanState *, TupleTableSlot *);
1404:	static void table_tuple_complete_speculative(Relation, TupleTableSlot *, uint32, _Bool);
1460:	static TM_Result table_tuple_delete(Relation, ItemPointer, CommandId, Snapshot, Snapshot, _Bool, TM_FailureData *, _Bool);
1257:	static _Bool table_tuple_fetch_row_version(Relation, ItemPointer, Snapshot, TupleTableSlot *);
1371:	static void table_tuple_insert(Relation, TupleTableSlot *, CommandId, int, struct BulkInsertStateData *);
1390:	static void table_tuple_insert_speculative(Relation, TupleTableSlot *, CommandId, int, struct BulkInsertStateData *, uint32);
1549:	static TM_Result table_tuple_lock(Relation, ItemPointer, Snapshot, TupleTableSlot *, CommandId, LockTupleMode, LockWaitPolicy, uint8, TM_FailureData *);
1304:	static _Bool table_tuple_satisfies_snapshot(Relation, TupleTableSlot *, Snapshot);
1283:	static _Bool table_tuple_tid_valid(TableScanDesc, ItemPointer);
1504:	static TM_Result table_tuple_update(Relation, ItemPointer, TupleTableSlot *, CommandId, Snapshot, Snapshot, _Bool, TM_FailureData *, LockTupleMode *, _Bool *);

File ../../../src/include/access/transam.h:
310:	static TransactionId ReadNextTransactionId(void);

File ../../../src/include/catalog/index.h:
185:	static int64 itemptr_encode(ItemPointer);

File ../../../src/include/common/hashfn.h:
31:	static Datum hash_any(const unsigned char *, int);
37:	static Datum hash_any_extended(const unsigned char *, int, uint64);
80:	static uint64 hash_combine64(uint64, uint64);
92:	static uint32 murmurhash32(uint32);

File ../../../src/include/common/kwlookup.h:
39:	static const char *GetScanKeyword(int, const ScanKeywordList *);

File ../../../src/include/executor/executor.h:
316:	static Datum ExecEvalExpr(ExprState *, ExprContext *, _Bool *);
331:	static Datum ExecEvalExprSwitchContext(ExprState *, ExprContext *, _Bool *);
178:	static Datum ExecGetJunkAttribute(TupleTableSlot *, AttrNumber, _Bool *);
252:	static TupleTableSlot *ExecProcNode(PlanState *);
359:	static TupleTableSlot *ExecProject(ProjectionInfo *);
396:	static _Bool ExecQual(ExprState *, ExprContext *);
423:	static _Bool ExecQualAndReset(ExprState *, ExprContext *);
571:	static RangeTblEntry *exec_rt_fetch(Index, EState *);

File ../../../src/include/executor/tuptable.h:
425:	static TupleTableSlot *ExecClearTuple(TupleTableSlot *);
475:	static TupleTableSlot *ExecCopySlot(TupleTableSlot *, TupleTableSlot *);
452:	static HeapTuple ExecCopySlotHeapTuple(TupleTableSlot *);
463:	static MinimalTuple ExecCopySlotMinimalTuple(TupleTableSlot *);
443:	static void ExecMaterializeSlot(TupleTableSlot *);
367:	static _Bool slot_attisnull(TupleTableSlot *, int);
354:	static void slot_getallattrs(TupleTableSlot *);
381:	static Datum slot_getattr(TupleTableSlot *, int, _Bool *);
341:	static void slot_getsomeattrs(TupleTableSlot *, int);
402:	static Datum slot_getsysattr(TupleTableSlot *, int, _Bool *);

File ../../../src/include/lib/ilist.h:
358:	static void dlist_delete(dlist_node *);
278:	static void dlist_init(dlist_head *);
289:	static _Bool dlist_is_empty(dlist_head *);
385:	static void dlist_move_head(dlist_head *, dlist_node *);
404:	static void dlist_move_tail(dlist_head *, dlist_node *);
368:	static dlist_node *dlist_pop_head_node(dlist_head *);
300:	static void dlist_push_head(dlist_head *, dlist_node *);
317:	static void dlist_push_tail(dlist_head *, dlist_node *);
475:	static void *dlist_tail_element_off(dlist_head *, size_t);
671:	static void slist_delete_current(slist_mutable_iter *);
573:	static void slist_init(slist_head *);
582:	static _Bool slist_is_empty(slist_head *);
593:	static void slist_push_head(slist_head *, slist_node *);

File ../../../src/include/lib/qunique.h:
21:	static size_t qunique(void *, size_t, size_t, int (*)(const void *, const void *));

File ../../../src/include/lib/simplehash.h:
433:	tuplehash_hash *tuplehash_create(MemoryContext, uint32, void *);
840:	_Bool tuplehash_delete(tuplehash_hash *, MinimalTuple);
911:	void tuplehash_delete_item(tuplehash_hash *, TupleHashEntryData *);
459:	void tuplehash_destroy(tuplehash_hash *);
481:	void tuplehash_grow(tuplehash_hash *, uint64);
760:	TupleHashEntryData *tuplehash_insert(tuplehash_hash *, MinimalTuple, _Bool *);
773:	TupleHashEntryData *tuplehash_insert_hash(tuplehash_hash *, MinimalTuple, uint32, _Bool *);
1028:	TupleHashEntryData *tuplehash_iterate(tuplehash_hash *, tuplehash_iterator *);
817:	TupleHashEntryData *tuplehash_lookup(tuplehash_hash *, MinimalTuple);
830:	TupleHashEntryData *tuplehash_lookup_hash(tuplehash_hash *, MinimalTuple, uint32);
467:	void tuplehash_reset(tuplehash_hash *);
966:	void tuplehash_start_iterate(tuplehash_hash *, tuplehash_iterator *);
1006:	void tuplehash_start_iterate_at(tuplehash_hash *, tuplehash_iterator *, uint32);
1055:	void tuplehash_stat(tuplehash_hash *);
400:	static void *memoize_allocate(memoize_hash *, Size);
311:	static void memoize_compute_parameters(memoize_hash *, uint64);
433:	static memoize_hash *memoize_create(MemoryContext, uint32, void *);
911:	static void memoize_delete_item(memoize_hash *, MemoizeEntry *);
374:	static uint32 memoize_distance(memoize_hash *, uint32, uint32);
383:	static uint32 memoize_entry_hash(memoize_hash *, MemoizeEntry *);
412:	static void memoize_free(memoize_hash *, void *);
481:	static void memoize_grow(memoize_hash *, uint64);
345:	static uint32 memoize_initial_bucket(memoize_hash *, uint32);
760:	static MemoizeEntry *memoize_insert(memoize_hash *, MemoizeKey *, _Bool *);
591:	static MemoizeEntry *memoize_insert_hash_internal(memoize_hash *, MemoizeKey *, uint32, _Bool *);
817:	static MemoizeEntry *memoize_lookup(memoize_hash *, MemoizeKey *);
783:	static MemoizeEntry *memoize_lookup_hash_internal(memoize_hash *, MemoizeKey *, uint32);
352:	static uint32 memoize_next(memoize_hash *, uint32, uint32);
363:	static uint32 memoize_prev(memoize_hash *, uint32, uint32);
311:	static void pagetable_compute_parameters(pagetable_hash *, uint64);
433:	static pagetable_hash *pagetable_create(MemoryContext, uint32, void *);
840:	static _Bool pagetable_delete(pagetable_hash *, BlockNumber);
459:	static void pagetable_destroy(pagetable_hash *);
374:	static uint32 pagetable_distance(pagetable_hash *, uint32, uint32);
383:	static uint32 pagetable_entry_hash(pagetable_hash *, PagetableEntry *);
481:	static void pagetable_grow(pagetable_hash *, uint64);
345:	static uint32 pagetable_initial_bucket(pagetable_hash *, uint32);
760:	static PagetableEntry *pagetable_insert(pagetable_hash *, BlockNumber, _Bool *);
591:	static PagetableEntry *pagetable_insert_hash_internal(pagetable_hash *, BlockNumber, uint32, _Bool *);
1028:	static PagetableEntry *pagetable_iterate(pagetable_hash *, pagetable_iterator *);
817:	static PagetableEntry *pagetable_lookup(pagetable_hash *, BlockNumber);
783:	static PagetableEntry *pagetable_lookup_hash_internal(pagetable_hash *, BlockNumber, uint32);
352:	static uint32 pagetable_next(pagetable_hash *, uint32, uint32);
363:	static uint32 pagetable_prev(pagetable_hash *, uint32, uint32);
966:	static void pagetable_start_iterate(pagetable_hash *, pagetable_iterator *);
1006:	static void pagetable_start_iterate_at(pagetable_hash *, pagetable_iterator *, uint32);
400:	static void *saophash_allocate(saophash_hash *, Size);
311:	static void saophash_compute_parameters(saophash_hash *, uint64);
433:	static saophash_hash *saophash_create(MemoryContext, uint32, void *);
374:	static uint32 saophash_distance(saophash_hash *, uint32, uint32);
383:	static uint32 saophash_entry_hash(saophash_hash *, ScalarArrayOpExprHashEntry *);
412:	static void saophash_free(saophash_hash *, void *);
481:	static void saophash_grow(saophash_hash *, uint64);
345:	static uint32 saophash_initial_bucket(saophash_hash *, uint32);
760:	static ScalarArrayOpExprHashEntry *saophash_insert(saophash_hash *, Datum, _Bool *);
591:	static ScalarArrayOpExprHashEntry *saophash_insert_hash_internal(saophash_hash *, Datum, uint32, _Bool *);
817:	static ScalarArrayOpExprHashEntry *saophash_lookup(saophash_hash *, Datum);
783:	static ScalarArrayOpExprHashEntry *saophash_lookup_hash_internal(saophash_hash *, Datum, uint32);
352:	static uint32 saophash_next(saophash_hash *, uint32, uint32);
363:	static uint32 saophash_prev(saophash_hash *, uint32, uint32);
400:	static void *tuplehash_allocate(tuplehash_hash *, Size);
311:	static void tuplehash_compute_parameters(tuplehash_hash *, uint64);
374:	static uint32 tuplehash_distance(tuplehash_hash *, uint32, uint32);
383:	static uint32 tuplehash_entry_hash(tuplehash_hash *, TupleHashEntryData *);
412:	static void tuplehash_free(tuplehash_hash *, void *);
345:	static uint32 tuplehash_initial_bucket(tuplehash_hash *, uint32);
591:	static TupleHashEntryData *tuplehash_insert_hash_internal(tuplehash_hash *, MinimalTuple, uint32, _Bool *);
783:	static TupleHashEntryData *tuplehash_lookup_hash_internal(tuplehash_hash *, MinimalTuple, uint32);
352:	static uint32 tuplehash_next(tuplehash_hash *, uint32, uint32);
363:	static uint32 tuplehash_prev(tuplehash_hash *, uint32, uint32);

File ../../../src/include/libpq/pqformat.h:
161:	static void pq_sendbyte(StringInfo, uint8);
137:	static void pq_sendint16(StringInfo, uint16);
145:	static void pq_sendint32(StringInfo, uint32);
153:	static void pq_sendint64(StringInfo, uint64);
129:	static void pq_sendint8(StringInfo, uint8);
61:	static void pq_writeint16(StringInfoData * restrict, uint16);
75:	static void pq_writeint32(StringInfoData * restrict, uint32);
89:	static void pq_writeint64(StringInfoData * restrict, uint64);
47:	static void pq_writeint8(StringInfoData * restrict, uint8);

File ../../../src/include/mb/pg_wchar.h:
545:	static _Bool is_utf16_surrogate_first(pg_wchar);
551:	static _Bool is_utf16_surrogate_second(pg_wchar);
539:	static _Bool is_valid_unicode_codepoint(pg_wchar);
557:	static pg_wchar surrogate_pair_to_codepoint(pg_wchar, pg_wchar);

File ../../../src/include/nodes/nodeFuncs.h:
73:	static Node *get_leftop(const void *);
124:	static Expr *get_notclausearg(const void *);
85:	static Node *get_rightop(const void *);
97:	static _Bool is_andclause(const void *);
115:	static _Bool is_notclause(const void *);
66:	static _Bool is_opclause(const void *);
106:	static _Bool is_orclause(const void *);

File ../../../src/include/nodes/pg_list.h:
477:	static ForBothCellState for_both_cell_setup(const List *, const ListCell *, const List *, const ListCell *);
426:	static ForEachState for_each_cell_setup(const List *, const ListCell *);
402:	static ForEachState for_each_from_setup(const List *, int);
312:	static int list_cell_number(const List *, const ListCell *);
125:	static ListCell *list_head(const List *);
267:	static ListCell *list_last_cell(const List *);
149:	static int list_length(const List *);
278:	static void *list_nth(const List *, int);
256:	static ListCell *list_nth_cell(const List *, int);
289:	static int list_nth_int(const List *, int);
300:	static Oid list_nth_oid(const List *, int);
139:	static ListCell *list_second_cell(const List *);
322:	static ListCell *lnext(const List *, const ListCell *);

File ../../../src/include/pgtar.h:
40:	static size_t tarPaddingBytesRequired(size_t);

File ../../../src/include/port/atomics.h:
386:	static uint32 pg_atomic_add_fetch_u32(volatile pg_atomic_uint32 *, int32);
456:	static _Bool pg_atomic_compare_exchange_u64(volatile pg_atomic_uint64 *, uint64 *, uint64);
328:	static uint32 pg_atomic_fetch_add_u32(volatile pg_atomic_uint32 *, int32);
223:	static void pg_atomic_init_u32(volatile pg_atomic_uint32 *, uint32);
415:	static void pg_atomic_init_u64(volatile pg_atomic_uint64 *, uint64);
241:	static uint32 pg_atomic_read_u32(volatile pg_atomic_uint32 *);
429:	static uint64 pg_atomic_read_u64(volatile pg_atomic_uint64 *);
401:	static uint32 pg_atomic_sub_fetch_u32(volatile pg_atomic_uint32 *, int32);
438:	static void pg_atomic_write_u64(volatile pg_atomic_uint64 *, uint64);

File ../../../src/include/port/atomics/arch-x86.h:
205:	static _Bool pg_atomic_compare_exchange_u64_impl(volatile pg_atomic_uint64 *, uint64 *, uint64);
189:	static uint32 pg_atomic_fetch_add_u32_impl(volatile pg_atomic_uint32 *, int32);

File ../../../src/include/port/atomics/generic-gcc.h:
193:	static uint32 pg_atomic_fetch_sub_u32_impl(volatile pg_atomic_uint32 *, int32);

File ../../../src/include/port/atomics/generic.h:
231:	static uint32 pg_atomic_add_fetch_u32_impl(volatile pg_atomic_uint32 *, int32);
161:	static void pg_atomic_init_u32_impl(volatile pg_atomic_uint32 *, uint32);
331:	static void pg_atomic_init_u64_impl(volatile pg_atomic_uint64 *, uint64);
46:	static uint32 pg_atomic_read_u32_impl(volatile pg_atomic_uint32 *);
299:	static uint64 pg_atomic_read_u64_impl(volatile pg_atomic_uint64 *);
240:	static uint32 pg_atomic_sub_fetch_u32_impl(volatile pg_atomic_uint32 *, int32);
266:	static void pg_atomic_write_u64_impl(volatile pg_atomic_uint64 *, uint64);

File ../../../src/include/port/pg_bitutils.h:
248:	static uint64 pg_ceil_log2_64(uint64);
32:	static int pg_leftmost_one_pos32(uint32);
55:	static int pg_leftmost_one_pos64(uint64);
146:	static uint32 pg_nextpower2_32(uint32);
169:	static uint64 pg_nextpower2_64(uint64);
215:	static uint64 pg_prevpower2_64(uint64);
111:	static int pg_rightmost_one_pos64(uint64);
267:	static uint32 pg_rotate_right32(uint32, int);

File ../../../src/include/postgres.h:
725:	static Datum Float4GetDatum(float4);
771:	static Datum Float8GetDatum(float8);

File ../../../src/include/replication/walreceiver.h:
433:	static void walrcv_clear_result(WalRcvExecResult *);

File ../../../src/include/storage/pmsignal.h:
95:	static _Bool PostmasterIsAlive(void);

File ../../../src/include/storage/s_lock.h:
224:	static int tas(volatile slock_t *);

File ../../../src/include/tcop/cmdtag.h:
44:	static void CopyQueryCompletion(QueryCompletion *, const QueryCompletion *);
36:	static void SetQueryCompletion(QueryCompletion *, CommandTag, uint64);

File ../../../src/include/tcop/utility.h:
103:	static const char *CreateCommandName(Node *);

File ../../../src/include/utils/expandedrecord.h:
218:	static Datum expanded_record_get_field(ExpandedRecordHeader *, int, _Bool *);
208:	static TupleDesc expanded_record_get_tupdesc(ExpandedRecordHeader *);

File ../../../src/include/utils/memutils.h:
114:	static MemoryContext GetMemoryChunkContext(void *);

File ../../../src/include/utils/palloc.h:
131:	static MemoryContext MemoryContextSwitchTo(MemoryContext);

File ../../../src/include/utils/partcache.h:
79:	static int16 get_partition_col_attnum(PartitionKey, int);
97:	static Oid get_partition_col_collation(PartitionKey, int);
85:	static Oid get_partition_col_typid(PartitionKey, int);
91:	static int32 get_partition_col_typmod(PartitionKey, int);
70:	static List *get_partition_exprs(PartitionKey);
64:	static int get_partition_natts(PartitionKey);
58:	static int get_partition_strategy(PartitionKey);

File ../../../src/include/utils/queryjumble.h:
79:	static _Bool IsQueryIdEnabled(void);

File ../../../src/include/utils/rel.h:
544:	static SMgrRelation RelationGetSmgr(Relation);

File ../../../src/include/utils/snapmgr.h:
102:	static _Bool OldSnapshotThresholdActive(void);

File ../../../src/include/utils/sortsupport.h:
200:	static int ApplySortComparator(Datum, _Bool, Datum, _Bool, SortSupport);

File ../../../src/include/utils/wait_event.h:
279:	static void pgstat_report_wait_end(void);
263:	static void pgstat_report_wait_start(uint32);

File ../../src/include/common/kwlookup.h:
39:	static const char *GetScanKeyword(int, const ScanKeywordList *);

File ../../src/include/common/unicode_norm_hashfunc.h:
42:	static int Decomp_hash_func(const void *);
2670:	static int Recomp_hash_func(const void *);

File ../../src/include/common/unicode_normprops_table.h:
1262:	static int NFC_QC_hash_func(const void *);
6520:	static int NFKC_QC_hash_func(const void *);

File ../../src/include/lib/sort_template.h:
279:	void pg_qsort(void *, size_t, size_t, pg_qsort_compare_function);
279:	void qsort_arg(void *, size_t, size_t, qsort_arg_comparator, void *);
248:	static void *pg_qsort_med3(void *, void *, void *, pg_qsort_compare_function);
260:	static void pg_qsort_swap(uint8 *, uint8 *);
269:	static void pg_qsort_swapn(uint8 *, uint8 *, size_t);
248:	static void *qsort_arg_med3(void *, void *, void *, qsort_arg_comparator, void *);
260:	static void qsort_arg_swap(uint8 *, uint8 *);
269:	static void qsort_arg_swapn(uint8 *, uint8 *, size_t);

File ../../src/include/mb/pg_wchar.h:
545:	static _Bool is_utf16_surrogate_first(pg_wchar);
551:	static _Bool is_utf16_surrogate_second(pg_wchar);
557:	static pg_wchar surrogate_pair_to_codepoint(pg_wchar, pg_wchar);

File ../../src/include/utils/wait_event.h:
279:	static void pgstat_report_wait_end(void);
263:	static void pgstat_report_wait_start(uint32);

File ../argp/argp-fmtstream.h:
266:	size_t __argp_fmtstream_point(argp_fmtstream_t);
220:	int __argp_fmtstream_putc(argp_fmtstream_t, int);
207:	int __argp_fmtstream_puts(argp_fmtstream_t, const char *);
230:	size_t __argp_fmtstream_set_lmargin(argp_fmtstream_t, size_t);
242:	size_t __argp_fmtstream_set_rmargin(argp_fmtstream_t, size_t);
254:	size_t __argp_fmtstream_set_wmargin(argp_fmtstream_t, size_t);
194:	size_t __argp_fmtstream_write(argp_fmtstream_t, const char *, size_t);

File ../argp/argp.h:
526:	void __argp_usage(const struct argp_state *);
544:	int __option_is_end(const struct argp_option *);
532:	int __option_is_short(const struct argp_option *);

File ../bits/stdlib-bsearch.h:
20:	void *__GI_bsearch(const void *, const void *, size_t, size_t, __compar_fn_t);

File ../csu/errno-loc.c:
24:	int *__errno_location(void);

File ../csu/libc-start.c:
129:	int __libc_start_main(int (*)(int, char **, char **), int, char **, int (*)(int, char **, char **), void (*)(void), void (*)(void), void *);

File ../elf/dl-runtime.c:
484:	void _dl_call_pltexit(struct link_map *, Elf64_Word, const void *, void *);
61:	Elf64_Addr _dl_fixup(struct link_map *, Elf64_Word);
154:	Elf64_Addr _dl_profile_fixup(struct link_map *, Elf64_Word, Elf64_Addr, void *, long *);

File ../elf/dl-sysdep.c:
262:	void _dl_show_auxv(void);
86:	Elf64_Addr _dl_sysdep_start(void **, void (*)(const Elf64_Phdr *, Elf64_Word, Elf64_Addr *, Elf64_auxv_t *));
257:	void _dl_sysdep_start_cleanup(void);

File ../elf/dl-tls.c:
528:	void *__GI__dl_allocate_tls(void *);
436:	void *__GI__dl_allocate_tls_init(void *);
538:	void __GI__dl_deallocate_tls(void *, _Bool);
824:	void *___tls_get_addr(tls_index *);
886:	void _dl_add_to_slotinfo(struct link_map *, _Bool);
331:	void *_dl_allocate_tls_storage(void);
107:	size_t _dl_count_modids(void);
134:	void _dl_determine_tlsoffset(void);
307:	void _dl_get_tls_static_info(size_t *, size_t *);
47:	size_t _dl_next_tls_modid(void);
844:	void *_dl_tls_get_addr_soft(struct link_map *);
622:	struct link_map *_dl_update_slotinfo(unsigned long);
394:	static dtv_t *_dl_resize_dtv(dtv_t *);
40:	static void oom(void);
736:	static void *tls_get_addr_tail(dtv_t *, struct link_map *, tls_index *, tls_index *);
797:	static struct link_map *update_get_addr(tls_index *);

File ../iconv/skeleton.c:
395:	int __gconv_transform_ascii_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_internal_ascii(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_internal_ucs2(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_internal_ucs2reverse(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_internal_ucs4(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_internal_ucs4le(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_internal_utf8(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_ucs2_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_ucs2reverse_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_ucs4_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_ucs4le_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
395:	int __gconv_transform_utf8_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);

File ../include/ctype.h:
39:	const uint16_t **__ctype_b_loc(void);
51:	const int32_t **__ctype_tolower_loc(void);
45:	const int32_t **__ctype_toupper_loc(void);

File ../intl/l10nflist.c:
151:	struct loaded_l10nfile *_nl_make_l10nflist(struct loaded_l10nfile **, const char *, size_t, int, const char *, const char *, const char *, const char *, const char *, const char *, int);
310:	const char *_nl_normalize_codeset(const char *, size_t);

File ../login/updwtmp.c:
28:	void __GI___updwtmp(const char *, const struct utmp *);

File ../login/utmp_file.c:
450:	void __libc_endutent(void);
189:	int __libc_getutent_r(struct utmp *, struct utmp **);
269:	int __libc_getutid_r(const struct utmp *, struct utmp *, struct utmp **);
296:	int __libc_getutline_r(const struct utmp *, struct utmp *, struct utmp **);
346:	struct utmp *__libc_pututline(const struct utmp *);
137:	int __libc_setutent(void);
461:	int __libc_updwtmp(const char *, const struct utmp *);
49:	static _Bool matches_last_entry(const struct utmp *);
170:	static ssize_t read_last_entry(void);
72:	static void timeout_handler(int);
82:	static _Bool try_file_lock(int, int);

File ../malloc/dynarray-skeleton.c:
354:	static const struct sockaddr **nameserver_list_emplace(struct nameserver_list *);

File ../misc/sbrk.c:
31:	void *__sbrk(intptr_t);

File ../misc/syslog.c:
112:	void __syslog(int, const char *, ...);
131:	void __syslog_chk(int, int, const char *, ...);
124:	void __vsyslog(int, const char *, struct __va_list_tag *);
141:	void __vsyslog_chk(int, int, const char *, struct __va_list_tag *);
147:	void __vsyslog_internal(int, const char *, struct __va_list_tag *, unsigned int);
413:	void closelog(void);
382:	void openlog(const char *, int, int);
429:	int setlogmask(int);
92:	static void cancel_handler(void *);
335:	static void openlog_internal(const char *, int, int);

File ../nptl/pthread_mutex_lock.c:
63:	int __GI___pthread_mutex_lock(pthread_mutex_t *);
63:	int __pthread_mutex_cond_lock(pthread_mutex_t *);
612:	void __pthread_mutex_cond_lock_adjust(pthread_mutex_t *);
170:	static int __pthread_mutex_cond_lock_full(pthread_mutex_t *);
170:	static int __pthread_mutex_lock_full(pthread_mutex_t *);

File ../nptl/pthread_mutex_timedlock.c:
602:	int __pthread_mutex_clocklock(pthread_mutex_t *, clockid_t, const struct timespec *);
46:	int __pthread_mutex_clocklock_common(pthread_mutex_t *, clockid_t, const struct timespec *);
615:	int __pthread_mutex_timedlock(pthread_mutex_t *, const struct timespec *);

File ../nptl/pthread_mutex_trylock.c:
35:	int __GI___pthread_mutex_trylock(pthread_mutex_t *);

File ../nptl/sigaction.c:
22:	int __GI___sigaction(int, const struct sigaction *, struct sigaction *);
22:	int __sigaction(int, const struct sigaction *, struct sigaction *);

File ../nss/getXXbyYY.c:
93:	struct aliasent *getaliasbyname(const char *);
93:	struct group *getgrgid(gid_t);
93:	struct group *getgrnam(const char *);
93:	struct hostent *gethostbyaddr(const void *, socklen_t, int);
93:	struct hostent *gethostbyname(const char *);
93:	struct hostent *gethostbyname2(const char *, int);
93:	struct netent *getnetbyaddr(uint32_t, int);
93:	struct netent *getnetbyname(const char *);
93:	struct protoent *getprotobyname(const char *);
93:	struct protoent *getprotobynumber(int);
93:	struct passwd *getpwnam(const char *);
93:	struct passwd *getpwuid(uid_t);
93:	struct rpcent *getrpcbyname(const char *);
93:	struct rpcent *getrpcbynumber(int);
93:	struct servent *getservbyname(const char *, const char *);
93:	struct servent *getservbyport(int, const char *);
93:	struct sgrp *getsgnam(const char *);
93:	struct spwd *getspnam(const char *);

File ../nss/getXXbyYY_r.c:
188:	int __getaliasbyname_r(const char *, struct aliasent *, char *, size_t, struct aliasent **);
188:	int __getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
188:	int __getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
188:	int __gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, struct hostent **, int *);
188:	int __gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
188:	int __gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);
188:	int __getnetbyaddr_r(uint32_t, int, struct netent *, char *, size_t, struct netent **, int *);
188:	int __getnetbyname_r(const char *, struct netent *, char *, size_t, struct netent **, int *);
188:	int __getprotobyname_r(const char *, struct protoent *, char *, size_t, struct protoent **);
188:	int __getprotobynumber_r(int, struct protoent *, char *, size_t, struct protoent **);
188:	int __getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
188:	int __getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
188:	int __getrpcbyname_r(const char *, struct rpcent *, char *, size_t, struct rpcent **);
188:	int __getrpcbynumber_r(int, struct rpcent *, char *, size_t, struct rpcent **);
188:	int __getservbyname_r(const char *, const char *, struct servent *, char *, size_t, struct servent **);
188:	int __getservbyport_r(int, const char *, struct servent *, char *, size_t, struct servent **);
188:	int __getsgnam_r(const char *, struct sgrp *, char *, size_t, struct sgrp **);
188:	int __getspnam_r(const char *, struct spwd *, char *, size_t, struct spwd **);

File ../nss/getXXent.c:
69:	struct aliasent *getaliasent(void);
69:	struct group *getgrent(void);
69:	struct hostent *gethostent(void);
69:	struct netent *getnetent(void);
69:	struct protoent *getprotoent(void);
69:	struct passwd *getpwent(void);
69:	struct rpcent *getrpcent(void);
69:	struct servent *getservent(void);
69:	struct sgrp *getsgent(void);
69:	struct spwd *getspent(void);

File ../nss/getXXent_r.c:
153:	int __getaliasent_r(struct aliasent *, char *, size_t, struct aliasent **);
153:	int __getgrent_r(struct group *, char *, size_t, struct group **);
153:	int __gethostent_r(struct hostent *, char *, size_t, struct hostent **, int *);
153:	int __getnetent_r(struct netent *, char *, size_t, struct netent **, int *);
153:	int __getprotoent_r(struct protoent *, char *, size_t, struct protoent **);
153:	int __getpwent_r(struct passwd *, char *, size_t, struct passwd **);
153:	int __getrpcent_r(struct rpcent *, char *, size_t, struct rpcent **);
153:	int __getservent_r(struct servent *, char *, size_t, struct servent **);
153:	int __getsgent_r(struct sgrp *, char *, size_t, struct sgrp **);
153:	int __getspent_r(struct spwd *, char *, size_t, struct spwd **);
135:	void endaliasent(void);
135:	void endgrent(void);
135:	void endhostent(void);
135:	void endnetent(void);
135:	void endprotoent(void);
135:	void endpwent(void);
135:	void endrpcent(void);
135:	void endservent(void);
135:	void endsgent(void);
135:	void endspent(void);
120:	void setaliasent(void);
120:	void setgrent(void);
120:	void sethostent(int);
120:	void setnetent(int);
120:	void setprotoent(int);
120:	void setpwent(void);
120:	void setrpcent(int);
120:	void setservent(int);
120:	void setsgent(void);
120:	void setspent(void);

File ../posix/glob.c:
287:	int __glob(const char *, int, int (*)(const char *, int), glob_t *);
287:	int __glob_lstat_compat(const char *, int, int (*)(const char *, int), glob_t *);
1172:	static int collated_compare(const void *, const void *);
1246:	static int glob_in_dir(const char *, const char *, int, int (*)(const char *, int), glob_t *, size_t);
1192:	static int prefix_array(const char *, char **, size_t);

File ../posix/globfree.c:
28:	void __GI_globfree(glob_t *);

File ../posix/sched_cpucount.c:
22:	static int generic_cpucount(size_t, const cpu_set_t *);
22:	static int popcount_cpucount(size_t, const cpu_set_t *);

File ../setjmp/longjmp.c:
27:	void __libc_siglongjmp(struct __jmp_buf_tag *, int);
27:	void __longjmp_chk(struct __jmp_buf_tag *, int);

File ../signal/allocrtsig.c:
51:	int __GI___libc_current_sigrtmax(void);
38:	int __GI___libc_current_sigrtmin(void);
66:	int __libc_allocate_rtsig(int);

File ../signal/sigreturn.c:
22:	int __sigreturn(struct sigcontext *);

File ../socket/sa_len.c:
61:	int __GI___libc_sa_len(sa_family_t);

File ../stdio-common/printf_fphex.c:
92:	int __printf_fphex(FILE *, const struct printf_info *, const void * const *);

File ../stdlib/gmp.h:
474:	mp_limb_t __mpn_add(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
432:	mp_limb_t __mpn_add_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);
545:	mp_limb_t __mpn_sub(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
503:	mp_limb_t __mpn_sub_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);

File ../stdlib/labs.c:
25:	long labs(long);

File ../stdlib/ldiv.c:
23:	ldiv_t ldiv(long, long);

File ../stdlib/strfrom-skeleton.c:
37:	int strfromf128(char *, size_t, const char *, _Float128);

File ../stdlib/strtod.c:
68:	_Float128 __GI___strtof128_internal(const char *, char **, int);
68:	double __GI___wcstod_internal(const wchar_t *, wchar_t **, int);
68:	_Float128 __GI___wcstof128_internal(const wchar_t *, wchar_t **, int);
68:	float __GI___wcstof_internal(const wchar_t *, wchar_t **, int);
68:	long double __GI___wcstold_internal(const wchar_t *, wchar_t **, int);
81:	_Float128 __GI_strtof128(const char *, char **);
81:	double __GI_wcstod(const wchar_t *, wchar_t **);
81:	float __GI_wcstof(const wchar_t *, wchar_t **);
81:	_Float128 __GI_wcstof128(const wchar_t *, wchar_t **);
81:	long double __GI_wcstold(const wchar_t *, wchar_t **);

File ../stdlib/strtod_l.c:
507:	_Float128 __GI_____strtof128_l_internal(const char *, char **, int, locale_t);
507:	long double __GI_____strtold_l_internal(const char *, char **, int, locale_t);
1782:	_Float128 __GI___strtof128_l(const char *, char **, locale_t);
1782:	long double __GI___strtold_l(const char *, char **, locale_t);
1782:	double __GI___wcstod_l(const wchar_t *, wchar_t **, locale_t);
1782:	_Float128 __GI___wcstof128_l(const wchar_t *, wchar_t **, locale_t);
1782:	float __GI___wcstof_l(const wchar_t *, wchar_t **, locale_t);
1782:	long double __GI___wcstold_l(const wchar_t *, wchar_t **, locale_t);
507:	double ____wcstod_l_internal(const wchar_t *, wchar_t **, int, locale_t);
507:	_Float128 ____wcstof128_l_internal(const wchar_t *, wchar_t **, int, locale_t);
507:	float ____wcstof_l_internal(const wchar_t *, wchar_t **, int, locale_t);
507:	long double ____wcstold_l_internal(const wchar_t *, wchar_t **, int, locale_t);
214:	static long double round_and_return(mp_limb_t *, intmax_t, int, mp_limb_t, mp_size_t, int);
366:	static const char *str_to_mpn(const char *, int, mp_limb_t *, mp_size_t *, intmax_t *, size_t, const char *, const char *);

File ../stdlib/strtod_nan_main.c:
33:	_Float128 __GI___strtof128_nan(const char *, char **, char);
33:	double __GI___wcstod_nan(const wchar_t *, wchar_t **, wchar_t);
33:	_Float128 __GI___wcstof128_nan(const wchar_t *, wchar_t **, wchar_t);
33:	float __GI___wcstof_nan(const wchar_t *, wchar_t **, wchar_t);
33:	long double __GI___wcstold_nan(const wchar_t *, wchar_t **, wchar_t);

File ../stdlib/strtol.c:
95:	long __GI___strtol_internal(const char *, char **, int, int);
95:	unsigned long __GI___strtoul_internal(const char *, char **, int, int);
95:	long __GI___wcstol_internal(const wchar_t *, wchar_t **, int, int);
95:	unsigned long __GI___wcstoul_internal(const wchar_t *, wchar_t **, int, int);
104:	long __strtol(const char *, char **, int);
104:	unsigned long __strtoul(const char *, char **, int);
104:	long __wcstol(const wchar_t *, wchar_t **, int);
104:	unsigned long __wcstoul(const wchar_t *, wchar_t **, int);

File ../stdlib/strtol_l.c:
224:	long __GI_____strtol_l_internal(const char *, char **, int, int, locale_t);
224:	unsigned long __GI_____strtoul_l_internal(const char *, char **, int, int, locale_t);
544:	long __GI___strtol_l(const char *, char **, int, locale_t);
544:	unsigned long __GI___strtoul_l(const char *, char **, int, locale_t);
544:	long __GI___wcstol_l(const wchar_t *, wchar_t **, int, locale_t);
544:	unsigned long __GI___wcstoul_l(const wchar_t *, wchar_t **, int, locale_t);
224:	long ____wcstol_l_internal(const wchar_t *, wchar_t **, int, int, locale_t);
224:	unsigned long ____wcstoul_l_internal(const wchar_t *, wchar_t **, int, int, locale_t);

File ../string/stpncpy.c:
40:	char *__stpncpy_sse2(char *, const char *, size_t);

File ../string/str-two-way.h:
390:	static char *two_way_long_needle(const unsigned char *, size_t, const unsigned char *, size_t);

File ../string/strcasecmp.c:
46:	int __strcasecmp_l_nonascii(const char *, const char *, locale_t);

File ../string/strcoll.c:
32:	int __GI___wcscoll(const wchar_t *, const wchar_t *);

File ../string/strcoll_l.c:
258:	int __GI___wcscoll_l(const wchar_t *, const wchar_t *, locale_t);

File ../string/strncase.c:
49:	int __strncasecmp_l_nonascii(const char *, const char *, size_t, locale_t);

File ../string/strncat.c:
27:	char *__strncat_sse2(char *, const char *, size_t);

File ../string/strncpy.c:
27:	char *__strncpy_sse2(char *, const char *, size_t);

File ../string/strstr.c:
76:	char *__strstr_sse2(const char *, const char *);

File ../string/strxfrm.c:
29:	size_t wcsxfrm(wchar_t *, const wchar_t *, size_t);

File ../string/strxfrm_l.c:
668:	size_t __GI___wcsxfrm_l(wchar_t *, const wchar_t *, size_t, locale_t);

File ../sysdeps/gnu/getutmp.c:
29:	void getutmp(const struct utmpx *, struct utmp *);

File ../sysdeps/gnu/unwind-resume.c:
59:	void _Unwind_Resume(struct _Unwind_Exception *);
73:	_Unwind_Reason_Code __gcc_personality_v0(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, struct _Unwind_Context *);
33:	void __libgcc_s_init(void);

File ../sysdeps/i386/fpu/e_acosl.c:
12:	long double __ieee754_acosl(long double);

File ../sysdeps/i386/fpu/e_atan2l.c:
12:	long double __ieee754_atan2l(long double, long double);

File ../sysdeps/i386/fpu/e_sqrtl.c:
13:	long double __ieee754_sqrtl(long double);

File ../sysdeps/i386/fpu/s_atanl.c:
11:	long double __atanl(long double);

File ../sysdeps/i386/fpu/s_fpclassifyl.c:
26:	int __GI___fpclassifyl(long double);

File ../sysdeps/i386/fpu/s_isinfl.c:
20:	int __GI___isinfl(long double);

File ../sysdeps/i386/fpu/s_isnanl.c:
29:	int __GI___isnanl(long double);

File ../sysdeps/i386/fpu/s_logbl.c:
10:	long double __logbl(long double);

File ../sysdeps/i386/fpu/s_nextafterl.c:
35:	long double __nextafterl(long double, long double);

File ../sysdeps/i386/fpu/s_nexttoward.c:
35:	double __nexttoward(double, long double);

File ../sysdeps/i386/fpu/s_nexttowardf.c:
27:	float __nexttowardf(float, long double);

File ../sysdeps/i386/fpu/s_rintl.c:
11:	long double __rintl(long double);

File ../sysdeps/i386/fpu/s_significandl.c:
9:	long double __significandl(long double);

File ../sysdeps/ieee754/dbl-64/branred.c:
54:	int __branred(double, double *, double *);

File ../sysdeps/ieee754/dbl-64/dbl2mpn.c:
30:	mp_size_t __mpn_extract_double(mp_ptr, mp_size_t, int *, int *, double);

File ../sysdeps/ieee754/dbl-64/doasin.c:
46:	void __doasin(double, double, double *);
46:	void __doasin_fma(double, double, double *);
46:	void __doasin_fma4(double, double, double *);

File ../sysdeps/ieee754/dbl-64/dosincos.c:
182:	void __docos(double, double, double *);
182:	void __docos_fma(double, double, double *);
182:	void __docos_fma4(double, double, double *);
116:	void __dubcos(double, double, double *);
116:	void __dubcos_fma(double, double, double *);
116:	void __dubcos_fma4(double, double, double *);
60:	void __dubsin(double, double, double *);
60:	void __dubsin_fma(double, double, double *);
60:	void __dubsin_fma4(double, double, double *);

File ../sysdeps/ieee754/dbl-64/e_asin.c:
349:	double __ieee754_acos_fma(double);
349:	double __ieee754_acos_fma4(double);
349:	double __ieee754_acos_sse2(double);
65:	double __ieee754_asin_fma(double);
65:	double __ieee754_asin_fma4(double);
65:	double __ieee754_asin_sse2(double);

File ../sysdeps/ieee754/dbl-64/e_atan2.c:
76:	double __ieee754_atan2_avx(double, double);
76:	double __ieee754_atan2_fma(double, double);
76:	double __ieee754_atan2_fma4(double, double);
76:	double __ieee754_atan2_sse2(double, double);
598:	static double atan2Mp(double, double, const int *);
580:	static double normalized(double, double, double, double);

File ../sysdeps/ieee754/dbl-64/e_atanh.c:
49:	double __ieee754_atanh(double);

File ../sysdeps/ieee754/dbl-64/e_exp.c:
97:	double __ieee754_exp_avx(double);
97:	double __ieee754_exp_fma(double);
97:	double __ieee754_exp_fma4(double);
97:	double __ieee754_exp_sse2(double);

File ../sysdeps/ieee754/dbl-64/e_exp10.c:
27:	double __ieee754_exp10(double);

File ../sysdeps/ieee754/dbl-64/e_exp2.c:
90:	double __exp2(double);

File ../sysdeps/ieee754/dbl-64/e_gamma_r.c:
118:	double __ieee754_gamma_r(double, int *);
48:	static double gamma_positive(double, int *);

File ../sysdeps/ieee754/dbl-64/e_hypot.c:
51:	double __ieee754_hypot(double, double);

File ../sysdeps/ieee754/dbl-64/e_ilogb.c:
29:	int __ieee754_ilogb(double);

File ../sysdeps/ieee754/dbl-64/e_j0.c:
86:	double __ieee754_j0(double);
163:	double __ieee754_y0(double);
303:	static double pzero(double);
422:	static double qzero(double);

File ../sysdeps/ieee754/dbl-64/e_j1.c:
90:	double __ieee754_j1(double);
169:	double __ieee754_y1(double);
311:	static double pone(double);
431:	static double qone(double);

File ../sysdeps/ieee754/dbl-64/e_jn.c:
56:	double __ieee754_jn(int, double);
265:	double __ieee754_yn(int, double);

File ../sysdeps/ieee754/dbl-64/e_lgamma_r.c:
203:	double __ieee754_lgamma_r(double, int *);

File ../sysdeps/ieee754/dbl-64/e_log.c:
48:	double __ieee754_log_avx(double);
48:	double __ieee754_log_fma(double);
48:	double __ieee754_log_fma4(double);
48:	double __ieee754_log_sse2(double);

File ../sysdeps/ieee754/dbl-64/e_log2.c:
43:	double __log2(double);

File ../sysdeps/ieee754/dbl-64/e_pow.c:
282:	double __ieee754_pow_fma(double, double);
282:	double __ieee754_pow_fma4(double, double);
282:	double __ieee754_pow_sse2(double, double);

File ../sysdeps/ieee754/dbl-64/e_remainder.c:
46:	double __ieee754_remainder(double, double);

File ../sysdeps/ieee754/dbl-64/e_sinh.c:
45:	double __ieee754_sinh(double);

File ../sysdeps/ieee754/dbl-64/gamma_productf.c:
33:	float __gamma_productf(float, float, int, float *);

File ../sysdeps/ieee754/dbl-64/k_rem_pio2.c:
158:	int __kernel_rem_pio2(double *, double *, int, int, int, const int32_t *);

File ../sysdeps/ieee754/dbl-64/lgamma_neg.c:
281:	double __lgamma_neg(double, int *);

File ../sysdeps/ieee754/dbl-64/math_err.c:
89:	double __math_check_oflow(double);
83:	double __math_check_uflow(double);
67:	double __math_divzero(uint32_t);
74:	double __math_invalid(double);
54:	double __math_may_uflow(uint32_t);
61:	double __math_oflow(uint32_t);
45:	double __math_uflow(uint32_t);
27:	static double with_errno(double, int);
38:	static double xflow(uint32_t, double);

File ../sysdeps/ieee754/dbl-64/mpa.c:
79:	int __acr(const mp_no *, const mp_no *, int);
512:	void __add(const mp_no *, const mp_no *, mp_no *, int);
512:	void __add_avx(const mp_no *, const mp_no *, mp_no *, int);
512:	void __add_fma(const mp_no *, const mp_no *, mp_no *, int);
512:	void __add_fma4(const mp_no *, const mp_no *, mp_no *, int);
110:	void __cpy(const mp_no *, mp_no *, int);
327:	void __dbl_mp(double, mp_no *, int);
327:	void __dbl_mp_avx(double, mp_no *, int);
327:	void __dbl_mp_fma(double, mp_no *, int);
327:	void __dbl_mp_fma4(double, mp_no *, int);
902:	void __dvd(const mp_no *, const mp_no *, mp_no *, int);
902:	void __dvd_avx(const mp_no *, const mp_no *, mp_no *, int);
902:	void __dvd_fma(const mp_no *, const mp_no *, mp_no *, int);
902:	void __dvd_fma4(const mp_no *, const mp_no *, mp_no *, int);
308:	void __mp_dbl(const mp_no *, double *, int);
614:	void __mul(const mp_no *, const mp_no *, mp_no *, int);
614:	void __mul_avx(const mp_no *, const mp_no *, mp_no *, int);
614:	void __mul_fma(const mp_no *, const mp_no *, mp_no *, int);
614:	void __mul_fma4(const mp_no *, const mp_no *, mp_no *, int);
762:	void __sqr(const mp_no *, mp_no *, int);
762:	void __sqr_avx(const mp_no *, mp_no *, int);
762:	void __sqr_fma(const mp_no *, mp_no *, int);
762:	void __sqr_fma4(const mp_no *, mp_no *, int);
562:	void __sub(const mp_no *, const mp_no *, mp_no *, int);
562:	void __sub_avx(const mp_no *, const mp_no *, mp_no *, int);
562:	void __sub_fma(const mp_no *, const mp_no *, mp_no *, int);
562:	void __sub_fma4(const mp_no *, const mp_no *, mp_no *, int);
369:	static void add_magnitudes(const mp_no *, const mp_no *, mp_no *, int);
437:	static void sub_magnitudes(const mp_no *, const mp_no *, mp_no *, int);

File ../sysdeps/ieee754/dbl-64/mpatan.c:
45:	void __mpatan(mp_no *, mp_no *, int);
45:	void __mpatan_fma(mp_no *, mp_no *, int);
45:	void __mpatan_fma4(mp_no *, mp_no *, int);

File ../sysdeps/ieee754/dbl-64/mpatan2.c:
45:	void __mpatan2(mp_no *, mp_no *, mp_no *, int);
45:	void __mpatan2_fma(mp_no *, mp_no *, mp_no *, int);
45:	void __mpatan2_fma4(mp_no *, mp_no *, mp_no *, int);

File ../sysdeps/ieee754/dbl-64/mpn2dbl.c:
28:	double __mpn_construct_double(mp_srcptr, int, int);

File ../sysdeps/ieee754/dbl-64/mpsqrt.c:
52:	void __mpsqrt(mp_no *, mp_no *, int);
52:	void __mpsqrt_fma(mp_no *, mp_no *, int);
52:	void __mpsqrt_fma4(mp_no *, mp_no *, int);

File ../sysdeps/ieee754/dbl-64/mptan.c:
45:	void __mptan(double, mp_no *, int);
45:	void __mptan_fma(double, mp_no *, int);
45:	void __mptan_fma4(double, mp_no *, int);

File ../sysdeps/ieee754/dbl-64/s_asinh.c:
36:	double __asinh(double);

File ../sysdeps/ieee754/dbl-64/s_atan.c:
66:	double __atan_avx(double);
66:	double __atan_fma(double);
66:	double __atan_fma4(double);
66:	double __atan_sse2(double);
301:	static double atanMp(double, const int *);

File ../sysdeps/ieee754/dbl-64/s_cbrt.c:
39:	double __cbrt(double);

File ../sysdeps/ieee754/dbl-64/s_ceil.c:
27:	double __ceil_c(double);

File ../sysdeps/ieee754/dbl-64/s_erf.c:
199:	double __erf(double);
303:	double __erfc(double);

File ../sysdeps/ieee754/dbl-64/s_expm1.c:
134:	double __expm1(double);

File ../sysdeps/ieee754/dbl-64/s_f32xaddf64.c:
26:	_Float32x __f32xaddf64(_Float64, _Float64);

File ../sysdeps/ieee754/dbl-64/s_f32xdivf64.c:
26:	_Float32x __f32xdivf64(_Float64, _Float64);

File ../sysdeps/ieee754/dbl-64/s_f32xmulf64.c:
26:	_Float32x __f32xmulf64(_Float64, _Float64);

File ../sysdeps/ieee754/dbl-64/s_f32xsubf64.c:
26:	_Float32x __f32xsubf64(_Float64, _Float64);

File ../sysdeps/ieee754/dbl-64/s_fadd.c:
30:	float __fadd(double, double);

File ../sysdeps/ieee754/dbl-64/s_fdiv.c:
30:	float __fdiv(double, double);

File ../sysdeps/ieee754/dbl-64/s_finite.c:
24:	int __GI___finite(double);

File ../sysdeps/ieee754/dbl-64/s_floor.c:
49:	double __floor_c(double);

File ../sysdeps/ieee754/dbl-64/s_fma.c:
34:	double __fma_sse2(double, double, double);

File ../sysdeps/ieee754/dbl-64/s_fmaf.c:
34:	float __fmaf_sse2(float, float, float);

File ../sysdeps/ieee754/dbl-64/s_fmul.c:
30:	float __fmul(double, double);

File ../sysdeps/ieee754/dbl-64/s_fpclassify.c:
26:	int __GI___fpclassify(double);

File ../sysdeps/ieee754/dbl-64/s_fromfp_main.c:
39:	intmax_t __fromfp(double, int, unsigned int);
39:	intmax_t __fromfpx(double, int, unsigned int);
39:	uintmax_t __ufromfp(double, int, unsigned int);
39:	uintmax_t __ufromfpx(double, int, unsigned int);

File ../sysdeps/ieee754/dbl-64/s_fsub.c:
30:	float __fsub(double, double);

File ../sysdeps/ieee754/dbl-64/s_isinf.c:
18:	int __GI___isinf(double);

File ../sysdeps/ieee754/dbl-64/s_isnan.c:
25:	int __GI___isnan(double);

File ../sysdeps/ieee754/dbl-64/s_log1p.c:
103:	double __log1p(double);

File ../sysdeps/ieee754/dbl-64/s_logb.c:
27:	double __logb(double);

File ../sysdeps/ieee754/dbl-64/s_nearbyint.c:
32:	double __nearbyint_c(double);

File ../sysdeps/ieee754/dbl-64/s_nextup.c:
26:	double __nextup(double);

File ../sysdeps/ieee754/dbl-64/s_rint.c:
29:	double __rint_c(double);

File ../sysdeps/ieee754/dbl-64/s_round.c:
30:	double __round(double);

File ../sysdeps/ieee754/dbl-64/s_sin.c:
265:	double __cos_avx(double);
265:	double __cos_fma(double);
265:	double __cos_fma4(double);
265:	double __cos_sse2(double);
201:	double __sin_avx(double);
201:	double __sin_fma(double);
201:	double __sin_fma4(double);
201:	double __sin_sse2(double);

File ../sysdeps/ieee754/dbl-64/s_sincos.c:
32:	void __sincos(double, double *, double *);

File ../sysdeps/ieee754/dbl-64/s_tan.c:
59:	double __tan_avx(double);
59:	double __tan_fma(double);
59:	double __tan_fma4(double);
59:	double __tan_sse2(double);
837:	static double tanMp(double);

File ../sysdeps/ieee754/dbl-64/s_tanh.c:
50:	double __tanh(double);

File ../sysdeps/ieee754/dbl-64/s_trunc.c:
29:	double __trunc_c(double);

File ../sysdeps/ieee754/dbl-64/sincos32.c:
109:	void __c32(mp_no *, mp_no *, mp_no *, int);
109:	void __c32_fma(mp_no *, mp_no *, mp_no *, int);
109:	void __c32_fma4(mp_no *, mp_no *, mp_no *, int);
162:	double __cos32(double, double, double);
162:	double __cos32_fma(double, double, double);
162:	double __cos32_fma4(double, double, double);
256:	double __mpcos(double, double, _Bool);
256:	double __mpcos_fma(double, double, _Bool);
256:	double __mpcos_fma4(double, double, _Bool);
315:	int __mpranred(double, mp_no *, int);
315:	int __mpranred_fma(double, mp_no *, int);
315:	int __mpranred_fma4(double, mp_no *, int);
197:	double __mpsin(double, double, _Bool);
197:	double __mpsin_fma(double, double, _Bool);
197:	double __mpsin_fma4(double, double, _Bool);
134:	double __sin32(double, double, double);
134:	double __sin32_fma(double, double, double);
134:	double __sin32_fma4(double, double, double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/e_acosh.c:
36:	double __ieee754_acosh(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/e_cosh.c:
41:	double __ieee754_cosh(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/e_fmod.c:
27:	double __ieee754_fmod(double, double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/e_log10.c:
57:	double __ieee754_log10(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_frexp.c:
36:	double __frexp(double, int *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_getpayload.c:
25:	double __getpayload(const double *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_issignaling.c:
24:	int __GI___issignaling(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_llround.c:
31:	long long __llround(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_modf.c:
31:	double __modf(double, double *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_remquo.c:
30:	double __remquo(double, double, int *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_roundeven.c:
30:	double __GI___roundeven(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_scalbln.c:
29:	double __scalbln(double, long);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_scalbn.c:
29:	double __scalbn(double, int);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_setpayload_main.c:
31:	int __setpayload(double *, double);
31:	int __setpayloadsig(double *, double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_totalorder.c:
28:	int __totalorder(const double *, const double *);
66:	int __totalorder_compat(double, double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_totalordermag.c:
28:	int __totalordermag(const double *, const double *);
63:	int __totalordermag_compat(double, double);

File ../sysdeps/ieee754/dbl-64/x2y2m1.c:
58:	double __x2y2m1(double, double);
41:	static int compare(const void *, const void *);

File ../sysdeps/ieee754/dbl-64/x2y2m1f.c:
28:	float __x2y2m1f(float, float);

File ../sysdeps/ieee754/float128/../ldbl-128/e_acoshl.c:
39:	_Float128 __ieee754_acoshf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_acosl.c:
153:	_Float128 __ieee754_acosf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_asinl.c:
135:	_Float128 __ieee754_asinf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_atan2l.c:
56:	_Float128 __ieee754_atan2f128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_atanhl.c:
46:	_Float128 __ieee754_atanhf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_coshl.c:
62:	_Float128 __ieee754_coshf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_exp10l.c:
27:	_Float128 __ieee754_exp10f128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_expl.c:
139:	_Float128 __ieee754_expf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_fmodl.c:
28:	_Float128 __ieee754_fmodf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_gammal_r.c:
126:	_Float128 __ieee754_gammaf128_r(_Float128, int *);
56:	static _Float128 gammal_positive(_Float128, int *);

File ../sysdeps/ieee754/float128/../ldbl-128/e_hypotl.c:
54:	_Float128 __ieee754_hypotf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_ilogbl.c:
31:	int __ieee754_ilogbf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_j0l.c:
680:	_Float128 __ieee754_j0f128(_Float128);
828:	_Float128 __ieee754_y0f128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_j1l.c:
689:	_Float128 __ieee754_j1f128(_Float128);
848:	_Float128 __ieee754_y1f128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_jnl.c:
75:	_Float128 __ieee754_jnf128(int, _Float128);
315:	_Float128 __ieee754_ynf128(int, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_lgammal_r.c:
759:	_Float128 __ieee754_lgammaf128_r(_Float128, int *);

File ../sysdeps/ieee754/float128/../ldbl-128/e_log10l.c:
181:	_Float128 __ieee754_log10f128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_log2l.c:
175:	_Float128 __ieee754_log2f128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_logl.c:
188:	_Float128 __ieee754_logf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_powl.c:
150:	_Float128 __ieee754_powf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_rem_pio2l.c:
196:	int32_t __ieee754_rem_pio2f128(_Float128, _Float128 *);

File ../sysdeps/ieee754/float128/../ldbl-128/e_remainderl.c:
32:	_Float128 __ieee754_remainderf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/e_sinhl.c:
66:	_Float128 __ieee754_sinhf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/gamma_productl.c:
33:	_Float128 __gamma_productf128(_Float128, _Float128, int, _Float128 *);

File ../sysdeps/ieee754/float128/../ldbl-128/k_cosl.c:
80:	_Float128 __kernel_cosf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/k_sincosl.c:
101:	void __kernel_sincosf128(_Float128, _Float128, _Float128 *, _Float128 *, int);

File ../sysdeps/ieee754/float128/../ldbl-128/k_sinl.c:
82:	_Float128 __kernel_sinf128(_Float128, _Float128, int);

File ../sysdeps/ieee754/float128/../ldbl-128/k_tanl.c:
89:	_Float128 __kernel_tanf128(_Float128, _Float128, int);

File ../sysdeps/ieee754/float128/../ldbl-128/ldbl2mpn.c:
33:	mp_size_t __mpn_extract_float128(mp_ptr, mp_size_t, int *, int *, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/lgamma_negl.c:
448:	_Float128 __lgamma_negf128(_Float128, int *);

File ../sysdeps/ieee754/float128/../ldbl-128/lgamma_productl.c:
30:	_Float128 __lgamma_productf128(_Float128, _Float128, _Float128, int);

File ../sysdeps/ieee754/float128/../ldbl-128/s_asinhl.c:
44:	_Float128 __asinhf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_atanl.c:
177:	_Float128 __atanf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_cbrtl.c:
68:	_Float128 __cbrtf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_ceill.c:
34:	_Float128 __ceilf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_copysignl.c:
33:	_Float128 __copysignf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_cosl.c:
52:	_Float128 __cosf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_daddl.c:
32:	double __f64addf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_ddivl.c:
32:	double __f64divf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_dmull.c:
32:	double __f64mulf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_dsubl.c:
32:	double __f64subf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_erfl.c:
810:	_Float128 __erfcf128(_Float128);
755:	_Float128 __erff128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_expm1l.c:
94:	_Float128 __GI___expm1f128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_f64xaddf128.c:
29:	_Float64x __f64xaddf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_f64xdivf128.c:
29:	_Float64x __f64xdivf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_f64xmulf128.c:
29:	_Float64x __f64xmulf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_f64xsubf128.c:
29:	_Float64x __f64xsubf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_fabsl.c:
28:	_Float128 __fabsf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_faddl.c:
28:	float __f32addf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_fdivl.c:
28:	float __f32divf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_finitel.c:
28:	int __GI___finitef128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_floorl.c:
34:	_Float128 __floorf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_fmal.c:
34:	_Float128 __fmaf128(_Float128, _Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_fmull.c:
28:	float __f32mulf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_fpclassifyl.c:
27:	int __GI___fpclassifyf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_frexpl.c:
37:	_Float128 __frexpf128(_Float128, int *);

File ../sysdeps/ieee754/float128/../ldbl-128/s_fromfpl_main.c:
39:	intmax_t __fromfpf128(_Float128, int, unsigned int);
39:	intmax_t __fromfpxf128(_Float128, int, unsigned int);
39:	uintmax_t __ufromfpf128(_Float128, int, unsigned int);
39:	uintmax_t __ufromfpxf128(_Float128, int, unsigned int);

File ../sysdeps/ieee754/float128/../ldbl-128/s_fsubl.c:
28:	float __f32subf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_getpayloadl.c:
25:	_Float128 __getpayloadf128(const _Float128 *);

File ../sysdeps/ieee754/float128/../ldbl-128/s_isinfl.c:
20:	int __GI___isinff128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_isnanl.c:
28:	int __GI___isnanf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_issignalingl.c:
24:	int __GI___issignalingf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_llrintl.c:
37:	long long __llrintf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_llroundl.c:
30:	long long __llroundf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_log1pl.c:
124:	_Float128 __log1pf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_logbl.c:
31:	_Float128 __logbf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_lrintl.c:
37:	long __lrintf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_lroundl.c:
30:	long __lroundf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_modfl.c:
36:	_Float128 __modff128(_Float128, _Float128 *);

File ../sysdeps/ieee754/float128/../ldbl-128/s_nearbyintl.c:
34:	_Float128 __nearbyintf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_nextafterl.c:
33:	_Float128 __nextafterf128(_Float128, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_nextupl.c:
26:	_Float128 __nextupf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_remquol.c:
31:	_Float128 __remquof128(_Float128, _Float128, int *);

File ../sysdeps/ieee754/float128/../ldbl-128/s_rintl.c:
37:	_Float128 __rintf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_roundevenl.c:
30:	_Float128 __roundevenf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_roundl.c:
30:	_Float128 __roundf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_scalblnl.c:
37:	_Float128 __scalblnf128(_Float128, long);

File ../sysdeps/ieee754/float128/../ldbl-128/s_scalbnl.c:
37:	_Float128 __scalbnf128(_Float128, int);

File ../sysdeps/ieee754/float128/../ldbl-128/s_setpayloadl_main.c:
31:	int __setpayloadf128(_Float128 *, _Float128);
31:	int __setpayloadsigf128(_Float128 *, _Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_sincosl.c:
28:	void __sincosf128(_Float128, _Float128 *, _Float128 *);

File ../sysdeps/ieee754/float128/../ldbl-128/s_sinl.c:
52:	_Float128 __sinf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_tanhl.c:
53:	_Float128 __tanhf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_tanl.c:
52:	_Float128 __tanf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/s_totalorderl.c:
73:	int __totalorder_compatf128(_Float128, _Float128);
28:	int __totalorderf128(const _Float128 *, const _Float128 *);

File ../sysdeps/ieee754/float128/../ldbl-128/s_totalordermagl.c:
67:	int __totalordermag_compatf128(_Float128, _Float128);
28:	int __totalordermagf128(const _Float128 *, const _Float128 *);

File ../sysdeps/ieee754/float128/../ldbl-128/s_truncl.c:
30:	_Float128 __truncf128(_Float128);

File ../sysdeps/ieee754/float128/../ldbl-128/x2y2m1l.c:
59:	_Float128 __x2y2m1f128(_Float128, _Float128);
42:	static int compare(const void *, const void *);

File ../sysdeps/ieee754/float128/mpn2float128.c:
31:	_Float128 __mpn_construct_float128(mp_srcptr, int, int);

File ../sysdeps/ieee754/float128/s_signbitf128.c:
26:	int __GI___signbitf128(_Float128);

File ../sysdeps/ieee754/flt-32/e_acosf.c:
37:	float __ieee754_acosf(float);

File ../sysdeps/ieee754/flt-32/e_acoshf.c:
28:	float __ieee754_acoshf(float);

File ../sysdeps/ieee754/flt-32/e_asinf.c:
65:	float __ieee754_asinf(float);

File ../sysdeps/ieee754/flt-32/e_atan2f.c:
29:	float __ieee754_atan2f(float, float);

File ../sysdeps/ieee754/flt-32/e_atanhf.c:
49:	float __ieee754_atanhf(float);

File ../sysdeps/ieee754/flt-32/e_coshf.c:
26:	float __ieee754_coshf(float);

File ../sysdeps/ieee754/flt-32/e_exp2f.c:
48:	float __exp2f_fma(float);
48:	float __exp2f_sse2(float);

File ../sysdeps/ieee754/flt-32/e_expf.c:
53:	float __expf_fma(float);
53:	float __expf_sse2(float);

File ../sysdeps/ieee754/flt-32/e_fmodf.c:
29:	float __ieee754_fmodf(float, float);

File ../sysdeps/ieee754/flt-32/e_gammaf_r.c:
111:	float __ieee754_gammaf_r(float, int *);
45:	static float gammaf_positive(float, int *);

File ../sysdeps/ieee754/flt-32/e_hypotf.c:
21:	float __ieee754_hypotf(float, float);

File ../sysdeps/ieee754/flt-32/e_ilogbf.c:
24:	int __ieee754_ilogbf(float);

File ../sysdeps/ieee754/flt-32/e_j0f.c:
41:	float __ieee754_j0f(float);
101:	float __ieee754_y0f(float);
226:	static float pzerof(float);
323:	static float qzerof(float);

File ../sysdeps/ieee754/flt-32/e_j1f.c:
46:	float __ieee754_j1f(float);
109:	float __ieee754_y1f(float);
237:	static float ponef(float);
335:	static float qonef(float);

File ../sysdeps/ieee754/flt-32/e_jnf.c:
32:	float __ieee754_jnf(int, float);
188:	float __ieee754_ynf(int, float);

File ../sysdeps/ieee754/flt-32/e_lgammaf_r.c:
139:	float __ieee754_lgammaf_r(float, int *);

File ../sysdeps/ieee754/flt-32/e_log10f.c:
28:	float __ieee754_log10f(float);

File ../sysdeps/ieee754/flt-32/e_log2f.c:
39:	float __log2f_fma(float);
39:	float __log2f_sse2(float);

File ../sysdeps/ieee754/flt-32/e_logf.c:
40:	float __logf_fma(float);
40:	float __logf_sse2(float);

File ../sysdeps/ieee754/flt-32/e_powf.c:
147:	float __powf_fma(float, float);
147:	float __powf_sse2(float, float);

File ../sysdeps/ieee754/flt-32/e_remainderf.c:
24:	float __ieee754_remainderf(float, float);

File ../sysdeps/ieee754/flt-32/e_sinhf.c:
26:	float __ieee754_sinhf(float);

File ../sysdeps/ieee754/flt-32/k_tanf.c:
44:	float __kernel_tanf(float, float, int);

File ../sysdeps/ieee754/flt-32/lgamma_negf.c:
196:	float __lgamma_negf(float, int *);

File ../sysdeps/ieee754/flt-32/math_errf.c:
65:	float __math_divzerof(uint32_t);
72:	float __math_invalidf(float);
52:	float __math_may_uflowf(uint32_t);
59:	float __math_oflowf(uint32_t);
43:	float __math_uflowf(uint32_t);
25:	static float with_errnof(float, int);
36:	static float xflowf(uint32_t, float);

File ../sysdeps/ieee754/flt-32/mpn2flt.c:
28:	float __mpn_construct_float(mp_srcptr, int, int);

File ../sysdeps/ieee754/flt-32/s_asinhf.c:
28:	float __asinhf(float);

File ../sysdeps/ieee754/flt-32/s_atanf.c:
58:	float __atanf(float);

File ../sysdeps/ieee754/flt-32/s_cbrtf.c:
39:	float __cbrtf(float);

File ../sysdeps/ieee754/flt-32/s_ceilf.c:
23:	float __ceilf_c(float);

File ../sysdeps/ieee754/flt-32/s_cosf.c:
38:	float __cosf_fma(float);
38:	float __cosf_sse2(float);

File ../sysdeps/ieee754/flt-32/s_erff.c:
160:	float __erfcf(float);
103:	float __erff(float);

File ../sysdeps/ieee754/flt-32/s_expm1f.c:
41:	float __expm1f(float);

File ../sysdeps/ieee754/flt-32/s_finitef.c:
34:	int __GI___finitef(float);

File ../sysdeps/ieee754/flt-32/s_floorf.c:
30:	float __floorf_c(float);

File ../sysdeps/ieee754/flt-32/s_fpclassifyf.c:
26:	int __GI___fpclassifyf(float);

File ../sysdeps/ieee754/flt-32/s_frexpf.c:
27:	float __frexpf(float, int *);

File ../sysdeps/ieee754/flt-32/s_fromfpf_main.c:
39:	intmax_t __fromfpf(float, int, unsigned int);
39:	intmax_t __fromfpxf(float, int, unsigned int);
39:	uintmax_t __ufromfpf(float, int, unsigned int);
39:	uintmax_t __ufromfpxf(float, int, unsigned int);

File ../sysdeps/ieee754/flt-32/s_getpayloadf.c:
26:	float __getpayloadf(const float *);

File ../sysdeps/ieee754/flt-32/s_isinff.c:
19:	int __GI___isinff(float);

File ../sysdeps/ieee754/flt-32/s_isnanf.c:
29:	int __GI___isnanf(float);

File ../sysdeps/ieee754/flt-32/s_issignalingf.c:
24:	int __GI___issignalingf(float);

File ../sysdeps/ieee754/flt-32/s_llroundf.c:
30:	long long __llroundf(float);

File ../sysdeps/ieee754/flt-32/s_log1pf.c:
38:	float __log1pf(float);

File ../sysdeps/ieee754/flt-32/s_logbf.c:
22:	float __logbf(float);

File ../sysdeps/ieee754/flt-32/s_lroundf.c:
30:	long __lroundf(float);

File ../sysdeps/ieee754/flt-32/s_modff.c:
23:	float __modff(float, float *);

File ../sysdeps/ieee754/flt-32/s_nearbyintf.c:
27:	float __nearbyintf_c(float);

File ../sysdeps/ieee754/flt-32/s_nextafterf.c:
27:	float __nextafterf(float, float);

File ../sysdeps/ieee754/flt-32/s_nextupf.c:
26:	float __nextupf(float);

File ../sysdeps/ieee754/flt-32/s_remquof.c:
30:	float __remquof(float, float, int *);

File ../sysdeps/ieee754/flt-32/s_rintf.c:
23:	float __rintf_c(float);

File ../sysdeps/ieee754/flt-32/s_roundevenf.c:
30:	float __roundevenf(float);

File ../sysdeps/ieee754/flt-32/s_roundf.c:
29:	float __roundf(float);

File ../sysdeps/ieee754/flt-32/s_scalblnf.c:
26:	float __scalblnf(float, long);

File ../sysdeps/ieee754/flt-32/s_scalbnf.c:
26:	float __scalbnf(float, int);

File ../sysdeps/ieee754/flt-32/s_setpayloadf_main.c:
31:	int __setpayloadf(float *, float);
31:	int __setpayloadsigf(float *, float);

File ../sysdeps/ieee754/flt-32/s_sincosf.c:
38:	void __sincosf_fma(float, float *, float *);
38:	void __sincosf_sse2(float, float *, float *);

File ../sysdeps/ieee754/flt-32/s_sinf.c:
38:	float __sinf_fma(float);
38:	float __sinf_sse2(float);

File ../sysdeps/ieee754/flt-32/s_tanf.c:
52:	float __tanf(float);

File ../sysdeps/ieee754/flt-32/s_tanhf.c:
28:	float __tanhf(float);

File ../sysdeps/ieee754/flt-32/s_totalorderf.c:
65:	int __totalorder_compatf(float, float);
28:	int __totalorderf(const float *, const float *);

File ../sysdeps/ieee754/flt-32/s_totalordermagf.c:
63:	int __totalordermag_compatf(float, float);
28:	int __totalordermagf(const float *, const float *);

File ../sysdeps/ieee754/flt-32/s_truncf.c:
29:	float __truncf_c(float);

File ../sysdeps/ieee754/k_standard.c:
99:	double __kernel_standard(double, double, int);

File ../sysdeps/ieee754/k_standardf.c:
29:	float __kernel_standard_f(float, float, int);

File ../sysdeps/ieee754/k_standardl.c:
50:	long double __kernel_standard_l(long double, long double, int);

File ../sysdeps/ieee754/ldbl-96/e_acoshl.c:
40:	long double __ieee754_acoshl(long double);

File ../sysdeps/ieee754/ldbl-96/e_asinl.c:
97:	long double __ieee754_asinl(long double);

File ../sysdeps/ieee754/ldbl-96/e_atanhl.c:
47:	long double __ieee754_atanhl(long double);

File ../sysdeps/ieee754/ldbl-96/e_coshl.c:
44:	long double __ieee754_coshl(long double);

File ../sysdeps/ieee754/ldbl-96/e_gammal_r.c:
119:	long double __ieee754_gammal_r(long double, int *);
49:	static long double gammal_positive(long double, int *);

File ../sysdeps/ieee754/ldbl-96/e_hypotl.c:
54:	long double __ieee754_hypotl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/e_j0l.c:
109:	long double __ieee754_j0l(long double);
195:	long double __ieee754_y0l(long double);
352:	static long double pzero(long double);
490:	static long double qzero(long double);

File ../sysdeps/ieee754/ldbl-96/e_j1l.c:
113:	long double __ieee754_j1l(long double);
196:	long double __ieee754_y1l(long double);
362:	static long double pone(long double);
509:	static long double qone(long double);

File ../sysdeps/ieee754/ldbl-96/e_jnl.c:
73:	long double __ieee754_jnl(int, long double);
308:	long double __ieee754_ynl(int, long double);

File ../sysdeps/ieee754/ldbl-96/e_lgammal_r.c:
275:	long double __ieee754_lgammal_r(long double, int *);

File ../sysdeps/ieee754/ldbl-96/e_rem_pio2l.c:
185:	int32_t __ieee754_rem_pio2l(long double, long double *);

File ../sysdeps/ieee754/ldbl-96/e_sinhl.c:
48:	long double __ieee754_sinhl(long double);

File ../sysdeps/ieee754/ldbl-96/gamma_product.c:
33:	double __gamma_product(double, double, int, double *);

File ../sysdeps/ieee754/ldbl-96/gamma_productl.c:
33:	long double __gamma_productl(long double, long double, int, long double *);

File ../sysdeps/ieee754/ldbl-96/k_cosl.c:
83:	long double __kernel_cosl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/k_sinl.c:
88:	long double __kernel_sinl(long double, long double, int);

File ../sysdeps/ieee754/ldbl-96/k_tanl.c:
89:	long double __kernel_tanl(long double, long double, int);

File ../sysdeps/ieee754/ldbl-96/lgamma_negl.c:
315:	long double __lgamma_negl(long double, int *);

File ../sysdeps/ieee754/ldbl-96/lgamma_product.c:
30:	double __lgamma_product(double, double, double, int);

File ../sysdeps/ieee754/ldbl-96/lgamma_productl.c:
30:	long double __lgamma_productl(long double, long double, long double, int);

File ../sysdeps/ieee754/ldbl-96/mpn2ldbl.c:
29:	long double __mpn_construct_long_double(mp_srcptr, int, int);

File ../sysdeps/ieee754/ldbl-96/s_asinhl.c:
43:	long double __asinhl(long double);

File ../sysdeps/ieee754/ldbl-96/s_cbrtl.c:
42:	long double __cbrtl(long double);

File ../sysdeps/ieee754/ldbl-96/s_cosl.c:
57:	long double __cosl(long double);

File ../sysdeps/ieee754/ldbl-96/s_daddl.c:
28:	double __daddl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/s_ddivl.c:
28:	double __ddivl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/s_dmull.c:
28:	double __dmull(long double, long double);

File ../sysdeps/ieee754/ldbl-96/s_dsubl.c:
28:	double __dsubl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/s_erfl.c:
342:	long double __erfcl(long double);
255:	long double __erfl(long double);

File ../sysdeps/ieee754/ldbl-96/s_faddl.c:
26:	float __faddl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/s_fdivl.c:
26:	float __fdivl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/s_fmal.c:
33:	long double __fmal(long double, long double, long double);

File ../sysdeps/ieee754/ldbl-96/s_fmull.c:
26:	float __fmull(long double, long double);

File ../sysdeps/ieee754/ldbl-96/s_frexpl.c:
44:	long double __frexpl(long double, int *);

File ../sysdeps/ieee754/ldbl-96/s_fromfpl_main.c:
39:	intmax_t __fromfpl(long double, int, unsigned int);
39:	intmax_t __fromfpxl(long double, int, unsigned int);
39:	uintmax_t __ufromfpl(long double, int, unsigned int);
39:	uintmax_t __ufromfpxl(long double, int, unsigned int);

File ../sysdeps/ieee754/ldbl-96/s_fsubl.c:
26:	float __fsubl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/s_getpayloadl.c:
25:	long double __getpayloadl(const long double *);

File ../sysdeps/ieee754/ldbl-96/s_iscanonicall.c:
26:	int __GI___iscanonicall(long double);

File ../sysdeps/ieee754/ldbl-96/s_issignalingl.c:
24:	int __GI___issignalingl(long double);

File ../sysdeps/ieee754/ldbl-96/s_llroundl.c:
29:	long long __llroundl(long double);

File ../sysdeps/ieee754/ldbl-96/s_lroundl.c:
29:	long __lroundl(long double);

File ../sysdeps/ieee754/ldbl-96/s_modfl.c:
34:	long double __modfl(long double, long double *);

File ../sysdeps/ieee754/ldbl-96/s_nextupl.c:
26:	long double __nextupl(long double);

File ../sysdeps/ieee754/ldbl-96/s_remquol.c:
30:	long double __remquol(long double, long double, int *);

File ../sysdeps/ieee754/ldbl-96/s_roundevenl.c:
30:	long double __roundevenl(long double);

File ../sysdeps/ieee754/ldbl-96/s_roundl.c:
28:	long double __roundl(long double);

File ../sysdeps/ieee754/ldbl-96/s_scalblnl.c:
34:	long double __scalblnl(long double, long);

File ../sysdeps/ieee754/ldbl-96/s_setpayloadl_main.c:
31:	int __setpayloadl(long double *, long double);
31:	int __setpayloadsigl(long double *, long double);

File ../sysdeps/ieee754/ldbl-96/s_signbitl.c:
23:	int __signbitl(long double);

File ../sysdeps/ieee754/ldbl-96/s_sincosl.c:
28:	void __sincosl(long double, long double *, long double *);

File ../sysdeps/ieee754/ldbl-96/s_sinl.c:
57:	long double __sinl(long double);

File ../sysdeps/ieee754/ldbl-96/s_tanhl.c:
53:	long double __tanhl(long double);

File ../sysdeps/ieee754/ldbl-96/s_tanl.c:
56:	long double __tanl(long double);

File ../sysdeps/ieee754/ldbl-96/s_totalorderl.c:
76:	int __totalorder_compatl(long double, long double);
29:	int __totalorderl(const long double *, const long double *);

File ../sysdeps/ieee754/ldbl-96/s_totalordermagl.c:
70:	int __totalordermag_compatl(long double, long double);
29:	int __totalordermagl(const long double *, const long double *);

File ../sysdeps/ieee754/ldbl-96/x2y2m1l.c:
58:	long double __x2y2m1l(long double, long double);
41:	static int compare(const void *, const void *);

File ../sysdeps/ieee754/s_matherr.c:
23:	int __matherr(struct exception *);

File ../sysdeps/nptl/fork.c:
48:	pid_t __libc_fork(void);

File ../sysdeps/nptl/jmp-unwind.c:
28:	void _longjmp_unwind(struct __jmp_buf_tag *, int);

File ../sysdeps/nptl/unwind-forcedunwind.c:
123:	_Unwind_Reason_Code _Unwind_ForcedUnwind(struct _Unwind_Exception *, _Unwind_Stop_Fn, void *);
139:	_Unwind_Word _Unwind_GetCFA(struct _Unwind_Context *);
96:	void _Unwind_Resume(struct _Unwind_Exception *);
110:	_Unwind_Reason_Code __gcc_personality_v0(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, struct _Unwind_Context *);
84:	void __nptl_unwind_freeres(void);
37:	void pthread_cancel_init(void);

File ../sysdeps/posix/closedir.c:
30:	int __closedir(DIR *);

File ../sysdeps/posix/ctermid.c:
27:	char *ctermid(char *);

File ../sysdeps/posix/cuserid.c:
28:	char *cuserid(char *);

File ../sysdeps/posix/dirfd.c:
25:	int __dirfd(DIR *);

File ../sysdeps/posix/euidaccess.c:
120:	int __euidaccess(const char *, int);

File ../sysdeps/posix/fdopendir.c:
28:	DIR *__fdopendir(int);

File ../sysdeps/posix/gai_strerror.c:
57:	const char *__GI_gai_strerror(int);

File ../sysdeps/posix/getaddrinfo.c:
2512:	void __GI_freeaddrinfo(struct addrinfo *);
2160:	int __GI_getaddrinfo(const char *, const char *, const struct addrinfo *, struct addrinfo **);
197:	static _Bool convert_hostent_to_gaih_addrtuple(int, struct hostent *, struct gaih_addrtuple **, const struct addrinfo *);
1692:	static void fini(void);
1784:	static void gaiconf_init(void);
339:	static int gaih_inet(const char *, const struct gaih_service *, const struct addrinfo *, struct addrinfo **, unsigned int *, struct scratch_buffer *);
1178:	static int get_scope(const struct sockaddr_in6 *);
1635:	static int in6aicmp(const void *, const void *);
1311:	static int match_prefix(const struct sockaddr_in6 *, const struct prefixentry *, int);
1756:	static int prefixcmp(const void *, const void *);
1393:	static int rfc3484_sort(const void *, const void *, void *);
1770:	static int scopecmp(const void *, const void *);

File ../sysdeps/posix/getdtsz.c:
25:	int __getdtablesize(void);

File ../sysdeps/posix/gethostname.c:
27:	int __gethostname(char *, size_t);

File ../sysdeps/posix/isatty.c:
23:	int __isatty(int);

File ../sysdeps/posix/isfdtype.c:
25:	int isfdtype(int, int);

File ../sysdeps/posix/killpg.c:
26:	int killpg(__pid_t, int);

File ../sysdeps/posix/libc_fatal.c:
160:	void __GI___libc_fatal(const char *);
57:	void __libc_message(enum __libc_message_action, const char *, const char *, enum __libc_message_action, ...);

File ../sysdeps/posix/mkfifo.c:
25:	int mkfifo(const char *, mode_t);

File ../sysdeps/posix/mkfifoat.c:
24:	int mkfifoat(int, const char *, mode_t);

File ../sysdeps/posix/nice.c:
25:	int nice(int);

File ../sysdeps/posix/opendir.c:
97:	DIR *__alloc_dir(int, _Bool, int, const struct stat64 *);
87:	DIR *__opendir(const char *);
75:	DIR *__opendirat(int, const char *);

File ../sysdeps/posix/posix_fallocate.c:
31:	static int internal_fallocate(int, __off_t, __off_t);

File ../sysdeps/posix/posix_fallocate64.c:
31:	static int internal_fallocate64(int, __off64_t, __off64_t);

File ../sysdeps/posix/profil.c:
65:	int __profil(u_short *, size_t, size_t, u_int);

File ../sysdeps/posix/readdir.c:
38:	struct dirent64 *__GI___readdir64(DIR *);
38:	struct dirent64 *__readdir64(DIR *);

File ../sysdeps/posix/readdir_r.c:
38:	int __readdir64_r(DIR *, struct dirent64 *, struct dirent64 **);

File ../sysdeps/posix/remove.c:
30:	int __GI_remove(const char *);

File ../sysdeps/posix/rewinddir.c:
26:	void __GI___rewinddir(DIR *);
26:	void __rewinddir(DIR *);

File ../sysdeps/posix/seekdir.c:
27:	void seekdir(DIR *, long);

File ../sysdeps/posix/shm_open.c:
34:	int shm_open(const char *, int, mode_t);

File ../sysdeps/posix/shm_unlink.c:
33:	int shm_unlink(const char *);

File ../sysdeps/posix/sigblock.c:
25:	int __GI___sigblock(int);

File ../sysdeps/posix/sigignore.c:
28:	int sigignore(int);

File ../sysdeps/posix/sigintr.c:
27:	int siginterrupt(int, int);

File ../sysdeps/posix/signal.c:
29:	__sighandler_t __bsd_signal(int, __sighandler_t);

File ../sysdeps/posix/sigpause.c:
28:	int __GI___sigpause(int, int);
54:	int __default_sigpause(int);
68:	int __xpg_sigpause(int);

File ../sysdeps/posix/sigset.c:
27:	__sighandler_t sigset(int, __sighandler_t);

File ../sysdeps/posix/sigsetmask.c:
25:	int __sigsetmask(int);

File ../sysdeps/posix/sleep.c:
33:	unsigned int __sleep(unsigned int);

File ../sysdeps/posix/sprofil.c:
282:	int __sprofil(struct prof *, int, struct timeval *, unsigned int);
269:	static int pcmp(const void *, const void *);
108:	static void profil_count(uintptr_t, int);

File ../sysdeps/posix/sysconf.c:
1205:	static long __sysconf_check_spec(const char *);

File ../sysdeps/posix/system.c:
197:	int __libc_system(const char *);
78:	static void cancel_handler(void *);
102:	static int do_system(const char *);

File ../sysdeps/posix/sysv_signal.c:
37:	__sighandler_t __sysv_signal(int, __sighandler_t);

File ../sysdeps/posix/telldir.c:
24:	long telldir(DIR *);

File ../sysdeps/posix/tempname.c:
184:	int __gen_tempname(char *, int, int, int);
109:	int __path_search(char *, size_t, const char *, const char *, int);

File ../sysdeps/posix/ulimit.c:
36:	long __ulimit(int, ...);

File ../sysdeps/posix/usleep.c:
24:	int usleep(useconds_t);

File ../sysdeps/pthread/aio_cancel.c:
41:	int aio_cancel(int, struct aiocb *);

File ../sysdeps/pthread/aio_error.c:
35:	int aio_error(const struct aiocb *);

File ../sysdeps/pthread/aio_fsync.c:
37:	int aio_fsync(int, struct aiocb *);

File ../sysdeps/pthread/aio_misc.c:
298:	struct requestlist *__aio_enqueue_request(aiocb_union *, int);
171:	struct requestlist *__aio_find_req(aiocb_union *);
193:	struct requestlist *__aio_find_req_fd(int);
162:	void __aio_free_request(struct requestlist *);
271:	void __aio_init(const struct aioinit *);
206:	void __aio_remove_request(struct requestlist *, int, struct requestlist *);
684:	static void free_res(void);
479:	static void *handle_fildes_io(void *);

File ../sysdeps/pthread/aio_notify.c:
111:	void __aio_notify(struct requestlist *);
51:	int __aio_notify_only(struct sigevent *);
38:	static void *notify_func_wrapper(void *);

File ../sysdeps/pthread/aio_suspend.c:
108:	int aio_suspend(const struct aiocb * const *, int, const struct timespec *);
97:	static int do_aio_misc_wait(unsigned int *, const struct timespec *);

File ../sysdeps/pthread/flockfile.c:
25:	void __flockfile(FILE *);

File ../sysdeps/pthread/ftrylockfile.c:
26:	int __ftrylockfile(FILE *);

File ../sysdeps/pthread/funlockfile.c:
25:	void __funlockfile(FILE *);

File ../sysdeps/unix/bsd/getpt.c:
44:	int __bsd_openpt(int);

File ../sysdeps/unix/bsd/tcgetpgrp.c:
25:	pid_t __GI_tcgetpgrp(int);

File ../sysdeps/unix/bsd/tcsetpgrp.c:
25:	int tcsetpgrp(int, pid_t);

File ../sysdeps/unix/bsd/ualarm.c:
27:	useconds_t ualarm(useconds_t, useconds_t);

File ../sysdeps/unix/get_child_max.c:
25:	long __get_child_max(void);

File ../sysdeps/unix/getlogin.c:
36:	static char *getlogin_fd0(void);

File ../sysdeps/unix/getlogin_r.c:
37:	static int getlogin_r_fd0(char *, size_t);

File ../sysdeps/unix/grantpt.c:
100:	int grantpt(int);

File ../sysdeps/unix/pt-fcntl.c:
33:	static int fcntl_compat(int, int, ...);

File ../sysdeps/unix/sockatmark.c:
23:	int sockatmark(int);

File ../sysdeps/unix/sysv/linux/_exit.c:
26:	void __GI__exit(int);

File ../sysdeps/unix/sysv/linux/accept.c:
23:	int __libc_accept(int, __SOCKADDR_ARG, socklen_t *);

File ../sysdeps/unix/sysv/linux/accept4.c:
29:	int accept4(int, __SOCKADDR_ARG, socklen_t *, int);

File ../sysdeps/unix/sysv/linux/access.c:
24:	int __GI___access(const char *, int);
24:	int __access(const char *, int);

File ../sysdeps/unix/sysv/linux/adjtime.c:
27:	int __adjtime(const struct timeval *, struct timeval *);

File ../sysdeps/unix/sysv/linux/adjtimex.c:
23:	int ___adjtimex(struct timex *);

File ../sysdeps/unix/sysv/linux/aio_sigqueue.c:
33:	int __aio_sigqueue(int, const union sigval, pid_t);

File ../sysdeps/unix/sysv/linux/alphasort64.c:
24:	int __alphasort64(const struct dirent64 **, const struct dirent64 **);

File ../sysdeps/unix/sysv/linux/check_native.c:
41:	void __check_native(uint32_t, int *, uint32_t, int *);

File ../sysdeps/unix/sysv/linux/check_pf.c:
298:	void __check_pf(_Bool *, _Bool *, struct in6addrinfo **, size_t *);
372:	void __free_in6ai(struct in6addrinfo *);
365:	static void freecache(void);

File ../sysdeps/unix/sysv/linux/clock.c:
24:	clock_t clock(void);

File ../sysdeps/unix/sysv/linux/clock_getcpuclockid.c:
26:	int __clock_getcpuclockid(pid_t, clockid_t *);

File ../sysdeps/unix/sysv/linux/clock_getres.c:
29:	int __clock_getres(clockid_t, struct timespec *);

File ../sysdeps/unix/sysv/linux/clock_gettime.c:
30:	int __GI___clock_gettime(clockid_t, struct timespec *);

File ../sysdeps/unix/sysv/linux/clock_nanosleep.c:
60:	int __GI___clock_nanosleep(clockid_t, int, const struct timespec *, struct timespec *);

File ../sysdeps/unix/sysv/linux/clock_settime.c:
26:	int __GI___clock_settime(clockid_t, const struct timespec *);

File ../sysdeps/unix/sysv/linux/close.c:
25:	int __GI___close(int);
25:	int __close(int);

File ../sysdeps/unix/sysv/linux/close_nocancel.c:
24:	int __GI___close_nocancel(int);

File ../sysdeps/unix/sysv/linux/cmsg_nxthdr.c:
24:	struct cmsghdr *__GI___cmsg_nxthdr(struct msghdr *, struct cmsghdr *);

File ../sysdeps/unix/sysv/linux/connect.c:
23:	int __libc_connect(int, __CONST_SOCKADDR_ARG, socklen_t);

File ../sysdeps/unix/sysv/linux/copy_file_range.c:
24:	ssize_t copy_file_range(int, __off64_t *, int, __off64_t *, size_t, unsigned int);

File ../sysdeps/unix/sysv/linux/creat64.c:
25:	int __creat64(const char *, mode_t);

File ../sysdeps/unix/sysv/linux/createthread.c:
49:	static int create_thread(struct pthread *, const struct pthread_attr *, _Bool *, void *, _Bool *);

File ../sysdeps/unix/sysv/linux/dl-execstack.c:
32:	int __GI__dl_make_stack_executable(void **);

File ../sysdeps/unix/sysv/linux/dl-openat64.c:
26:	int openat64(int, const char *, int, ...);

File ../sysdeps/unix/sysv/linux/dl-origin.c:
35:	const char *_dl_get_origin(void);

File ../sysdeps/unix/sysv/linux/dl-sysdep.c:
45:	int _dl_discover_osversion(void);

File ../sysdeps/unix/sysv/linux/epoll_pwait.c:
38:	int __GI_epoll_pwait(int, struct epoll_event *, int, int, const sigset_t *);

File ../sysdeps/unix/sysv/linux/epoll_wait.c:
27:	int epoll_wait(int, struct epoll_event *, int, int);

File ../sysdeps/unix/sysv/linux/eventfd_read.c:
24:	int eventfd_read(int, eventfd_t *);

File ../sysdeps/unix/sysv/linux/eventfd_write.c:
24:	int eventfd_write(int, eventfd_t);

File ../sysdeps/unix/sysv/linux/faccessat.c:
31:	int faccessat(int, const char *, int, int);

File ../sysdeps/unix/sysv/linux/fallocate64.c:
25:	int fallocate64(int, int, __off64_t, __off64_t);

File ../sysdeps/unix/sysv/linux/fchmodat.c:
30:	int fchmodat(int, const char *, mode_t, int);

File ../sysdeps/unix/sysv/linux/fcntl64.c:
37:	int __GI___libc_fcntl64(int, int, ...);

File ../sysdeps/unix/sysv/linux/fcntl_nocancel.c:
34:	int __GI___fcntl64_nocancel(int, int, ...);
50:	int __fcntl64_nocancel_adjusted(int, int, void *);

File ../sysdeps/unix/sysv/linux/fdatasync.c:
26:	int fdatasync(int);

File ../sysdeps/unix/sysv/linux/fexecve.c:
33:	int fexecve(int, char * const *, char * const *);

File ../sysdeps/unix/sysv/linux/fpathconf.c:
31:	long __fpathconf(int, int);

File ../sysdeps/unix/sysv/linux/fsync.c:
25:	int fsync(int);

File ../sysdeps/unix/sysv/linux/ftruncate64.c:
28:	int __ftruncate64(int, off64_t);

File ../sysdeps/unix/sysv/linux/futimens.c:
32:	int __futimens(int, const struct timespec *);

File ../sysdeps/unix/sysv/linux/futimes.c:
35:	int __futimes(int, const struct timeval *);

File ../sysdeps/unix/sysv/linux/futimesat.c:
32:	int futimesat(int, const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/gai_sigqueue.c:
33:	int __gai_sigqueue(int, const union sigval, pid_t);

File ../sysdeps/unix/sysv/linux/gentempfd.c:
25:	int __GI___gen_tempfd(int);

File ../sysdeps/unix/sysv/linux/getclktck.c:
28:	int __getclktck(void);

File ../sysdeps/unix/sysv/linux/getcpu.c:
24:	int __GI___getcpu(unsigned int *, unsigned int *);

File ../sysdeps/unix/sysv/linux/getcwd.c:
46:	char *__GI___getcwd(char *, size_t);
46:	char *__getcwd(char *, size_t);

File ../sysdeps/unix/sysv/linux/getdents64.c:
26:	ssize_t __GI___getdents64(int, void *, size_t);
26:	ssize_t __getdents64(int, void *, size_t);

File ../sysdeps/unix/sysv/linux/getdirentries64.c:
25:	ssize_t getdirentries64(int, char *, size_t, off64_t *);

File ../sysdeps/unix/sysv/linux/getentropy.c:
28:	int getentropy(void *, size_t);

File ../sysdeps/unix/sysv/linux/gethostid.c:
70:	long gethostid(void);
30:	int sethostid(long);

File ../sysdeps/unix/sysv/linux/getipv4sourcefilter.c:
31:	int getipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t *, uint32_t *, struct in_addr *);

File ../sysdeps/unix/sysv/linux/getloadavg.c:
32:	int getloadavg(double *, int);

File ../sysdeps/unix/sysv/linux/getlogin.c:
32:	char *getlogin(void);

File ../sysdeps/unix/sysv/linux/getlogin_r.c:
111:	int __GI___getlogin_r(char *, size_t);
36:	int __getlogin_r_loginuid(char *, size_t);

File ../sysdeps/unix/sysv/linux/getpagesize.c:
26:	int __GI___getpagesize(void);

File ../sysdeps/unix/sysv/linux/getpriority.c:
35:	int __GI___getpriority(enum __priority_which, id_t);

File ../sysdeps/unix/sysv/linux/getpt.c:
87:	int __getpt(void);
38:	int __posix_openpt(int);

File ../sysdeps/unix/sysv/linux/getrandom.c:
28:	ssize_t __GI___getrandom(void *, size_t, unsigned int);

File ../sysdeps/unix/sysv/linux/getrlimit64.c:
36:	int __GI___getrlimit64(enum __rlimit_resource, struct rlimit64 *);

File ../sysdeps/unix/sysv/linux/getsourcefilter.c:
62:	int __get_sol(int, socklen_t);
92:	int getsourcefilter(int, uint32_t, const struct sockaddr *, socklen_t, uint32_t *, uint32_t *, struct sockaddr_storage *);

File ../sysdeps/unix/sysv/linux/getsysstats.c:
329:	long __GI___get_avphys_pages(void);
126:	int __GI___get_nprocs(void);
236:	int __GI___get_nprocs_conf(void);
318:	long __GI___get_phys_pages(void);
73:	static char *next_line(int, char * const, char **, char **, char * const);

File ../sysdeps/unix/sysv/linux/gettimeofday.c:
41:	static int (*__gettimeofday_ifunc(void))(struct timeval *, void *);
31:	static int __gettimeofday_syscall(struct timeval * restrict, void * restrict);

File ../sysdeps/unix/sysv/linux/if_index.c:
72:	void __GI___if_freenameindex(struct if_nameindex *);
34:	unsigned int __GI___if_nametoindex(const char *);
218:	char *__if_indextoname(unsigned int, char *);
203:	struct if_nameindex *__if_nameindex(void);

File ../sysdeps/unix/sysv/linux/ifaddrs.c:
849:	void __GI___freeifaddrs(struct ifaddrs *);
833:	int __GI___getifaddrs(struct ifaddrs **);
244:	void __netlink_close(struct netlink_handle *);
74:	void __netlink_free_handle(struct netlink_handle *);
254:	int __netlink_open(struct netlink_handle *);
126:	int __netlink_request(struct netlink_handle *, int);
317:	static int getifaddrs_internal(struct ifaddrs **);

File ../sysdeps/unix/sysv/linux/ifreq.c:
23:	void __ifreq(struct ifreq **, int *, int);

File ../sysdeps/unix/sysv/linux/internal_statvfs.c:
48:	void __internal_statvfs(const char *, struct statvfs *, struct statfs *, int);

File ../sysdeps/unix/sysv/linux/lseek64.c:
27:	off64_t __lseek64(int, off64_t, int);

File ../sysdeps/unix/sysv/linux/lutimes.c:
28:	int lutimes(const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/mlock2.c:
23:	int mlock2(const void *, size_t, unsigned int);

File ../sysdeps/unix/sysv/linux/mmap64.c:
47:	void *__GI___mmap64(void *, size_t, int, int, int, off64_t);
47:	void *__mmap64(void *, size_t, int, int, int, off64_t);

File ../sysdeps/unix/sysv/linux/mq_close.c:
27:	int mq_close(mqd_t);

File ../sysdeps/unix/sysv/linux/mq_getattr.c:
27:	int mq_getattr(mqd_t, struct mq_attr *);

File ../sysdeps/unix/sysv/linux/mq_notify.c:
221:	int mq_notify(mqd_t, const struct sigevent *);
76:	static int change_sigmask(int, sigset_t *);
114:	static void *helper_thread(void *);
153:	static void init_mq_netlink(void);
86:	static void *notification_function(void *);
146:	static void reset_once(void);

File ../sysdeps/unix/sysv/linux/mq_open.c:
35:	mqd_t __mq_open(const char *, int, ...);
57:	mqd_t __mq_open_2(const char *, int);

File ../sysdeps/unix/sysv/linux/mq_receive.c:
28:	ssize_t mq_receive(mqd_t, char *, size_t, unsigned int *);

File ../sysdeps/unix/sysv/linux/mq_send.c:
27:	int mq_send(mqd_t, const char *, size_t, unsigned int);

File ../sysdeps/unix/sysv/linux/mq_timedreceive.c:
25:	ssize_t __GI___mq_timedreceive(mqd_t, char * restrict, size_t, unsigned int * restrict, const struct timespec * restrict);

File ../sysdeps/unix/sysv/linux/mq_timedsend.c:
25:	int __GI___mq_timedsend(mqd_t, const char *, size_t, unsigned int, const struct timespec *);

File ../sysdeps/unix/sysv/linux/mq_unlink.c:
26:	int mq_unlink(const char *);

File ../sysdeps/unix/sysv/linux/msgctl.c:
46:	int __new_msgctl(int, int, struct msqid_ds *);

File ../sysdeps/unix/sysv/linux/msgget.c:
28:	int msgget(key_t, int);

File ../sysdeps/unix/sysv/linux/msgrcv.c:
24:	ssize_t __libc_msgrcv(int, void *, size_t, long, int);

File ../sysdeps/unix/sysv/linux/msgsnd.c:
24:	int __libc_msgsnd(int, const void *, size_t, int);

File ../sysdeps/unix/sysv/linux/msync.c:
23:	int msync(void *, size_t, int);

File ../sysdeps/unix/sysv/linux/netlink_assert_response.c:
42:	void __GI___netlink_assert_response(int, ssize_t);

File ../sysdeps/unix/sysv/linux/ntp_gettime.c:
30:	int ntp_gettime(struct ntptimeval *);

File ../sysdeps/unix/sysv/linux/ntp_gettimex.c:
26:	int ntp_gettimex(struct ntptimeval *);

File ../sysdeps/unix/sysv/linux/open64.c:
36:	int __libc_open64(const char *, int, ...);

File ../sysdeps/unix/sysv/linux/open64_nocancel.c:
33:	int __GI___open64_nocancel(const char *, int, ...);

File ../sysdeps/unix/sysv/linux/open_by_handle_at.c:
25:	int open_by_handle_at(int, struct file_handle *, int);

File ../sysdeps/unix/sysv/linux/openat64.c:
34:	int __libc_openat64(int, const char *, int, ...);

File ../sysdeps/unix/sysv/linux/openat64_nocancel.c:
32:	int __GI___openat64_nocancel(int, const char *, int, ...);

File ../sysdeps/unix/sysv/linux/opensock.c:
28:	int __opensock(void);

File ../sysdeps/unix/sysv/linux/pathconf.c:
39:	long __pathconf(const char *, int);
280:	long __statfs_chown_restricted(int, const struct statfs *);
196:	long __statfs_filesize_max(int, const struct statfs *);
132:	long __statfs_link_max(int, const struct statfs *, const char *, int);
245:	long __statfs_symlinks(int, const struct statfs *);
64:	static long distinguish_extX(const char *, int, const struct statfs *);

File ../sysdeps/unix/sysv/linux/pause.c:
26:	int __libc_pause(void);

File ../sysdeps/unix/sysv/linux/pkey_mprotect.c:
25:	int pkey_mprotect(void *, size_t, int, int);

File ../sysdeps/unix/sysv/linux/poll.c:
26:	int __GI___poll(struct pollfd *, nfds_t, int);

File ../sysdeps/unix/sysv/linux/posix_fadvise64.c:
41:	int __GI___posix_fadvise64_l64(int, off64_t, off64_t, int);

File ../sysdeps/unix/sysv/linux/posix_fallocate.c:
27:	int posix_fallocate(int, __off_t, __off_t);

File ../sysdeps/unix/sysv/linux/posix_fallocate64.c:
29:	int __GI___posix_fallocate64_l64(int, __off64_t, __off64_t);

File ../sysdeps/unix/sysv/linux/posix_madvise.c:
23:	int posix_madvise(void *, size_t, int);

File ../sysdeps/unix/sysv/linux/ppoll.c:
28:	int __ppoll(struct pollfd *, nfds_t, const struct timespec *, const sigset_t *);

File ../sysdeps/unix/sysv/linux/pread64.c:
27:	ssize_t __libc_pread64(int, void *, size_t, off64_t);

File ../sysdeps/unix/sysv/linux/pread64_nocancel.c:
28:	ssize_t __GI___pread64_nocancel(int, void *, size_t, off64_t);

File ../sysdeps/unix/sysv/linux/preadv64.c:
28:	ssize_t __GI_preadv64(int, const struct iovec *, int, off64_t);

File ../sysdeps/unix/sysv/linux/preadv64v2.c:
27:	ssize_t preadv64v2(int, const struct iovec *, int, off64_t, int);

File ../sysdeps/unix/sysv/linux/prof-freq.c:
25:	int __GI___profile_frequency(void);
25:	int __profile_frequency(void);

File ../sysdeps/unix/sysv/linux/profil-counter.h:
24:	static void __profil_counter(int, siginfo_t *, void *);
24:	static void __profil_counter_uint(int, siginfo_t *, void *);
24:	static void __profil_counter_ushort(int, siginfo_t *, void *);

File ../sysdeps/unix/sysv/linux/pselect.c:
23:	int __pselect(int, fd_set *, fd_set *, fd_set *, const struct timespec *, const sigset_t *);

File ../sysdeps/unix/sysv/linux/pthread_getaffinity.c:
30:	int __pthread_getaffinity_new(pthread_t, size_t, cpu_set_t *);
52:	int __pthread_getaffinity_old(pthread_t, cpu_set_t *);

File ../sysdeps/unix/sysv/linux/pthread_getcpuclockid.c:
27:	int pthread_getcpuclockid(pthread_t, clockid_t *);

File ../sysdeps/unix/sysv/linux/pthread_getname.c:
31:	int pthread_getname_np(pthread_t, char *, size_t);

File ../sysdeps/unix/sysv/linux/pthread_kill.c:
28:	int __pthread_kill(pthread_t, int);

File ../sysdeps/unix/sysv/linux/pthread_setaffinity.c:
27:	int __pthread_setaffinity_new(pthread_t, size_t, const cpu_set_t *);
52:	int __pthread_setaffinity_old(pthread_t, cpu_set_t *);

File ../sysdeps/unix/sysv/linux/pthread_setname.c:
31:	int pthread_setname_np(pthread_t, const char *);

File ../sysdeps/unix/sysv/linux/pthread_sigqueue.c:
29:	int pthread_sigqueue(pthread_t, int, const union sigval);

File ../sysdeps/unix/sysv/linux/ptrace.c:
29:	long ptrace(enum __ptrace_request, ...);

File ../sysdeps/unix/sysv/linux/ptsname.c:
72:	int __ptsname_internal(int, char *, size_t, struct stat64 *);
162:	int __ptsname_r(int, char *, size_t);
65:	char *ptsname(int);

File ../sysdeps/unix/sysv/linux/pwrite64.c:
27:	ssize_t __libc_pwrite64(int, const void *, size_t, off64_t);

File ../sysdeps/unix/sysv/linux/pwritev64.c:
28:	ssize_t __GI_pwritev64(int, const struct iovec *, int, off64_t);

File ../sysdeps/unix/sysv/linux/pwritev64v2.c:
27:	ssize_t pwritev64v2(int, const struct iovec *, int, off64_t, int);

File ../sysdeps/unix/sysv/linux/raise.c:
27:	int __GI_raise(int);
27:	int raise(int);

File ../sysdeps/unix/sysv/linux/read.c:
24:	ssize_t __GI___libc_read(int, void *, size_t);
24:	ssize_t __libc_read(int, void *, size_t);

File ../sysdeps/unix/sysv/linux/read_nocancel.c:
24:	ssize_t __GI___read_nocancel(int, void *, size_t);

File ../sysdeps/unix/sysv/linux/readahead.c:
24:	ssize_t __readahead(int, off64_t, size_t);

File ../sysdeps/unix/sysv/linux/readonly-area.c:
30:	int __readonly_area(const char *, size_t);

File ../sysdeps/unix/sysv/linux/readv.c:
24:	ssize_t __GI___readv(int, const struct iovec *, int);

File ../sysdeps/unix/sysv/linux/reboot.c:
26:	int reboot(int);

File ../sysdeps/unix/sysv/linux/recv.c:
23:	ssize_t __libc_recv(int, void *, size_t, int);

File ../sysdeps/unix/sysv/linux/recvfrom.c:
23:	ssize_t __libc_recvfrom(int, void *, size_t, int, __SOCKADDR_ARG, socklen_t *);

File ../sysdeps/unix/sysv/linux/recvmmsg.c:
28:	int recvmmsg(int, struct mmsghdr *, unsigned int, int, struct timespec *);

File ../sysdeps/unix/sysv/linux/recvmsg.c:
25:	ssize_t __libc_recvmsg(int, struct msghdr *, int);

File ../sysdeps/unix/sysv/linux/rename.c:
26:	int rename(const char *, const char *);

File ../sysdeps/unix/sysv/linux/renameat.c:
25:	int __GI___renameat(int, const char *, int, const char *);

File ../sysdeps/unix/sysv/linux/renameat2.c:
24:	int __GI___renameat2(int, const char *, int, const char *, unsigned int);

File ../sysdeps/unix/sysv/linux/scandir64.c:
23:	int __scandir64(const char *, struct dirent64 ***, int (*)(const struct dirent64 *), int (*)(const struct dirent64 **, const struct dirent64 **));

File ../sysdeps/unix/sysv/linux/sched_getaffinity.c:
34:	int __GI___sched_getaffinity_new(pid_t, size_t, cpu_set_t *);
56:	int __sched_getaffinity_old(pid_t, cpu_set_t *);

File ../sysdeps/unix/sysv/linux/sched_getcpu.c:
24:	int sched_getcpu(void);

File ../sysdeps/unix/sysv/linux/select.c:
37:	int __GI___select(int, fd_set *, fd_set *, fd_set *, struct timeval *);

File ../sysdeps/unix/sysv/linux/semctl.c:
57:	int __new_semctl(int, int, int, ...);

File ../sysdeps/unix/sysv/linux/semget.c:
28:	int semget(key_t, int, int);

File ../sysdeps/unix/sysv/linux/semop.c:
27:	int semop(int, struct sembuf *, size_t);

File ../sysdeps/unix/sysv/linux/semtimedop.c:
27:	int __semtimedop(int, struct sembuf *, size_t, const struct timespec *);

File ../sysdeps/unix/sysv/linux/send.c:
23:	ssize_t __libc_send(int, const void *, size_t, int);

File ../sysdeps/unix/sysv/linux/sendmmsg.c:
28:	int __GI___sendmmsg(int, struct mmsghdr *, unsigned int, int);

File ../sysdeps/unix/sysv/linux/sendmsg.c:
25:	ssize_t __libc_sendmsg(int, const struct msghdr *, int);

File ../sysdeps/unix/sysv/linux/sendto.c:
23:	ssize_t __libc_sendto(int, const void *, size_t, int, __CONST_SOCKADDR_ARG, socklen_t);

File ../sysdeps/unix/sysv/linux/setegid.c:
24:	int __GI_setegid(gid_t);

File ../sysdeps/unix/sysv/linux/seteuid.c:
24:	int __GI_seteuid(uid_t);

File ../sysdeps/unix/sysv/linux/setgid.c:
24:	int __setgid(gid_t);

File ../sysdeps/unix/sysv/linux/setgroups.c:
28:	int __GI_setgroups(size_t, const gid_t *);

File ../sysdeps/unix/sysv/linux/setipv4sourcefilter.c:
30:	int setipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t, uint32_t, const struct in_addr *);

File ../sysdeps/unix/sysv/linux/setregid.c:
24:	int __setregid(gid_t, gid_t);

File ../sysdeps/unix/sysv/linux/setresgid.c:
24:	int __GI___setresgid(gid_t, gid_t, gid_t);

File ../sysdeps/unix/sysv/linux/setresuid.c:
24:	int __GI___setresuid(uid_t, uid_t, uid_t);

File ../sysdeps/unix/sysv/linux/setreuid.c:
24:	int __setreuid(uid_t, uid_t);

File ../sysdeps/unix/sysv/linux/setrlimit64.c:
37:	int __setrlimit64(enum __rlimit_resource, const struct rlimit64 *);

File ../sysdeps/unix/sysv/linux/setsourcefilter.c:
31:	int setsourcefilter(int, uint32_t, const struct sockaddr *, socklen_t, uint32_t, uint32_t, const struct sockaddr_storage *);

File ../sysdeps/unix/sysv/linux/settimezone.c:
28:	int __settimezone(const struct timezone *);

File ../sysdeps/unix/sysv/linux/setuid.c:
23:	int __setuid(uid_t);

File ../sysdeps/unix/sysv/linux/shm-directory.c:
121:	const char *__GI___shm_directory(size_t *);
142:	void __shm_directory_freeres(void);
47:	static void where_is_shmfs(void);

File ../sysdeps/unix/sysv/linux/shmat.c:
29:	void *shmat(int, const void *, int);

File ../sysdeps/unix/sysv/linux/shmctl.c:
48:	int __new_shmctl(int, int, struct shmid_ds *);

File ../sysdeps/unix/sysv/linux/shmdt.c:
28:	int shmdt(const void *);

File ../sysdeps/unix/sysv/linux/shmget.c:
28:	int shmget(key_t, size_t, int);

File ../sysdeps/unix/sysv/linux/sigaction.c:
42:	int __GI___libc_sigaction(int, const struct sigaction *, struct sigaction *);
42:	int __libc_sigaction(int, const struct sigaction *, struct sigaction *);

File ../sysdeps/unix/sysv/linux/signalfd.c:
25:	int signalfd(int, const sigset_t *, int);

File ../sysdeps/unix/sysv/linux/sigpending.c:
29:	int sigpending(sigset_t *);

File ../sysdeps/unix/sysv/linux/sigprocmask.c:
23:	int __GI___sigprocmask(int, const sigset_t *, sigset_t *);

File ../sysdeps/unix/sysv/linux/sigqueue.c:
26:	int __sigqueue(pid_t, int, const union sigval);

File ../sysdeps/unix/sysv/linux/sigstack.c:
27:	int sigstack(struct sigstack *, struct sigstack *);

File ../sysdeps/unix/sysv/linux/sigsuspend.c:
24:	int __GI___sigsuspend(const sigset_t *);
24:	int __sigsuspend(const sigset_t *);

File ../sysdeps/unix/sysv/linux/sigtimedwait.c:
24:	int __GI___sigtimedwait(const sigset_t *, siginfo_t *, const struct timespec *);

File ../sysdeps/unix/sysv/linux/sigwait.c:
23:	int __GI___sigwait(const sigset_t *, int *);
23:	int __sigwait(const sigset_t *, int *);

File ../sysdeps/unix/sysv/linux/sigwaitinfo.c:
23:	int __GI___sigwaitinfo(const sigset_t *, siginfo_t *);

File ../sysdeps/unix/sysv/linux/spawni.c:
424:	int __spawni(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *, int);
121:	static int __spawni_child(void *);
312:	static int __spawnix(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *, int, int (*)(const char *, char * const *, char * const *));

File ../sysdeps/unix/sysv/linux/speed.c:
77:	int __GI_cfsetispeed(struct termios *, speed_t);
55:	int __GI_cfsetospeed(struct termios *, speed_t);
47:	speed_t cfgetispeed(const struct termios *);
37:	speed_t cfgetospeed(const struct termios *);

File ../sysdeps/unix/sysv/linux/splice.c:
23:	ssize_t splice(int, loff_t *, int, loff_t *, size_t, unsigned int);

File ../sysdeps/unix/sysv/linux/statx.c:
25:	int statx(int, const char *, int, unsigned int, struct statx *);

File ../sysdeps/unix/sysv/linux/sync_file_range.c:
23:	int sync_file_range(int, __off64_t, __off64_t, unsigned int);

File ../sysdeps/unix/sysv/linux/sysctl.c:
26:	int __sysctl(int *, int, void *, size_t *, void *, size_t);

File ../sysdeps/unix/sysv/linux/tcdrain.c:
25:	int __libc_tcdrain(int);

File ../sysdeps/unix/sysv/linux/tcflow.c:
25:	int tcflow(int, int);

File ../sysdeps/unix/sysv/linux/tcflush.c:
25:	int tcflush(int, int);

File ../sysdeps/unix/sysv/linux/tcgetattr.c:
33:	int __GI___tcgetattr(int, struct termios *);

File ../sysdeps/unix/sysv/linux/tcsendbrk.c:
26:	int tcsendbreak(int, int);

File ../sysdeps/unix/sysv/linux/tcsetattr.c:
44:	int __tcsetattr(int, int, const struct termios *);

File ../sysdeps/unix/sysv/linux/tee.c:
23:	ssize_t tee(int, int, size_t, unsigned int);

File ../sysdeps/unix/sysv/linux/time.c:
38:	static time_t (*time_ifunc(void))(time_t *);
30:	static time_t time_syscall(time_t *);

File ../sysdeps/unix/sysv/linux/timer_create.c:
38:	int __timer_create_new(clockid_t, struct sigevent *, timer_t *);

File ../sysdeps/unix/sysv/linux/timer_delete.c:
32:	int __timer_delete_new(timer_t);

File ../sysdeps/unix/sysv/linux/timer_getoverr.c:
31:	int __timer_getoverrun_new(timer_t);

File ../sysdeps/unix/sysv/linux/timer_routines.c:
154:	void __start_helper_thread(void);
145:	static void reset_helper_control(void);
70:	static void *timer_helper_thread(void *);
43:	static void *timer_sigev_thread(void *);

File ../sysdeps/unix/sysv/linux/times.c:
24:	clock_t __times(struct tms *);

File ../sysdeps/unix/sysv/linux/truncate64.c:
28:	int __truncate64(const char *, off64_t);

File ../sysdeps/unix/sysv/linux/ttyname.c:
112:	char *ttyname(int);
45:	static char *getttyname(const char *, const struct stat64 *, int, int *);

File ../sysdeps/unix/sysv/linux/ttyname_r.c:
93:	int __ttyname_r(int, char *, size_t);
39:	static int getttyname_r(char *, size_t, const struct stat64 *, int, int *);

File ../sysdeps/unix/sysv/linux/umount.c:
25:	long __umount(const char *);

File ../sysdeps/unix/sysv/linux/unlockpt.c:
28:	int unlockpt(int);

File ../sysdeps/unix/sysv/linux/ustat.c:
48:	int __old_ustat(dev_t, struct ustat *);

File ../sysdeps/unix/sysv/linux/utimensat.c:
28:	int __GI___utimensat64_helper(int, const char *, const struct timespec *, int);
69:	int __utimensat(int, const char *, const struct timespec *, int);

File ../sysdeps/unix/sysv/linux/utimes.c:
31:	int __utimes(const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/versionsort64.c:
24:	int __versionsort64(const struct dirent64 **, const struct dirent64 **);

File ../sysdeps/unix/sysv/linux/vmsplice.c:
24:	ssize_t vmsplice(int, const struct iovec *, size_t, unsigned int);

File ../sysdeps/unix/sysv/linux/wait4.c:
24:	pid_t __GI___wait4(pid_t, int *, int, struct rusage *);

File ../sysdeps/unix/sysv/linux/waitid.c:
25:	int __waitid(idtype_t, id_t, siginfo_t *, int);

File ../sysdeps/unix/sysv/linux/wordsize-64/../../../../pthread/aio_read.c:
26:	int aio_read(struct aiocb *);

File ../sysdeps/unix/sysv/linux/wordsize-64/../../../../pthread/aio_write.c:
26:	int aio_write(struct aiocb *);

File ../sysdeps/unix/sysv/linux/wordsize-64/../../../../pthread/lio_listio.c:
219:	int __lio_listio_21(int, struct aiocb * const *, int, struct sigevent *);
236:	int __lio_listio_item_notify(int, struct aiocb * const *, int, struct sigevent *);
58:	static int lio_listio_internal(int, struct aiocb * const *, int, struct sigevent *);

File ../sysdeps/unix/sysv/linux/wordsize-64/../fstatvfs.c:
25:	int __fstatvfs(int, struct statvfs *);

File ../sysdeps/unix/sysv/linux/wordsize-64/../statvfs.c:
25:	int __statvfs(const char *, struct statvfs *);

File ../sysdeps/unix/sysv/linux/wordsize-64/fxstat.c:
32:	int __GI___fxstat(int, int, struct stat *);

File ../sysdeps/unix/sysv/linux/wordsize-64/fxstatat.c:
35:	int __GI___fxstatat(int, int, const char *, struct stat *, int);
35:	int __fxstatat(int, int, const char *, struct stat *, int);

File ../sysdeps/unix/sysv/linux/wordsize-64/lxstat.c:
32:	int __GI___lxstat(int, const char *, struct stat *);

File ../sysdeps/unix/sysv/linux/wordsize-64/xstat.c:
32:	int __GI___xstat(int, const char *, struct stat *);

File ../sysdeps/unix/sysv/linux/write.c:
24:	ssize_t __GI___libc_write(int, const void *, size_t);
24:	ssize_t __libc_write(int, const void *, size_t);

File ../sysdeps/unix/sysv/linux/write_nocancel.c:
24:	ssize_t __GI___write_nocancel(int, const void *, size_t);

File ../sysdeps/unix/sysv/linux/writev.c:
24:	ssize_t __GI___writev(int, const struct iovec *, int);

File ../sysdeps/unix/sysv/linux/x86/elision-conf.c:
74:	void _dl_tunable_set_elision_enable(tunable_val_t *);
95:	void _dl_tunable_set_elision_retry_try_xbegin(tunable_val_t *);
93:	void _dl_tunable_set_elision_skip_lock_busy(tunable_val_t *);
94:	void _dl_tunable_set_elision_skip_lock_internal_abort(tunable_val_t *);
96:	void _dl_tunable_set_elision_skip_trylock_internal_abort(tunable_val_t *);
102:	static void elision_init(int, char **, char **);

File ../sysdeps/unix/sysv/linux/x86/elision-lock.c:
45:	int __lll_clocklock_elision(int *, short *, clockid_t, const struct timespec *, int);
45:	int __lll_lock_elision(int *, short *, int);

File ../sysdeps/unix/sysv/linux/x86/elision-trylock.c:
31:	int __lll_trylock_elision(int *, short *);

File ../sysdeps/unix/sysv/linux/x86/elision-unlock.c:
24:	int __lll_unlock_elision(int *, int);

File ../sysdeps/unix/sysv/linux/x86/pkey_get.c:
23:	int pkey_get(int);

File ../sysdeps/unix/sysv/linux/x86/pkey_set.c:
23:	int pkey_set(int, unsigned int);

File ../sysdeps/unix/sysv/linux/x86/sysconf.c:
31:	long __GI___sysconf(int);

File ../sysdeps/unix/sysv/linux/x86_64/../sched_setaffinity.c:
33:	int __GI___sched_setaffinity_new(pid_t, size_t, const cpu_set_t *);
52:	int __sched_setaffinity_old(pid_t, const cpu_set_t *);

File ../sysdeps/unix/sysv/linux/x86_64/brk.c:
27:	int __brk(void *);

File ../sysdeps/unix/sysv/linux/x86_64/makecontext.c:
57:	void __makecontext(ucontext_t *, void (*)(void), int, ...);

File ../sysdeps/unix/sysv/linux/x86_64/timer_create.c:
36:	int __timer_create_old(clockid_t, struct sigevent *, int *);

File ../sysdeps/unix/sysv/linux/x86_64/timer_delete.c:
32:	int __timer_delete_old(int);

File ../sysdeps/unix/sysv/linux/x86_64/timer_getoverr.c:
33:	int __timer_getoverrun_old(int);

File ../sysdeps/unix/sysv/linux/x86_64/timer_gettime.c:
25:	int __timer_gettime_new(timer_t, struct itimerspec *);
36:	int __timer_gettime_old(int, struct itimerspec *);

File ../sysdeps/unix/sysv/linux/x86_64/timer_settime.c:
25:	int __timer_settime_new(timer_t, int, const struct itimerspec *, struct itimerspec *);
38:	int __timer_settime_old(int, int, const struct itimerspec *, struct itimerspec *);

File ../sysdeps/unix/sysv/linux/xmknod.c:
31:	int __GI___xmknod(int, const char *, mode_t, dev_t *);

File ../sysdeps/unix/sysv/linux/xmknodat.c:
34:	int __GI___xmknodat(int, int, const char *, mode_t, dev_t *);

File ../sysdeps/wordsize-64/../../io/fts.c:
518:	FTSENT *fts_children(FTS *, int);
257:	int fts_close(FTS *);
119:	FTS *fts_open(char * const *, int, int (*)(const FTSENT **, const FTSENT **));
310:	FTSENT *fts_read(FTS *);
506:	int fts_set(FTS *, FTSENT *, int);
608:	static FTSENT *fts_build(FTS *, int);
950:	static FTSENT *fts_sort(FTS *, FTSENT *, int);
870:	static u_short fts_stat(FTSENT *, int, FTS *);

File ../sysdeps/wordsize-64/../../io/ftw.c:
835:	int __new_nftw(const char *, __nftw_func_t, int, int);
856:	int __old_nftw(const char *, __nftw_func_t, int, int);
817:	int ftw(const char *, __ftw_func_t, int);
479:	static int ftw_dir(struct ftw_data *, struct stat *, struct dir_data *);
629:	static int ftw_startup(const char *, int, void *, int, int);
227:	static int object_compare(const void *, const void *);
378:	static int process_entry(struct ftw_data *, struct dir_data *, const char *, size_t, int);

File ../sysdeps/wordsize-64/strtoimax.c:
24:	intmax_t strtoimax(const char * restrict, char ** restrict, int);

File ../sysdeps/wordsize-64/strtoumax.c:
24:	uintmax_t __GI_strtoumax(const char * restrict, char ** restrict, int);

File ../sysdeps/wordsize-64/wcstoimax.c:
24:	intmax_t wcstoimax(const wchar_t * restrict, wchar_t ** restrict, int);

File ../sysdeps/wordsize-64/wcstoumax.c:
24:	uintmax_t wcstoumax(const wchar_t * restrict, wchar_t ** restrict, int);

File ../sysdeps/x86/cacheinfo.c:
442:	long __cache_sysconf(int);
323:	static long handle_amd(int);
259:	static long handle_intel(int, const struct cpu_features *);
487:	static void init_cacheinfo(void);
128:	static long intel_check_word(int, unsigned int, _Bool *, _Bool *, const struct cpu_features *, const struct cpu_features *);

File ../sysdeps/x86/cpu-features.c:
71:	static void get_common_indices(unsigned int *, unsigned int *, unsigned int *, unsigned int *, struct cpu_features *);

File ../sysdeps/x86/cpu-tunables.c:
111:	void _dl_tunable_set_hwcaps(tunable_val_t *);
343:	void _dl_tunable_set_x86_ibt(tunable_val_t *);
365:	void _dl_tunable_set_x86_shstk(tunable_val_t *);

File ../sysdeps/x86/dl-cet.c:
342:	void _dl_cet_check(struct link_map *, const char *);
329:	void _dl_cet_open_check(struct link_map *);
96:	static void dl_cet_check(struct link_map *, const char *);

File ../sysdeps/x86/dl-get-cpu-features.c:
24:	const struct cpu_features *__get_cpu_features(void);

File ../sysdeps/x86/dl-prop.h:
151:	static int _dl_process_pt_note(struct link_map *, const Elf64_Phdr *, int, struct filebuf *);

File ../sysdeps/x86/fpu/e_sqrtf128.c:
34:	_Float128 __ieee754_sqrtf128(_Float128);

File ../sysdeps/x86/fpu/powl_helper.c:
73:	long double __GI___powl_helper(long double, long double);

File ../sysdeps/x86/longjmp.c:
31:	void __libc_longjmp(struct __jmp_buf_tag *, int);

File ../sysdeps/x86/nptl/pt-longjmp.c:
57:	static void longjmp_compat(struct __jmp_buf_tag *, int);

File ../sysdeps/x86_64/../i386/ldbl2mpn.c:
31:	mp_size_t __mpn_extract_long_double(mp_ptr, mp_size_t, int *, int *, long double);

File ../sysdeps/x86_64/dl-tls.c:
39:	void *__tls_get_addr_slow(tls_index *);

File ../sysdeps/x86_64/ffs.c:
26:	int __GI___ffs(int);

File ../sysdeps/x86_64/ffsll.c:
27:	int ffsll(long long);

File ../sysdeps/x86_64/fpu/e_sqrt.c:
24:	double __ieee754_sqrt(double);

File ../sysdeps/x86_64/fpu/e_sqrtf.c:
24:	float __ieee754_sqrtf(float);

File ../sysdeps/x86_64/fpu/fclrexcpt.c:
22:	int __GI_feclearexcept(int);

File ../sysdeps/x86_64/fpu/fedisblxcpt.c:
23:	int fedisableexcept(int);

File ../sysdeps/x86_64/fpu/feenablxcpt.c:
23:	int feenableexcept(int);

File ../sysdeps/x86_64/fpu/fegetenv.c:
22:	int __GI___fegetenv(fenv_t *);

File ../sysdeps/x86_64/fpu/fegetexcept.c:
23:	int fegetexcept(void);

File ../sysdeps/x86_64/fpu/fegetmode.c:
23:	int fegetmode(femode_t *);

File ../sysdeps/x86_64/fpu/fegetround.c:
23:	int __GI___fegetround(void);

File ../sysdeps/x86_64/fpu/feholdexcpt.c:
22:	int __GI___feholdexcept(fenv_t *);

File ../sysdeps/x86_64/fpu/fesetenv.c:
30:	int __GI___fesetenv(const fenv_t *);

File ../sysdeps/x86_64/fpu/fesetexcept.c:
22:	int fesetexcept(int);

File ../sysdeps/x86_64/fpu/fesetmode.c:
27:	int fesetmode(const femode_t *);

File ../sysdeps/x86_64/fpu/fesetround.c:
22:	int __GI___fesetround(int);

File ../sysdeps/x86_64/fpu/feupdateenv.c:
23:	int __GI___feupdateenv(const fenv_t *);

File ../sysdeps/x86_64/fpu/fgetexcptflg.c:
22:	int fegetexceptflag(fexcept_t *, int);

File ../sysdeps/x86_64/fpu/fraiseexcpt.c:
23:	int __GI___feraiseexcept(int);

File ../sysdeps/x86_64/fpu/fsetexcptflg.c:
23:	int fesetexceptflag(const fexcept_t *, int);

File ../sysdeps/x86_64/fpu/ftestexcept.c:
22:	int __GI_fetestexcept(int);

File ../sysdeps/x86_64/fpu/multiarch/e_asin.c:
35:	static double (*__ieee754_acos_ifunc(void))(double);
27:	static double (*__ieee754_asin_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/e_atan2.c:
26:	static double (*__ieee754_atan2_ifunc(void))(double, double);

File ../sysdeps/x86_64/fpu/multiarch/e_exp.c:
27:	static double (*__ieee754_exp_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/e_exp2f.c:
27:	static float (*__exp2f_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/e_expf.c:
27:	static float (*__expf_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/e_log.c:
27:	static double (*__ieee754_log_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/e_log2f.c:
27:	static float (*__log2f_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/e_logf.c:
27:	static float (*__logf_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/e_pow.c:
27:	static double (*__ieee754_pow_ifunc(void))(double, double);

File ../sysdeps/x86_64/fpu/multiarch/e_powf.c:
30:	static float (*__powf_ifunc(void))(float, float);

File ../sysdeps/x86_64/fpu/multiarch/s_atan.c:
26:	static double (*__atan_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/s_ceil.c:
31:	static double (*__ceil_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/s_ceilf.c:
31:	static float (*__ceilf_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/s_cosf.c:
26:	static float (*__cosf_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/s_floor.c:
31:	static double (*__floor_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/s_floorf.c:
31:	static float (*__floorf_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/s_fma.c:
29:	static double __fma_fma3(double, double, double);
37:	static double __fma_fma4(double, double, double);
44:	static double (*__fma_ifunc(void))(double, double, double);

File ../sysdeps/x86_64/fpu/multiarch/s_fmaf.c:
28:	static float __fmaf_fma3(float, float, float);
36:	static float __fmaf_fma4(float, float, float);
43:	static float (*__fmaf_ifunc(void))(float, float, float);

File ../sysdeps/x86_64/fpu/multiarch/s_nearbyint.c:
30:	static double (*__nearbyint_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/s_nearbyintf.c:
30:	static float (*__nearbyintf_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/s_rint.c:
31:	static double (*__rint_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/s_rintf.c:
31:	static float (*__rintf_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/s_sin.c:
34:	static double (*__cos_ifunc(void))(double);
27:	static double (*__sin_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/s_sincosf.c:
26:	static void (*__sincosf_ifunc(void))(float, float *, float *);

File ../sysdeps/x86_64/fpu/multiarch/s_sinf.c:
26:	static float (*__sinf_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/multiarch/s_tan.c:
26:	static double (*__tan_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/s_trunc.c:
31:	static double (*__trunc_ifunc(void))(double);

File ../sysdeps/x86_64/fpu/multiarch/s_truncf.c:
31:	static float (*__truncf_ifunc(void))(float);

File ../sysdeps/x86_64/fpu/s_fabs.c:
23:	double __fabs(double);

File ../sysdeps/x86_64/fpu/s_fabsf.c:
23:	float __fabsf(float);

File ../sysdeps/x86_64/multiarch/ifunc-impl-list.c:
34:	size_t __libc_ifunc_impl_list(const char *, struct libc_ifunc_impl *, size_t);

File ../sysdeps/x86_64/multiarch/memchr.c:
29:	static void *(*memchr_ifunc(void))(const void *, int, size_t);

File ../sysdeps/x86_64/multiarch/memcmp.c:
29:	static int (*memcmp_ifunc(void))(const void *, const void *, size_t);

File ../sysdeps/x86_64/multiarch/memcpy.c:
29:	static void *(*__new_memcpy_ifunc(void))(void * restrict, const void * restrict, size_t);

File ../sysdeps/x86_64/multiarch/memcpy_chk.c:
29:	static void *(*__memcpy_chk_ifunc(void))(void * restrict, const void * restrict, size_t, size_t);

File ../sysdeps/x86_64/multiarch/memmove.c:
29:	static void *(*__libc_memmove_ifunc(void))(void *, const void *, size_t);

File ../sysdeps/x86_64/multiarch/memmove_chk.c:
29:	static void *(*__memmove_chk_ifunc(void))(void *, const void *, size_t, size_t);

File ../sysdeps/x86_64/multiarch/mempcpy.c:
33:	static void *(*__mempcpy_ifunc(void))(void * restrict, const void * restrict, size_t);

File ../sysdeps/x86_64/multiarch/mempcpy_chk.c:
29:	static void *(*__mempcpy_chk_ifunc(void))(void * restrict, const void * restrict, size_t, size_t);

File ../sysdeps/x86_64/multiarch/memrchr.c:
29:	static void *(*__memrchr_ifunc(void))(const void *, int, size_t);

File ../sysdeps/x86_64/multiarch/memset.c:
29:	static void *(*memset_ifunc(void))(void *, int, size_t);

File ../sysdeps/x86_64/multiarch/memset_chk.c:
29:	static void *(*__memset_chk_ifunc(void))(void *, int, size_t, size_t);

File ../sysdeps/x86_64/multiarch/rawmemchr.c:
31:	static void *(*__rawmemchr_ifunc(void))(const void *, int);

File ../sysdeps/x86_64/multiarch/sched_cpucount.c:
35:	static int (*__sched_cpucount_ifunc(void))(size_t, const cpu_set_t *);

File ../sysdeps/x86_64/multiarch/stpcpy.c:
33:	static char *(*__stpcpy_ifunc(void))(char * restrict, const char * restrict);

File ../sysdeps/x86_64/multiarch/stpncpy.c:
31:	static char *(*__stpncpy_ifunc(void))(char * restrict, const char * restrict, size_t);

File ../sysdeps/x86_64/multiarch/strcasecmp.c:
31:	static int (*__strcasecmp_ifunc(void))(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strcasecmp_l.c:
31:	static int (*__strcasecmp_l_ifunc(void))(const char *, const char *, locale_t);

File ../sysdeps/x86_64/multiarch/strcat.c:
29:	static char *(*strcat_ifunc(void))(char * restrict, const char * restrict);

File ../sysdeps/x86_64/multiarch/strchr.c:
49:	static char *(*strchr_ifunc(void))(const char *, int);

File ../sysdeps/x86_64/multiarch/strchrnul.c:
31:	static char *(*__strchrnul_ifunc(void))(const char *, int);

File ../sysdeps/x86_64/multiarch/strcmp.c:
53:	static int (*strcmp_ifunc(void))(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strcpy.c:
29:	static char *(*strcpy_ifunc(void))(char * restrict, const char * restrict);

File ../sysdeps/x86_64/multiarch/strcspn-c.c:
82:	size_t __strcspn_sse42(const char *, const char *);
82:	char *__strpbrk_sse42(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strcspn.c:
29:	static size_t (*strcspn_ifunc(void))(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strlen.c:
29:	static size_t (*strlen_ifunc(void))(const char *);

File ../sysdeps/x86_64/multiarch/strncase.c:
31:	static int (*__strncasecmp_ifunc(void))(const char *, const char *, size_t);

File ../sysdeps/x86_64/multiarch/strncase_l.c:
31:	static int (*__strncasecmp_l_ifunc(void))(const char *, const char *, size_t, locale_t);

File ../sysdeps/x86_64/multiarch/strncat.c:
29:	static char *(*strncat_ifunc(void))(char * restrict, const char * restrict, size_t);

File ../sysdeps/x86_64/multiarch/strncmp.c:
54:	static int (*strncmp_ifunc(void))(const char *, const char *, size_t);

File ../sysdeps/x86_64/multiarch/strncpy.c:
29:	static char *(*strncpy_ifunc(void))(char * restrict, const char * restrict, size_t);

File ../sysdeps/x86_64/multiarch/strnlen.c:
31:	static size_t (*__strnlen_ifunc(void))(const char *, size_t);

File ../sysdeps/x86_64/multiarch/strpbrk.c:
29:	static char *(*strpbrk_ifunc(void))(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strrchr.c:
28:	static char *(*strrchr_ifunc(void))(const char *, int);

File ../sysdeps/x86_64/multiarch/strspn-c.c:
60:	size_t __strspn_sse42(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strspn.c:
29:	static size_t (*strspn_ifunc(void))(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strstr.c:
44:	static char *(*__libc_strstr_ifunc(void))(const char *, const char *);

File ../sysdeps/x86_64/multiarch/wcschr.c:
31:	static wchar_t *(*__wcschr_ifunc(void))(const wchar_t *, wchar_t);

File ../sysdeps/x86_64/multiarch/wcscmp.c:
30:	static int (*__wcscmp_ifunc(void))(const wchar_t *, const wchar_t *);

File ../sysdeps/x86_64/multiarch/wcscpy.c:
43:	static wchar_t *(*__wcscpy_ifunc(void))(wchar_t * restrict, const wchar_t * restrict);

File ../sysdeps/x86_64/multiarch/wcslen.c:
29:	static size_t (*__wcslen_ifunc(void))(const wchar_t *);

File ../sysdeps/x86_64/multiarch/wcsncmp.c:
30:	static int (*wcsncmp_ifunc(void))(const wchar_t *, const wchar_t *, size_t);

File ../sysdeps/x86_64/multiarch/wcsnlen.c:
49:	static size_t (*__wcsnlen_ifunc(void))(const wchar_t *, size_t);

File ../sysdeps/x86_64/multiarch/wcsrchr.c:
28:	static wchar_t *(*wcsrchr_ifunc(void))(const wchar_t *, wchar_t);

File ../sysdeps/x86_64/multiarch/wmemchr.c:
31:	static wchar_t *(*__wmemchr_ifunc(void))(const wchar_t *, wchar_t, size_t);

File ../sysdeps/x86_64/multiarch/wmemcmp.c:
29:	static int (*__wmemcmp_ifunc(void))(const wchar_t *, const wchar_t *, size_t);

File ../sysdeps/x86_64/multiarch/wmemset.c:
31:	static wchar_t *(*__wmemset_ifunc(void))(wchar_t *, wchar_t, size_t);

File ../sysdeps/x86_64/multiarch/wmemset_chk.c:
29:	static wchar_t *(*__wmemset_chk_ifunc(void))(wchar_t *, wchar_t, size_t, size_t);

File ../sysdeps/x86_64/tlsdesc.c:
116:	void _dl_tlsdesc_resolve_hold_fixup(volatile struct tlsdesc *, void *);
36:	void _dl_tlsdesc_resolve_rela_fixup(volatile struct tlsdesc *, struct link_map *);
137:	void _dl_unmap(struct link_map *);

File ../wcsmbs/wcscpy.c:
29:	wchar_t *__wcscpy_sse2(wchar_t *, const wchar_t *);

File ../wcsmbs/wcsncmp.c:
30:	int __wcsncmp_sse2(const wchar_t *, const wchar_t *, size_t);

File ../wcsmbs/wcsnlen.c:
27:	size_t __wcsnlen_sse2(const wchar_t *, size_t);

File ../wcsmbs/wmemcmp.c:
26:	int __wmemcmp_sse2(const wchar_t *, const wchar_t *, size_t);

File ./cabs_template.c:
24:	double __cabs(complex double);
24:	float __cabsf(complex float);
24:	_Float128 __cabsf128(complex _Float128);
24:	long double __cabsl(complex long double);

File ./carg_template.c:
24:	double __carg(complex double);
24:	float __cargf(complex float);
24:	_Float128 __cargf128(complex _Float128);
24:	long double __cargl(complex long double);

File ./cimag_template.c:
23:	double __cimag(complex double);
23:	float __cimagf(complex float);
23:	_Float128 __cimagf128(complex _Float128);
23:	long double __cimagl(complex long double);

File ./conj_template.c:
23:	complex double __conj(complex double);
23:	complex float __conjf(complex float);
23:	complex _Float128 __conjf128(complex _Float128);
23:	complex long double __conjl(complex long double);

File ./creal_template.c:
23:	double __creal(complex double);
23:	float __crealf(complex float);
23:	_Float128 __crealf128(complex _Float128);
23:	long double __creall(complex long double);

File ./e_exp2_template.c:
25:	_Float128 __ieee754_exp2f128(_Float128);

File ./efgcvt-template.c:
63:	char *__ecvt(double, int, int *, int *);
44:	char *__fcvt(double, int, int *, int *);
71:	char *__gcvt(double, int, char *);
63:	char *__qecvt(long double, int, int *, int *);
44:	char *__qfcvt(long double, int, int *, int *);
71:	char *__qgcvt(long double, int, char *);

File ./efgcvt_r-template.c:
132:	int __GI___ecvt_r(double, int, int *, int *, char *, size_t);
37:	int __GI___fcvt_r(double, int, int *, int *, char *, size_t);
132:	int __GI___qecvt_r(long double, int, int *, int *, char *, size_t);
37:	int __GI___qfcvt_r(long double, int, int *, int *, char *, size_t);

File ./k_casinh_template.c:
32:	complex double __kernel_casinh(complex double, int);
32:	complex float __kernel_casinhf(complex float, int);
32:	complex _Float128 __kernel_casinhf128(complex _Float128, int);
32:	complex long double __kernel_casinhl(complex long double, int);

File ./lowlevellock.c:
26:	void __lll_lock_wait_private(int *);

File ./s_cacos_template.c:
24:	complex double __cacos(complex double);
24:	complex float __cacosf(complex float);
24:	complex _Float128 __cacosf128(complex _Float128);
24:	complex long double __cacosl(complex long double);

File ./s_cacosh_template.c:
25:	complex double __cacosh(complex double);
25:	complex float __cacoshf(complex float);
25:	complex _Float128 __cacoshf128(complex _Float128);
25:	complex long double __cacoshl(complex long double);

File ./s_canonicalize_template.c:
22:	int __canonicalize(double *, const double *);
22:	int __canonicalizef(float *, const float *);
22:	int __canonicalizef128(_Float128 *, const _Float128 *);
22:	int __canonicalizel(long double *, const long double *);

File ./s_casin_template.c:
25:	complex double __casin(complex double);
25:	complex float __casinf(complex float);
25:	complex _Float128 __casinf128(complex _Float128);
25:	complex long double __casinl(complex long double);

File ./s_casinh_template.c:
24:	complex double __casinh(complex double);
24:	complex float __casinhf(complex float);
24:	complex _Float128 __casinhf128(complex _Float128);
24:	complex long double __casinhl(complex long double);

File ./s_catan_template.c:
27:	complex double __catan(complex double);
27:	complex float __catanf(complex float);
27:	complex _Float128 __catanf128(complex _Float128);
27:	complex long double __catanl(complex long double);

File ./s_catanh_template.c:
27:	complex double __catanh(complex double);
27:	complex float __catanhf(complex float);
27:	complex _Float128 __catanhf128(complex _Float128);
27:	complex long double __catanhl(complex long double);

File ./s_ccos_template.c:
25:	complex double __ccos(complex double);
25:	complex float __ccosf(complex float);
25:	complex _Float128 __ccosf128(complex _Float128);
25:	complex long double __ccosl(complex long double);

File ./s_ccosh_template.c:
28:	complex double __ccosh(complex double);
28:	complex float __ccoshf(complex float);
28:	complex _Float128 __ccoshf128(complex _Float128);
28:	complex long double __ccoshl(complex long double);

File ./s_cexp_template.c:
28:	complex double __cexp(complex double);
28:	complex float __cexpf(complex float);
28:	complex _Float128 __cexpf128(complex _Float128);
28:	complex long double __cexpl(complex long double);

File ./s_clog10_template.c:
33:	complex double __clog10(complex double);
33:	complex float __clog10f(complex float);
33:	complex _Float128 __clog10f128(complex _Float128);
33:	complex long double __clog10l(complex long double);

File ./s_clog_template.c:
27:	complex double __clog(complex double);
27:	complex float __clogf(complex float);
27:	complex _Float128 __clogf128(complex _Float128);
27:	complex long double __clogl(complex long double);

File ./s_cpow_template.c:
24:	complex double __cpow(complex double, complex double);
24:	complex float __cpowf(complex float, complex float);
24:	complex _Float128 __cpowf128(complex _Float128, complex _Float128);
24:	complex long double __cpowl(complex long double, complex long double);

File ./s_cproj_template.c:
25:	complex double __cproj(complex double);
25:	complex float __cprojf(complex float);
25:	complex _Float128 __cprojf128(complex _Float128);
25:	complex long double __cprojl(complex long double);

File ./s_csin_template.c:
28:	complex double __csin(complex double);
28:	complex float __csinf(complex float);
28:	complex _Float128 __csinf128(complex _Float128);
28:	complex long double __csinl(complex long double);

File ./s_csinh_template.c:
28:	complex double __csinh(complex double);
28:	complex float __csinhf(complex float);
28:	complex _Float128 __csinhf128(complex _Float128);
28:	complex long double __csinhl(complex long double);

File ./s_csqrt_template.c:
28:	complex double __csqrt(complex double);
28:	complex float __csqrtf(complex float);
28:	complex _Float128 __csqrtf128(complex _Float128);
28:	complex long double __csqrtl(complex long double);

File ./s_ctan_template.c:
28:	complex double __ctan(complex double);
28:	complex float __ctanf(complex float);
28:	complex _Float128 __ctanf128(complex _Float128);
28:	complex long double __ctanl(complex long double);

File ./s_ctanh_template.c:
28:	complex double __ctanh(complex double);
28:	complex float __ctanhf(complex float);
28:	complex _Float128 __ctanhf128(complex _Float128);
28:	complex long double __ctanhl(complex long double);

File ./s_fdim_template.c:
25:	double __fdim(double, double);
25:	float __fdimf(float, float);
25:	_Float128 __fdimf128(_Float128, _Float128);
25:	long double __fdiml(long double, long double);

File ./s_fmax_template.c:
23:	_Float128 __fmaxf128(_Float128, _Float128);

File ./s_fmaxmag_template.c:
22:	double __fmaxmag(double, double);
22:	float __fmaxmagf(float, float);
22:	_Float128 __fmaxmagf128(_Float128, _Float128);
22:	long double __fmaxmagl(long double, long double);

File ./s_fmin_template.c:
24:	_Float128 __fminf128(_Float128, _Float128);

File ./s_fminmag_template.c:
22:	double __fminmag(double, double);
22:	float __fminmagf(float, float);
22:	_Float128 __fminmagf128(_Float128, _Float128);
22:	long double __fminmagl(long double, long double);

File ./s_iseqsig_template.c:
26:	int __iseqsig(double, double);
26:	int __iseqsigf(float, float);
26:	int __iseqsigf128(_Float128, _Float128);
26:	int __iseqsigl(long double, long double);

File ./s_ldexp_template.c:
21:	double __ldexp(double, int);
21:	float __ldexpf(float, int);
21:	_Float128 __ldexpf128(_Float128, int);
21:	long double __ldexpl(long double, int);

File ./s_nan_template.c:
28:	double __nan(const char *);
28:	float __nanf(const char *);
28:	_Float128 __nanf128(const char *);
28:	long double __nanl(const char *);

File ./s_nextdown_template.c:
23:	double __nextdown(double);
23:	float __nextdownf(float);
23:	_Float128 __nextdownf128(_Float128);
23:	long double __nextdownl(long double);

File ./s_significand_template.c:
29:	double __significand(double);
29:	float __significandf(float);

File ./scandir-tail-common.c:
23:	int __scandir64_tail(DIR *, struct dirent64 ***, int (*)(const struct dirent64 *), int (*)(const struct dirent64 **, const struct dirent64 **));

File ./statx_generic.c:
42:	static int statx_generic(int, const char *, int, struct statx *, unsigned int);

File ./strtod_nan_main.c:
33:	double __GI___strtod_nan(const char *, char **, char);
33:	float __GI___strtof_nan(const char *, char **, char);
33:	long double __GI___strtold_nan(const char *, char **, char);

File ./tlsdeschtab.h:
82:	void *_dl_make_tlsdesc_dynamic(struct link_map *, size_t);

File ./w_acos_template.c:
30:	_Float128 __acosf128(_Float128);

File ./w_acosh_template.c:
30:	_Float128 __acoshf128(_Float128);

File ./w_asin_template.c:
30:	_Float128 __asinf128(_Float128);

File ./w_atan2_template.c:
29:	_Float128 __atan2f128(_Float128, _Float128);

File ./w_atanh_template.c:
30:	_Float128 __atanhf128(_Float128);

File ./w_cosh_template.c:
30:	_Float128 __coshf128(_Float128);

File ./w_exp10_template.c:
30:	_Float128 __exp10f128(_Float128);

File ./w_exp2_template.c:
30:	_Float128 __exp2f128(_Float128);

File ./w_exp_template.c:
30:	double __GI___exp(double);
30:	_Float128 __GI___expf128(_Float128);

File ./w_fmod_template.c:
30:	_Float128 __fmodf128(_Float128, _Float128);

File ./w_hypot_template.c:
30:	_Float128 __hypotf128(_Float128, _Float128);

File ./w_ilogb_template.c:
27:	int __ilogb(double);
27:	int __ilogbf(float);
27:	int __ilogbf128(_Float128);
27:	int __ilogbl(long double);

File ./w_j0_template.c:
30:	_Float128 __j0f128(_Float128);
37:	_Float128 __y0f128(_Float128);

File ./w_j1_template.c:
30:	_Float128 __j1f128(_Float128);
37:	_Float128 __y1f128(_Float128);

File ./w_jn_template.c:
30:	_Float128 __jnf128(int, _Float128);
37:	_Float128 __ynf128(int, _Float128);

File ./w_lgamma_main.c:
28:	double __lgamma(double);
28:	double __lgamma_compat(double);

File ./w_lgamma_r_template.c:
38:	_Float128 __lgammaf128_r(_Float128, int *);

File ./w_lgamma_template.c:
33:	_Float128 __lgammaf128(_Float128);

File ./w_lgammaf_main.c:
25:	float __lgammaf(float);
25:	float __lgammaf_compat(float);

File ./w_lgammal_main.c:
32:	long double __lgammal(long double);
32:	long double __lgammal_compat(long double);

File ./w_llogb_template.c:
26:	long __llogb(double);
26:	long __llogbf(float);
26:	long __llogbf128(_Float128);
26:	long __llogbl(long double);

File ./w_log10_template.c:
30:	_Float128 __log10f128(_Float128);

File ./w_log1p_template.c:
23:	double __w_log1p(double);
23:	float __w_log1pf(float);
23:	_Float128 __w_log1pf128(_Float128);
23:	long double __w_log1pl(long double);

File ./w_log2_template.c:
30:	_Float128 __log2f128(_Float128);

File ./w_log_template.c:
30:	double __log(double);
30:	_Float128 __logf128(_Float128);

File ./w_pow_template.c:
30:	double __pow(double, double);
30:	_Float128 __powf128(_Float128, _Float128);

File ./w_remainder_template.c:
30:	_Float128 __remainderf128(_Float128, _Float128);

File ./w_scalbln_template.c:
23:	double __w_scalbln(double, long);
23:	float __w_scalblnf(float, long);
23:	_Float128 __w_scalblnf128(_Float128, long);
23:	long double __w_scalblnl(long double, long);

File ./w_sinh_template.c:
30:	_Float128 __sinhf128(_Float128);

File ./w_sqrt_template.c:
31:	_Float128 __sqrtf128(_Float128);

File ./w_tgamma_template.c:
33:	_Float128 __tgammaf128(_Float128);

File ./wcscasecmp.c:
47:	int __GI___wcscasecmp_l(const wchar_t *, const wchar_t *, locale_t);

File ./wcsncase.c:
50:	int __GI___wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t, locale_t);

File /build/glibc-SzIz7B/glibc-2.31/build-tree/amd64-libc/intl/plural.c:
1198:	int __gettextparse(struct parse_args *);

File /build/glibc-SzIz7B/glibc-2.31/build-tree/amd64-libc/misc/stub-syscalls.c:
7:	long _no_syscall(void);

File /usr/lib/gcc/x86_64-linux-gnu/9/include/cpuid.h:
278:	static int __get_cpuid(unsigned int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
223:	static unsigned int __get_cpuid_max(unsigned int, unsigned int *);

File XXX-lookup.c:
56:	int __GI___nss_aliases_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_ethers_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_group_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_gshadow_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_hosts_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_netgroup_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_networks_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_passwd_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_protocols_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_publickey_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_rpc_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_services_lookup2(service_user **, const char *, const char *, void **);
56:	int __GI___nss_shadow_lookup2(service_user **, const char *, const char *, void **);

File __assert.c:
23:	void __assert(const char *, const char *, int);

File __fbufsize.c:
21:	size_t __fbufsize(FILE *);

File __flbf.c:
21:	int __flbf(FILE *);

File __fpending.c:
21:	size_t __fpending(FILE *);

File __fpurge.c:
22:	void __fpurge(FILE *);

File __freadable.c:
21:	int __freadable(FILE *);

File __freading.c:
21:	int __freading(FILE *);

File __fsetlocking.c:
23:	int __GI___fsetlocking(FILE *, int);

File __fwritable.c:
21:	int __fwritable(FILE *);

File __fwriting.c:
21:	int __fwriting(FILE *);

File _i18n_number.h:
28:	static char *_i18n_number_rewrite(char *, char *, char *);

File _itoa.c:
459:	char *_fitoa_word(unsigned long, char *, unsigned int, int);
163:	char *_itoa_word(unsigned long, char *, unsigned int, int);

File _strerror.c:
37:	char *__GI___strerror_r(int, char *, size_t);

File a64l.c:
39:	long a64l(const char *);

File abort.c:
48:	void __GI_abort(void);

File abs.c:
24:	int abs(int);

File acl.c:
413:	Acl *aclconcat(const Acl *, const Acl *);
1530:	Datum aclcontains(FunctionCallInfo);
393:	Acl *aclcopy(const Acl *);
734:	Acl *acldefault(ObjectType, Oid);
847:	Datum acldefault_sql(FunctionCallInfo);
495:	_Bool aclequal(const Acl *, const Acl *);
1723:	Datum aclexplode(FunctionCallInfo);
1510:	Datum aclinsert(FunctionCallInfo);
679:	Datum aclitem_eq(FunctionCallInfo);
551:	Datum aclitemin(FunctionCallInfo);
577:	Datum aclitemout(FunctionCallInfo);
481:	void aclitemsort(Acl *);
1306:	AclMode aclmask(const Acl *, Oid, Oid, AclMode, AclMaskHow);
1458:	int aclmembers(const Acl *, Oid **);
437:	Acl *aclmerge(const Acl *, const Acl *, Oid);
1037:	Acl *aclnewowner(const Acl *, Oid, Oid);
1520:	Datum aclremove(FunctionCallInfo);
916:	Acl *aclupdate(const Acl *, const AclItem *, int, Oid, DropBehavior);
4893:	void check_is_member_of_role(Oid, Oid);
5235:	void check_rolespec_name(const RoleSpec *, const char *);
5094:	Oid get_role_oid(const char *, _Bool);
5112:	Oid get_role_oid_or_public(const char *);
5213:	char *get_rolespec_name(const RoleSpec *);
5128:	Oid get_rolespec_oid(const RoleSpec *, _Bool);
5167:	HeapTuple get_rolespec_tuple(const RoleSpec *);
2340:	Datum has_any_column_privilege_id(FunctionCallInfo);
2396:	Datum has_any_column_privilege_id_id(FunctionCallInfo);
2369:	Datum has_any_column_privilege_id_name(FunctionCallInfo);
2281:	Datum has_any_column_privilege_name(FunctionCallInfo);
2309:	Datum has_any_column_privilege_name_id(FunctionCallInfo);
2251:	Datum has_any_column_privilege_name_name(FunctionCallInfo);
2775:	Datum has_column_privilege_id_attnum(FunctionCallInfo);
2668:	Datum has_column_privilege_id_id_attnum(FunctionCallInfo);
2643:	Datum has_column_privilege_id_id_name(FunctionCallInfo);
2748:	Datum has_column_privilege_id_name(FunctionCallInfo);
2618:	Datum has_column_privilege_id_name_attnum(FunctionCallInfo);
2591:	Datum has_column_privilege_id_name_name(FunctionCallInfo);
2721:	Datum has_column_privilege_name_attnum(FunctionCallInfo);
2566:	Datum has_column_privilege_name_id_attnum(FunctionCallInfo);
2539:	Datum has_column_privilege_name_id_name(FunctionCallInfo);
2692:	Datum has_column_privilege_name_name(FunctionCallInfo);
2512:	Datum has_column_privilege_name_name_attnum(FunctionCallInfo);
2483:	Datum has_column_privilege_name_name_name(FunctionCallInfo);
2972:	Datum has_database_privilege_id(FunctionCallInfo);
3020:	Datum has_database_privilege_id_id(FunctionCallInfo);
2997:	Datum has_database_privilege_id_name(FunctionCallInfo);
2921:	Datum has_database_privilege_name(FunctionCallInfo);
2945:	Datum has_database_privilege_name_id(FunctionCallInfo);
2895:	Datum has_database_privilege_name_name(FunctionCallInfo);
3170:	Datum has_foreign_data_wrapper_privilege_id(FunctionCallInfo);
3218:	Datum has_foreign_data_wrapper_privilege_id_id(FunctionCallInfo);
3195:	Datum has_foreign_data_wrapper_privilege_id_name(FunctionCallInfo);
3119:	Datum has_foreign_data_wrapper_privilege_name(FunctionCallInfo);
3143:	Datum has_foreign_data_wrapper_privilege_name_id(FunctionCallInfo);
3093:	Datum has_foreign_data_wrapper_privilege_name_name(FunctionCallInfo);
3361:	Datum has_function_privilege_id(FunctionCallInfo);
3409:	Datum has_function_privilege_id_id(FunctionCallInfo);
3386:	Datum has_function_privilege_id_name(FunctionCallInfo);
3310:	Datum has_function_privilege_name(FunctionCallInfo);
3334:	Datum has_function_privilege_name_id(FunctionCallInfo);
3284:	Datum has_function_privilege_name_name(FunctionCallInfo);
3561:	Datum has_language_privilege_id(FunctionCallInfo);
3609:	Datum has_language_privilege_id_id(FunctionCallInfo);
3586:	Datum has_language_privilege_id_name(FunctionCallInfo);
3510:	Datum has_language_privilege_name(FunctionCallInfo);
3534:	Datum has_language_privilege_name_id(FunctionCallInfo);
3484:	Datum has_language_privilege_name_name(FunctionCallInfo);
4843:	_Bool has_privs_of_role(Oid, Oid);
3752:	Datum has_schema_privilege_id(FunctionCallInfo);
3800:	Datum has_schema_privilege_id_id(FunctionCallInfo);
3777:	Datum has_schema_privilege_id_name(FunctionCallInfo);
3701:	Datum has_schema_privilege_name(FunctionCallInfo);
3725:	Datum has_schema_privilege_name_id(FunctionCallInfo);
3675:	Datum has_schema_privilege_name_name(FunctionCallInfo);
2130:	Datum has_sequence_privilege_id(FunctionCallInfo);
2189:	Datum has_sequence_privilege_id_id(FunctionCallInfo);
2161:	Datum has_sequence_privilege_id_name(FunctionCallInfo);
2068:	Datum has_sequence_privilege_name(FunctionCallInfo);
2097:	Datum has_sequence_privilege_name_id(FunctionCallInfo);
2037:	Datum has_sequence_privilege_name_name(FunctionCallInfo);
3945:	Datum has_server_privilege_id(FunctionCallInfo);
3993:	Datum has_server_privilege_id_id(FunctionCallInfo);
3970:	Datum has_server_privilege_id_name(FunctionCallInfo);
3894:	Datum has_server_privilege_name(FunctionCallInfo);
3918:	Datum has_server_privilege_name_id(FunctionCallInfo);
3868:	Datum has_server_privilege_name_name(FunctionCallInfo);
1906:	Datum has_table_privilege_id(FunctionCallInfo);
1954:	Datum has_table_privilege_id_id(FunctionCallInfo);
1931:	Datum has_table_privilege_id_name(FunctionCallInfo);
1855:	Datum has_table_privilege_name(FunctionCallInfo);
1879:	Datum has_table_privilege_name_id(FunctionCallInfo);
1829:	Datum has_table_privilege_name_name(FunctionCallInfo);
4136:	Datum has_tablespace_privilege_id(FunctionCallInfo);
4184:	Datum has_tablespace_privilege_id_id(FunctionCallInfo);
4161:	Datum has_tablespace_privilege_id_name(FunctionCallInfo);
4085:	Datum has_tablespace_privilege_name(FunctionCallInfo);
4109:	Datum has_tablespace_privilege_name_id(FunctionCallInfo);
4059:	Datum has_tablespace_privilege_name_name(FunctionCallInfo);
4326:	Datum has_type_privilege_id(FunctionCallInfo);
4374:	Datum has_type_privilege_id_id(FunctionCallInfo);
4351:	Datum has_type_privilege_id_name(FunctionCallInfo);
4275:	Datum has_type_privilege_name(FunctionCallInfo);
4299:	Datum has_type_privilege_name_id(FunctionCallInfo);
4249:	Datum has_type_privilege_name_name(FunctionCallInfo);
699:	Datum hash_aclitem(FunctionCallInfo);
713:	Datum hash_aclitem_extended(FunctionCallInfo);
4648:	void initialize_acl(void);
4931:	_Bool is_admin_of_role(Oid, Oid);
4869:	_Bool is_member_of_role(Oid, Oid);
4909:	_Bool is_member_of_role_nosuper(Oid, Oid);
384:	Acl *make_empty_acl(void);
1552:	Datum makeaclitem(FunctionCallInfo);
4523:	Datum pg_has_role_id(FunctionCallInfo);
4568:	Datum pg_has_role_id_id(FunctionCallInfo);
4545:	Datum pg_has_role_id_name(FunctionCallInfo);
4475:	Datum pg_has_role_name(FunctionCallInfo);
4499:	Datum pg_has_role_name_id(FunctionCallInfo);
4449:	Datum pg_has_role_name_name(FunctionCallInfo);
5018:	void select_best_grantor(Oid, AclMode, const Acl *, Oid, Oid *, AclMode *);
4678:	static void RoleMembershipCacheCallback(Datum, int, uint32);
655:	static int aclitemComparator(const void *, const void *);
644:	static _Bool aclitem_match(const AclItem *, const AclItem *);
1395:	static AclMode aclmask_direct(const Acl *, Oid, Oid, AclMode, AclMaskHow);
232:	static const char *aclparse(const char *, AclItem *);
362:	static Acl *allocacl(int);
526:	static void check_acl(const Acl *);
1140:	static void check_circularity(const Acl *, const AclItem *, Oid);
2443:	static int column_privilege_check(Oid, AttrNumber, Oid, AclMode);
1673:	static const char *convert_aclright_to_string(int);
1625:	static AclMode convert_any_priv_string(text *, const priv_map *);
2803:	static AttrNumber convert_column_name(Oid, text *);
2861:	static AclMode convert_column_priv_string(text *);
3046:	static Oid convert_database_name(text *);
3058:	static AclMode convert_database_priv_string(text *);
3244:	static Oid convert_foreign_data_wrapper_name(text *);
3256:	static AclMode convert_foreign_data_wrapper_priv_string(text *);
3435:	static Oid convert_function_name(text *);
3456:	static AclMode convert_function_priv_string(text *);
3635:	static Oid convert_language_name(text *);
3647:	static AclMode convert_language_priv_string(text *);
1575:	static AclMode convert_priv_string(text *);
4598:	static AclMode convert_role_priv_string(text *);
3826:	static Oid convert_schema_name(text *);
3838:	static AclMode convert_schema_priv_string(text *);
2218:	static AclMode convert_sequence_priv_string(text *);
4019:	static Oid convert_server_name(text *);
4031:	static AclMode convert_server_priv_string(text *);
1980:	static Oid convert_table_name(text *);
1995:	static AclMode convert_table_priv_string(text *);
4210:	static Oid convert_tablespace_name(text *);
4222:	static AclMode convert_tablespace_priv_string(text *);
4400:	static Oid convert_type_name(text *);
4421:	static AclMode convert_type_priv_string(text *);
4978:	static int count_one_bits(AclMode);
131:	static const char *getid(const char *, char *);
4695:	static _Bool has_rolinherit(Oid);
4618:	static AclResult pg_role_aclcheck(Oid, Oid, AclMode);
183:	static void putid(char *, const char *);
1220:	static Acl *recursive_revoke(Acl *, Oid, AclMode, Oid, DropBehavior);
4726:	static List *roles_is_member_of(Oid, enum RoleRecurseType, Oid, _Bool *);

File aclchk.c:
904:	void ExecAlterDefaultPrivilegesStmt(ParseState *, AlterDefaultPrivilegesStmt *);
359:	void ExecuteGrantStmt(GrantStmt *);
1396:	void RemoveRoleFromObjectACL(Oid, Oid, Oid);
3313:	void aclcheck_error(AclResult, ObjectType, const char *);
3596:	void aclcheck_error_col(AclResult, ObjectType, const char *, const char *);
3626:	void aclcheck_error_type(AclResult, Oid);
5526:	Acl *get_user_default_acl(ObjectType, Oid, Oid);
5467:	_Bool has_bypassrls_privilege(Oid);
5448:	_Bool has_createrole_privilege(Oid);
4556:	AclResult pg_attribute_aclcheck(Oid, AttrNumber, Oid, AclMode);
4600:	AclResult pg_attribute_aclcheck_all(Oid, Oid, AclMode, AclMaskHow);
4570:	AclResult pg_attribute_aclcheck_ext(Oid, AttrNumber, Oid, AclMode, _Bool *);
3706:	AclMode pg_attribute_aclmask(Oid, AttrNumber, Oid, AclMode, AclMaskHow);
3720:	AclMode pg_attribute_aclmask_ext(Oid, AttrNumber, Oid, AclMode, AclMaskHow, _Bool *);
4685:	AclResult pg_class_aclcheck(Oid, Oid, AclMode);
4697:	AclResult pg_class_aclcheck_ext(Oid, Oid, AclMode, _Bool *);
3825:	AclMode pg_class_aclmask(Oid, Oid, AclMode, AclMaskHow);
3838:	AclMode pg_class_aclmask_ext(Oid, Oid, AclMode, AclMaskHow, _Bool *);
4823:	_Bool pg_class_ownercheck(Oid, Oid);
5267:	_Bool pg_collation_ownercheck(Oid, Oid);
5293:	_Bool pg_conversion_ownercheck(Oid, Oid);
4711:	AclResult pg_database_aclcheck(Oid, Oid, AclMode);
3956:	AclMode pg_database_aclmask(Oid, Oid, AclMode, AclMaskHow);
5241:	_Bool pg_database_ownercheck(Oid, Oid);
5214:	_Bool pg_event_trigger_ownercheck(Oid, Oid);
5319:	_Bool pg_extension_ownercheck(Oid, Oid);
4786:	AclResult pg_foreign_data_wrapper_aclcheck(Oid, Oid, AclMode);
4349:	AclMode pg_foreign_data_wrapper_aclmask(Oid, Oid, AclMode, AclMaskHow);
5160:	_Bool pg_foreign_data_wrapper_ownercheck(Oid, Oid);
4799:	AclResult pg_foreign_server_aclcheck(Oid, Oid, AclMode);
4411:	AclMode pg_foreign_server_aclmask(Oid, Oid, AclMode, AclMaskHow);
5187:	_Bool pg_foreign_server_ownercheck(Oid, Oid);
4735:	AclResult pg_language_aclcheck(Oid, Oid, AclMode);
4064:	AclMode pg_language_aclmask(Oid, Oid, AclMode, AclMaskHow);
4927:	_Bool pg_language_ownercheck(Oid, Oid);
4747:	AclResult pg_largeobject_aclcheck_snapshot(Oid, Oid, AclMode, Snapshot);
4127:	AclMode pg_largeobject_aclmask_snapshot(Oid, Oid, AclMode, AclMaskHow, Snapshot);
4956:	_Bool pg_largeobject_ownercheck(Oid, Oid);
4761:	AclResult pg_namespace_aclcheck(Oid, Oid, AclMode);
4200:	AclMode pg_namespace_aclmask(Oid, Oid, AclMode, AclMaskHow);
4999:	_Bool pg_namespace_ownercheck(Oid, Oid);
5052:	_Bool pg_opclass_ownercheck(Oid, Oid);
4875:	_Bool pg_oper_ownercheck(Oid, Oid);
5079:	_Bool pg_opfamily_ownercheck(Oid, Oid);
4723:	AclResult pg_proc_aclcheck(Oid, Oid, AclMode);
4010:	AclMode pg_proc_aclmask(Oid, Oid, AclMode, AclMaskHow);
4901:	_Bool pg_proc_ownercheck(Oid, Oid);
5361:	_Bool pg_publication_ownercheck(Oid, Oid);
5413:	_Bool pg_statistics_object_ownercheck(Oid, Oid);
5387:	_Bool pg_subscription_ownercheck(Oid, Oid);
4773:	AclResult pg_tablespace_aclcheck(Oid, Oid, AclMode);
4292:	AclMode pg_tablespace_aclmask(Oid, Oid, AclMode, AclMaskHow);
5025:	_Bool pg_tablespace_ownercheck(Oid, Oid);
5133:	_Bool pg_ts_config_ownercheck(Oid, Oid);
5106:	_Bool pg_ts_dict_ownercheck(Oid, Oid);
4811:	AclResult pg_type_aclcheck(Oid, Oid, AclMode);
4472:	AclMode pg_type_aclmask(Oid, Oid, AclMode, AclMaskHow);
4849:	_Bool pg_type_ownercheck(Oid, Oid);
5602:	void recordDependencyOnNewAcl(Oid, Oid, int32, Oid, Acl *);
5632:	void recordExtObjInitPriv(Oid, Oid);
5930:	void removeExtObjInitPriv(Oid, Oid);
564:	static void ExecGrantStmt_oids(InternalGrant *);
1607:	static void ExecGrant_Attribute(InternalGrant *, Oid, const char *, AttrNumber, Oid, AclMode, Relation, const Acl *);
2087:	static void ExecGrant_Database(InternalGrant *);
2207:	static void ExecGrant_Fdw(InternalGrant *);
2334:	static void ExecGrant_ForeignServer(InternalGrant *);
2459:	static void ExecGrant_Function(InternalGrant *);
2582:	static void ExecGrant_Language(InternalGrant *);
2713:	static void ExecGrant_Largeobject(InternalGrant *);
2853:	static void ExecGrant_Namespace(InternalGrant *);
1755:	static void ExecGrant_Relation(InternalGrant *);
2977:	static void ExecGrant_Tablespace(InternalGrant *);
3097:	static void ExecGrant_Type(InternalGrant *);
1140:	static void SetDefaultACL(InternalDefaultACL *);
1098:	static void SetDefaultACLsInSchemas(InternalDefaultACL *, List *);
1561:	static void expand_all_col_privileges(Oid, Form_pg_class, AclMode, AclMode *, int);
1528:	static void expand_col_privileges(List *, Oid, AclMode, AclMode *, int);
866:	static List *getRelationsInNamespace(Oid, char);
5491:	static Acl *get_default_acl_internal(Oid, Oid, char);
152:	static Acl *merge_acl_with_grant(Acl *, _Bool, _Bool, DropBehavior, List *, AclMode, Oid, Oid);
628:	static List *objectNamesToOids(ObjectType, List *);
777:	static List *objectsInSchemaToOids(ObjectType, List *);
3638:	static AclMode pg_aclmask(ObjectType, Oid, AttrNumber, Oid, AclMode, AclMaskHow);
3272:	static const char *privilege_to_string(AclMode);
6013:	static void recordExtensionInitPriv(Oid, Oid, int, Acl *);
6042:	static void recordExtensionInitPrivWorker(Oid, Oid, int, Acl *);
211:	static AclMode restrict_and_check_grant(_Bool, AclMode, _Bool, AclMode, Oid, Oid, ObjectType, const char *, AttrNumber, const char *);
3235:	static AclMode string_to_privilege(const char *);

File aggregatecmds.c:
56:	ObjectAddress DefineAggregate(ParseState *, List *, List *, _Bool, List *, _Bool);
481:	static char extractModify(DefElem *);

File aio_return.c:
33:	ssize_t aio_return(struct aiocb *);

File alloc_buffer_alloc_array.c:
23:	void *__GI___libc_alloc_buffer_alloc_array(struct alloc_buffer *, size_t, size_t, size_t);

File alloc_buffer_allocate.c:
24:	struct alloc_buffer __GI___libc_alloc_buffer_allocate(size_t, void **);

File alloc_buffer_copy_bytes.c:
26:	struct alloc_buffer __GI___libc_alloc_buffer_copy_bytes(struct alloc_buffer, const void *, size_t);

File alloc_buffer_copy_string.c:
26:	struct alloc_buffer __GI___libc_alloc_buffer_copy_string(struct alloc_buffer, const char *);

File alloc_buffer_create_failure.c:
23:	void __GI___libc_alloc_buffer_create_failure(void *, size_t);

File alloca_cutoff.c:
26:	int __GI___libc_alloca_cutoff(size_t);

File allocate_once.c:
24:	void *__GI___libc_allocate_once_slow(void **, void *(*)(void *), void (*)(void *, void *), void *);

File allocatestack.c:
788:	void __deallocate_stack(struct pthread *);
811:	int __make_stacks_executable(void **);
1071:	int __nptl_setxid(struct xid_command *);
1050:	void __nptl_setxid_error(struct xid_command *, int);
293:	void __nptl_stacks_freeres(void);
1195:	void __pthread_init_static_tls(struct link_map *);
862:	void __reclaim_stacks(void);
1214:	void __wait_lookup_done(void);
255:	static void free_stacks(size_t);
967:	static void setxid_mark_thread(struct pthread *, struct xid_command *);

File allpaths.c:
1285:	void add_paths_to_append_rel(PlannerInfo *, RelOptInfo *, List *);
3750:	int compute_parallel_worker(RelOptInfo *, double, double, int);
3714:	void create_partial_bitmap_paths(PlannerInfo *, RelOptInfo *, Path *);
2609:	void generate_gather_paths(PlannerInfo *, RelOptInfo *, _Bool);
3838:	void generate_partitionwise_join_paths(PlannerInfo *, RelOptInfo *);
2747:	void generate_useful_gather_paths(PlannerInfo *, RelOptInfo *, _Bool);
153:	RelOptInfo *make_one_rel(PlannerInfo *, List *);
2986:	RelOptInfo *standard_join_search(PlannerInfo *, int, List *);
1967:	static void accumulate_append_subpath(Path *, List **, List **);
3279:	static void check_output_expressions(Query *, pushdown_safety_info *);
3347:	static void compare_tlist_datatypes(List *, List *, pushdown_safety_info *);
797:	static void create_plain_partial_paths(PlannerInfo *, RelOptInfo *);
1673:	static void generate_orderedappend_paths(PlannerInfo *, RelOptInfo *, List *, List *);
1879:	static Path *get_cheapest_parameterized_child_path(PlannerInfo *, RelOptInfo *, Relids);
2013:	static Path *get_singleton_append_subpath(Path *);
2679:	static List *get_useful_pathkeys_for_relation(PlannerInfo *, RelOptInfo *, _Bool);
2073:	static _Bool has_multiple_baserels(PlannerInfo *);
2881:	static RelOptInfo *make_rel_from_joinlist(PlannerInfo *, List *);
3423:	static _Bool qual_is_pushdown_safe(Query *, Index, RestrictInfo *, pushdown_safety_info *);
3562:	static void recurse_push_qual(Node *, Query *, RangeTblEntry *, Index, Node *);
3212:	static _Bool recurse_pushdown_safe(Node *, Query *, pushdown_safety_info *);
3609:	static void remove_unused_subquery_outputs(Query *, RelOptInfo *);
1215:	static void set_append_rel_pathlist(PlannerInfo *, RelOptInfo *, Index, RangeTblEntry *);
947:	static void set_append_rel_size(PlannerInfo *, RelOptInfo *, Index, RangeTblEntry *);
249:	static void set_base_rel_consider_startup(PlannerInfo *);
335:	static void set_base_rel_pathlists(PlannerInfo *);
292:	static void set_base_rel_sizes(PlannerInfo *);
2423:	static void set_cte_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
2047:	static void set_dummy_rel_pathlist(RelOptInfo *);
929:	static void set_foreign_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
905:	static void set_foreign_size(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
2311:	static void set_function_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
2490:	static void set_namedtuplestore_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
767:	static void set_plain_rel_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
575:	static void set_plain_rel_size(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
592:	static void set_rel_consider_parallel(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
471:	static void set_rel_pathlist(PlannerInfo *, RelOptInfo *, Index, RangeTblEntry *);
362:	static void set_rel_size(PlannerInfo *, RelOptInfo *, Index, RangeTblEntry *);
2520:	static void set_result_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
2106:	static void set_subquery_pathlist(PlannerInfo *, RelOptInfo *, Index, RangeTblEntry *);
2399:	static void set_tablefunc_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
857:	static void set_tablesample_rel_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
817:	static void set_tablesample_rel_size(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
2379:	static void set_values_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
2550:	static void set_worktable_pathlist(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
3156:	static _Bool subquery_is_pushdown_safe(Query *, Query *, pushdown_safety_info *);
3515:	static void subquery_push_qual(Query *, RangeTblEntry *, Index, Node *);
3380:	static _Bool targetIsInAllPartitionLists(TargetEntry *, Query *);

File alt_digit.c:
72:	const char *_nl_get_alt_digit(unsigned int, struct __locale_data *);
97:	const wchar_t *_nl_get_walt_digit(unsigned int, struct __locale_data *);
149:	int _nl_parse_alt_digit(const char **, struct __locale_data *);
34:	static void _nl_init_alt_digit(struct __locale_data *);

File alter.c:
589:	Oid AlterObjectNamespace_oid(Oid, Oid, Oid, ObjectAddresses *);
934:	void AlterObjectOwner_internal(Relation, Oid, Oid);
431:	ObjectAddress ExecAlterObjectDependsStmt(AlterObjectDependsStmt *, ObjectAddress *);
495:	ObjectAddress ExecAlterObjectSchemaStmt(AlterObjectSchemaStmt *, ObjectAddress *);
833:	ObjectAddress ExecAlterOwnerStmt(AlterOwnerStmt *);
331:	ObjectAddress ExecRenameStmt(RenameStmt *);
690:	static Oid AlterObjectNamespace_internal(Relation, Oid, Oid);
166:	static void AlterObjectRename_internal(Relation, Oid, const char *);
77:	static void report_name_conflict(Oid, const char *);
112:	static void report_namespace_conflict(Oid, const char *, Oid);

File amapi.c:
33:	IndexAmRoutine *GetIndexAmRoutine(Oid);
56:	IndexAmRoutine *GetIndexAmRoutineByAmId(Oid, _Bool);
114:	Datum amvalidate(FunctionCallInfo);

File amcmds.c:
43:	ObjectAddress CreateAccessMethod(CreateAmStmt *);
192:	char *get_am_name(Oid);
183:	Oid get_am_oid(const char *, _Bool);
163:	Oid get_index_am_oid(const char *, _Bool);
173:	Oid get_table_am_oid(const char *, _Bool);
129:	static Oid get_am_type_oid(const char *, char, _Bool);
212:	static const char *get_am_type_string(char);
234:	static Oid lookup_am_handler_func(List *, char);

File amutils.c:
436:	Datum pg_index_column_has_property(FunctionCallInfo);
424:	Datum pg_index_has_property(FunctionCallInfo);
412:	Datum pg_indexam_has_property(FunctionCallInfo);
454:	Datum pg_indexam_progress_phasename(FunctionCallInfo);
154:	static Datum indexam_property(FunctionCallInfo, const char *, Oid, Oid, int);
90:	static IndexAMProperty lookup_prop_name(const char *);
117:	static _Bool test_indoption(HeapTuple, int, _Bool, int16, int16, _Bool *);

File amvalidate.c:
206:	_Bool check_amop_signature(Oid, Oid, Oid, Oid);
192:	_Bool check_amoptsproc_signature(Oid);
152:	_Bool check_amproc_signature(Oid, Oid, _Bool, int, int, ...);
43:	List *identify_opfamily_groups(CatCList *, CatCList *);
236:	Oid opclass_for_family_datatype(Oid, Oid, Oid);
271:	_Bool opfamily_can_sort_type(Oid, Oid);

File analyze.c:
1127:	List *BuildOnConflictExcludedTargetlist(Relation, Index);
3097:	void CheckSelectLocking(Query *, LockClauseStrength);
3072:	const char *LCS_asString(LockClauseStrength);
120:	void analyze_rel(Oid, RangeVar *, VacuumParams *, List *, _Bool, BufferAccessStrategy);
388:	_Bool analyze_requires_snapshot(RawStmt *);
3367:	void applyLockingClause(Query *, Index, LockClauseStrength, LockWaitPolicy, _Bool);
1854:	SortGroupClause *makeSortGroupClauseForSetOp(Oid, _Bool);
110:	Query *parse_analyze(RawStmt *, const char *, Oid *, int, QueryEnvironment *);
150:	Query *parse_analyze_varparams(RawStmt *, const char *, Oid **, int *);
186:	Query *parse_sub_analyze(Node *, ParseState *, CommonTableExpr *, _Bool, _Bool);
1874:	_Bool std_typanalyze(VacAttrStats *);
276:	Query *transformStmt(ParseState *, Node *);
213:	Query *transformTopLevelStmt(ParseState *, RawStmt *);
1397:	static int acquire_inherited_sample_rows(Relation, int, HeapTuple *, int, double *, double *);
1150:	static int acquire_sample_rows(Relation, int, HeapTuple *, int, double *, double *);
2965:	static int analyze_mcv_list(int *, int, double, double, int, double);
2947:	static int compare_mcvs(const void *, const void *, void *);
1367:	static int compare_rows(const void *, const void *, void *);
2916:	static int compare_scalars(const void *, const void *, void *);
2044:	static void compute_distinct_stats(VacAttrStatsP, AnalyzeAttrFetchFunc, int, double);
848:	static void compute_index_stats(Relation, double, AnlIndexData *, int, HeapTuple *, int, MemoryContext);
2387:	static void compute_scalar_stats(VacAttrStatsP, AnalyzeAttrFetchFunc, int, double);
1954:	static void compute_trivial_stats(VacAttrStatsP, AnalyzeAttrFetchFunc, int, double);
1197:	static int count_rowexpr_columns(ParseState *, Node *);
2229:	static void determineRecursiveColTypes(ParseState *, Node *, List *);
290:	static void do_analyze_rel(Relation, VacuumParams *, List *, AcquireSampleRowsFunc, BlockNumber, _Bool, _Bool, int);
1019:	static VacAttrStats *examine_attribute(Relation, int, Node *);
1797:	static Datum ind_fetch_func(VacAttrStatsP, int, _Bool *);
1781:	static Datum std_fetch_func(VacAttrStatsP, int, _Bool *);
2947:	static Query *transformCallStmt(ParseState *, CallStmt *);
2872:	static Query *transformCreateTableAsStmt(ParseState *, CreateTableAsStmt *);
2755:	static Query *transformDeclareCursorStmt(ParseState *, DeclareCursorStmt *);
429:	static Query *transformDeleteStmt(ParseState *, DeleteStmt *);
2848:	static Query *transformExplainStmt(ParseState *, ExplainStmt *);
919:	static List *transformInsertRow(ParseState *, List *, List *, List *, List *, _Bool);
499:	static Query *transformInsertStmt(ParseState *, InsertStmt *);
3161:	static void transformLockingClause(ParseState *, Query *, LockingClause *, _Bool);
1018:	static OnConflictExpr *transformOnConflictClause(ParseState *, OnConflictClause *);
237:	static Query *transformOptionalSelectInto(ParseState *, Node *);
2507:	static Query *transformPLAssignStmt(ParseState *, PLAssignStmt *);
2283:	static Query *transformReturnStmt(ParseState *, ReturnStmt *);
2449:	static List *transformReturningList(ParseState *, List *);
1239:	static Query *transformSelectStmt(ParseState *, SelectStmt *);
1599:	static Query *transformSetOperationStmt(ParseState *, SelectStmt *);
1901:	static Node *transformSetOperationTree(ParseState *, SelectStmt *, _Bool, List **);
2313:	static Query *transformUpdateStmt(ParseState *, UpdateStmt *);
2377:	static List *transformUpdateTargetList(ParseState *, List *);
1381:	static Query *transformValuesClause(ParseState *, SelectStmt *);
1642:	static void update_attstats(Oid, _Bool, int, VacAttrStats **);

File analyzejoins.c:
964:	_Bool innerrel_is_unique(PlannerInfo *, Relids, Relids, RelOptInfo *, JoinType, List *, _Bool);
775:	_Bool query_is_distinct_for(Query *, List *, List *);
738:	_Bool query_supports_distinctness(Query *);
508:	void reduce_unique_semijoins(PlannerInfo *);
61:	List *remove_useless_joins(PlannerInfo *, List *);
127:	static _Bool clause_sides_match_join(RestrictInfo *, Relids, Relids);
924:	static Oid distinct_col_search(int, List *, List *);
1072:	static _Bool is_innerrel_unique_for(PlannerInfo *, Relids, Relids, RelOptInfo *, JoinType, List *);
159:	static _Bool join_is_removable(PlannerInfo *, SpecialJoinInfo *);
641:	static _Bool rel_is_distinct_for(PlannerInfo *, RelOptInfo *, List *);
585:	static _Bool rel_supports_distinctness(PlannerInfo *, RelOptInfo *);
454:	static List *remove_rel_from_joinlist(List *, int, int *);
312:	static void remove_rel_from_query(PlannerInfo *, int, Relids);

File appendinfo.c:
857:	void add_row_identity_columns(PlannerInfo *, Index, RangeTblEntry *, Relation);
763:	void add_row_identity_var(PlannerInfo *, Var *, Index, const char *);
195:	Node *adjust_appendrel_attrs(PlannerInfo *, Node *, int, AppendRelInfo **);
488:	Node *adjust_appendrel_attrs_multilevel(PlannerInfo *, Node *, Relids, Relids);
527:	Relids adjust_child_relids(Relids, int, AppendRelInfo **);
562:	Relids adjust_child_relids_multilevel(PlannerInfo *, Relids, Relids, Relids);
614:	List *adjust_inherited_attnums(List *, AppendRelInfo *);
648:	List *adjust_inherited_attnums_multilevel(PlannerInfo *, List *, Index, Index);
937:	void distribute_row_identity_vars(PlannerInfo *);
715:	AppendRelInfo **find_appinfos_by_relids(PlannerInfo *, Relids, int *);
676:	void get_translated_update_targetlist(PlannerInfo *, Index, List **, List **);
50:	AppendRelInfo *make_append_rel_info(Relation, Relation, Index, Index);
214:	static Node *adjust_appendrel_attrs_mutator(Node *, adjust_appendrel_attrs_context *);
79:	static void make_inh_translation_list(Relation, Relation, Index, AppendRelInfo *);

File archive.c:
39:	char *BuildRestoreCommand(const char *, const char *, const char *, const char *);

File arena.c:
946:	void __malloc_arena_thread_freeres(void);
144:	void __malloc_fork_lock_parent(void);
180:	void __malloc_fork_unlock_child(void);
164:	void __malloc_fork_unlock_parent(void);
232:	void _dl_tunable_set_arena_max(tunable_val_t *);
233:	void _dl_tunable_set_arena_test(tunable_val_t *);
211:	void _dl_tunable_set_mallopt_check(tunable_val_t *);
227:	void _dl_tunable_set_mmap_threshold(tunable_val_t *);
228:	void _dl_tunable_set_mmaps_max(tunable_val_t *);
239:	void _dl_tunable_set_mxfast(tunable_val_t *);
230:	void _dl_tunable_set_perturb_byte(tunable_val_t *);
236:	void _dl_tunable_set_tcache_count(tunable_val_t *);
235:	void _dl_tunable_set_tcache_max(tunable_val_t *);
237:	void _dl_tunable_set_tcache_unsorted_limit(tunable_val_t *);
229:	void _dl_tunable_set_top_pad(tunable_val_t *);
231:	void _dl_tunable_set_trim_threshold(tunable_val_t *);
279:	static void *__failing_morecore(ptrdiff_t);
873:	static mstate arena_get2(size_t, mstate);
927:	static mstate arena_get_retry(mstate, size_t);
672:	static void detach_arena(mstate);
757:	static mstate get_free_list(void);
453:	static heap_info *new_heap(size_t, size_t);
289:	static void ptmalloc_init(void);

File argp-fmtstream.c:
349:	int __argp_fmtstream_ensure(struct argp_fmtstream *, size_t);
97:	void __argp_fmtstream_free(argp_fmtstream_t);
400:	ssize_t __argp_fmtstream_printf(struct argp_fmtstream *, const char *, ...);
121:	void __argp_fmtstream_update(argp_fmtstream_t);
57:	argp_fmtstream_t __argp_make_fmtstream(FILE *, size_t, size_t, ssize_t);

File argp-help.c:
1796:	void __argp_error(const struct argp_state *, const char *, ...);
1753:	void __argp_error_internal(const struct argp_state *, const char *, struct __va_list_tag *, unsigned int);
1892:	void __argp_failure(const struct argp_state *, int, int, const char *, ...);
1816:	void __argp_failure_internal(const struct argp_state *, int, int, const char *, struct __va_list_tag *, unsigned int);
1688:	void __argp_help(const struct argp *, FILE *, unsigned int, char *);
1726:	void __argp_state_help(const struct argp_state *, FILE *, unsigned int);
1547:	static void _help(const struct argp *, const struct argp_state *, FILE *, unsigned int, char *);
1374:	static size_t argp_args_levels(const struct argp *, const struct argp *);
1395:	static int argp_args_usage(const struct argp *, const struct argp_state *, char **, int, argp_fmtstream_t);
1457:	static int argp_doc(const struct argp *, const struct argp_state *, int, int, int, argp_fmtstream_t);
1351:	static struct hol *argp_hol(const struct argp *, struct hol_cluster *);
1040:	static void comma(unsigned int, struct pentry_state *);
803:	static int hol_entry_qcmp(const void *, const void *);
1311:	static void hol_usage(struct hol *, argp_fmtstream_t);
1007:	static void print_header(const char *, const struct argp *, struct pentry_state *);
925:	static void space(argp_fmtstream_t, size_t);

File argp-parse.c:
934:	void *__argp_input(const struct argp *, const struct argp_state *);
881:	error_t __argp_parse(const struct argp *, int, char **, unsigned int, int *, void *);
111:	static error_t argp_default_parser(int, char *, struct argp_state *);
172:	static error_t argp_version_parser(int, char *, struct argp_state *);
454:	static void calc_sizes(const struct argp *, struct parser_sizes *);
313:	static struct group *convert_options(const struct argp *, struct group *, unsigned int, struct group *, struct parser_convert_state *);

File argz-addsep.c:
26:	error_t __argz_add_sep(char **, size_t *, const char *, int);

File argz-append.c:
45:	error_t __argz_add(char **, size_t *, const char *);
26:	error_t __argz_append(char **, size_t *, const char *, size_t);

File argz-count.c:
25:	size_t __GI___argz_count(const char *, size_t);

File argz-create.c:
28:	error_t __argz_create(char * const *, char **, size_t *);

File argz-ctsep.c:
26:	error_t __argz_create_sep(const char *, int, char **, size_t *);

File argz-delete.c:
26:	void __GI_argz_delete(char **, size_t *, char *);

File argz-extract.c:
25:	void __argz_extract(const char *, size_t, char **);

File argz-insert.c:
31:	error_t __argz_insert(char **, size_t *, char *, const char *);

File argz-next.c:
24:	char *__GI___argz_next(const char *, size_t, const char *);

File argz-replace.c:
50:	error_t __argz_replace(char **, size_t *, const char *, const char *, unsigned int *);

File argz-stringify.c:
26:	void __GI___argz_stringify(char *, size_t, int);

File array_expanded.c:
401:	AnyArrayType *DatumGetAnyArrayP(Datum);
352:	ExpandedArrayHeader *DatumGetExpandedArray(Datum);
372:	ExpandedArrayHeader *DatumGetExpandedArrayX(Datum, ArrayMetaState *);
424:	void deconstruct_expanded_array(ExpandedArrayHeader *);
50:	Datum expand_array(Datum, MemoryContext, ArrayMetaState *);
293:	static void EA_flatten_into(ExpandedObjectHeader *, void *, Size);
233:	static Size EA_get_flat_size(ExpandedObjectHeader *);
185:	static void copy_byval_expanded_array(ExpandedArrayHeader *, ExpandedArrayHeader *);

File array_selfuncs.c:
322:	Datum arraycontjoinsel(FunctionCallInfo);
242:	Datum arraycontsel(FunctionCallInfo);
82:	Selectivity scalararraysel_containment(PlannerInfo *, Node *, Node *, Oid, _Bool, _Bool, int);
338:	static Selectivity calc_arraycontsel(VariableStatData *, Datum, Oid, Oid);
1011:	static float *calc_distr(const float *, int, int, float);
922:	static float *calc_hist(const float4 *, int, int);
1166:	static int element_compare(const void *, const void *, void *);
1131:	static _Bool find_next_mcelem(Datum *, int, Datum, int *, TypeCacheEntry *);
1182:	static int float_compare_desc(const void *, const void *);
1090:	static int floor_log2(uint32);
522:	static Selectivity mcelem_array_contain_overlap_selec(Datum *, int, float4 *, int, Datum *, int, Oid, TypeCacheEntry *);
697:	static Selectivity mcelem_array_contained_selec(Datum *, int, float4 *, int, Datum *, int, float4 *, int, Oid, TypeCacheEntry *);
429:	static Selectivity mcelem_array_selec(ArrayType *, TypeCacheEntry *, Datum *, int, float4 *, int, float4 *, int, Oid);

File array_typanalyze.c:
98:	Datum array_typanalyze(FunctionCallInfo);
216:	static void compute_array_stats(VacAttrStats *, AnalyzeAttrFetchFunc, int, double);
780:	static int countitem_compare_count(const void *, const void *, void *);
740:	static int element_compare(const void *, const void *);
710:	static uint32 element_hash(const void *, Size);
725:	static int element_match(const void *, const void *, Size);
681:	static void prune_element_hashtable(HTAB *, int);
768:	static int trackitem_compare_element(const void *, const void *, void *);
756:	static int trackitem_compare_frequencies_desc(const void *, const void *, void *);

File array_userfuncs.c:
582:	Datum array_agg_array_finalfn(FunctionCallInfo);
538:	Datum array_agg_array_transfn(FunctionCallInfo);
503:	Datum array_agg_finalfn(FunctionCallInfo);
457:	Datum array_agg_transfn(FunctionCallInfo);
101:	Datum array_append(FunctionCallInfo);
218:	Datum array_cat(FunctionCallInfo);
615:	Datum array_position(FunctionCallInfo);
621:	Datum array_position_start(FunctionCallInfo);
785:	Datum array_positions(FunctionCallInfo);
154:	Datum array_prepend(FunctionCallInfo);
634:	static Datum array_position_common(FunctionCallInfo);
42:	static ExpandedArrayHeader *fetch_array_arg_replace_nulls(FunctionCallInfo, int);

File arrayfuncs.c:
961:	void CopyArrayEls(ArrayType *, Datum *, _Bool *, int, int, _Bool, char, _Bool);
5122:	ArrayBuildState *accumArrayResult(ArrayBuildState *, Datum, _Bool, Oid, MemoryContext);
5593:	ArrayBuildStateAny *accumArrayResultAny(ArrayBuildStateAny *, Datum, _Bool, Oid, MemoryContext);
5316:	ArrayBuildStateArr *accumArrayResultArr(ArrayBuildStateArr *, Datum, _Bool, Oid, MemoryContext);
4756:	void array_bitmap_copy(bits8 *, int, const bits8 *, int, int);
1801:	Datum array_cardinality(FunctionCallInfo);
3558:	_Bool array_contains_nulls(ArrayType *);
4387:	ArrayIterator array_create_iterator(ArrayType *, int, ArrayMetaState *);
1679:	Datum array_dims(FunctionCallInfo);
3605:	Datum array_eq(FunctionCallInfo);
5797:	Datum array_fill(FunctionCallInfo);
5756:	Datum array_fill_with_lower_bounds(FunctionCallInfo);
4549:	void array_free_iterator(ArrayIterator);
3758:	Datum array_ge(FunctionCallInfo);
1831:	Datum array_get_element(Datum, int, int *, int, int, _Bool, char, _Bool *);
2041:	Datum array_get_slice(Datum, int, int *, int *, _Bool *, _Bool *, int, int, _Bool, char);
3746:	Datum array_gt(FunctionCallInfo);
174:	Datum array_in(FunctionCallInfo);
4466:	_Bool array_iterate(ArrayIterator, Datum *, _Bool *);
5651:	Datum array_larger(FunctionCallInfo);
3752:	Datum array_le(FunctionCallInfo);
1774:	Datum array_length(FunctionCallInfo);
1717:	Datum array_lower(FunctionCallInfo);
3740:	Datum array_lt(FunctionCallInfo);
3159:	Datum array_map(Datum, ExprState *, ExprContext *, Oid, ArrayMapState *);
1663:	Datum array_ndims(FunctionCallInfo);
3734:	Datum array_ne(FunctionCallInfo);
1016:	Datum array_out(FunctionCallInfo);
1271:	Datum array_recv(FunctionCallInfo);
3104:	Datum array_ref(ArrayType *, int, int *, int, int, _Bool, char, _Bool *);
6400:	Datum array_remove(FunctionCallInfo);
6422:	Datum array_replace(FunctionCallInfo);
1559:	Datum array_send(FunctionCallInfo);
3121:	ArrayType *array_set(ArrayType *, int, int *, Datum, _Bool, int, int, _Bool, char);
2212:	Datum array_set_element(Datum, int, int *, Datum, _Bool, int, int, _Bool, char);
2786:	Datum array_set_slice(Datum, int, int *, int *, _Bool *, _Bool *, Datum, _Bool, int, int, _Bool, char);
5660:	Datum array_smaller(FunctionCallInfo);
6018:	Datum array_unnest(FunctionCallInfo);
6106:	Datum array_unnest_support(FunctionCallInfo);
1744:	Datum array_upper(FunctionCallInfo);
4350:	Datum arraycontained(FunctionCallInfo);
4332:	Datum arraycontains(FunctionCallInfo);
4314:	Datum arrayoverlap(FunctionCallInfo);
3764:	Datum btarraycmp(FunctionCallInfo);
3319:	ArrayType *construct_array(Datum *, int, Oid, int, _Bool, char);
3440:	ArrayType *construct_empty_array(Oid);
3457:	ExpandedArrayHeader *construct_empty_expanded_array(Oid, MemoryContext, ArrayMetaState *);
3354:	ArrayType *construct_md_array(Datum *, _Bool *, int, int *, int *, Oid, int, _Bool, char);
3491:	void deconstruct_array(ArrayType *, Oid, int, _Bool, char, Datum **, _Bool **, int *);
5681:	Datum generate_subscripts(FunctionCallInfo);
5745:	Datum generate_subscripts_nodir(FunctionCallInfo);
3949:	Datum hash_array(FunctionCallInfo);
4081:	Datum hash_array_extended(FunctionCallInfo);
5083:	ArrayBuildState *initArrayResult(Oid, MemoryContext, _Bool);
5548:	ArrayBuildStateAny *initArrayResultAny(Oid, MemoryContext, _Bool);
5270:	ArrayBuildStateArr *initArrayResultArr(Oid, Oid, MemoryContext, _Bool);
5186:	Datum makeArrayResult(ArrayBuildState *, MemoryContext);
5621:	Datum makeArrayResultAny(ArrayBuildStateAny *, MemoryContext, _Bool);
5469:	Datum makeArrayResultArr(ArrayBuildStateArr *, MemoryContext, _Bool);
5218:	Datum makeMdArrayResult(ArrayBuildState *, int, int *, int *, MemoryContext, _Bool);
6683:	Datum trim_array(FunctionCallInfo);
6451:	Datum width_bucket_array(FunctionCallInfo);
4606:	static Datum ArrayCast(char *, _Bool, int);
4617:	static int ArrayCastAndSet(Datum, int, _Bool, char, char *);
456:	static int ArrayCount(const char *, int *, char);
1454:	static void ReadArrayBinary(StringInfo, int, FmgrInfo *, Oid, int32, int, _Bool, char, Datum *, _Bool *, _Bool *, int32 *);
721:	static void ReadArrayStr(char *, const char *, int, int, int *, FmgrInfo *, Oid, int32, char, int, _Bool, char, Datum *, _Bool *, _Bool *, int32 *);
3776:	static int array_cmp(FunctionCallInfo);
4171:	static _Bool array_contain_compare(AnyArrayType *, AnyArrayType *, Oid, _Bool, void **);
4726:	static int array_copy(char *, int, char *, int, bits8 *, int, _Bool, char);
4887:	static void array_extract_slice(ArrayType *, int, int *, int *, char *, bits8 *, int *, int *, int, _Bool, char);
5849:	static ArrayType *array_fill_internal(ArrayType *, ArrayType *, Datum, _Bool, Oid, FunctionCallInfo);
1932:	static Datum array_get_element_expanded(Datum, int, int *, int, int, _Bool, char, _Bool *);
4571:	static _Bool array_get_isnull(const bits8 *, int);
4960:	static void array_insert_slice(ArrayType *, ArrayType *, ArrayType *, int, int *, int *, int *, int *, int, _Bool, char);
436:	static _Bool array_isspace(char);
4704:	static int array_nelems_size(char *, int, bits8 *, int, int, _Bool, char);
6142:	static ArrayType *array_replace_internal(ArrayType *, Datum, _Bool, Datum, _Bool, _Bool, Oid, FunctionCallInfo);
4656:	static char *array_seek(char *, int, bits8 *, int, int, _Bool, char);
2497:	static Datum array_set_element_expanded(Datum, int, int *, Datum, _Bool, int, int, _Bool, char);
4588:	static void array_set_isnull(bits8 *, int, _Bool);
4827:	static int array_slice_size(char *, bits8 *, int, int *, int *, int *, int *, int, _Bool, char);
5832:	static ArrayType *create_array_envelope(int, int *, int *, int, Oid, int);
6558:	static int width_bucket_array_fixed(Datum, ArrayType *, Oid, TypeCacheEntry *);
6514:	static int width_bucket_array_float8(Datum, ArrayType *);
6613:	static int width_bucket_array_variable(Datum, ArrayType *, Oid, TypeCacheEntry *);

File arraysubs.c:
539:	Datum array_subscript_handler(FunctionCallInfo);
566:	Datum raw_array_subscript_handler(FunctionCallInfo);
473:	static void array_exec_setup(const SubscriptingRef *, SubscriptingRefState *, SubscriptExecSteps *);
294:	static void array_subscript_assign(ExprState *, ExprEvalStep *, ExprContext *);
344:	static void array_subscript_assign_slice(ExprState *, ExprEvalStep *, ExprContext *);
180:	static _Bool array_subscript_check_subscripts(ExprState *, ExprEvalStep *, ExprContext *);
236:	static void array_subscript_fetch(ExprState *, ExprEvalStep *, ExprContext *);
399:	static void array_subscript_fetch_old(ExprState *, ExprEvalStep *, ExprContext *);
439:	static void array_subscript_fetch_old_slice(ExprState *, ExprEvalStep *, ExprContext *);
264:	static void array_subscript_fetch_slice(ExprState *, ExprEvalStep *, ExprContext *);
55:	static void array_subscript_transform(SubscriptingRef *, List *, ParseState *, _Bool, _Bool);

File arrayutils.c:
128:	void ArrayCheckBounds(int, const int *, const int *);
231:	int32 *ArrayGetIntegerTypmods(ArrayType *, int *);
76:	int ArrayGetNItems(int, const int *);
32:	int ArrayGetOffset(int, const int *, const int *, const int *);
51:	int ArrayGetOffset0(int, const int *, const int *);
181:	void mda_get_offset_values(int, int *, const int *, const int *);
165:	void mda_get_prod(int, const int *, int *);
151:	void mda_get_range(int, int *, const int *, const int *);
206:	int mda_next_tuple(int, int *, const int *);

File ascii.c:
173:	void ascii_safe_strlcpy(char *, const char *, size_t);
155:	Datum to_ascii_default(FunctionCallInfo);
137:	Datum to_ascii_enc(FunctionCallInfo);
118:	Datum to_ascii_encname(FunctionCallInfo);
103:	static text *encode_to_ascii(text *, int);
28:	static void pg_to_ascii(unsigned char *, unsigned char *, unsigned char *, int);

File asctime.c:
85:	char *__GI_asctime(const struct tm *);
75:	char *__asctime_r(const struct tm *, char *);

File aset.c:
379:	MemoryContext AllocSetContextCreateInternal(MemoryContext, const char *, Size, Size, Size);
721:	static void *AllocSetAlloc(MemoryContext, Size);
627:	static void AllocSetDelete(MemoryContext);
993:	static void AllocSetFree(MemoryContext, void *);
309:	static int AllocSetFreeIndex(Size);
1317:	static Size AllocSetGetChunkSpace(MemoryContext, void *);
1333:	static _Bool AllocSetIsEmpty(MemoryContext);
1075:	static void *AllocSetRealloc(MemoryContext, void *, Size);
559:	static void AllocSetReset(MemoryContext);
1356:	static void AllocSetStats(MemoryContext, MemoryStatsPrintFunc, void *, MemoryContextCounters *, _Bool);

File asprintf.c:
25:	int ___asprintf(char **, const char *, ...);

File asprintf_chk.c:
25:	int __asprintf_chk(char **, int, const char *, ...);

File assert-perr.c:
28:	void __GI___assert_perror_fail(int, const char *, unsigned int, const char *);

File assert.c:
30:	void ExceptionalCondition(const char *, const char *, const char *, int);
98:	void __GI___assert_fail(const char *, const char *, unsigned int, const char *);
47:	void __assert_fail_base(const char *, const char *, const char *, unsigned int, const char *);

File async.c:
533:	void AsyncShmemInit(void);
516:	Size AsyncShmemSize(void);
772:	void Async_Listen(const char *);
625:	void Async_Notify(const char *, const char *);
786:	void Async_Unlisten(const char *);
804:	void Async_UnlistenAll(void);
1734:	void AtAbort_Notify(void);
1002:	void AtCommit_Notify(void);
870:	void AtPrepare_Notify(void);
1824:	void AtSubAbort_Notify(void);
1754:	void AtSubCommit_Notify(void);
1867:	void HandleNotifyInterrupt(void);
2292:	void NotifyMyFrontEnd(const char *, const char *, int32);
895:	void PreCommit_Notify(void);
1247:	void ProcessCompletedNotifies(void);
1897:	void ProcessNotifyInterrupt(_Bool);
824:	Datum pg_listening_channels(FunctionCallInfo);
1536:	Datum pg_notification_queue_usage(FunctionCallInfo);
591:	Datum pg_notify(FunctionCallInfo);
2357:	static void AddEventToPendingNotifies(Notification *);
2316:	static _Bool AsyncExistsPendingNotify(Notification *);
857:	static void Async_UnlistenOnExit(int, Datum);
2450:	static void ClearPendingActionsAndNotifies(void);
1170:	static void Exec_ListenCommit(const char *);
1075:	static void Exec_ListenPreCommit(void);
1228:	static void Exec_UnlistenAllCommit(void);
1197:	static void Exec_UnlistenCommit(const char *);
1260:	static _Bool IsListeningOn(const char *);
2251:	static void ProcessIncomingNotify(_Bool);
1644:	static void SignalBackends(void);
1422:	static ListCell *asyncQueueAddEntries(ListCell *);
1351:	static _Bool asyncQueueAdvance(volatile QueuePosition *, int);
2171:	static void asyncQueueAdvanceTail(void);
1590:	static void asyncQueueFillWarning(void);
1320:	static _Bool asyncQueueIsFull(void);
1386:	static void asyncQueueNotificationToEntry(Notification *, AsyncQueueEntry *);
481:	static int asyncQueuePageDiff(int, int);
507:	static _Bool asyncQueuePagePrecedes(int, int);
2079:	static _Bool asyncQueueProcessPageEntries(volatile QueuePosition *, QueuePosition, char *, Snapshot);
1914:	static void asyncQueueReadAllNotifications(void);
1279:	static void asyncQueueUnregister(void);
1561:	static double asyncQueueUsage(void);
2420:	static uint32 notification_hash(const void *, Size);
2434:	static int notification_match(const void *, const void *, Size);
724:	static void queue_listen(ListenActionKind, const char *);

File atof.c:
25:	double atof(const char *);

File atoi.c:
25:	int __GI_atoi(const char *);

File atol.c:
25:	long atol(const char *);

File atoll.c:
25:	long long atoll(const char *);

File attmap.c:
174:	AttrMap *build_attrmap_by_name(TupleDesc, TupleDesc);
259:	AttrMap *build_attrmap_by_name_if_req(TupleDesc, TupleDesc);
76:	AttrMap *build_attrmap_by_position(TupleDesc, TupleDesc, const char *);
57:	void free_attrmap(AttrMap *);
41:	AttrMap *make_attrmap(int);
285:	static _Bool check_attrmap_match(TupleDesc, TupleDesc, AttrMap *);

File attoptcache.c:
103:	AttributeOpts *get_attribute_options(Oid, int);
77:	static void InitializeAttoptCache(void);
54:	static void InvalidateAttoptCacheCallback(Datum, int, uint32);

File auth-scram.c:
561:	_Bool parse_scram_secret(const char *, int *, char **, uint8 *, uint8 *);
452:	char *pg_be_scram_build_secret(const char *);
329:	int pg_be_scram_exchange(void *, const char *, int, char **, int *, char **);
182:	void pg_be_scram_get_mechanisms(Port *, StringInfo);
219:	void *pg_be_scram_init(Port *, const char *, const char *);
489:	_Bool scram_verify_plain_password(const char *, const char *, const char *);
1360:	static char *build_server_final_message(scram_state *);
1150:	static char *build_server_first_message(scram_state *);
729:	static _Bool is_scram_printable(char *);
652:	static void mock_scram_secret(const char *, int *, char **, uint8 *, uint8 *);
805:	static char *read_any_attr(char **, char *);
693:	static char *read_attr_value(char **, char);
1214:	static void read_client_final_message(scram_state *, const char *);
863:	static void read_client_first_message(scram_state *, const char *);
757:	static char *sanitize_char(char);
777:	static char *sanitize_str(const char *);
1418:	static char *scram_mock_salt(const char *);
1099:	static _Bool verify_client_proof(scram_state *);
1077:	static _Bool verify_final_nonce(scram_state *);

File auth.c:
394:	void ClientAuthentication(Port *);
878:	static int CheckMD5Auth(Port *, char *, char **);
818:	static int CheckPWChallengeAuth(Port *, char **);
783:	static int CheckPasswordAuth(Port *, char **);
3063:	static int CheckRADIUSAuth(Port *);
915:	static int CheckSCRAMAuth(Port *, char *, char **);
3158:	static int PerformRadiusTransaction(const char *, const char *, const char *, const char *, const char *, const char *);
261:	static void auth_failed(Port *, int, char *);
2020:	static int auth_peer(hbaPort *);
1835:	static int ident_inet(hbaPort *);
1752:	static _Bool interpret_ident_response(const char *, char *);
3037:	static void radius_add_attribute(radius_packet *, uint8, const unsigned char *, int);
702:	static char *recv_password_packet(Port *);
672:	static void sendAuthRequest(Port *, AuthRequest, const char *, int);
358:	static void set_authn_id(Port *, const char *);

File auth_des.c:
102:	AUTH *__GI_authdes_create(const char *, u_int, struct sockaddr *, des_block *);
126:	AUTH *__GI_authdes_pk_create(const char *, netobj *, u_int, struct sockaddr *, des_block *);
432:	static void authdes_destroy(AUTH *);
240:	static bool_t authdes_marshal(AUTH *, XDR *);
229:	static void authdes_nextverf(AUTH *);
400:	static bool_t authdes_refresh(AUTH *);
344:	static bool_t authdes_validate(AUTH *, struct opaque_auth *);

File auth_none.c:
94:	AUTH *__GI_authnone_create(void);
74:	static void authnone_create_once(void);
102:	static bool_t authnone_marshal(AUTH *, XDR *);
126:	static bool_t authnone_refresh(AUTH *);
120:	static bool_t authnone_validate(AUTH *, struct opaque_auth *);
115:	static void authnone_verf(AUTH *);

File auth_unix.c:
95:	AUTH *__GI_authunix_create(char *, uid_t, gid_t, int, gid_t *);
161:	AUTH *__GI_authunix_create_default(void);
319:	static void authunix_destroy(AUTH *);
235:	static bool_t authunix_marshal(AUTH *, XDR *);
229:	static void authunix_nextverf(AUTH *);
276:	static bool_t authunix_refresh(AUTH *);
243:	static bool_t authunix_validate(AUTH *, struct opaque_auth *);
341:	static bool_t marshal_new_auth(AUTH *);

File authdes_prot.c:
44:	bool_t __GI_xdr_authdes_cred(XDR *, struct authdes_cred *);
71:	bool_t __GI_xdr_authdes_verf(XDR *, struct authdes_verf *);

File authuxprot.c:
47:	bool_t __GI_xdr_authunix_parms(XDR *, struct authunix_parms *);

File autovacuum.c:
1420:	void AutoVacWorkerFailed(void);
3351:	_Bool AutoVacuumRequestWork(AutoVacuumWorkItemType, Oid, BlockNumber);
3443:	void AutoVacuumShmemInit(void);
3424:	Size AutoVacuumShmemSize(void);
1783:	void AutoVacuumUpdateDelay(void);
3339:	_Bool AutoVacuumingActive(void);
3407:	_Bool IsAutoVacuumLauncherProcess(void);
3413:	_Bool IsAutoVacuumWorkerProcess(void);
398:	int StartAutoVacLauncher(void);
1480:	int StartAutoVacWorker(void);
3393:	void autovac_init(void);
436:	static void AutoVacLauncherMain(int, char **);
851:	static void AutoVacLauncherShutdown(void);
1518:	static void AutoVacWorkerMain(int, char **);
1734:	static void FreeWorkerInfo(int, Datum);
811:	static void HandleAutoVacLauncherInterrupts(void);
1799:	static void autovac_balance_cost(void);
3491:	static void autovac_refresh_stats(void);
3264:	static void autovac_report_activity(autovac_table *);
3299:	static void autovac_report_workitem(AutoVacuumWorkItem *, const char *, const char *);
3235:	static void autovacuum_do_vac_analyze(autovac_table *, BufferAccessStrategy);
1427:	static void avl_sigusr2_handler(int);
1133:	static int db_comparator(const void *, const void *);
1960:	static void do_autovacuum(void);
1153:	static Oid do_start_worker(void);
2753:	static AutoVacOpts *extract_autovac_opts(HeapTuple, TupleDesc);
1887:	static List *get_database_list(void);
2779:	static PgStat_StatTabEntry *get_pgstat_tabentry_relid(Oid, _Bool, PgStat_StatDBEntry *, PgStat_StatDBEntry *);
1368:	static void launch_worker(TimestampTz);
868:	static void launcher_determine_sleep(_Bool, _Bool, struct timeval *);
2642:	static void perform_work_item(AutoVacuumWorkItem *);
952:	static void rebuild_database_list(Oid);
2997:	static void recheck_relation_needs_vacanalyze(Oid, AutoVacOpts *, Form_pg_class, int, _Bool *, _Bool *, _Bool *);
3065:	static void relation_needs_vacanalyze(Oid, AutoVacOpts *, Form_pg_class, PgStat_StatTabEntry *, int, _Bool *, _Bool *, _Bool *);
2806:	static autovac_table *table_recheck_autovac(Oid, HTAB *, TupleDesc, int);

File backend_progress.c:
98:	void pgstat_progress_end_command(void);
26:	void pgstat_progress_start_command(ProgressCommandType, Oid);
69:	void pgstat_progress_update_multi_param(int, const int *, const int64 *);
47:	void pgstat_progress_update_param(int, int64);

File backend_status.c:
84:	Size BackendStatusShmemSize(void);
117:	void CreateSharedBackendStatus(void);
249:	void pgstat_beinit(void);
292:	void pgstat_bestart(void);
485:	void pgstat_clear_backend_activity_snapshot(void);
1117:	char *pgstat_clip_activity(const char *);
1060:	PgBackendStatus *pgstat_fetch_stat_beentry(int);
1082:	LocalPgBackendStatus *pgstat_fetch_stat_local_beentry(int);
1101:	int pgstat_fetch_stat_numbackends(void);
892:	const char *pgstat_get_backend_current_activity(int, _Bool);
970:	const char *pgstat_get_crashed_backend_activity(int, char *, int);
1034:	uint64 pgstat_get_my_query_id(void);
521:	void pgstat_report_activity(BackendState, const char *);
671:	void pgstat_report_appname(const char *);
631:	void pgstat_report_query_id(uint64, _Bool);
700:	void pgstat_report_xact_timestamp(TimestampTz);
458:	static void pgstat_beshutdown_hook(int, Datum);
727:	static void pgstat_read_current_status(void);
500:	static void pgstat_setup_backend_status_context(void);

File backtrace.c:
101:	int __GI___backtrace(void **, int);
73:	static _Unwind_Reason_Code backtrace_helper(struct _Unwind_Context *, void *);
45:	static _Unwind_Word dummy_getcfa(struct _Unwind_Context *);
130:	static void free_mem(void);
52:	static void init(void);

File backtracesyms.c:
37:	char **__backtrace_symbols(void * const *, int);

File backtracesymsfd.c:
36:	void __GI___backtrace_symbols_fd(void * const *, int, int);

File backup_manifest.c:
98:	void AddFileToBackupManifest(backup_manifest_info *, const char *, const char *, size_t, pg_time_t, pg_checksum_context *);
209:	void AddWALInfoToBackupManifest(backup_manifest_info *, XLogRecPtr, TimeLineID, XLogRecPtr, TimeLineID);
88:	void FreeBackupManifest(backup_manifest_info *);
56:	void InitializeBackupManifest(backup_manifest_info *, backup_manifest_option, pg_checksum_type);
313:	void SendBackupManifest(backup_manifest_info *);
397:	static void AppendStringToManifest(backup_manifest_info *, char *);
33:	static _Bool IsManifestEnabled(backup_manifest_info *);

File barrier.c:
203:	_Bool BarrierArriveAndDetach(Barrier *);
213:	_Bool BarrierArriveAndDetachExceptLast(Barrier *);
125:	_Bool BarrierArriveAndWait(Barrier *, uint32);
236:	int BarrierAttach(Barrier *);
256:	_Bool BarrierDetach(Barrier *);
100:	void BarrierInit(Barrier *, int);
281:	int BarrierParticipants(Barrier *);
265:	int BarrierPhase(Barrier *);
300:	static _Bool BarrierDetachImpl(Barrier *, _Bool);

File base64.c:
239:	int pg_b64_dec_len(int);
116:	int pg_b64_decode(const char *, int, char *, int);
224:	int pg_b64_enc_len(int);
49:	int pg_b64_encode(const char *, int, char *, int);

File basebackup.c:
932:	void SendBaseBackup(BaseBackupCmd *);
969:	static void SendBackupHeader(List *);
1047:	static void SendXlogRecPtrResult(XLogRecPtr, TimeLineID);
1883:	static int64 _tarWriteDir(const char *, int, struct stat *, _Bool);
1840:	static int64 _tarWriteHeader(const char *, const char *, struct stat *, _Bool);
2014:	static int basebackup_read_file(int, char *, size_t, off_t, const char *, _Bool);
750:	static int compareWalFileNames(const ListCell *, const ListCell *);
1538:	static _Bool is_checksummed_file(const char *, const char *);
762:	static void parse_basebackup_options(List *, basebackup_options *);
256:	static void perform_base_backup(basebackup_options *);
1217:	static int64 sendDir(const char *, int, _Bool, List *, _Bool, backup_manifest_info *, const char *);
1584:	static _Bool sendFile(const char *, const char *, struct stat *, _Bool, Oid, backup_manifest_info *, const char *);
1102:	static void sendFileWithContent(const char *, const char *, backup_manifest_info *);
1164:	static int64 sendTablespace(char *, char *, _Bool, backup_manifest_info *);
959:	static void send_int8_string(StringInfoData *, int64);
1903:	static void throttle(size_t);
1977:	static void update_basebackup_progress(int64);

File basename.c:
22:	char *__GI___basename(const char *);

File be-fsstubs.c:
629:	void AtEOSubXact_LargeObject(_Bool, SubTransactionId, SubTransactionId);
583:	void AtEOXact_LargeObject(_Bool);
121:	Datum be_lo_close(FunctionCallInfo);
244:	Datum be_lo_creat(FunctionCallInfo);
255:	Datum be_lo_create(FunctionCallInfo);
466:	Datum be_lo_export(FunctionCallInfo);
811:	Datum be_lo_from_bytea(FunctionCallInfo);
776:	Datum be_lo_get(FunctionCallInfo);
790:	Datum be_lo_get_fragment(FunctionCallInfo);
385:	Datum be_lo_import(FunctionCallInfo);
397:	Datum be_lo_import_with_oid(FunctionCallInfo);
201:	Datum be_lo_lseek(FunctionCallInfo);
226:	Datum be_lo_lseek64(FunctionCallInfo);
85:	Datum be_lo_open(FunctionCallInfo);
832:	Datum be_lo_put(FunctionCallInfo);
266:	Datum be_lo_tell(FunctionCallInfo);
289:	Datum be_lo_tell64(FunctionCallInfo);
559:	Datum be_lo_truncate(FunctionCallInfo);
569:	Datum be_lo_truncate64(FunctionCallInfo);
305:	Datum be_lo_unlink(FunctionCallInfo);
346:	Datum be_loread(FunctionCallInfo);
364:	Datum be_lowrite(FunctionCallInfo);
149:	int lo_read(int, char *, int);
177:	int lo_write(int, const char *, int);
700:	static void closeLOfd(int);
725:	static bytea *lo_get_fragment_internal(Oid, int64, int32);
406:	static Oid lo_import_internal(text *, Oid);
538:	static void lo_truncate_internal(int32, int64);
656:	static int newLOfd(void);

File be-secure-common.c:
132:	_Bool check_ssl_key_file_permissions(const char *, _Bool);
39:	int run_ssl_passphrase_command(const char *, _Bool, char *, int);

File be-secure.c:
135:	void secure_close(Port *);
91:	void secure_destroy(void);
78:	int secure_initialize(_Bool);
102:	_Bool secure_loaded_verify_locations(void);
115:	int secure_open_server(Port *);
236:	ssize_t secure_raw_read(Port *, void *, size_t);
332:	ssize_t secure_raw_write(Port *, const void *, size_t);
147:	ssize_t secure_read(Port *, void *, size_t);
260:	ssize_t secure_write(Port *, void *, size_t);

File bernoulli.c:
65:	Datum tsm_bernoulli_handler(FunctionCallInfo);
136:	static void bernoulli_beginsamplescan(SampleScanState *, Datum *, int, uint32);
127:	static void bernoulli_initsamplescan(SampleScanState *, int);
181:	static OffsetNumber bernoulli_nextsampletuple(SampleScanState *, BlockNumber, OffsetNumber);
86:	static void bernoulli_samplescangetsamplesize(PlannerInfo *, RelOptInfo *, List *, BlockNumber *, double *);

File bgworker.c:
158:	void BackgroundWorkerShmemInit(void);
142:	Size BackgroundWorkerShmemSize(void);
242:	void BackgroundWorkerStateChange(_Bool);
514:	void BackgroundWorkerStopNotifications(pid_t);
426:	void ForgetBackgroundWorker(slist_mutable_iter *);
541:	void ForgetUnstartedBackgroundWorkers(void);
1085:	BgwHandleStatus GetBackgroundWorkerPid(BackgroundWorkerHandle *, pid_t *);
1299:	const char *GetBackgroundWorkerTypeByPid(pid_t);
889:	void RegisterBackgroundWorker(BackgroundWorker *);
973:	_Bool RegisterDynamicBackgroundWorker(BackgroundWorker *, BackgroundWorkerHandle **);
480:	void ReportBackgroundWorkerExit(slist_mutable_iter *);
461:	void ReportBackgroundWorkerPID(RegisteredBgWorker *);
579:	void ResetBackgroundWorkerCrashTimes(void);
734:	void StartBackgroundWorker(void);
1224:	void TerminateBackgroundWorker(BackgroundWorkerHandle *);
1185:	BgwHandleStatus WaitForBackgroundWorkerShutdown(BackgroundWorkerHandle *);
1140:	BgwHandleStatus WaitForBackgroundWorkerStartup(BackgroundWorkerHandle *, pid_t *);
217:	static RegisteredBgWorker *FindRegisteredWorkerBySlotNumber(int);
1265:	static bgworker_main_type LookupBackgroundWorkerFunction(const char *, const char *);
652:	static _Bool SanityCheckBackgroundWorker(BackgroundWorker *, int);
717:	static void bgworker_die(int);

File bgwriter.c:
94:	void BackgroundWriterMain(void);

File binaryheap.c:
142:	void binaryheap_add(binaryheap *, Datum);
110:	void binaryheap_add_unordered(binaryheap *, Datum);
33:	binaryheap *binaryheap_allocate(int, binaryheap_comparator, void *);
126:	void binaryheap_build(binaryheap *);
159:	Datum binaryheap_first(binaryheap *);
69:	void binaryheap_free(binaryheap *);
174:	Datum binaryheap_remove_first(binaryheap *);
204:	void binaryheap_replace_first(binaryheap *, Datum);
57:	void binaryheap_reset(binaryheap *);
84:	static int left_offset(int);
96:	static int parent_offset(int);
90:	static int right_offset(int);
264:	static void sift_down(binaryheap *, int);
232:	static void sift_up(binaryheap *, int);
218:	static void swap_nodes(binaryheap *, int, int);

File bindrsvprt.c:
131:	int __GI_bindresvport(int, struct sockaddr_in *);

File bindtextdom.c:
327:	char *__bind_textdomain_codeset(const char *, const char *);
318:	char *__bindtextdomain(const char *, const char *);
75:	static void set_binding_values(const char *, const char **, const char **);

File bipartite_match.c:
39:	BipartiteMatchState *BipartiteMatch(int, int, short **);
78:	void BipartiteMatchFree(BipartiteMatchState *);
93:	static _Bool hk_breadth_search(BipartiteMatchState *);
146:	static _Bool hk_depth_search(BipartiteMatchState *, int);

File bitmapset.c:
1179:	uint32 bitmap_hash(const void *, Size);
1189:	int bitmap_match(const void *, const void *, Size);
738:	Bitmapset *bms_add_member(Bitmapset *, int);
795:	Bitmapset *bms_add_members(Bitmapset *, const Bitmapset *);
836:	Bitmapset *bms_add_range(Bitmapset *, int, int);
147:	int bms_compare(const Bitmapset *, const Bitmapset *);
74:	Bitmapset *bms_copy(const Bitmapset *);
775:	Bitmapset *bms_del_member(Bitmapset *, int);
930:	Bitmapset *bms_del_members(Bitmapset *, const Bitmapset *);
291:	Bitmapset *bms_difference(const Bitmapset *, const Bitmapset *);
94:	_Bool bms_equal(const Bitmapset *, const Bitmapset *);
998:	int bms_first_member(Bitmapset *);
208:	void bms_free(Bitmapset *);
617:	_Bool bms_get_singleton_member(const Bitmapset *, int *);
1156:	uint32 bms_hash_value(const Bitmapset *);
904:	Bitmapset *bms_int_members(Bitmapset *, const Bitmapset *);
259:	Bitmapset *bms_intersect(const Bitmapset *, const Bitmapset *);
703:	_Bool bms_is_empty(const Bitmapset *);
427:	_Bool bms_is_member(int, const Bitmapset *);
315:	_Bool bms_is_subset(const Bitmapset *, const Bitmapset *);
951:	Bitmapset *bms_join(Bitmapset *, Bitmapset *);
186:	Bitmapset *bms_make_singleton(int);
453:	int bms_member_index(Bitmapset *, int);
674:	BMS_Membership bms_membership(const Bitmapset *);
1045:	int bms_next_member(const Bitmapset *, int);
547:	_Bool bms_nonempty_difference(const Bitmapset *, const Bitmapset *);
648:	int bms_num_members(const Bitmapset *);
494:	_Bool bms_overlap(const Bitmapset *, const Bitmapset *);
516:	_Bool bms_overlap_list(const Bitmapset *, const List *);
1104:	int bms_prev_member(const Bitmapset *, int);
579:	int bms_singleton_member(const Bitmapset *);
352:	BMS_Comparison bms_subset_compare(const Bitmapset *, const Bitmapset *);
225:	Bitmapset *bms_union(const Bitmapset *, const Bitmapset *);

File bloomfilter.c:
136:	void bloom_add_element(bloom_filter *, unsigned char *, size_t);
88:	bloom_filter *bloom_create(int64, int, uint64);
127:	void bloom_free(bloom_filter *);
158:	_Bool bloom_lacks_element(bloom_filter *, unsigned char *, size_t);
188:	double bloom_prop_bits_set(bloom_filter *);
251:	static void k_hashes(bloom_filter *, uint32 *, unsigned char *, size_t);
289:	static uint32 mod_m(uint32, uint64);
211:	static int my_bloom_power(uint64);
230:	static int optimal_k(uint64, int64);

File bool.c:
335:	Datum bool_accum(FunctionCallInfo);
356:	Datum bool_accum_inv(FunctionCallInfo);
377:	Datum bool_alltrue(FunctionCallInfo);
392:	Datum bool_anytrue(FunctionCallInfo);
294:	Datum booland_statefunc(FunctionCallInfo);
230:	Datum booleq(FunctionCallInfo);
275:	Datum boolge(FunctionCallInfo);
257:	Datum boolgt(FunctionCallInfo);
130:	Datum boolin(FunctionCallInfo);
266:	Datum boolle(FunctionCallInfo);
248:	Datum boollt(FunctionCallInfo);
239:	Datum boolne(FunctionCallInfo);
306:	Datum boolor_statefunc(FunctionCallInfo);
164:	Datum boolout(FunctionCallInfo);
181:	Datum boolrecv(FunctionCallInfo);
194:	Datum boolsend(FunctionCallInfo);
211:	Datum booltext(FunctionCallInfo);
30:	_Bool parse_bool(const char *, _Bool *);
36:	_Bool parse_bool_with_len(const char *, size_t, _Bool *);
318:	static BoolAggState *makeBoolAggState(FunctionCallInfo);

File bootparse.c:
1259:	int boot_yyparse(void);
1230:	static void yydestruct(const char *, int, YYSTYPE *);

File bootparse.y:
63:	static void do_end(void);
50:	static void do_start(void);

File bootscanner.c:
1763:	YY_BUFFER_STATE boot_yy_create_buffer(FILE *, int);
1791:	void boot_yy_delete_buffer(YY_BUFFER_STATE);
1838:	void boot_yy_flush_buffer(YY_BUFFER_STATE);
1965:	YY_BUFFER_STATE boot_yy_scan_buffer(char *, yy_size_t);
2015:	YY_BUFFER_STATE boot_yy_scan_bytes(const char *, int);
2002:	YY_BUFFER_STATE boot_yy_scan_string(const char *);
1718:	void boot_yy_switch_to_buffer(YY_BUFFER_STATE);
2227:	void *boot_yyalloc(yy_size_t);
2245:	void boot_yyfree(void *);
2142:	int boot_yyget_debug(void);
2086:	FILE *boot_yyget_in(void);
2102:	int boot_yyget_leng(void);
2077:	int boot_yyget_lineno(void);
2094:	FILE *boot_yyget_out(void);
2111:	char *boot_yyget_text(void);
1024:	int boot_yylex(void);
2181:	int boot_yylex_destroy(void);
1897:	void boot_yypop_buffer_state(void);
1867:	void boot_yypush_buffer_state(YY_BUFFER_STATE);
2232:	void *boot_yyrealloc(void *, yy_size_t);
1701:	void boot_yyrestart(FILE *);
2147:	void boot_yyset_debug(int);
2132:	void boot_yyset_in(FILE *);
2120:	void boot_yyset_lineno(int);
2137:	void boot_yyset_out(FILE *);
1810:	static void boot_yy_init_buffer(YY_BUFFER_STATE, FILE *);
1749:	static void boot_yy_load_buffer_state(void);
1916:	static void boot_yyensure_buffer_stack(void);
2049:	static void yy_fatal_error(const char *);
1422:	static int yy_get_next_buffer(void);
1560:	static yy_state_type yy_get_previous_state(void);
2152:	static int yy_init_globals(void);
1593:	static yy_state_type yy_try_NUL_trans(yy_state_type);

File bootscanner.l:
124:	void boot_yyerror(const char *);
31:	static void fprintf_to_ereport(const char *, const char *);

File bootstrap.c:
197:	void AuxiliaryProcessMain(int, char **);
677:	void DefineAttr(char *, char *, int, int);
852:	void InsertOneNull(int);
786:	void InsertOneTuple(void);
814:	void InsertOneValue(char *, int);
994:	void boot_get_type_io_data(Oid, int16 *, _Bool *, char *, char *, Oid *, Oid *, Oid *);
595:	void boot_openrel(char *);
1139:	void build_indices(void);
640:	void closerel(char *);
1089:	void index_register(Oid, Oid, IndexInfo *);
1071:	static Form_pg_attribute AllocateAttribute(void);
497:	static void BootstrapModeMain(void);
484:	static void CheckerModeMain(void);
576:	static void ShutdownAuxiliaryProcess(int, Datum);
553:	static void bootstrap_signals(void);
870:	static void cleanup(void);
923:	static Oid gettype(char *);
883:	static void populate_typ_list(void);

File brin.c:
1267:	void brinGetStats(Relation, BrinStatsData *);
1200:	BrinDesc *brin_build_desc(Relation);
1116:	Datum brin_desummarize_range(FunctionCallInfo);
1255:	void brin_free_desc(BrinDesc *);
994:	Datum brin_summarize_new_values(FunctionCallInfo);
1009:	Datum brin_summarize_range(FunctionCallInfo);
325:	IndexScanDesc brinbeginscan(Relation, int, int);
817:	IndexBuildResult *brinbuild(Relation, Relation, IndexInfo *);
901:	void brinbuildempty(Relation);
931:	IndexBulkDeleteResult *brinbulkdelete(IndexVacuumInfo *, IndexBulkDeleteResult *, IndexBulkDeleteCallback, void *);
755:	void brinendscan(IndexScanDesc);
354:	int64 bringetbitmap(IndexScanDesc, TIDBitmap *);
90:	Datum brinhandler(FunctionCallInfo);
154:	_Bool brininsert(Relation, Datum *, _Bool *, ItemPointer, Relation, IndexUniqueCheck, _Bool, IndexInfo *);
976:	bytea *brinoptions(Datum, _Bool);
735:	void brinrescan(IndexScanDesc, ScanKey, int, ScanKey, int);
946:	IndexBulkDeleteResult *brinvacuumcleanup(IndexVacuumInfo *, IndexBulkDeleteResult *);
1710:	static _Bool add_values_to_range(Relation, BrinDesc *, BrinMemTuple *, Datum *, _Bool *);
1677:	static void brin_vacuum_scan(Relation, BufferAccessStrategy);
772:	static void brinbuildCallback(Relation, ItemPointer, Datum *, _Bool *, _Bool, void *);
1485:	static void brinsummarize(Relation, Relation, BlockNumber, _Bool, double *, double *);
1762:	static _Bool check_null_keys(BrinValues *, ScanKey *, int);
1582:	static void form_and_insert_tuple(BrinBuildState *);
1288:	static BrinBuildState *initialize_brin_buildstate(Relation, BrinRevmap *, BlockNumber);
1358:	static void summarize_range(IndexInfo *, BrinBuildState *, Relation, BlockNumber, BlockNumber);
1313:	static void terminate_brin_buildstate(BrinBuildState *);
1602:	static void union_tuples(BrinDesc *, BrinMemTuple *, BrinTuple *);

File brin_bloom.c:
514:	Datum brin_bloom_add_value(FunctionCallInfo);
569:	Datum brin_bloom_consistent(FunctionCallInfo);
424:	Datum brin_bloom_opcinfo(FunctionCallInfo);
713:	Datum brin_bloom_options(FunctionCallInfo);
743:	Datum brin_bloom_summary_in(FunctionCallInfo);
765:	Datum brin_bloom_summary_out(FunctionCallInfo);
789:	Datum brin_bloom_summary_recv(FunctionCallInfo);
806:	Datum brin_bloom_summary_send(FunctionCallInfo);
638:	Datum brin_bloom_union(FunctionCallInfo);
344:	static BloomFilter *bloom_add_value(BloomFilter *, uint32, _Bool *);
381:	static _Bool bloom_contains_value(BloomFilter *, uint32);
675:	static FmgrInfo *bloom_get_procinfo(BrinDesc *, uint16, uint16);
272:	static BloomFilter *bloom_init(int, double);
471:	static int brin_bloom_get_ndistinct(BrinDesc *, BloomOptions *);

File brin_inclusion.c:
138:	Datum brin_inclusion_add_value(FunctionCallInfo);
251:	Datum brin_inclusion_consistent(FunctionCallInfo);
94:	Datum brin_inclusion_opcinfo(FunctionCallInfo);
475:	Datum brin_inclusion_union(FunctionCallInfo);
545:	static FmgrInfo *inclusion_get_procinfo(BrinDesc *, uint16, uint16);
603:	static FmgrInfo *inclusion_get_strategy_procinfo(BrinDesc *, uint16, Oid, uint16);

File brin_minmax.c:
66:	Datum brin_minmax_add_value(FunctionCallInfo);
139:	Datum brin_minmax_consistent(FunctionCallInfo);
36:	Datum brin_minmax_opcinfo(FunctionCallInfo);
210:	Datum brin_minmax_union(FunctionCallInfo);
263:	static FmgrInfo *minmax_get_strategy_procinfo(BrinDesc *, uint16, Oid, uint16);

File brin_minmax_multi.c:
2434:	Datum brin_minmax_multi_add_value(FunctionCallInfo);
2571:	Datum brin_minmax_multi_consistent(FunctionCallInfo);
2076:	Datum brin_minmax_multi_distance_date(FunctionCallInfo);
1879:	Datum brin_minmax_multi_distance_float4(FunctionCallInfo);
1905:	Datum brin_minmax_multi_distance_float8(FunctionCallInfo);
2319:	Datum brin_minmax_multi_distance_inet(FunctionCallInfo);
1931:	Datum brin_minmax_multi_distance_int2(FunctionCallInfo);
1949:	Datum brin_minmax_multi_distance_int4(FunctionCallInfo);
1967:	Datum brin_minmax_multi_distance_int8(FunctionCallInfo);
2152:	Datum brin_minmax_multi_distance_interval(FunctionCallInfo);
2234:	Datum brin_minmax_multi_distance_macaddr(FunctionCallInfo);
2271:	Datum brin_minmax_multi_distance_macaddr8(FunctionCallInfo);
2017:	Datum brin_minmax_multi_distance_numeric(FunctionCallInfo);
2213:	Datum brin_minmax_multi_distance_pg_lsn(FunctionCallInfo);
1986:	Datum brin_minmax_multi_distance_tid(FunctionCallInfo);
2093:	Datum brin_minmax_multi_distance_time(FunctionCallInfo);
2131:	Datum brin_minmax_multi_distance_timestamp(FunctionCallInfo);
2113:	Datum brin_minmax_multi_distance_timetz(FunctionCallInfo);
2043:	Datum brin_minmax_multi_distance_uuid(FunctionCallInfo);
1855:	Datum brin_minmax_multi_opcinfo(FunctionCallInfo);
2982:	Datum brin_minmax_multi_options(FunctionCallInfo);
3004:	Datum brin_minmax_multi_summary_in(FunctionCallInfo);
3026:	Datum brin_minmax_multi_summary_out(FunctionCallInfo);
3151:	Datum brin_minmax_multi_summary_recv(FunctionCallInfo);
3168:	Datum brin_minmax_multi_summary_send(FunctionCallInfo);
2757:	Datum brin_minmax_multi_union(FunctionCallInfo);
427:	static void AssertCheckExpandedRanges(BrinDesc *, Oid, AttrNumber, Form_pg_attribute, ExpandedRange *, int);
297:	static void AssertCheckRanges(Ranges *, FmgrInfo *, Oid);
2421:	static int brin_minmax_multi_get_values(BrinDesc *, MinMaxMultiOptions *);
2402:	static void brin_minmax_multi_serialize(BrinDesc *, Datum, Datum *);
1331:	static DistanceValue *build_distances(FmgrInfo *, Oid, ExpandedRange *, int);
1388:	static ExpandedRange *build_expanded_ranges(FmgrInfo *, Oid, Ranges *, int *);
1784:	static void compactify_ranges(BrinDesc *, Ranges *, int);
1307:	static int compare_distances(const void *, const void *);
860:	static int compare_expanded_ranges(const void *, const void *, void *);
898:	static int compare_values(const void *, const void *, void *);
1603:	static _Bool ensure_free_space_in_buffer(BrinDesc *, Oid, AttrNumber, Form_pg_attribute, Ranges *);
1136:	static void fill_expanded_ranges(ExpandedRange *, int, Ranges *);
923:	static _Bool has_matching_range(BrinDesc *, Oid, Ranges *, Datum, AttrNumber, Oid);
1233:	static int merge_overlapping_ranges(FmgrInfo *, Oid, ExpandedRange *, int);
2882:	static FmgrInfo *minmax_multi_get_procinfo(BrinDesc *, uint16, uint16);
2926:	static FmgrInfo *minmax_multi_get_strategy_procinfo(BrinDesc *, uint16, Oid, uint16);
487:	static Ranges *minmax_multi_init(int);
1698:	static _Bool range_add_value(BrinDesc *, Oid, AttrNumber, Form_pg_attribute, Ranges *, Datum);
1047:	static _Bool range_contains_value(BrinDesc *, Oid, AttrNumber, Form_pg_attribute, Ranges *, Datum, _Bool);
517:	static void range_deduplicate_values(Ranges *);
723:	static Ranges *range_deserialize(int, SerializedRanges *);
577:	static SerializedRanges *range_serialize(Ranges *);
1478:	static int reduce_expanded_ranges(ExpandedRange *, int, DistanceValue *, int, FmgrInfo *, Oid);
1181:	static int sort_expanded_ranges(FmgrInfo *, Oid, ExpandedRange *, int);
1560:	static void store_expanded_ranges(Ranges *, ExpandedRange *, int);

File brin_pageops.c:
324:	_Bool brin_can_do_samepage_update(Buffer, Size, Size);
343:	OffsetNumber brin_doinsert(Relation, BlockNumber, BrinRevmap *, Buffer *, BlockNumber, BrinTuple *, Size);
54:	_Bool brin_doupdate(Relation, BlockNumber, BrinRevmap *, BlockNumber, Buffer, OffsetNumber, const BrinTuple *, Size, const BrinTuple *, Size, _Bool);
565:	void brin_evacuate_page(Relation, BlockNumber, BrinRevmap *, Buffer);
487:	void brin_metapage_init(Page, BlockNumber, uint16);
625:	void brin_page_cleanup(Relation, Buffer);
476:	void brin_page_init(Page, uint16);
525:	_Bool brin_start_evacuating_page(Relation, Buffer);
913:	static Size br_page_get_freespace(Page);
691:	static Buffer brin_getinsertbuffer(Relation, Buffer, Size, _Bool *);
881:	static void brin_initialize_empty_new_buffer(Relation, Buffer);

File brin_revmap.c:
197:	BrinTuple *brinGetTupleForHeapBlock(BrinRevmap *, BlockNumber, Buffer *, OffsetNumber *, Size *, int, Snapshot);
137:	Buffer brinLockRevmapPageForUpdate(BrinRevmap *, BlockNumber);
328:	_Bool brinRevmapDesummarizeRange(Relation, BlockNumber);
115:	void brinRevmapExtend(BrinRevmap *, BlockNumber);
71:	BrinRevmap *brinRevmapInitialize(Relation, BlockNumber *, Snapshot);
103:	void brinRevmapTerminate(BrinRevmap *);
158:	void brinSetHeapBlockItemptr(Buffer, BlockNumber, BlockNumber, ItemPointerData);
510:	static BlockNumber revmap_extend_and_get_blkno(BrinRevmap *, BlockNumber);
452:	static BlockNumber revmap_get_blkno(BrinRevmap *, BlockNumber);
473:	static Buffer revmap_get_buffer(BrinRevmap *, BlockNumber);
532:	static void revmap_physical_extend(BrinRevmap *);

File brin_tuple.c:
443:	BrinTuple *brin_copy_tuple(BrinTuple *, Size, BrinTuple *, Size *);
546:	BrinMemTuple *brin_deform_tuple(BrinDesc *, BrinTuple *, BrinMemTuple *);
385:	BrinTuple *brin_form_placeholder_tuple(BrinDesc *, BlockNumber, Size *);
99:	BrinTuple *brin_form_tuple(BrinDesc *, BlockNumber, BrinMemTuple *, Size *);
430:	void brin_free_tuple(BrinTuple *);
506:	BrinMemTuple *brin_memtuple_initialize(BrinMemTuple *, BrinDesc *);
479:	BrinMemTuple *brin_new_memtuple(BrinDesc *);
462:	_Bool brin_tuples_equal(const BrinTuple *, Size, const BrinTuple *, Size);
633:	static void brin_deconstruct_tuple(BrinDesc *, char *, bits8 *, _Bool, Datum *, _Bool *, _Bool *);
61:	static TupleDesc brtuple_disk_tupdesc(BrinDesc *);

File brin_validate.c:
37:	_Bool brinvalidate(Oid);

File brin_xlog.c:
342:	void brin_mask(char *, BlockNumber);
309:	void brin_redo(XLogReaderState *);
24:	static void brin_xlog_createidx(XLogReaderState *);
269:	static void brin_xlog_desummarize_page(XLogReaderState *);
124:	static void brin_xlog_insert(XLogReaderState *);
46:	static void brin_xlog_insert_update(XLogReaderState *, xl_brin_insert *);
208:	static void brin_xlog_revmap_extend(XLogReaderState *);
170:	static void brin_xlog_samepage_update(XLogReaderState *);
135:	static void brin_xlog_update(XLogReaderState *);

File brindesc.c:
20:	void brin_desc(StringInfo, XLogReaderState *);
74:	const char *brin_identify(uint8);

File bsd-getpgrp.c:
28:	pid_t __bsd_getpgrp(pid_t);

File bsearch_arg.c:
55:	void *bsearch_arg(const void *, const void *, size_t, size_t, int (*)(const void *, const void *, void *), void *);

File btowc.c:
32:	wint_t __btowc(int);

File buf_init.c:
156:	Size BufferShmemSize(void);
67:	void InitBufferPool(void);

File buf_table.c:
149:	void BufTableDelete(BufferTag *, uint32);
79:	uint32 BufTableHashCode(BufferTag *);
119:	int BufTableInsert(BufferTag *, uint32, int);
91:	int BufTableLookup(BufferTag *, uint32);
42:	Size BufTableShmemSize(int);
52:	void InitBufTable(int);

File buffile.c:
833:	long BufFileAppend(BufFile *, BufFile *);
395:	void BufFileClose(BufFile *);
262:	BufFile *BufFileCreateShared(SharedFileSet *, const char *);
188:	BufFile *BufFileCreateTemp(_Bool);
347:	void BufFileDeleteShared(SharedFileSet *, const char *);
377:	void BufFileExportShared(BufFile *);
284:	BufFile *BufFileOpenShared(SharedFileSet *, const char *, int);
543:	size_t BufFileRead(BufFile *, void *, size_t);
650:	int BufFileSeek(BufFile *, int, off_t, int);
761:	int BufFileSeekBlock(BufFile *, long);
794:	int64 BufFileSize(BufFile *);
743:	void BufFileTell(BufFile *, int *, off_t *);
861:	void BufFileTruncateShared(BufFile *, int, off_t);
586:	void BufFileWrite(BufFile *, void *, size_t);
463:	static void BufFileDumpBuffer(BufFile *);
630:	static void BufFileFlush(BufFile *);
417:	static void BufFileLoadBuffer(BufFile *);
226:	static File MakeNewSharedSegment(BufFile *, int);
217:	static void SharedSegmentName(char *, const char *, int);
151:	static void extendBufFile(BufFile *);
134:	static BufFile *makeBufFile(File);
113:	static BufFile *makeBufFileCommon(int);

File bufmask.c:
95:	void mask_lp_flags(Page);
119:	void mask_page_content(Page);
46:	void mask_page_hint_bits(Page);
31:	void mask_page_lsn_and_checksum(Page);
71:	void mask_unused_space(Page);

File bufmgr.c:
4502:	void AbortBufferIO(void);
2589:	void AtEOXact_Buffers(_Bool);
2219:	_Bool BgBufferSync(WritebackContext *);
2771:	BlockNumber BufferGetBlockNumber(Buffer);
3031:	XLogRecPtr BufferGetLSNAtomic(Buffer);
2792:	void BufferGetTag(Buffer, RelFileNode *, ForkNumber *, BlockNumber *);
3001:	_Bool BufferIsPermanent(Buffer);
2757:	void BufmgrCommit(void);
2747:	void CheckPointBuffers(int);
4058:	_Bool ConditionalLockBuffer(Buffer);
4266:	_Bool ConditionalLockBufferForCleanup(Buffer);
3431:	void DropDatabaseBuffers(Oid);
3077:	void DropRelFileNodeBuffers(SMgrRelation, ForkNumber *, int, BlockNumber *);
3201:	void DropRelFileNodesAllBuffers(SMgrRelation *, int);
3728:	void FlushDatabaseBuffers(Oid);
3771:	void FlushOneBuffer(Buffer);
3535:	void FlushRelationBuffers(Relation);
3624:	void FlushRelationsAllBuffers(SMgrRelation *, int);
4240:	_Bool HoldingBufferPinThatDelaysRecovery(void);
3829:	void IncrBufferRefCount(Buffer);
2611:	void InitBufferPoolAccess(void);
2634:	void InitBufferPoolBackend(void);
4322:	_Bool IsBufferCleanupOK(Buffer);
4800:	void IssuePendingWritebacks(WritebackContext *);
4612:	uint32 LockBufHdr(BufferDesc *);
4032:	void LockBuffer(Buffer, int);
4089:	void LockBufferForCleanup(Buffer);
1575:	void MarkBufferDirty(Buffer);
3861:	void MarkBufferDirtyHint(Buffer, _Bool);
587:	PrefetchBufferResult PrefetchBuffer(Relation, ForkNumber, BlockNumber);
500:	PrefetchBufferResult PrefetchSharedBuffer(SMgrRelation, ForkNumber, BlockNumber);
2704:	void PrintBufferLeakWarning(Buffer);
704:	Buffer ReadBuffer(Relation, BlockNumber);
751:	Buffer ReadBufferExtended(Relation, ForkNumber, BlockNumber, ReadBufferMode, BufferAccessStrategy);
790:	Buffer ReadBufferWithoutRelcache(RelFileNode, ForkNumber, BlockNumber, ReadBufferMode, BufferAccessStrategy);
618:	_Bool ReadRecentBuffer(RelFileNode, ForkNumber, BlockNumber, Buffer);
2958:	BlockNumber RelationGetNumberOfBlocksInFork(Relation, ForkNumber);
1638:	Buffer ReleaseAndReadBuffer(Buffer, Relation, BlockNumber);
3791:	void ReleaseBuffer(Buffer);
4759:	void ScheduleBufferTagForWriteback(WritebackContext *, BufferTag *);
4873:	void TestForOldSnapshot_impl(Snapshot, Relation);
4004:	void UnlockBuffers(void);
3814:	void UnlockReleaseBuffer(Buffer);
4747:	void WritebackContextInit(WritebackContext *, int *);
2644:	static void AtProcExit_Buffers(int, Datum);
1111:	static BufferDesc *BufferAlloc(SMgrRelation, char, ForkNumber, BlockNumber, BufferAccessStrategy, _Bool *);
1943:	static void BufferSync(int);
2663:	static void CheckForBufferLeaks(void);
3370:	static void FindAndDropRelFileNodeBuffers(RelFileNode, ForkNumber, BlockNumber, BlockNumber);
2831:	static void FlushBuffer(BufferDesc *, SMgrRelation);
410:	static void ForgetPrivateRefCountEntry(PrivateRefCountEntry *);
387:	static int32 GetPrivateRefCount(Buffer);
307:	static PrivateRefCountEntry *GetPrivateRefCountEntry(Buffer, _Bool);
1477:	static void InvalidateBuffer(BufferDesc *);
281:	static PrivateRefCountEntry *NewPrivateRefCountEntry(Buffer);
1696:	static _Bool PinBuffer(BufferDesc *, BufferAccessStrategy);
1799:	static void PinBuffer_Locked(BufferDesc *);
811:	static Buffer ReadBuffer_common(SMgrRelation, char, ForkNumber, BlockNumber, ReadBufferMode, BufferAccessStrategy, _Bool *);
215:	static void ReservePrivateRefCountEntry(void);
4419:	static _Bool StartBufferIO(BufferDesc *, _Bool);
2522:	static int SyncOneBuffer(int, _Bool, WritebackContext *);
4470:	static void TerminateBufferIO(BufferDesc *, _Bool, uint32);
1844:	static void UnpinBuffer(BufferDesc *, _Bool);
4640:	static uint32 WaitBufHdrUnlocked(BufferDesc *);
4376:	static void WaitIO(BufferDesc *);
4664:	static int buffertag_comparator(const BufferTag *, const BufferTag *);
4693:	static int ckpt_buforder_comparator(const CkptSortItem *, const CkptSortItem *);
4566:	static void local_buffer_write_error_callback(void *);
4585:	static int rnode_comparator(const void *, const void *);
4547:	static void shared_buffer_write_error_callback(void *);
4724:	static int ts_ckpt_progress_comparator(Datum, Datum, void *);

File bufpage.c:
194:	OffsetNumber PageAddItemExtended(Page, Item, Size, OffsetNumber, int);
951:	Size PageGetExactFreeSpace(Page);
900:	Size PageGetFreeSpace(Page);
927:	Size PageGetFreeSpaceForMultipleTuples(Page, int);
984:	Size PageGetHeapFreeSpace(Page);
365:	Page PageGetTempPage(Page);
382:	Page PageGetTempPageCopy(Page);
402:	Page PageGetTempPageCopySpecial(Page);
1154:	void PageIndexMultiDelete(Page, OffsetNumber *, int);
1045:	void PageIndexTupleDelete(Page, OffsetNumber);
1288:	void PageIndexTupleDeleteNoCompact(Page, OffsetNumber);
1398:	_Bool PageIndexTupleOverwrite(Page, OffsetNumber, Item, Size);
42:	void PageInit(Page, Size, Size);
88:	_Bool PageIsVerifiedExtended(Page, BlockNumber, int);
709:	void PageRepairFragmentation(Page);
424:	void PageRestoreTempPage(Page, Page);
1503:	char *PageSetChecksumCopy(Page, BlockNumber);
1532:	void PageSetChecksumInplace(Page, BlockNumber);
828:	void PageTruncateLinePointerArray(Page);
474:	static void compactify_tuples(itemIdCompact, int, Page, _Bool);

File c16rtomb.c:
27:	size_t c16rtomb(char *, char16_t, mbstate_t *);

File c32rtomb.c:
27:	size_t c32rtomb(char *, char32_t, mbstate_t *);

File call_once.c:
24:	void call_once(once_flag *, void (*)(void));

File canonicalize.c:
43:	char *__GI___realpath(const char *, char *);
243:	char *__canonicalize_file_name(const char *);
228:	char *__old_realpath(const char *, char *);

File cash.c:
593:	Datum cash_cmp(FunctionCallInfo);
643:	Datum cash_div_cash(FunctionCallInfo);
744:	Datum cash_div_flt4(FunctionCallInfo);
693:	Datum cash_div_flt8(FunctionCallInfo);
895:	Datum cash_div_int2(FunctionCallInfo);
845:	Datum cash_div_int4(FunctionCallInfo);
793:	Datum cash_div_int8(FunctionCallInfo);
539:	Datum cash_eq(FunctionCallInfo);
584:	Datum cash_ge(FunctionCallInfo);
575:	Datum cash_gt(FunctionCallInfo);
97:	Datum cash_in(FunctionCallInfo);
566:	Datum cash_le(FunctionCallInfo);
557:	Datum cash_lt(FunctionCallInfo);
627:	Datum cash_mi(FunctionCallInfo);
713:	Datum cash_mul_flt4(FunctionCallInfo);
663:	Datum cash_mul_flt8(FunctionCallInfo);
866:	Datum cash_mul_int2(FunctionCallInfo);
814:	Datum cash_mul_int4(FunctionCallInfo);
764:	Datum cash_mul_int8(FunctionCallInfo);
548:	Datum cash_ne(FunctionCallInfo);
1032:	Datum cash_numeric(FunctionCallInfo);
310:	Datum cash_out(FunctionCallInfo);
611:	Datum cash_pl(FunctionCallInfo);
513:	Datum cash_recv(FunctionCallInfo);
524:	Datum cash_send(FunctionCallInfo);
945:	Datum cash_words(FunctionCallInfo);
914:	Datum cashlarger(FunctionCallInfo);
929:	Datum cashsmaller(FunctionCallInfo);
728:	Datum flt4_mul_cash(FunctionCallInfo);
678:	Datum flt8_mul_cash(FunctionCallInfo);
880:	Datum int2_mul_cash(FunctionCallInfo);
1122:	Datum int4_cash(FunctionCallInfo);
829:	Datum int4_mul_cash(FunctionCallInfo);
1152:	Datum int8_cash(FunctionCallInfo);
779:	Datum int8_mul_cash(FunctionCallInfo);
1088:	Datum numeric_cash(FunctionCallInfo);
39:	static const char *num_word(Cash);

File catalog.c:
322:	Oid GetNewOidWithIndex(Relation, Oid, AttrNumber);
431:	Oid GetNewRelFileNode(Oid, Relation, char);
182:	_Bool IsCatalogNamespace(Oid);
103:	_Bool IsCatalogRelation(Relation);
120:	_Bool IsCatalogRelationOid(Oid);
217:	_Bool IsReservedName(const char *);
243:	_Bool IsSharedRelation(Oid);
85:	_Bool IsSystemClass(Oid, Form_pg_class);
73:	_Bool IsSystemRelation(Relation);
165:	_Bool IsToastClass(Form_pg_class);
200:	_Bool IsToastNamespace(Oid);
145:	_Bool IsToastRelation(Relation);
515:	Datum pg_nextoid(FunctionCallInfo);

File catcache.c:
553:	void CatCacheInvalidate(CatCache *, uint32);
720:	void CatalogCacheFlushCatalog(Oid);
621:	void CreateCacheMemoryContext(void);
1475:	uint32 GetCatCacheHashValue(CatCache *, Datum, Datum, Datum, Datum);
764:	CatCache *InitCatCache(int, Oid, Oid, int, const int *, int);
1033:	void InitCatCachePhase2(CatCache *, _Bool);
2010:	void PrepareToInvalidateCacheTuple(Relation, HeapTuple, HeapTuple, void (*)(int, uint32, Oid));
2074:	void PrintCatCacheLeakWarning(HeapTuple);
2090:	void PrintCatCacheListLeakWarning(CatCList *);
1443:	void ReleaseCatCache(HeapTuple);
1785:	void ReleaseCatCacheList(CatCList *);
690:	void ResetCatalogCaches(void);
1150:	HeapTuple SearchCatCache(CatCache *, Datum, Datum, Datum, Datum);
1167:	HeapTuple SearchCatCache1(CatCache *, Datum);
1175:	HeapTuple SearchCatCache2(CatCache *, Datum, Datum);
1183:	HeapTuple SearchCatCache3(CatCache *, Datum, Datum, Datum);
1191:	HeapTuple SearchCatCache4(CatCache *, Datum, Datum, Datum, Datum);
1509:	CatCList *SearchCatCacheList(CatCache *, int, Datum, Datum, Datum);
1939:	static void CatCacheCopyKeys(TupleDesc, int, int *, Datum *, Datum *);
1914:	static void CatCacheFreeKeys(TupleDesc, int, int *, Datum *);
500:	static void CatCacheRemoveCList(CatCache *, CatCList *);
458:	static void CatCacheRemoveCTup(CatCache *, CatCTup *);
375:	static _Bool CatalogCacheCompareTuple(const CatCache *, int, const Datum *, const Datum *);
271:	static uint32 CatalogCacheComputeHashValue(CatCache *, int, Datum, Datum, Datum, Datum);
320:	static uint32 CatalogCacheComputeTupleHashValue(CatCache *, int, HeapTuple);
1808:	static CatCTup *CatalogCacheCreateEntry(CatCache *, HeapTuple, Datum *, uint32, Index, _Bool);
924:	static void CatalogCacheInitializeCache(CatCache *);
201:	static void GetCCHashEqFuncs(Oid, CCHashFN *, RegProcedure *, CCFastEqualFN *);
1085:	static _Bool IndexScanOK(CatCache *, ScanKey);
861:	static void RehashCatCache(CatCache *);
643:	static void ResetCatalogCache(CatCache *);
1201:	static HeapTuple SearchCatCacheInternal(CatCache *, int, Datum, Datum, Datum, Datum);
1313:	static HeapTuple SearchCatCacheMiss(CatCache *, int, uint32, Index, Datum, Datum, Datum, Datum);
118:	static _Bool chareqfast(Datum, Datum);
124:	static uint32 charhashfast(Datum);
147:	static _Bool int2eqfast(Datum, Datum);
153:	static uint32 int2hashfast(Datum);
159:	static _Bool int4eqfast(Datum, Datum);
165:	static uint32 int4hashfast(Datum);
130:	static _Bool nameeqfast(Datum, Datum);
139:	static uint32 namehashfast(Datum);
188:	static _Bool oidvectoreqfast(Datum, Datum);
194:	static uint32 oidvectorhashfast(Datum);
171:	static _Bool texteqfast(Datum, Datum);
181:	static uint32 texthashfast(Datum);

File catgets.c:
120:	int catclose(nl_catd);
89:	char *catgets(nl_catd, int, int, const char *);
32:	nl_catd catopen(const char *, int);

File cfmakeraw.c:
22:	void cfmakeraw(struct termios *);

File cfsetspeed.c:
140:	int cfsetspeed(struct termios *, speed_t);

File char.c:
195:	Datum char_text(FunctionCallInfo);
99:	Datum chareq(FunctionCallInfo);
144:	Datum charge(FunctionCallInfo);
135:	Datum chargt(FunctionCallInfo);
33:	Datum charin(FunctionCallInfo);
126:	Datum charle(FunctionCallInfo);
117:	Datum charlt(FunctionCallInfo);
108:	Datum charne(FunctionCallInfo);
48:	Datum charout(FunctionCallInfo);
66:	Datum charrecv(FunctionCallInfo);
77:	Datum charsend(FunctionCallInfo);
154:	Datum chartoi4(FunctionCallInfo);
162:	Datum i4tochar(FunctionCallInfo);
176:	Datum text_char(FunctionCallInfo);

File check_fds.c:
87:	void __libc_check_standard_fds(void);

File checkpointer.c:
1265:	void AbsorbSyncRequests(void);
697:	void CheckpointWriteDelay(int, double);
183:	void CheckpointerMain(void);
890:	void CheckpointerShmemInit(void);
871:	Size CheckpointerShmemSize(void);
1338:	_Bool FirstCallSinceLastCheckpoint(void);
1088:	_Bool ForwardSyncRequest(const FileTag *, SyncRequestType);
933:	void RequestCheckpoint(int);
609:	static void CheckArchiveTimeout(void);
1159:	static _Bool CompactCheckpointerRequestQueue(void);
548:	static void HandleCheckpointerInterrupts(void);
670:	static _Bool ImmediateCheckpointRequested(void);
768:	static _Bool IsCheckpointOnSchedule(double);
847:	static void ReqCheckpointHandler(int);
1319:	static void UpdateSharedMemoryConfig(void);

File checksum_helper.c:
176:	int pg_checksum_final(pg_checksum_context *, uint8 *);
83:	int pg_checksum_init(pg_checksum_context *, pg_checksum_type);
28:	_Bool pg_checksum_parse_type(char *, pg_checksum_type *);
56:	char *pg_checksum_type_name(pg_checksum_type);
145:	int pg_checksum_update(pg_checksum_context *, const uint8 *, size_t);

File chflags.c:
27:	int chflags(const char *, unsigned long);

File chk_fail.c:
26:	void __GI___chk_fail(void);

File chklocale.c:
330:	int pg_get_encoding_from_locale(const char *, _Bool);

File clauses.c:
1988:	void CommuteOpExpr(OpExpr *);
1973:	int NumRelids(PlannerInfo *, Node *);
176:	_Bool contain_agg_clause(Node *);
1024:	_Bool contain_exec_param(Node *, List *);
1150:	_Bool contain_leaked_vars(Node *);
364:	_Bool contain_mutable_functions(Node *);
880:	_Bool contain_nonstrict_functions(Node *);
329:	_Bool contain_subplans(Node *);
453:	_Bool contain_volatile_functions(Node *);
560:	_Bool contain_volatile_functions_not_nextval(Node *);
213:	_Bool contain_window_function(Node *);
2127:	void convert_saop_to_hashed_saop(Node *);
2191:	Node *estimate_expression_value(PlannerInfo *, Node *);
2095:	Node *eval_const_expressions(PlannerInfo *, Node *);
4739:	Expr *evaluate_expr(Expr *, Oid, int32, Oid);
3931:	List *expand_function_arguments(List *, _Bool, Oid, HeapTuple);
288:	double expression_returns_set_rows(PlannerInfo *, Node *);
1820:	Var *find_forced_null_var(Node *);
1761:	List *find_forced_null_vars(Node *);
1343:	Relids find_nonnullable_rels(Node *);
1568:	List *find_nonnullable_vars(Node *);
226:	WindowFuncLists *find_window_functions(Node *, Index);
4831:	Query *inline_set_returning_function(PlannerInfo *, RangeTblEntry *);
640:	_Bool is_parallel_safe(PlannerInfo *, Node *);
1931:	_Bool is_pseudo_constant_clause(Node *);
1951:	_Bool is_pseudo_constant_clause_relids(Node *, Relids);
621:	char max_parallel_hazard(Query *);
5177:	Bitmapset *pull_paramids(Expr *);
4082:	static List *add_function_defaults(List *, int, HeapTuple);
182:	static _Bool contain_agg_clause_walker(Node *, void *);
1066:	static _Bool contain_context_dependent_node(Node *);
1076:	static _Bool contain_context_dependent_node_walker(Node *, int *);
1030:	static _Bool contain_exec_param_walker(Node *, List *);
1156:	static _Bool contain_leaked_vars_checker(Oid, void *);
1162:	static _Bool contain_leaked_vars_walker(Node *, void *);
370:	static _Bool contain_mutable_functions_checker(Oid, void *);
376:	static _Bool contain_mutable_functions_walker(Node *, void *);
3492:	static _Bool contain_non_const_walker(Node *, void *);
886:	static _Bool contain_nonstrict_functions_checker(Oid, void *);
892:	static _Bool contain_nonstrict_functions_walker(Node *, void *);
335:	static _Bool contain_subplans_walker(Node *, void *);
459:	static _Bool contain_volatile_functions_checker(Oid, void *);
566:	static _Bool contain_volatile_functions_not_nextval_checker(Oid, void *);
573:	static _Bool contain_volatile_functions_not_nextval_walker(Node *, void *);
465:	static _Bool contain_volatile_functions_walker(Node *, void *);
2133:	static _Bool convert_saop_to_hashed_saop_walker(Node *, void *);
3508:	static _Bool ece_function_is_safe(Oid, eval_const_expressions_context *);
2236:	static Node *eval_const_expressions_mutator(Node *, eval_const_expressions_context *);
4186:	static Expr *evaluate_function(Oid, Oid, int32, Oid, Oid, List *, _Bool, HeapTuple, eval_const_expressions_context *);
4106:	static List *fetch_function_defaults(HeapTuple);
1349:	static Relids find_nonnullable_rels_walker(Node *, _Bool);
1574:	static List *find_nonnullable_vars_walker(Node *, _Bool);
238:	static _Bool find_window_functions_walker(Node *, WindowFuncLists *);
4313:	static Expr *inline_function(Oid, Oid, Oid, Oid, List *, _Bool, HeapTuple, eval_const_expressions_context *);
1869:	static _Bool is_strict_saop(ScalarArrayOpExpr *, _Bool);
709:	static _Bool max_parallel_hazard_checker(Oid, void *);
681:	static _Bool max_parallel_hazard_test(char, max_parallel_hazard_context *);
716:	static _Bool max_parallel_hazard_walker(Node *, max_parallel_hazard_context *);
5187:	static _Bool pull_paramids_walker(Node *, Bitmapset **);
4141:	static void recheck_cast_function_args(List *, Oid, Oid *, int, HeapTuple);
4012:	static List *reorder_function_arguments(List *, int, HeapTuple);
2027:	static _Bool rowtype_field_matches(Oid, int, Oid, int32, Oid);
3652:	static List *simplify_and_arguments(List *, eval_const_expressions_context *, _Bool *, _Bool *);
3746:	static Node *simplify_boolean_equality(Oid, List *);
3815:	static Expr *simplify_function(Oid, Oid, int32, Oid, Oid, List **, _Bool, _Bool, _Bool, eval_const_expressions_context *);
3546:	static List *simplify_or_arguments(List *, eval_const_expressions_context *, _Bool *, _Bool *);
4715:	static void sql_inline_error_callback(void *);
4673:	static Node *substitute_actual_parameters(Node *, int, List *, int *);
4686:	static Node *substitute_actual_parameters_mutator(Node *, substitute_actual_parameters_context *);
5117:	static Query *substitute_actual_srf_parameters(Query *, int, List *);
5132:	static Node *substitute_actual_srf_parameters_mutator(Node *, substitute_actual_srf_parameters_context *);

File clausesel.c:
690:	Selectivity clause_selectivity(PlannerInfo *, Node *, int, JoinType, SpecialJoinInfo *);
707:	Selectivity clause_selectivity_ext(PlannerInfo *, Node *, int, JoinType, SpecialJoinInfo *, _Bool);
102:	Selectivity clauselist_selectivity(PlannerInfo *, List *, int, JoinType, SpecialJoinInfo *);
119:	Selectivity clauselist_selectivity_ext(PlannerInfo *, List *, int, JoinType, SpecialJoinInfo *, _Bool);
429:	static void addRangeClause(RangeQueryClause **, Node *, _Bool, _Bool, Selectivity);
591:	static _Bool bms_is_subset_singleton(const Bitmapset *, int);
361:	static Selectivity clauselist_selectivity_or(PlannerInfo *, List *, int, JoinType, SpecialJoinInfo *, _Bool);
525:	static RelOptInfo *find_single_rel_for_clauses(PlannerInfo *, List *);
612:	static _Bool treat_as_join_clause(PlannerInfo *, Node *, RestrictInfo *, int, SpecialJoinInfo *);

File cleanup.c:
25:	void __GI___pthread_register_cancel(__pthread_unwind_buf_t *);
42:	void __GI___pthread_unregister_cancel(__pthread_unwind_buf_t *);

File cleanup_compat.c:
39:	void _pthread_cleanup_pop(struct _pthread_cleanup_buffer *, int);
24:	void _pthread_cleanup_push(struct _pthread_cleanup_buffer *, void (*)(void *), void *);

File cleanup_defer.c:
25:	void __pthread_register_cancel_defer(__pthread_unwind_buf_t *);
63:	void __pthread_unregister_cancel_restore(__pthread_unwind_buf_t *);

File cleanup_defer_compat.c:
60:	void _pthread_cleanup_pop_restore(struct _pthread_cleanup_buffer *, int);
23:	void _pthread_cleanup_push_defer(struct _pthread_cleanup_buffer *, void (*)(void *), void *);

File cleanup_routine.c:
23:	void __pthread_cleanup_routine(struct __pthread_cleanup_frame *);

File clearerr.c:
22:	void clearerr(FILE *);

File clearerr_u.c:
22:	void clearerr_unlocked(FILE *);

File clnt_gen.c:
46:	CLIENT *__GI_clnt_create(const char *, u_long, u_long, const char *);

File clnt_perr.c:
311:	void __GI_clnt_pcreateerror(const char *);
263:	void __GI_clnt_perrno(enum clnt_stat);
130:	void __GI_clnt_perror(CLIENT *, const char *);
274:	char *__GI_clnt_spcreateerror(const char *);
247:	char *__GI_clnt_sperrno(enum clnt_stat);
54:	char *__GI_clnt_sperror(CLIENT *, const char *);
388:	static void free_mem(void);

File clnt_raw.c:
86:	CLIENT *__GI_clntraw_create(u_long, u_long);
233:	static void clntraw_abort(void);
132:	static enum clnt_stat clntraw_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
238:	static bool_t clntraw_control(CLIENT *, int, char *);
244:	static void clntraw_destroy(CLIENT *);
217:	static bool_t clntraw_freeres(CLIENT *, xdrproc_t, caddr_t);
211:	static void clntraw_geterr(CLIENT *, struct rpc_err *);

File clnt_simp.c:
55:	int __GI_callrpc(const char *, u_long, u_long, u_long, xdrproc_t, const char *, xdrproc_t, char *);
123:	void __rpc_thread_clnt_cleanup(void);

File clnt_tcp.c:
112:	CLIENT *__GI_clnttcp_create(struct sockaddr_in *, u_long, u_long, int *, u_int, u_int);
350:	static void clnttcp_abort(void);
228:	static enum clnt_stat clnttcp_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
355:	static bool_t clnttcp_control(CLIENT *, int, char *);
447:	static void clnttcp_destroy(CLIENT *);
340:	static bool_t clnttcp_freeres(CLIENT *, xdrproc_t, caddr_t);
331:	static void clnttcp_geterr(CLIENT *, struct rpc_err *);
467:	static int readtcp(char *, char *, int);
515:	static int writetcp(char *, char *, int);

File clnt_udp.c:
124:	CLIENT *__GI___libc_clntudp_bufcreate(struct sockaddr_in *, u_long, u_long, struct timeval, int *, u_int, u_int, int);
218:	CLIENT *__GI_clntudp_bufcreate(struct sockaddr_in *, u_long, u_long, struct timeval, int *, u_int, u_int);
228:	CLIENT *__GI_clntudp_create(struct sockaddr_in *, u_long, u_long, struct timeval, int *);
548:	static void clntudp_abort(void);
265:	static enum clnt_stat clntudp_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
553:	static bool_t clntudp_control(CLIENT *, int, char *);
646:	static void clntudp_destroy(CLIENT *);
538:	static bool_t clntudp_freeres(CLIENT *, xdrproc_t, caddr_t);
529:	static void clntudp_geterr(CLIENT *, struct rpc_err *);

File clnt_unix.c:
113:	CLIENT *__GI_clntunix_create(struct sockaddr_un *, u_long, u_long, int *, u_int, u_int);
481:	static int __msgwrite(int, void *, size_t);
326:	static void clntunix_abort(void);
207:	static enum clnt_stat clntunix_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
331:	static bool_t clntunix_control(CLIENT *, int, char *);
421:	static void clntunix_destroy(CLIENT *);
316:	static bool_t clntunix_freeres(CLIENT *, xdrproc_t, caddr_t);
308:	static void clntunix_geterr(CLIENT *, struct rpc_err *);
535:	static int readunix(char *, char *, int);
583:	static int writeunix(char *, char *, int);

File clog.c:
713:	void BootStrapCLOG(void);
682:	Size CLOGShmemBuffers(void);
697:	void CLOGShmemInit(void);
691:	Size CLOGShmemSize(void);
819:	void CheckPointCLOG(void);
841:	void ExtendCLOG(TransactionId);
756:	void StartupCLOG(void);
640:	XidStatus TransactionIdGetStatus(TransactionId, XLogRecPtr *);
164:	void TransactionIdSetTreeStatus(TransactionId, int, TransactionId *, XidStatus, XLogRecPtr);
775:	void TrimCLOG(void);
880:	void TruncateCLOG(TransactionId, Oid);
987:	void clog_redo(XLogReaderState *);
1027:	int clogsyncfiletag(const FileTag *, char *);
935:	static _Bool CLOGPagePrecedes(int, int);
415:	static _Bool TransactionGroupUpdateXidStatus(TransactionId, XidStatus, XLogRecPtr, int);
274:	static void TransactionIdSetPageStatus(TransactionId, int, TransactionId *, XidStatus, XLogRecPtr, int, _Bool);
340:	static void TransactionIdSetPageStatusInternal(TransactionId, int, TransactionId *, XidStatus, XLogRecPtr, int);
571:	static void TransactionIdSetStatusBit(TransactionId, XidStatus, XLogRecPtr, int);
968:	static void WriteTruncateXlogRec(int, TransactionId, Oid);
954:	static void WriteZeroPageXlogRec(int);
739:	static int ZeroCLOGPage(int, _Bool);
238:	static void set_status_by_pages(int, TransactionId *, XidStatus, XLogRecPtr);

File clogdesc.c:
21:	void clog_desc(StringInfo, XLogReaderState *);
44:	const char *clog_identify(uint8);

File cluster.c:
458:	void check_index_is_clusterable(Relation, Oid, _Bool, LOCKMODE);
103:	void cluster(ParseState *, ClusterStmt *, _Bool);
277:	void cluster_rel(Oid, Oid, ClusterParams *);
1363:	void finish_heap_swap(Oid, Oid, _Bool, _Bool, _Bool, _Bool, TransactionId, MultiXactId, char);
644:	Oid make_new_heap(Oid, Oid, char, LOCKMODE);
518:	void mark_index_clustered(Relation, Oid, _Bool);
770:	static void copy_table_data(Oid, Oid, Oid, _Bool, _Bool *, TransactionId *, MultiXactId *);
1561:	static List *get_tables_to_cluster(MemoryContext);
591:	static void rebuild_relation(Relation, Oid, _Bool);
1005:	static void swap_relation_files(Oid, Oid, _Bool, _Bool, _Bool, TransactionId, MultiXactId, Oid *);

File cmdtag.c:
74:	CommandTag GetCommandTagEnum(const char *);
45:	const char *GetCommandTagName(CommandTag);
38:	void InitializeQueryCompletion(QueryCompletion *);
51:	_Bool command_tag_display_rowcount(CommandTag);
57:	_Bool command_tag_event_trigger_ok(CommandTag);
63:	_Bool command_tag_table_rewrite_ok(CommandTag);

File cmp.c:
30:	int __mpn_cmp(mp_srcptr, mp_srcptr, mp_size_t);

File cnd_broadcast.c:
22:	int cnd_broadcast(cnd_t *);

File cnd_destroy.c:
23:	void cnd_destroy(cnd_t *);

File cnd_init.c:
24:	int cnd_init(cnd_t *);

File cnd_signal.c:
22:	int cnd_signal(cnd_t *);

File cnd_timedwait.c:
22:	int cnd_timedwait(cnd_t * restrict, mtx_t * restrict, const struct timespec * restrict);

File cnd_wait.c:
22:	int cnd_wait(cnd_t *, mtx_t *);

File coll-lookup.c:
23:	int32_t __collidx_table_lookup(const char *, uint32_t);
53:	uint32_t __collseq_table_lookup(const char *, uint32_t);

File collationcmds.c:
304:	ObjectAddress AlterCollation(AlterCollationStmt *);
53:	ObjectAddress DefineCollation(ParseState *, List *, List *, _Bool);
276:	void IsThereCollationInNamespace(const char *, Oid);
375:	Datum pg_collation_actual_version(FunctionCallInfo);
523:	Datum pg_import_system_collations(FunctionCallInfo);
447:	static int cmpaliases(const void *, const void *);
416:	static _Bool normalize_libc_locale_name(char *, const char *);

File combocid.c:
182:	void AtEOXact_ComboCid(void);
297:	Size EstimateComboCIDStateSpace(void);
153:	void HeapTupleHeaderAdjustCmax(HeapTupleHeader, CommandId *, _Bool *);
118:	CommandId HeapTupleHeaderGetCmax(HeapTupleHeader);
104:	CommandId HeapTupleHeaderGetCmin(HeapTupleHeader);
342:	void RestoreComboCIDState(char *);
316:	void SerializeComboCIDState(Size, char *);
204:	static CommandId GetComboCommandId(CommandId, CommandId);
286:	static CommandId GetRealCmax(CommandId);
279:	static CommandId GetRealCmin(CommandId);

File comment.c:
40:	ObjectAddress CommentObject(CommentStmt *);
142:	void CreateComments(Oid, Oid, int32, const char *);
237:	void CreateSharedComments(Oid, Oid, const char *);
325:	void DeleteComments(Oid, Oid, int32);
373:	void DeleteSharedComments(Oid, Oid);
409:	char *GetComment(Oid, Oid, int32);

File commit_ts.c:
905:	void AdvanceOldestCommitTsXid(TransactionId);
571:	void BootStrapCommitTs(void);
792:	void CheckPointCommitTs(void);
639:	void CommitTsParameterChange(_Bool, _Bool);
516:	Size CommitTsShmemBuffers(void);
536:	void CommitTsShmemInit(void);
525:	Size CommitTsShmemSize(void);
617:	void CompleteCommitTsInitialization(void);
814:	void ExtendCommitTs(TransactionId);
353:	TransactionId GetLatestCommitTsData(TimestampTz *, RepOriginId *);
878:	void SetCommitTsLimit(TransactionId, TransactionId);
607:	void StartupCommitTs(void);
267:	_Bool TransactionIdGetCommitTsData(TransactionId, TimestampTz *, RepOriginId *);
135:	void TransactionTreeSetCommitTsData(TransactionId, int, TransactionId *, TimestampTz, RepOriginId);
852:	void TruncateCommitTs(TransactionId);
985:	void commit_ts_redo(XLogReaderState *);
1029:	int committssyncfiletag(const FileTag *, char *);
413:	Datum pg_last_committed_xact(FunctionCallInfo);
390:	Datum pg_xact_commit_timestamp(FunctionCallInfo);
467:	Datum pg_xact_commit_timestamp_origin(FunctionCallInfo);
680:	static void ActivateCommitTs(void);
939:	static _Bool CommitTsPagePrecedes(int, int);
754:	static void DeactivateCommitTs(void);
216:	static void SetXidCommitTsInPage(TransactionId, int, TransactionId *, TimestampTz, RepOriginId, int);
242:	static void TransactionIdSetCommitTs(TransactionId, TimestampTz, RepOriginId, int);
969:	static void WriteTruncateXlogRec(int, TransactionId);
958:	static void WriteZeroPageXlogRec(int);
590:	static int ZeroCommitTsPage(int, _Bool);
374:	static void error_commit_ts_disabled(void);

File committsdesc.c:
22:	void commit_ts_desc(StringInfo, XLogReaderState *);
44:	const char *commit_ts_identify(uint8);

File compat-initgroups.c:
13:	static enum nss_status compat_call(service_user *, const char *, gid_t, long *, long *, gid_t **, long, int *);

File compat-lookup.c:
62:	int __nss_database_lookup(const char *, const char *, const char *, service_user **);
53:	int __nss_next(service_user **, const char *, void **, int, int);
32:	int __nss_passwd_lookup(service_user **, const char *, void **);

File condition_variable.c:
286:	void ConditionVariableBroadcast(ConditionVariable *);
228:	void ConditionVariableCancelSleep(void);
37:	void ConditionVariableInit(ConditionVariable *);
58:	void ConditionVariablePrepareToSleep(ConditionVariable *);
263:	void ConditionVariableSignal(ConditionVariable *);
98:	void ConditionVariableSleep(ConditionVariable *, uint32);
112:	_Bool ConditionVariableTimedSleep(ConditionVariable *, long, uint32);

File config_info.c:
33:	ConfigData *get_configdata(const char *, size_t *);

File confstr.c:
32:	size_t __GI___confstr(int, char *, size_t);

File confstr_chk.c:
23:	size_t __confstr_chk(int, char *, size_t, size_t);

File constraint.c:
41:	Datum unique_key_recheck(FunctionCallInfo);

File controldata_utils.c:
51:	ControlFileData *get_controlfile(const char *, _Bool *);
156:	void update_controlfile(const char *, ControlFileData *, _Bool);

File conv.c:
717:	int LocalToUtf(const unsigned char *, int, unsigned char *, const pg_mb_radix_tree *, const pg_local_to_utf_combined *, int, utf_local_conversion_func, int, _Bool);
507:	int UtfToLocal(const unsigned char *, int, unsigned char *, const pg_mb_radix_tree *, const pg_utf_to_local_combined *, int, utf_local_conversion_func, int, _Bool);
89:	int latin2mic(const unsigned char *, unsigned char *, int, int, int, _Bool);
194:	int latin2mic_with_table(const unsigned char *, unsigned char *, int, int, int, const unsigned char *, _Bool);
33:	int local2local(const unsigned char *, unsigned char *, int, int, int, const unsigned char *, _Bool);
127:	int mic2latin(const unsigned char *, unsigned char *, int, int, int, _Bool);
257:	int mic2latin_with_table(const unsigned char *, unsigned char *, int, int, int, const unsigned char *, _Bool);
320:	static int compare3(const void *, const void *);
339:	static int compare4(const void *, const void *);
373:	static uint32 pg_mb_radix_conv(const pg_mb_radix_tree *, int, unsigned char, unsigned char, unsigned char, unsigned char);
353:	static unsigned char *store_coded_char(unsigned char *, uint32);

File conversioncmds.c:
37:	ObjectAddress CreateConversionCommand(CreateConversionStmt *);

File copy.c:
686:	List *CopyGetAttnums(TupleDesc, Relation, List *);
64:	void DoCopy(ParseState *, const CopyStmt *, int, int, uint64 *);
334:	void ProcessCopyOptions(ParseState *, CopyFormatOptions *, _Bool, List *);

File copydir.c:
127:	void copy_file(char *, char *);
37:	void copydir(char *, char *, _Bool);

File copyfrom.c:
1186:	CopyFromState BeginCopyFrom(ParseState *, Relation, Node *, const char *, _Bool, copy_data_source_cb, List *, List *);
525:	uint64 CopyFrom(CopyFromState);
115:	void CopyFromErrorCallback(void *);
1564:	void EndCopyFrom(CopyFromState);
1590:	static void ClosePipeFromProgram(CopyFromState);
384:	static void CopyMultiInsertBufferCleanup(CopyMultiInsertInfo *, CopyMultiInsertBuffer *);
298:	static void CopyMultiInsertBufferFlush(CopyMultiInsertInfo *, CopyMultiInsertBuffer *);
215:	static CopyMultiInsertBuffer *CopyMultiInsertBufferInit(ResultRelInfo *);
464:	static void CopyMultiInsertInfoCleanup(CopyMultiInsertInfo *);
418:	static void CopyMultiInsertInfoFlush(CopyMultiInsertInfo *, ResultRelInfo *);
252:	static void CopyMultiInsertInfoInit(CopyMultiInsertInfo *, ResultRelInfo *, CopyFromState, EState *, CommandId, int);
289:	static _Bool CopyMultiInsertInfoIsEmpty(CopyMultiInsertInfo *);
277:	static _Bool CopyMultiInsertInfoIsFull(CopyMultiInsertInfo *);
483:	static TupleTableSlot *CopyMultiInsertInfoNextFreeSlot(CopyMultiInsertInfo *, ResultRelInfo *);
232:	static void CopyMultiInsertInfoSetupBuffer(CopyMultiInsertInfo *, ResultRelInfo *);
502:	static void CopyMultiInsertInfoStore(CopyMultiInsertInfo *, ResultRelInfo *, TupleTableSlot *, int, uint64);
185:	static char *limit_printout_length(const char *);

File copyfromparse.c:
804:	_Bool NextCopyFrom(CopyFromState, ExprContext *, Datum *, _Bool *);
753:	_Bool NextCopyFromRawFields(CopyFromState, char ***, int *);
169:	void ReceiveCopyBegin(CopyFromState);
189:	void ReceiveCopyBinaryHeader(CopyFromState);
532:	static void CopyConversionError(CopyFromState);
399:	static void CopyConvertBuf(CopyFromState);
244:	static int CopyGetData(CopyFromState, void *, int, int);
378:	static _Bool CopyGetInt16(CopyFromState, int16 *);
361:	static _Bool CopyGetInt32(CopyFromState, int32 *);
649:	static void CopyLoadInputBuf(CopyFromState);
589:	static void CopyLoadRawBuf(CopyFromState);
1657:	static int CopyReadAttributesCSV(CopyFromState);
1429:	static int CopyReadAttributesText(CopyFromState);
1826:	static Datum CopyReadBinaryAttribute(CopyFromState, FmgrInfo *, Oid, int32, _Bool *);
700:	static int CopyReadBinaryData(CopyFromState, char *, int);
988:	static _Bool CopyReadLine(CopyFromState);
1064:	static _Bool CopyReadLineText(CopyFromState);
1401:	static int GetDecimalFromHex(char);

File copyfuncs.c:
4953:	void *copyObjectImpl(const void *);
3515:	static void CopyCreateStmtFields(const CreateStmt *, CreateStmt *);
831:	static void CopyJoinFields(const Join *, Join *);
118:	static void CopyPlanFields(const Plan *, Plan *);
413:	static void CopyScanFields(const Scan *, Scan *);
986:	static void CopySortFields(const Sort *, Sort *);
2730:	static A_Const *_copyAConst(const A_Const *);
2694:	static A_Expr *_copyAExpr(const A_Expr *);
2789:	static A_Indices *_copyAIndices(const A_Indices *);
2781:	static A_Star *_copyAStar(const A_Star *);
2812:	static A_ArrayExpr *_copyA_ArrayExpr(const A_ArrayExpr *);
2801:	static A_Indirection *_copyA_Indirection(const A_Indirection *);
3409:	static AccessPriv *_copyAccessPriv(const AccessPriv *);
1058:	static Agg *_copyAgg(const Agg *);
1517:	static Aggref *_copyAggref(const Aggref *);
1355:	static Alias *_copyAlias(const Alias *);
3353:	static AlterCollationStmt *_copyAlterCollationStmt(const AlterCollationStmt *);
4048:	static AlterDatabaseSetStmt *_copyAlterDatabaseSetStmt(const AlterDatabaseSetStmt *);
4037:	static AlterDatabaseStmt *_copyAlterDatabaseStmt(const AlterDatabaseStmt *);
3435:	static AlterDefaultPrivilegesStmt *_copyAlterDefaultPrivilegesStmt(const AlterDefaultPrivilegesStmt *);
3363:	static AlterDomainStmt *_copyAlterDomainStmt(const AlterDomainStmt *);
3919:	static AlterEnumStmt *_copyAlterEnumStmt(const AlterEnumStmt *);
4479:	static AlterEventTrigStmt *_copyAlterEventTrigStmt(const AlterEventTrigStmt *);
4286:	static AlterExtensionContentsStmt *_copyAlterExtensionContentsStmt(const AlterExtensionContentsStmt *);
4275:	static AlterExtensionStmt *_copyAlterExtensionStmt(const AlterExtensionStmt *);
4311:	static AlterFdwStmt *_copyAlterFdwStmt(const AlterFdwStmt *);
4338:	static AlterForeignServerStmt *_copyAlterForeignServerStmt(const AlterForeignServerStmt *);
3723:	static AlterFunctionStmt *_copyAlterFunctionStmt(const AlterFunctionStmt *);
3762:	static AlterObjectDependsStmt *_copyAlterObjectDependsStmt(const AlterObjectDependsStmt *);
3776:	static AlterObjectSchemaStmt *_copyAlterObjectSchemaStmt(const AlterObjectSchemaStmt *);
4013:	static AlterOpFamilyStmt *_copyAlterOpFamilyStmt(const AlterOpFamilyStmt *);
3803:	static AlterOperatorStmt *_copyAlterOperatorStmt(const AlterOperatorStmt *);
3790:	static AlterOwnerStmt *_copyAlterOwnerStmt(const AlterOwnerStmt *);
4727:	static AlterPolicyStmt *_copyAlterPolicyStmt(const AlterPolicyStmt *);
4821:	static AlterPublicationStmt *_copyAlterPublicationStmt(const AlterPublicationStmt *);
4529:	static AlterRoleSetStmt *_copyAlterRoleSetStmt(const AlterRoleSetStmt *);
4517:	static AlterRoleStmt *_copyAlterRoleStmt(const AlterRoleStmt *);
4167:	static AlterSeqStmt *_copyAlterSeqStmt(const AlterSeqStmt *);
3682:	static AlterStatsStmt *_copyAlterStatsStmt(const AlterStatsStmt *);
4848:	static AlterSubscriptionStmt *_copyAlterSubscriptionStmt(const AlterSubscriptionStmt *);
4143:	static AlterSystemStmt *_copyAlterSystemStmt(const AlterSystemStmt *);
4695:	static AlterTSConfigurationStmt *_copyAlterTSConfigurationStmt(const AlterTSConfigurationStmt *);
4684:	static AlterTSDictionaryStmt *_copyAlterTSDictionaryStmt(const AlterTSDictionaryStmt *);
3336:	static AlterTableCmd *_copyAlterTableCmd(const AlterTableCmd *);
4249:	static AlterTableMoveAllStmt *_copyAlterTableMoveAllStmt(const AlterTableMoveAllStmt *);
4237:	static AlterTableSpaceOptionsStmt *_copyAlterTableSpaceOptionsStmt(const AlterTableSpaceOptionsStmt *);
3323:	static AlterTableStmt *_copyAlterTableStmt(const AlterTableStmt *);
3814:	static AlterTypeStmt *_copyAlterTypeStmt(const AlterTypeStmt *);
4364:	static AlterUserMappingStmt *_copyAlterUserMappingStmt(const AlterUserMappingStmt *);
1785:	static AlternativeSubPlan *_copyAlternativeSubPlan(const AlternativeSubPlan *);
235:	static Append *_copyAppend(const Append *);
2411:	static AppendRelInfo *_copyAppendRelInfo(const AppendRelInfo *);
1866:	static ArrayCoerceExpr *_copyArrayCoerceExpr(const ArrayCoerceExpr *);
1964:	static ArrayExpr *_copyArrayExpr(const ArrayExpr *);
314:	static BitmapAnd *_copyBitmapAnd(const BitmapAnd *);
554:	static BitmapHeapScan *_copyBitmapHeapScan(const BitmapHeapScan *);
530:	static BitmapIndexScan *_copyBitmapIndexScan(const BitmapIndexScan *);
335:	static BitmapOr *_copyBitmapOr(const BitmapOr *);
1724:	static BoolExpr *_copyBoolExpr(const BoolExpr *);
2104:	static BooleanTest *_copyBooleanTest(const BooleanTest *);
2653:	static CTECycleClause *_copyCTECycleClause(const CTECycleClause *);
2640:	static CTESearchClause *_copyCTESearchClause(const CTESearchClause *);
3468:	static CallStmt *_copyCallStmt(const CallStmt *);
1916:	static CaseExpr *_copyCaseExpr(const CaseExpr *);
1949:	static CaseTestExpr *_copyCaseTestExpr(const CaseTestExpr *);
1934:	static CaseWhen *_copyCaseWhen(const CaseWhen *);
3458:	static ClosePortalStmt *_copyClosePortalStmt(const ClosePortalStmt *);
3480:	static ClusterStmt *_copyClusterStmt(const ClusterStmt *);
2017:	static CoalesceExpr *_copyCoalesceExpr(const CoalesceExpr *);
2119:	static CoerceToDomain *_copyCoerceToDomain(const CoerceToDomain *);
2137:	static CoerceToDomainValue *_copyCoerceToDomainValue(const CoerceToDomainValue *);
1849:	static CoerceViaIO *_copyCoerceViaIO(const CoerceViaIO *);
2981:	static CollateClause *_copyCollateClause(const CollateClause *);
1901:	static CollateExpr *_copyCollateExpr(const CollateExpr *);
3021:	static ColumnDef *_copyColumnDef(const ColumnDef *);
2708:	static ColumnRef *_copyColumnRef(const ColumnRef *);
3596:	static CommentStmt *_copyCommentStmt(const CommentStmt *);
2672:	static CommonTableExpr *_copyCommonTableExpr(const CommonTableExpr *);
3886:	static CompositeTypeStmt *_copyCompositeTypeStmt(const CompositeTypeStmt *);
1461:	static Const *_copyConst(const Const *);
3048:	static Constraint *_copyConstraint(const Constraint *);
4564:	static ConstraintsSetStmt *_copyConstraintsSetStmt(const ConstraintsSetStmt *);
1885:	static ConvertRowtypeExpr *_copyConvertRowtypeExpr(const ConvertRowtypeExpr *);
3492:	static CopyStmt *_copyCopyStmt(const CopyStmt *);
4430:	static CreateAmStmt *_copyCreateAmStmt(const CreateAmStmt *);
4615:	static CreateCastStmt *_copyCreateCastStmt(const CreateCastStmt *);
4601:	static CreateConversionStmt *_copyCreateConversionStmt(const CreateConversionStmt *);
3959:	static CreateDomainStmt *_copyCreateDomainStmt(const CreateDomainStmt *);
3897:	static CreateEnumStmt *_copyCreateEnumStmt(const CreateEnumStmt *);
4466:	static CreateEventTrigStmt *_copyCreateEventTrigStmt(const CreateEventTrigStmt *);
4263:	static CreateExtensionStmt *_copyCreateExtensionStmt(const CreateExtensionStmt *);
4299:	static CreateFdwStmt *_copyCreateFdwStmt(const CreateFdwStmt *);
4323:	static CreateForeignServerStmt *_copyCreateForeignServerStmt(const CreateForeignServerStmt *);
4388:	static CreateForeignTableStmt *_copyCreateForeignTableStmt(const CreateForeignTableStmt *);
3694:	static CreateFunctionStmt *_copyCreateFunctionStmt(const CreateFunctionStmt *);
3987:	static CreateOpClassItem *_copyCreateOpClassItem(const CreateOpClassItem *);
3972:	static CreateOpClassStmt *_copyCreateOpClassStmt(const CreateOpClassStmt *);
4002:	static CreateOpFamilyStmt *_copyCreateOpFamilyStmt(const CreateOpFamilyStmt *);
4490:	static CreatePLangStmt *_copyCreatePLangStmt(const CreatePLangStmt *);
4711:	static CreatePolicyStmt *_copyCreatePolicyStmt(const CreatePolicyStmt *);
4808:	static CreatePublicationStmt *_copyCreatePublicationStmt(const CreatePublicationStmt *);
3908:	static CreateRangeStmt *_copyCreateRangeStmt(const CreateRangeStmt *);
4505:	static CreateRoleStmt *_copyCreateRoleStmt(const CreateRoleStmt *);
4588:	static CreateSchemaStmt *_copyCreateSchemaStmt(const CreateSchemaStmt *);
4153:	static CreateSeqStmt *_copyCreateSeqStmt(const CreateSeqStmt *);
3666:	static CreateStatsStmt *_copyCreateStatsStmt(const CreateStatsStmt *);
3532:	static CreateStmt *_copyCreateStmt(const CreateStmt *);
4835:	static CreateSubscriptionStmt *_copyCreateSubscriptionStmt(const CreateSubscriptionStmt *);
4106:	static CreateTableAsStmt *_copyCreateTableAsStmt(const CreateTableAsStmt *);
4213:	static CreateTableSpaceStmt *_copyCreateTableSpaceStmt(const CreateTableSpaceStmt *);
4416:	static CreateTransformStmt *_copyCreateTransformStmt(const CreateTransformStmt *);
4442:	static CreateTrigStmt *_copyCreateTrigStmt(const CreateTrigStmt *);
4351:	static CreateUserMappingStmt *_copyCreateUserMappingStmt(const CreateUserMappingStmt *);
4026:	static CreatedbStmt *_copyCreatedbStmt(const CreatedbStmt *);
702:	static CteScan *_copyCteScan(const CteScan *);
2169:	static CurrentOfExpr *_copyCurrentOfExpr(const CurrentOfExpr *);
795:	static CustomScan *_copyCustomScan(const CustomScan *);
4652:	static DeallocateStmt *_copyDeallocateStmt(const DeallocateStmt *);
3446:	static DeclareCursorStmt *_copyDeclareCursorStmt(const DeclareCursorStmt *);
3085:	static DefElem *_copyDefElem(const DefElem *);
3554:	static DefineStmt *_copyDefineStmt(const DefineStmt *);
3224:	static DeleteStmt *_copyDeleteStmt(const DeleteStmt *);
4203:	static DiscardStmt *_copyDiscardStmt(const DiscardStmt *);
1665:	static DistinctExpr *_copyDistinctExpr(const DistinctExpr *);
3735:	static DoStmt *_copyDoStmt(const DoStmt *);
4662:	static DropOwnedStmt *_copyDropOwnedStmt(const DropOwnedStmt *);
4541:	static DropRoleStmt *_copyDropRoleStmt(const DropRoleStmt *);
3570:	static DropStmt *_copyDropStmt(const DropStmt *);
4862:	static DropSubscriptionStmt *_copyDropSubscriptionStmt(const DropSubscriptionStmt *);
4226:	static DropTableSpaceStmt *_copyDropTableSpaceStmt(const DropTableSpaceStmt *);
4376:	static DropUserMappingStmt *_copyDropUserMappingStmt(const DropUserMappingStmt *);
4059:	static DropdbStmt *_copyDropdbStmt(const DropdbStmt *);
4641:	static ExecuteStmt *_copyExecuteStmt(const ExecuteStmt *);
4095:	static ExplainStmt *_copyExplainStmt(const ExplainStmt *);
4878:	static ExtensibleNode *_copyExtensibleNode(const ExtensibleNode *);
3621:	static FetchStmt *_copyFetchStmt(const FetchStmt *);
1798:	static FieldSelect *_copyFieldSelect(const FieldSelect *);
1815:	static FieldStore *_copyFieldStore(const FieldStore *);
4929:	static ForeignKeyCacheInfo *_copyForeignKeyCacheInfo(const ForeignKeyCacheInfo *);
766:	static ForeignScan *_copyForeignScan(const ForeignScan *);
2266:	static FromExpr *_copyFromExpr(const FromExpr *);
2761:	static FuncCall *_copyFuncCall(const FuncCall *);
1608:	static FuncExpr *_copyFuncExpr(const FuncExpr *);
3710:	static FunctionParameter *_copyFunctionParameter(const FunctionParameter *);
638:	static FunctionScan *_copyFunctionScan(const FunctionScan *);
357:	static Gather *_copyGather(const Gather *);
382:	static GatherMerge *_copyGatherMerge(const GatherMerge *);
3420:	static GrantRoleStmt *_copyGrantRoleStmt(const GrantRoleStmt *);
3378:	static GrantStmt *_copyGrantStmt(const GrantStmt *);
1040:	static Group *_copyGroup(const Group *);
1548:	static GroupingFunc *_copyGroupingFunc(const GroupingFunc *);
2553:	static GroupingSet *_copyGroupingSet(const GroupingSet *);
1138:	static Hash *_copyHash(const Hash *);
912:	static HashJoin *_copyHashJoin(const HashJoin *);
4401:	static ImportForeignSchemaStmt *_copyImportForeignSchemaStmt(const ImportForeignSchemaStmt *);
1018:	static IncrementalSort *_copyIncrementalSort(const IncrementalSort *);
2993:	static IndexElem *_copyIndexElem(const IndexElem *);
504:	static IndexOnlyScan *_copyIndexOnlyScan(const IndexOnlyScan *);
477:	static IndexScan *_copyIndexScan(const IndexScan *);
3634:	static IndexStmt *_copyIndexStmt(const IndexStmt *);
2613:	static InferClause *_copyInferClause(const InferClause *);
2198:	static InferenceElem *_copyInferenceElem(const InferenceElem *);
3208:	static InsertStmt *_copyInsertStmt(const InsertStmt *);
1413:	static IntoClause *_copyIntoClause(const IntoClause *);
845:	static Join *_copyJoin(const Join *);
2245:	static JoinExpr *_copyJoinExpr(const JoinExpr *);
1214:	static Limit *_copyLimit(const Limit *);
3852:	static ListenStmt *_copyListenStmt(const ListenStmt *);
3949:	static LoadStmt *_copyLoadStmt(const LoadStmt *);
1192:	static LockRows *_copyLockRows(const LockRows *);
4552:	static LockStmt *_copyLockStmt(const LockStmt *);
3099:	static LockingClause *_copyLockingClause(const LockingClause *);
937:	static Material *_copyMaterial(const Material *);
954:	static Memoize *_copyMemoize(const Memoize *);
260:	static MergeAppend *_copyMergeAppend(const MergeAppend *);
884:	static MergeJoin *_copyMergeJoin(const MergeJoin *);
2033:	static MinMaxExpr *_copyMinMaxExpr(const MinMaxExpr *);
195:	static ModifyTable *_copyModifyTable(const ModifyTable *);
2836:	static MultiAssignRef *_copyMultiAssignRef(const MultiAssignRef *);
1629:	static NamedArgExpr *_copyNamedArgExpr(const NamedArgExpr *);
724:	static NamedTuplestoreScan *_copyNamedTuplestoreScan(const NamedTuplestoreScan *);
862:	static NestLoop *_copyNestLoop(const NestLoop *);
1241:	static NestLoopParam *_copyNestLoopParam(const NestLoopParam *);
2184:	static NextValueExpr *_copyNextValueExpr(const NextValueExpr *);
3841:	static NotifyStmt *_copyNotifyStmt(const NotifyStmt *);
1685:	static NullIfExpr *_copyNullIfExpr(const NullIfExpr *);
2088:	static NullTest *_copyNullTest(const NullTest *);
3396:	static ObjectWithArgs *_copyObjectWithArgs(const ObjectWithArgs *);
2626:	static OnConflictClause *_copyOnConflictClause(const OnConflictClause *);
2280:	static OnConflictExpr *_copyOnConflictExpr(const OnConflictExpr *);
1645:	static OpExpr *_copyOpExpr(const OpExpr *);
3309:	static PLAssignStmt *_copyPLAssignStmt(const PLAssignStmt *);
1499:	static Param *_copyParam(const Param *);
2719:	static ParamRef *_copyParamRef(const ParamRef *);
4767:	static PartitionBoundSpec *_copyPartitionBoundSpec(const PartitionBoundSpec *);
4796:	static PartitionCmd *_copyPartitionCmd(const PartitionCmd *);
4741:	static PartitionElem *_copyPartitionElem(const PartitionElem *);
1272:	static PartitionPruneInfo *_copyPartitionPruneInfo(const PartitionPruneInfo *);
1321:	static PartitionPruneStepCombine *_copyPartitionPruneStepCombine(const PartitionPruneStepCombine *);
1304:	static PartitionPruneStepOp *_copyPartitionPruneStepOp(const PartitionPruneStepOp *);
4784:	static PartitionRangeDatum *_copyPartitionRangeDatum(const PartitionRangeDatum *);
4755:	static PartitionSpec *_copyPartitionSpec(const PartitionSpec *);
1283:	static PartitionedRelPruneInfo *_copyPartitionedRelPruneInfo(const PartitionedRelPruneInfo *);
2308:	static PathKey *_copyPathKey(const PathKey *);
2431:	static PlaceHolderInfo *_copyPlaceHolderInfo(const PlaceHolderInfo *);
2372:	static PlaceHolderVar *_copyPlaceHolderVar(const PlaceHolderVar *);
141:	static Plan *_copyPlan(const Plan *);
1336:	static PlanInvalItem *_copyPlanInvalItem(const PlanInvalItem *);
1255:	static PlanRowMark *_copyPlanRowMark(const PlanRowMark *);
81:	static PlannedStmt *_copyPlannedStmt(const PlannedStmt *);
4629:	static PrepareStmt *_copyPrepareStmt(const PrepareStmt *);
179:	static ProjectSet *_copyProjectSet(const ProjectSet *);
3148:	static Query *_copyQuery(const Query *);
2908:	static RangeFunction *_copyRangeFunction(const RangeFunction *);
2896:	static RangeSubselect *_copyRangeSubselect(const RangeSubselect *);
2937:	static RangeTableFunc *_copyRangeTableFunc(const RangeTableFunc *);
2953:	static RangeTableFuncCol *_copyRangeTableFuncCol(const RangeTableFuncCol *);
2923:	static RangeTableSample *_copyRangeTableSample(const RangeTableSample *);
2451:	static RangeTblEntry *_copyRangeTblEntry(const RangeTblEntry *);
2497:	static RangeTblFunction *_copyRangeTblFunction(const RangeTblFunction *);
2232:	static RangeTblRef *_copyRangeTblRef(const RangeTblRef *);
1369:	static RangeVar *_copyRangeVar(const RangeVar *);
3196:	static RawStmt *_copyRawStmt(const RawStmt *);
4673:	static ReassignOwnedStmt *_copyReassignOwnedStmt(const ReassignOwnedStmt *);
288:	static RecursiveUnion *_copyRecursiveUnion(const RecursiveUnion *);
4120:	static RefreshMatViewStmt *_copyRefreshMatViewStmt(const RefreshMatViewStmt *);
4575:	static ReindexStmt *_copyReindexStmt(const ReindexStmt *);
1831:	static RelabelType *_copyRelabelType(const RelabelType *);
3745:	static RenameStmt *_copyRenameStmt(const RenameStmt *);
4132:	static ReplicaIdentityStmt *_copyReplicaIdentityStmt(const ReplicaIdentityStmt *);
2823:	static ResTarget *_copyResTarget(const ResTarget *);
2325:	static RestrictInfo *_copyRestrictInfo(const RestrictInfo *);
158:	static Result *_copyResult(const Result *);
3299:	static ReturnStmt *_copyReturnStmt(const ReturnStmt *);
3124:	static RoleSpec *_copyRoleSpec(const RoleSpec *);
1999:	static RowCompareExpr *_copyRowCompareExpr(const RowCompareExpr *);
1982:	static RowExpr *_copyRowExpr(const RowExpr *);
2588:	static RowMarkClause *_copyRowMarkClause(const RowMarkClause *);
3825:	static RuleStmt *_copyRuleStmt(const RuleStmt *);
2051:	static SQLValueFunction *_copySQLValueFunction(const SQLValueFunction *);
456:	static SampleScan *_copySampleScan(const SampleScan *);
1705:	static ScalarArrayOpExpr *_copyScalarArrayOpExpr(const ScalarArrayOpExpr *);
424:	static Scan *_copyScan(const Scan *);
3608:	static SecLabelStmt *_copySecLabelStmt(const SecLabelStmt *);
3253:	static SelectStmt *_copySelectStmt(const SelectStmt *);
440:	static SeqScan *_copySeqScan(const SeqScan *);
1163:	static SetOp *_copySetOp(const SetOp *);
3282:	static SetOperationStmt *_copySetOperationStmt(const SetOperationStmt *);
2153:	static SetToDefault *_copySetToDefault(const SetToDefault *);
1001:	static Sort *_copySort(const Sort *);
2865:	static SortBy *_copySortBy(const SortBy *);
2539:	static SortGroupClause *_copySortGroupClause(const SortGroupClause *);
2388:	static SpecialJoinInfo *_copySpecialJoinInfo(const SpecialJoinInfo *);
3010:	static StatsElem *_copyStatsElem(const StatsElem *);
1739:	static SubLink *_copySubLink(const SubLink *);
1757:	static SubPlan *_copySubPlan(const SubPlan *);
617:	static SubqueryScan *_copySubqueryScan(const SubqueryScan *);
1587:	static SubscriptingRef *_copySubscriptingRef(const SubscriptingRef *);
1388:	static TableFunc *_copyTableFunc(const TableFunc *);
660:	static TableFuncScan *_copyTableFuncScan(const TableFuncScan *);
3542:	static TableLikeClause *_copyTableLikeClause(const TableLikeClause *);
2513:	static TableSampleClause *_copyTableSampleClause(const TableSampleClause *);
2213:	static TargetEntry *_copyTargetEntry(const TargetEntry *);
596:	static TidRangeScan *_copyTidRangeScan(const TidRangeScan *);
575:	static TidScan *_copyTidScan(const TidScan *);
3872:	static TransactionStmt *_copyTransactionStmt(const TransactionStmt *);
3136:	static TriggerTransition *_copyTriggerTransition(const TriggerTransition *);
3584:	static TruncateStmt *_copyTruncateStmt(const TruncateStmt *);
2969:	static TypeCast *_copyTypeCast(const TypeCast *);
2848:	static TypeName *_copyTypeName(const TypeName *);
1114:	static Unique *_copyUnique(const Unique *);
3862:	static UnlistenStmt *_copyUnlistenStmt(const UnlistenStmt *);
3238:	static UpdateStmt *_copyUpdateStmt(const UpdateStmt *);
4083:	static VacuumRelation *_copyVacuumRelation(const VacuumRelation *);
4071:	static VacuumStmt *_copyVacuumStmt(const VacuumStmt *);
4899:	static Value *_copyValue(const Value *);
681:	static ValuesScan *_copyValuesScan(const ValuesScan *);
1440:	static Var *_copyVar(const Var *);
4180:	static VariableSetStmt *_copyVariableSetStmt(const VariableSetStmt *);
4193:	static VariableShowStmt *_copyVariableShowStmt(const VariableShowStmt *);
3934:	static ViewStmt *_copyViewStmt(const ViewStmt *);
1083:	static WindowAgg *_copyWindowAgg(const WindowAgg *);
2565:	static WindowClause *_copyWindowClause(const WindowClause *);
2879:	static WindowDef *_copyWindowDef(const WindowDef *);
1565:	static WindowFunc *_copyWindowFunc(const WindowFunc *);
2525:	static WithCheckOption *_copyWithCheckOption(const WithCheckOption *);
2601:	static WithClause *_copyWithClause(const WithClause *);
745:	static WorkTableScan *_copyWorkTableScan(const WorkTableScan *);
2067:	static XmlExpr *_copyXmlExpr(const XmlExpr *);
3111:	static XmlSerialize *_copyXmlSerialize(const XmlSerialize *);

File copyto.c:
342:	CopyToState BeginCopyTo(ParseState *, Relation, RawStmt *, Oid, const char *, _Bool, List *, List *);
1294:	DestReceiver *CreateCopyDestReceiver(void);
771:	uint64 DoCopyTo(CopyToState);
752:	void EndCopyTo(CopyToState);
292:	static void ClosePipeToProgram(CopyToState);
1163:	static void CopyAttributeOutCSV(CopyToState, char *, _Bool, _Bool);
1010:	static void CopyAttributeOutText(CopyToState, char *);
929:	static void CopyOneRowTo(CopyToState, TupleTableSlot *);
187:	static void CopySendChar(CopyToState, char);
175:	static void CopySendData(CopyToState, const void *, int);
193:	static void CopySendEndOfRow(CopyToState);
280:	static void CopySendInt16(CopyToState, int16);
268:	static void CopySendInt32(CopyToState, int32);
181:	static void CopySendString(CopyToState, const char *);
317:	static void EndCopy(CopyToState);
139:	static void SendCopyBegin(CopyToState);
156:	static void SendCopyEnd(CopyToState);
1285:	static void copy_dest_destroy(DestReceiver *);
1257:	static _Bool copy_dest_receive(TupleTableSlot *, DestReceiver *);
1276:	static void copy_dest_shutdown(DestReceiver *);
1248:	static void copy_dest_startup(DestReceiver *, int, TupleDesc);

File costsize.c:
199:	double clamp_row_est(double);
6079:	double compute_bitmap_pages(PlannerInfo *, RelOptInfo *, Path *, int, Cost *, double *);
4671:	void compute_semi_anti_join_factors(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, JoinType, SpecialJoinInfo *, List *, SemiAntiJoinFactors *);
2560:	void cost_agg(Path *, PlannerInfo *, AggStrategy, const AggClauseCosts *, int, double, List *, Cost, Cost, double, double);
2143:	void cost_append(AppendPath *);
1099:	void cost_bitmap_and_node(BitmapAndPath *, PlannerInfo *);
955:	void cost_bitmap_heap_scan(Path *, PlannerInfo *, RelOptInfo *, ParamPathInfo *, Path *, double);
1143:	void cost_bitmap_or_node(BitmapOrPath *, PlannerInfo *);
1056:	void cost_bitmap_tree_node(Path *, Cost *, Selectivity *);
1608:	void cost_ctescan(Path *, PlannerInfo *, RelOptInfo *, ParamPathInfo *);
1441:	void cost_functionscan(Path *, PlannerInfo *, RelOptInfo *, ParamPathInfo *);
378:	void cost_gather(GatherPath *, PlannerInfo *, RelOptInfo *, ParamPathInfo *, double *);
416:	void cost_gather_merge(GatherMergePath *, PlannerInfo *, RelOptInfo *, ParamPathInfo *, Cost, Cost, double *);
2832:	void cost_group(Path *, PlannerInfo *, int, double, List *, Cost, Cost, double);
1896:	void cost_incremental_sort(Path *, PlannerInfo *, List *, int, Cost, Cost, double, int, Cost, int, double);
491:	void cost_index(IndexPath *, PlannerInfo *, double, _Bool);
2365:	void cost_material(Path *, Cost, Cost, double, int);
2316:	void cost_merge_append(Path *, PlannerInfo *, List *, int, Cost, Cost, double);
1649:	void cost_namedtuplestorescan(Path *, PlannerInfo *, RelOptInfo *, ParamPathInfo *);
4308:	void cost_qual_eval(QualCost *, List *, PlannerInfo *);
4334:	void cost_qual_eval_node(QualCost *, Node *, PlannerInfo *);
1723:	void cost_recursive_union(Path *, Path *, Path *);
1686:	void cost_resultscan(Path *, PlannerInfo *, RelOptInfo *, ParamPathInfo *);
303:	void cost_samplescan(Path *, PlannerInfo *, RelOptInfo *, ParamPathInfo *);
226:	void cost_seqscan(Path *, PlannerInfo *, RelOptInfo *, ParamPathInfo *);
2036:	void cost_sort(Path *, PlannerInfo *, List *, Cost, double, int, Cost, int, double);
4103:	void cost_subplan(PlannerInfo *, SubPlan *, Plan *);
1392:	void cost_subqueryscan(SubqueryScanPath *, PlannerInfo *, RelOptInfo *, ParamPathInfo *);
1502:	void cost_tablefuncscan(Path *, PlannerInfo *, RelOptInfo *, ParamPathInfo *);
1299:	void cost_tidrangescan(Path *, PlannerInfo *, RelOptInfo *, List *, ParamPathInfo *);
1191:	void cost_tidscan(Path *, PlannerInfo *, RelOptInfo *, List *, ParamPathInfo *);
1558:	void cost_valuesscan(Path *, PlannerInfo *, RelOptInfo *, ParamPathInfo *);
2758:	void cost_windowagg(Path *, PlannerInfo *, List *, int, int, Cost, Cost, double);
3849:	void final_cost_hashjoin(PlannerInfo *, HashPath *, JoinCostWorkspace *, JoinPathExtraData *);
3413:	void final_cost_mergejoin(PlannerInfo *, MergePath *, JoinCostWorkspace *, JoinPathExtraData *);
2977:	void final_cost_nestloop(PlannerInfo *, NestPath *, JoinCostWorkspace *, JoinPathExtraData *);
4958:	double get_parameterized_baserel_size(PlannerInfo *, RelOptInfo *, List *);
5039:	double get_parameterized_joinrel_size(PlannerInfo *, RelOptInfo *, Path *, Path *, SpecialJoinInfo *, List *);
840:	double index_pages_fetched(double, BlockNumber, double, PlannerInfo *);
3741:	void initial_cost_hashjoin(PlannerInfo *, JoinCostWorkspace *, JoinType, List *, Path *, Path *, JoinPathExtraData *, _Bool);
3183:	void initial_cost_mergejoin(PlannerInfo *, JoinCostWorkspace *, JoinType, List *, Path *, Path *, List *, List *, JoinPathExtraData *);
2902:	void initial_cost_nestloop(PlannerInfo *, JoinCostWorkspace *, JoinType, Path *, Path *, JoinPathExtraData *);
4928:	void set_baserel_size_estimates(PlannerInfo *, RelOptInfo *);
5655:	void set_cte_size_estimates(PlannerInfo *, RelOptInfo *, double);
5754:	void set_foreign_size_estimates(PlannerInfo *, RelOptInfo *);
5563:	void set_function_size_estimates(PlannerInfo *, RelOptInfo *);
5007:	void set_joinrel_size_estimates(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, SpecialJoinInfo *, List *);
5692:	void set_namedtuplestore_size_estimates(PlannerInfo *, RelOptInfo *);
5947:	PathTarget *set_pathtarget_cost_width(PlannerInfo *, PathTarget *);
5725:	void set_result_size_estimates(PlannerInfo *, RelOptInfo *);
5483:	void set_subquery_size_estimates(PlannerInfo *, RelOptInfo *);
5601:	void set_tablefunc_size_estimates(PlannerInfo *, RelOptInfo *);
5623:	void set_values_size_estimates(PlannerInfo *, RelOptInfo *);
2067:	static Cost append_nonpartial_cost(List *, int, int);
4872:	static double approx_tuple_count(PlannerInfo *, JoinPath *, List *);
3662:	static MergeScanSelCache *cached_scansel(PlannerInfo *, RestrictInfo *, PathKey *);
5080:	static double calc_joinrel_size_estimate(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, double, double, SpecialJoinInfo *, List *);
2421:	static void cost_memoize_rescan(PlannerInfo *, MemoizePath *, Cost *, Cost *);
4348:	static _Bool cost_qual_eval_walker(Node *, cost_qual_eval_context *);
4196:	static void cost_rescan(PlannerInfo *, Path *, Cost *, Cost *);
1794:	static void cost_tuplesort(Cost *, Cost *, double, int, Cost, int, double);
782:	static List *extract_nonindex_conditions(List *, List *);
5232:	static Selectivity get_foreign_key_join_selectivity(PlannerInfo *, Relids, Relids, SpecialJoinInfo *, List **);
905:	static double get_indexpath_pages(Path *);
6046:	static double get_parallel_divisor(Path *);
4629:	static void get_restriction_qual_cost(PlannerInfo *, RelOptInfo *, ParamPathInfo *, QualCost *);
4780:	static _Bool has_indexed_join_quals(NestPath *);
6036:	static double page_size(double, int);
6025:	static double relation_byte_size(double, int);
5789:	static void set_rel_width(PlannerInfo *, RelOptInfo *);

File create_xid.c:
33:	unsigned long _create_xid(void);

File createas.c:
440:	DestReceiver *CreateIntoRelDestReceiver(IntoClause *);
393:	_Bool CreateTableAsRelExists(CreateTableAsStmt *);
226:	ObjectAddress ExecCreateTableAs(ParseState *, CreateTableAsStmt *, ParamListInfo, QueryEnvironment *, QueryCompletion *);
375:	int GetIntoRelEFlags(IntoClause *);
85:	static ObjectAddress create_ctas_internal(List *, IntoClause *);
158:	static ObjectAddress create_ctas_nodata(List *, IntoClause *);
634:	static void intorel_destroy(DestReceiver *);
583:	static _Bool intorel_receive(TupleTableSlot *, DestReceiver *);
614:	static void intorel_shutdown(DestReceiver *);
459:	static void intorel_startup(DestReceiver *, int, TupleDesc);

File createplan.c:
2096:	Plan *change_plan_targetlist(Plan *, List *, _Bool);
334:	Plan *create_plan(PlannerInfo *, Path *);
7083:	_Bool is_projection_capable_path(Path *);
7129:	_Bool is_projection_capable_plan(Plan *);
6495:	Agg *make_agg(List *, List *, AggStrategy, AggSplit, int, AttrNumber *, Oid *, Oid *, List *, List *, double, Size, Plan *);
5730:	ForeignScan *make_foreignscan(List *, List *, Index, List *, List *, List *, List *, Plan *);
6859:	Limit *make_limit(Plan *, Node *, Node *, LimitOption, int, AttrNumber *, Oid *, Oid *);
6324:	Sort *make_sort_from_sortclauses(List *, Plan *);
6436:	Plan *materialize_finished_plan(Plan *);
5387:	static void bitmap_subplan_mark_shared(Plan *);
803:	static List *build_path_tlist(PlannerInfo *, Path *);
5318:	static void copy_generic_path_info(Plan *, Path *);
5333:	static void copy_plan_costsize(Plan *, Plan *);
2252:	static Agg *create_agg_plan(PlannerInfo *, AggPath *);
1151:	static Plan *create_append_plan(PlannerInfo *, AppendPath *, int);
3142:	static BitmapHeapScan *create_bitmap_scan_plan(PlannerInfo *, BitmapHeapPath *, List *, List *);
3272:	static Plan *create_bitmap_subplan(PlannerInfo *, Path *, List **, List **, List **);
3822:	static CteScan *create_ctescan_plan(PlannerInfo *, Path *, List *, List *);
4197:	static CustomScan *create_customscan_plan(PlannerInfo *, CustomPath *, List *, List *);
4053:	static ForeignScan *create_foreignscan_plan(PlannerInfo *, ForeignPath *, List *, List *);
3692:	static FunctionScan *create_functionscan_plan(PlannerInfo *, Path *, List *, List *);
1901:	static GatherMerge *create_gather_merge_plan(PlannerInfo *, GatherMergePath *);
1863:	static Gather *create_gather_plan(PlannerInfo *, GatherPath *);
1000:	static Plan *create_gating_plan(PlannerInfo *, Path *, Plan *, List *);
2185:	static Group *create_group_plan(PlannerInfo *, GroupPath *);
1531:	static Result *create_group_result_plan(PlannerInfo *, GroupResultPath *);
2336:	static Plan *create_groupingsets_plan(PlannerInfo *, GroupingSetsPath *);
4651:	static HashJoin *create_hashjoin_plan(PlannerInfo *, HashPath *);
2158:	static IncrementalSort *create_incrementalsort_plan(PlannerInfo *, IncrementalSortPath *, int);
2949:	static Scan *create_indexscan_plan(PlannerInfo *, IndexPath *, List *, List *, _Bool);
1059:	static Plan *create_join_plan(PlannerInfo *, JoinPath *);
2799:	static Limit *create_limit_plan(PlannerInfo *, LimitPath *, int);
2737:	static LockRows *create_lockrows_plan(PlannerInfo *, LockRowsPath *, int);
1582:	static Material *create_material_plan(PlannerInfo *, MaterialPath *, int);
1610:	static Memoize *create_memoize_plan(PlannerInfo *, MemoizePath *, int);
1373:	static Plan *create_merge_append_plan(PlannerInfo *, MergeAppendPath *, int);
4344:	static MergeJoin *create_mergejoin_plan(PlannerInfo *, MergePath *);
2494:	static Result *create_minmaxagg_plan(PlannerInfo *, MinMaxAggPath *);
2760:	static ModifyTable *create_modifytable_plan(PlannerInfo *, ModifyTablePath *);
3917:	static NamedTuplestoreScan *create_namedtuplestorescan_plan(PlannerInfo *, Path *, List *, List *);
4268:	static NestLoop *create_nestloop_plan(PlannerInfo *, NestPath *);
385:	static Plan *create_plan_recurse(PlannerInfo *, Path *, int);
1556:	static ProjectSet *create_project_set_plan(PlannerInfo *, ProjectSetPath *);
1962:	static Plan *create_projection_plan(PlannerInfo *, ProjectionPath *, int);
2701:	static RecursiveUnion *create_recursiveunion_plan(PlannerInfo *, RecursiveUnionPath *);
3956:	static Result *create_resultscan_plan(PlannerInfo *, Path *, List *, List *);
2898:	static SampleScan *create_samplescan_plan(PlannerInfo *, Path *, List *, List *);
556:	static Plan *create_scan_plan(PlannerInfo *, Path *, int);
2860:	static SeqScan *create_seqscan_plan(PlannerInfo *, Path *, List *, List *);
2665:	static SetOp *create_setop_plan(PlannerInfo *, SetOpPath *, int);
2124:	static Sort *create_sort_plan(PlannerInfo *, SortPath *, int);
3642:	static SubqueryScan *create_subqueryscan_plan(PlannerInfo *, SubqueryScanPath *, List *, List *);
3735:	static TableFuncScan *create_tablefuncscan_plan(PlannerInfo *, Path *, List *, List *);
3577:	static TidRangeScan *create_tidrangescan_plan(PlannerInfo *, TidRangePath *, List *, List *);
3480:	static TidScan *create_tidscan_plan(PlannerInfo *, TidPath *, List *, List *);
1664:	static Plan *create_unique_plan(PlannerInfo *, UniquePath *, int);
2224:	static Unique *create_upper_unique_plan(PlannerInfo *, UpperUniquePath *, int);
3778:	static ValuesScan *create_valuesscan_plan(PlannerInfo *, Path *, List *, List *);
2560:	static WindowAgg *create_windowagg_plan(PlannerInfo *, WindowAggPath *);
3993:	static WorkTableScan *create_worktablescan_plan(PlannerInfo *, Path *, List *, List *);
4972:	static List *fix_indexorderby_references(PlannerInfo *, IndexPath *);
5001:	static Node *fix_indexqual_clause(PlannerInfo *, IndexOptInfo *, int, Node *, List *);
5072:	static Node *fix_indexqual_operand(Node *, IndexOptInfo *, int);
4931:	static void fix_indexqual_references(PlannerInfo *, IndexPath *, List **, List **);
980:	static List *get_gating_quals(PlannerInfo *, List *);
5147:	static List *get_switched_clauses(List *, Relids);
2064:	static Plan *inject_projection_plan(Plan *, List *, _Bool);
1116:	static _Bool is_async_capable_plan(Plan *, Path *);
5355:	static void label_sort_with_costsize(PlannerInfo *, Sort *, double);
5824:	static BitmapAnd *make_bitmap_and(List *);
5534:	static BitmapHeapScan *make_bitmap_heapscan(List *, List *, Plan *, List *, Index);
5513:	static BitmapIndexScan *make_bitmap_indexscan(Index, Oid, List *, List *);
5839:	static BitmapOr *make_bitmap_or(List *);
5670:	static CteScan *make_ctescan(List *, List *, Index, int, int);
5611:	static FunctionScan *make_functionscan(List *, List *, Index, List *, _Bool);
6753:	static Gather *make_gather(List *, List *, int, int, _Bool, Plan *);
6568:	static Group *make_group(List *, List *, int, AttrNumber *, Oid *, Oid *, Plan *);
5910:	static Hash *make_hash(Plan *, List *, Oid, AttrNumber, _Bool);
5879:	static HashJoin *make_hashjoin(List *, List *, List *, List *, List *, List *, List *, Plan *, Plan *, JoinType, _Bool);
6004:	static IncrementalSort *make_incrementalsort(Plan *, int, int, AttrNumber *, Oid *, Oid *, _Bool *);
6290:	static IncrementalSort *make_incrementalsort_from_pathkeys(Plan *, List *, Relids, int);
5484:	static IndexOnlyScan *make_indexonlyscan(List *, List *, Index, Oid, List *, List *, List *, List *, ScanDirection);
5453:	static IndexScan *make_indexscan(List *, List *, Index, Oid, List *, List *, List *, List *, List *, ScanDirection);
6838:	static LockRows *make_lockrows(Plan *, List *, int);
6414:	static Material *make_material(Plan *);
6470:	static Memoize *make_memoize(Plan *, Oid *, Oid *, List *, _Bool, _Bool, uint32, Bitmapset *);
5933:	static MergeJoin *make_mergejoin(List *, List *, List *, List *, Oid *, Oid *, int *, _Bool *, Plan *, Plan *, JoinType, _Bool, _Bool);
6927:	static ModifyTable *make_modifytable(PlannerInfo *, Plan *, CmdType, _Bool, Index, Index, _Bool, List *, List *, List *, List *, List *, OnConflictExpr *, int);
5691:	static NamedTuplestoreScan *make_namedtuplestorescan(List *, List *, Index, char *);
5854:	static NestLoop *make_nestloop(List *, List *, List *, List *, Plan *, Plan *, JoinType, _Bool);
6908:	static ProjectSet *make_project_set(List *, Plan *);
5768:	static RecursiveUnion *make_recursive_union(List *, Plan *, Plan *, int, List *, long);
6887:	static Result *make_result(List *, Node *, Plan *);
5434:	static SampleScan *make_samplescan(List *, List *, Index, TableSampleClause *);
5417:	static SeqScan *make_seqscan(List *, List *, Index);
6782:	static SetOp *make_setop(SetOpCmd, SetOpStrategy, Plan *, List *, AttrNumber, int, long);
5974:	static Sort *make_sort(Plan *, int, AttrNumber *, Oid *, Oid *, _Bool *);
6373:	static Sort *make_sort_from_groupcols(List *, AttrNumber *, Plan *);
6255:	static Sort *make_sort_from_pathkeys(Plan *, List *, Relids);
5592:	static SubqueryScan *make_subqueryscan(List *, List *, Index, Plan *);
5632:	static TableFuncScan *make_tablefuncscan(List *, List *, Index, TableFunc *);
5573:	static TidRangeScan *make_tidrangescan(List *, List *, Index, List *);
5554:	static TidScan *make_tidscan(List *, List *, Index, List *);
6647:	static Unique *make_unique_from_pathkeys(Plan *, List *, int);
6598:	static Unique *make_unique_from_sortclauses(Plan *, List *);
5651:	static ValuesScan *make_valuesscan(List *, List *, Index, List *);
6529:	static WindowAgg *make_windowagg(List *, Index, int, AttrNumber *, Oid *, Oid *, int, AttrNumber *, Oid *, Oid *, int, Node *, Node *, Oid, Oid, Oid, _Bool, _Bool, Plan *);
5711:	static WorkTableScan *make_worktablescan(List *, List *, Index, int);
5224:	static List *order_qual_clauses(PlannerInfo *, List *);
6070:	static Plan *prepare_sort_from_pathkeys(Plan *, List *, Relids, const AttrNumber *, _Bool, int *, AttrNumber **, Oid **, Oid **, _Bool **);
2298:	static AttrNumber *remap_groupColIdx(PlannerInfo *, List *);
4840:	static Node *replace_nestloop_params(PlannerInfo *, Node *);
4847:	static Node *replace_nestloop_params_mutator(Node *, PlannerInfo *);
843:	static _Bool use_physical_tlist(PlannerInfo *, Path *, int);

File crypt.c:
114:	char *encrypt_password(PasswordType, const char *, const char *);
89:	PasswordType get_password_type(const char *);
37:	char *get_role_password(const char *, char **);
166:	int md5_crypt_verify(const char *, const char *, const char *, const char *, int, char **);
222:	int plain_crypt_verify(const char *, const char *, const char *, char **);

File cryptohash.c:
66:	pg_cryptohash_ctx *pg_cryptohash_create(pg_cryptohash_type);
168:	int pg_cryptohash_final(pg_cryptohash_ctx *, uint8 *, size_t);
216:	void pg_cryptohash_free(pg_cryptohash_ctx *);
92:	int pg_cryptohash_init(pg_cryptohash_ctx *);
130:	int pg_cryptohash_update(pg_cryptohash_ctx *, const uint8 *, size_t);

File cryptohashfuncs.c:
56:	Datum md5_bytea(FunctionCallInfo);
33:	Datum md5_text(FunctionCallInfo);
132:	Datum sha224_bytea(FunctionCallInfo);
140:	Datum sha256_bytea(FunctionCallInfo);
148:	Datum sha384_bytea(FunctionCallInfo);
156:	Datum sha512_bytea(FunctionCallInfo);
75:	static bytea *cryptohash_internal(pg_cryptohash_type, bytea *);

File ctime.c:
23:	char *ctime(const time_t *);

File ctime_r.c:
25:	char *ctime_r(const time_t *, char *);

File ctype-c99.c:
23:	int isblank(int);

File ctype-c99_l.c:
23:	int __isblank_l(int, locale_t);

File ctype-extn.c:
29:	int _tolower(int);
34:	int _toupper(int);
47:	int isascii(int);
40:	int toascii(int);

File ctype-info.c:
28:	void __GI___ctype_init(void);

File ctype.c:
44:	int __GI_tolower(int);
51:	int __GI_toupper(int);
26:	int isalnum(int);
27:	int isalpha(int);
28:	int iscntrl(int);
29:	int isdigit(int);
31:	int isgraph(int);
30:	int islower(int);
32:	int isprint(int);
33:	int ispunct(int);
34:	int isspace(int);
35:	int isupper(int);
36:	int isxdigit(int);

File ctype_l.c:
27:	int __isalnum_l(int, locale_t);
28:	int __isalpha_l(int, locale_t);
29:	int __iscntrl_l(int, locale_t);
30:	int __isdigit_l(int, locale_t);
32:	int __isgraph_l(int, locale_t);
31:	int __islower_l(int, locale_t);
33:	int __isprint_l(int, locale_t);
34:	int __ispunct_l(int, locale_t);
35:	int __isspace_l(int, locale_t);
36:	int __isupper_l(int, locale_t);
37:	int __isxdigit_l(int, locale_t);
40:	int __tolower_l(int, locale_t);
47:	int __toupper_l(int, locale_t);

File cxa_at_quick_exit.c:
27:	int __cxa_at_quick_exit(void (*)(void *), void *);

File cxa_atexit.c:
68:	int __GI___cxa_atexit(void (*)(void *), void *, void *);
34:	int __internal_atexit(void (*)(void *), void *, void *, struct exit_function_list **);
81:	struct exit_function *__new_exitfn(struct exit_function_list **);

File cxa_finalize.c:
29:	void __cxa_finalize(void *);

File cxa_thread_atexit_impl.c:
144:	void __GI___call_tls_dtors(void);
99:	int __cxa_thread_atexit_impl(dtor_func, void *, void *);

File d2s.c:
1070:	char *double_to_shortest_decimal(double);
1053:	int double_to_shortest_decimal_buf(double, char *);
1015:	int double_to_shortest_decimal_bufn(double, char *);
346:	static floating_decimal_64 d2d(const uint64, const uint32);
962:	static _Bool d2d_small_int(const uint64, const uint32, floating_decimal_64 *);
264:	static uint32 decimalLength(const uint64);
162:	static uint64 mulShift(const uint64, const uint64 * const, const int32);
171:	static uint64 mulShiftAll(const uint64, const uint64 * const, const int32, uint64 * const, uint64 * const, const uint32);
106:	static _Bool multipleOfPowerOf2(const uint64, const uint32);
95:	static _Bool multipleOfPowerOf5(const uint64, const uint32);
74:	static uint32 pow5Factor(uint64);
787:	static int to_chars(floating_decimal_64, const _Bool, char * const);
631:	static int to_chars_df(const floating_decimal_64, const uint32, char * const);

File d2s_intrinsics.h:
183:	static uint64 div10(const uint64);
189:	static uint64 div100(const uint64);
195:	static uint64 div1e8(const uint64);
177:	static uint64 div5(const uint64);

File daemon.c:
44:	int daemon(int, int);

File date.c:
1646:	void AdjustTimeForTypmod(TimeADT *, int32);
286:	void EncodeSpecialDate(DateADT, char *);
301:	DateADT GetSQLCurrentDate(void);
334:	TimeTzADT *GetSQLCurrentTime(int32);
354:	TimeADT GetSQLLocalTime(int32);
69:	int32 anytime_typmod_check(_Bool, int32);
725:	double date2timestamp_no_overflow(DateADT);
569:	Timestamp date2timestamp_opt_overflow(DateADT, int *);
629:	TimestampTz date2timestamptz_opt_overflow(DateADT, int *);
429:	Datum date_cmp(FunctionCallInfo);
819:	Datum date_cmp_timestamp(FunctionCallInfo);
748:	int32 date_cmp_timestamp_internal(DateADT, Timestamp);
903:	Datum date_cmp_timestamptz(FunctionCallInfo);
828:	int32 date_cmp_timestamptz_internal(DateADT, TimestampTz);
375:	Datum date_eq(FunctionCallInfo);
765:	Datum date_eq_timestamp(FunctionCallInfo);
849:	Datum date_eq_timestamptz(FunctionCallInfo);
464:	Datum date_finite(FunctionCallInfo);
420:	Datum date_ge(FunctionCallInfo);
810:	Datum date_ge_timestamp(FunctionCallInfo);
894:	Datum date_ge_timestamptz(FunctionCallInfo);
411:	Datum date_gt(FunctionCallInfo);
792:	Datum date_gt_timestamp(FunctionCallInfo);
876:	Datum date_gt_timestamptz(FunctionCallInfo);
111:	Datum date_in(FunctionCallInfo);
472:	Datum date_larger(FunctionCallInfo);
402:	Datum date_le(FunctionCallInfo);
801:	Datum date_le_timestamp(FunctionCallInfo);
885:	Datum date_le_timestamptz(FunctionCallInfo);
393:	Datum date_lt(FunctionCallInfo);
783:	Datum date_lt_timestamp(FunctionCallInfo);
867:	Datum date_lt_timestamptz(FunctionCallInfo);
492:	Datum date_mi(FunctionCallInfo);
1270:	Datum date_mi_interval(FunctionCallInfo);
533:	Datum date_mii(FunctionCallInfo);
384:	Datum date_ne(FunctionCallInfo);
774:	Datum date_ne_timestamp(FunctionCallInfo);
858:	Datum date_ne_timestamptz(FunctionCallInfo);
176:	Datum date_out(FunctionCallInfo);
1250:	Datum date_pl_interval(FunctionCallInfo);
509:	Datum date_pli(FunctionCallInfo);
201:	Datum date_recv(FunctionCallInfo);
223:	Datum date_send(FunctionCallInfo);
481:	Datum date_smaller(FunctionCallInfo);
455:	Datum date_sortsupport(FunctionCallInfo);
1287:	Datum date_timestamp(FunctionCallInfo);
1331:	Datum date_timestamptz(FunctionCallInfo);
1967:	Datum datetime_timestamp(FunctionCallInfo);
2861:	Datum datetimetz_timestamptz(FunctionCallInfo);
1071:	Datum extract_date(FunctionCallInfo);
2242:	Datum extract_time(FunctionCallInfo);
3025:	Datum extract_timetz(FunctionCallInfo);
1450:	_Bool float_time_overflows(int, int, double);
1044:	Datum in_range_date_interval(FunctionCallInfo);
2093:	Datum in_range_time_interval(FunctionCallInfo);
2627:	Datum in_range_timetz_interval(FunctionCallInfo);
2013:	Datum interval_time(FunctionCallInfo);
237:	Datum make_date(FunctionCallInfo);
1578:	Datum make_time(FunctionCallInfo);
1784:	Datum overlaps_time(FunctionCallInfo);
2670:	Datum overlaps_timetz(FunctionCallInfo);
1489:	int time2tm(TimeADT, struct pg_tm *, fsec_t *);
1735:	Datum time_cmp(FunctionCallInfo);
1681:	Datum time_eq(FunctionCallInfo);
1726:	Datum time_ge(FunctionCallInfo);
1717:	Datum time_gt(FunctionCallInfo);
1748:	Datum time_hash(FunctionCallInfo);
1754:	Datum time_hash_extended(FunctionCallInfo);
1378:	Datum time_in(FunctionCallInfo);
1990:	Datum time_interval(FunctionCallInfo);
1760:	Datum time_larger(FunctionCallInfo);
1708:	Datum time_le(FunctionCallInfo);
1699:	Datum time_lt(FunctionCallInfo);
2075:	Datum time_mi_interval(FunctionCallInfo);
2038:	Datum time_mi_time(FunctionCallInfo);
1690:	Datum time_ne(FunctionCallInfo);
1502:	Datum time_out(FunctionCallInfo);
1426:	_Bool time_overflows(int, int, int, fsec_t);
2236:	Datum time_part(FunctionCallInfo);
2057:	Datum time_pl_interval(FunctionCallInfo);
1522:	Datum time_recv(FunctionCallInfo);
1626:	Datum time_scale(FunctionCallInfo);
1548:	Datum time_send(FunctionCallInfo);
1769:	Datum time_smaller(FunctionCallInfo);
1606:	Datum time_support(FunctionCallInfo);
2803:	Datum time_timetz(FunctionCallInfo);
966:	Datum timestamp_cmp_date(FunctionCallInfo);
1301:	Datum timestamp_date(FunctionCallInfo);
912:	Datum timestamp_eq_date(FunctionCallInfo);
957:	Datum timestamp_ge_date(FunctionCallInfo);
939:	Datum timestamp_gt_date(FunctionCallInfo);
948:	Datum timestamp_le_date(FunctionCallInfo);
930:	Datum timestamp_lt_date(FunctionCallInfo);
921:	Datum timestamp_ne_date(FunctionCallInfo);
1906:	Datum timestamp_time(FunctionCallInfo);
1029:	Datum timestamptz_cmp_date(FunctionCallInfo);
1346:	Datum timestamptz_date(FunctionCallInfo);
975:	Datum timestamptz_eq_date(FunctionCallInfo);
1020:	Datum timestamptz_ge_date(FunctionCallInfo);
1002:	Datum timestamptz_gt_date(FunctionCallInfo);
1011:	Datum timestamptz_le_date(FunctionCallInfo);
993:	Datum timestamptz_lt_date(FunctionCallInfo);
984:	Datum timestamptz_ne_date(FunctionCallInfo);
1936:	Datum timestamptz_time(FunctionCallInfo);
2829:	Datum timestamptz_timetz(FunctionCallInfo);
1559:	Datum timetypmodin(FunctionCallInfo);
1567:	Datum timetypmodout(FunctionCallInfo);
2390:	int timetz2tm(TimeTzADT *, struct pg_tm *, fsec_t *, int *);
2511:	Datum timetz_cmp(FunctionCallInfo);
2457:	Datum timetz_eq(FunctionCallInfo);
2502:	Datum timetz_ge(FunctionCallInfo);
2493:	Datum timetz_gt(FunctionCallInfo);
2520:	Datum timetz_hash(FunctionCallInfo);
2536:	Datum timetz_hash_extended(FunctionCallInfo);
2266:	Datum timetz_in(FunctionCallInfo);
3119:	Datum timetz_izone(FunctionCallInfo);
2552:	Datum timetz_larger(FunctionCallInfo);
2484:	Datum timetz_le(FunctionCallInfo);
2475:	Datum timetz_lt(FunctionCallInfo);
2605:	Datum timetz_mi_interval(FunctionCallInfo);
2466:	Datum timetz_ne(FunctionCallInfo);
2301:	Datum timetz_out(FunctionCallInfo);
3019:	Datum timetz_part(FunctionCallInfo);
2583:	Datum timetz_pl_interval(FunctionCallInfo);
2322:	Datum timetz_recv(FunctionCallInfo);
2412:	Datum timetz_scale(FunctionCallInfo);
2358:	Datum timetz_send(FunctionCallInfo);
2566:	Datum timetz_smaller(FunctionCallInfo);
2790:	Datum timetz_time(FunctionCallInfo);
3035:	Datum timetz_zone(FunctionCallInfo);
2370:	Datum timetztypmodin(FunctionCallInfo);
2378:	Datum timetztypmodout(FunctionCallInfo);
1415:	int tm2time(struct pg_tm *, fsec_t, TimeADT *);
2256:	int tm2timetz(struct pg_tm *, fsec_t, int, TimeTzADT *);
48:	static int32 anytime_typmodin(_Bool, ArrayType *);
91:	static char *anytime_typmodout(_Bool, int32);
613:	static TimestampTz date2timestamp(DateADT);
709:	static TimestampTz date2timestamptz(DateADT);
442:	static int date_fastcmp(Datum, Datum, SortSupport);
2133:	static Datum time_part_common(FunctionCallInfo, _Bool);
2430:	static int timetz_cmp_internal(TimeTzADT *, TimeTzADT *);
2902:	static Datum timetz_part_common(FunctionCallInfo, _Bool);

File datetime.c:
4469:	_Bool CheckDateTokenTables(void);
4531:	TimeZoneAbbrevTable *ConvertTimeZoneAbbrevs(struct tzEntry *, int);
3768:	void DateTimeParseError(int, const char *, const char *);
803:	int DecodeDateTime(char **, int *, int, int *, struct pg_tm *, fsec_t *, int *);
3522:	int DecodeISO8601Interval(char *, int *, struct pg_tm *, fsec_t *);
3096:	int DecodeInterval(char **, int *, int, int, int *, struct pg_tm *, fsec_t *);
3040:	int DecodeSpecial(int, char *, int *);
1754:	int DecodeTimeOnly(char **, int *, int, int *, struct pg_tm *, fsec_t *, int *);
2907:	int DecodeTimezone(char *, int *);
2985:	int DecodeTimezoneAbbrev(int, char *, int *, pg_tz **);
3731:	int DecodeUnits(int, char *, int *);
1639:	int DetermineTimeZoneAbbrevOffset(struct pg_tm *, const char *, pg_tz *);
1677:	int DetermineTimeZoneAbbrevOffsetTS(TimestampTz, const char *, pg_tz *, int *);
1478:	int DetermineTimeZoneOffset(struct pg_tm *, pg_tz *);
3887:	void EncodeDateOnly(struct pg_tm *, int, char *);
4002:	void EncodeDateTime(struct pg_tm *, fsec_t, _Bool, int, const char *, int, char *);
4245:	void EncodeInterval(struct pg_tm *, fsec_t, int, char *);
3972:	void EncodeTimeOnly(struct pg_tm *, fsec_t, _Bool, int, int, char *);
349:	void GetCurrentDateTime(struct pg_tm *);
370:	void GetCurrentTimeUsec(struct pg_tm *, fsec_t *, int *);
4615:	void InstallTimeZoneAbbrevs(TimeZoneAbbrevTable *);
582:	int ParseDateTime(const char *, char *, size_t, char **, int *, int, int *);
4498:	Node *TemporalSimplify(int32, Node *);
2480:	int ValidateDate(int, _Bool, _Bool, _Bool, struct pg_tm *);
269:	int date2j(int, int, int);
294:	void j2date(int, int *, int *, int *);
327:	int j2day(int);
4662:	Datum pg_timezone_abbrevs(FunctionCallInfo);
4790:	Datum pg_timezone_names(FunctionCallInfo);
4173:	static char *AddISO8601IntPart(char *, int, char);
4183:	static char *AddPostgresIntPart(char *, int, const char *, _Bool *, _Bool *);
4206:	static char *AddVerboseIntPart(char *, int, const char *, _Bool *, _Bool *);
519:	static void AdjustFractDays(double, struct pg_tm *, fsec_t *, int);
504:	static void AdjustFractSeconds(double, struct pg_tm *, fsec_t *, int);
431:	static char *AppendSeconds(char *, int, fsec_t, int, _Bool);
494:	static char *AppendTimestampSeconds(char *, struct pg_tm *, fsec_t);
4437:	static _Bool CheckDateTokenTable(const char *, const datetkn *, int);
3072:	static void ClearPgTm(struct pg_tm *, fsec_t *);
2370:	static int DecodeDate(char *, int, int *, _Bool *, struct pg_tm *);
2635:	static int DecodeNumber(int, char *, _Bool, int, int *, struct pg_tm *, fsec_t *, _Bool *);
2820:	static int DecodeNumberField(int, char *, int, int *, struct pg_tm *, fsec_t *, _Bool *);
2559:	static int DecodeTime(char *, int, int, int *, struct pg_tm *, fsec_t *);
1714:	static _Bool DetermineTimeZoneAbbrevOffsetInternal(pg_time_t, const char *, pg_tz *, int *, int *);
1500:	static int DetermineTimeZoneOffsetInternal(struct pg_tm *, pg_tz *, pg_time_t *);
3849:	static char *EncodeTimezone(char *, int, int);
4626:	static pg_tz *FetchDynamicTimeZone(TimeZoneAbbrevTable *, const datetkn *);
3495:	static int ISO8601IntegerWidth(char *);
534:	static int ParseFractionalSecond(char *, fsec_t *);
3467:	static int ParseISO8601Number(char *, char **, int *, double *);
3813:	static const datetkn *datebsearch(const char *, const datetkn *, int);

File datum.c:
397:	Datum btequalimage(FunctionCallInfo);
132:	Datum datumCopy(Datum, _Bool, int);
412:	Size datumEstimateSpace(Datum, _Bool, _Bool, int);
65:	Size datumGetSize(Datum, _Bool, int);
223:	_Bool datumIsEqual(Datum, Datum, _Bool, int);
521:	Datum datumRestore(char **, _Bool *);
459:	void datumSerialize(Datum, _Bool, _Bool, int, char **);
194:	Datum datumTransfer(Datum, _Bool, int);
266:	_Bool datum_image_eq(Datum, Datum, _Bool, int);
338:	uint32 datum_image_hash(Datum, _Bool, int);

File dbasedesc.c:
22:	void dbase_desc(StringInfo, XLogReaderState *);
48:	const char *dbase_identify(uint8);

File dbcommands.c:
1472:	Oid AlterDatabase(ParseState *, AlterDatabaseStmt *, _Bool);
1677:	ObjectAddress AlterDatabaseOwner(const char *, Oid);
1651:	Oid AlterDatabaseSet(AlterDatabaseSetStmt *);
1447:	void DropDatabase(ParseState *, DropdbStmt *);
1019:	ObjectAddress RenameDatabase(const char *, const char *);
756:	void check_encoding_locale_matches(int, const char *, const char *);
101:	Oid createdb(ParseState *, const CreatedbStmt *);
2216:	void dbase_redo(XLogReaderState *);
814:	void dropdb(const char *, _Bool, _Bool);
2156:	char *get_database_name(Oid);
2109:	Oid get_database_oid(const char *, _Bool);
2036:	static _Bool check_db_file_conflict(Oid);
794:	static void createdb_failure_callback(int, Datum);
2079:	static int errdetail_busy_db(int, int);
1800:	static _Bool get_db_info(const char *, LOCKMODE, Oid *, Oid *, int *, _Bool *, _Bool *, Oid *, TransactionId *, MultiXactId *, Oid *, char **, char **);
1921:	static _Bool have_createdb_privilege(void);
1117:	static void movedb(const char *, const char *);
1432:	static void movedb_failure_callback(int, Datum);
2187:	static void recovery_create_dbdir(char *, _Bool);
1946:	static void remove_dbtablespaces(Oid);

File dbsize.c:
147:	Datum pg_database_size_name(FunctionCallInfo);
133:	Datum pg_database_size_oid(FunctionCallInfo);
907:	Datum pg_filenode_relation(FunctionCallInfo);
470:	Datum pg_indexes_size(FunctionCallInfo);
859:	Datum pg_relation_filenode(FunctionCallInfo);
931:	Datum pg_relation_filepath(FunctionCallInfo);
311:	Datum pg_relation_size(FunctionCallInfo);
703:	Datum pg_size_bytes(FunctionCallInfo);
534:	Datum pg_size_pretty(FunctionCallInfo);
640:	Datum pg_size_pretty_numeric(FunctionCallInfo);
451:	Datum pg_table_size(FunctionCallInfo);
251:	Datum pg_tablespace_size_name(FunctionCallInfo);
237:	Datum pg_tablespace_size_oid(FunctionCallInfo);
512:	Datum pg_total_relation_size(FunctionCallInfo);
83:	static int64 calculate_database_size(Oid);
416:	static int64 calculate_indexes_size(Relation);
273:	static int64 calculate_relation_size(RelFileNode *, BackendId, ForkNumber);
389:	static int64 calculate_table_size(Relation);
167:	static int64 calculate_tablespace_size(Oid);
343:	static int64 calculate_toast_table_size(Oid);
493:	static int64 calculate_total_relation_size(Relation);
39:	static int64 db_dir_size(const char *);
596:	static Numeric numeric_absolute(Numeric);
606:	static Numeric numeric_half_rounded(Numeric);
587:	static _Bool numeric_is_less(Numeric, Numeric);
579:	static char *numeric_to_cstring(Numeric);
628:	static Numeric numeric_truncated_divide(Numeric, int64);

File dcgettext.c:
45:	char *__GI___dcgettext(const char *, const char *, int);

File dcigettext.c:
482:	char *__dcigettext(const char *, const char *, const char *, int, unsigned long, int);
872:	char *_nl_find_msg(struct loaded_l10nfile *, struct binding *, const char *, int, size_t *);
1674:	static void free_mem(void);
281:	static int transcmp(const void *, const void *);

File dcngettext.c:
45:	char *__dcngettext(const char *, const char *, const char *, unsigned long, int);

File deadline.c:
28:	struct deadline_current_time __deadline_current_time(void);
46:	struct deadline __deadline_from_timeval(struct deadline_current_time, struct timeval);
77:	int __deadline_to_ms(struct deadline_current_time, struct deadline);

File deadlock.c:
217:	DeadLockState DeadLockCheck(PGPROC *);
1090:	void DeadLockReport(void);
293:	PGPROC *GetBlockingAutoVacuumPgproc(void);
143:	void InitDeadLockChecking(void);
1162:	void RememberSimpleDeadLock(PGPROC *, LOCKMODE, LOCK *, PGPROC *);
315:	static _Bool DeadLockCheckRecurse(PGPROC *);
806:	static _Bool ExpandConstraints(EDGE *, int);
449:	static _Bool FindLockCycle(PGPROC *, EDGE *, int *);
460:	static _Bool FindLockCycleRecurse(PGPROC *, int, EDGE *, int *);
539:	static _Bool FindLockCycleRecurseMember(PGPROC *, PGPROC *, int, EDGE *, int *);
381:	static int TestConfiguration(PGPROC *);
878:	static _Bool TopoSort(LOCK *, EDGE *, int, PGPROC **);

File decode.c:
106:	void LogicalDecodingProcessRecord(LogicalDecodingContext *, XLogReaderState *);
874:	static void DecodeAbort(LogicalDecodingContext *, XLogRecordBuffer *, xl_xact_parsed_abort *, TransactionId, _Bool);
689:	static void DecodeCommit(LogicalDecodingContext *, XLogRecordBuffer *, xl_xact_parsed_commit *, TransactionId, _Bool);
1055:	static void DecodeDelete(LogicalDecodingContext *, XLogRecordBuffer *);
442:	static void DecodeHeap2Op(LogicalDecodingContext *, XLogRecordBuffer *);
502:	static void DecodeHeapOp(LogicalDecodingContext *, XLogRecordBuffer *);
929:	static void DecodeInsert(LogicalDecodingContext *, XLogRecordBuffer *);
624:	static void DecodeLogicalMsgOp(LogicalDecodingContext *, XLogRecordBuffer *);
1147:	static void DecodeMultiInsert(LogicalDecodingContext *, XLogRecordBuffer *);
799:	static void DecodePrepare(LogicalDecodingContext *, XLogRecordBuffer *, xl_xact_parsed_prepare *);
1253:	static void DecodeSpecConfirm(LogicalDecodingContext *, XLogRecordBuffer *);
396:	static void DecodeStandbyOp(LogicalDecodingContext *, XLogRecordBuffer *);
1335:	static _Bool DecodeTXNNeedSkip(LogicalDecodingContext *, XLogRecordBuffer *, Oid, RepOriginId);
1109:	static void DecodeTruncate(LogicalDecodingContext *, XLogRecordBuffer *);
988:	static void DecodeUpdate(LogicalDecodingContext *, XLogRecordBuffer *);
195:	static void DecodeXLogOp(LogicalDecodingContext *, XLogRecordBuffer *);
1289:	static void DecodeXLogTuple(char *, Size, ReorderBufferTupleBuf *);
238:	static void DecodeXactOp(LogicalDecodingContext *, XLogRecordBuffer *);
612:	static _Bool FilterByOrigin(LogicalDecodingContext *, RepOriginId);
589:	static _Bool FilterPrepare(LogicalDecodingContext *, TransactionId, const char *);

File define.c:
111:	_Bool defGetBoolean(DefElem *);
166:	int32 defGetInt32(DefElem *);
190:	int64 defGetInt64(DefElem *);
85:	double defGetNumeric(DefElem *);
223:	List *defGetQualifiedName(DefElem *);
49:	char *defGetString(DefElem *);
327:	List *defGetStringList(DefElem *);
283:	int defGetTypeLength(DefElem *);
255:	TypeName *defGetTypeName(DefElem *);

File dependencies.c:
1394:	Selectivity dependencies_clauselist_selectivity(PlannerInfo *, List *, int, JoinType, SpecialJoinInfo *, RelOptInfo *, Bitmapset **);
654:	Datum pg_dependencies_in(FunctionCallInfo);
671:	Datum pg_dependencies_out(FunctionCallInfo);
711:	Datum pg_dependencies_recv(FunctionCallInfo);
727:	Datum pg_dependencies_send(FunctionCallInfo);
351:	MVDependencies *statext_dependencies_build(StatsBuildData *);
502:	MVDependencies *statext_dependencies_deserialize(bytea *);
622:	MVDependencies *statext_dependencies_load(Oid);
447:	bytea *statext_dependencies_serialize(MVDependencies *);
198:	static void DependencyGenerator_free(DependencyGenerator);
175:	static DependencyGenerator DependencyGenerator_init(int, int);
207:	static AttrNumber *DependencyGenerator_next(DependencyGenerator);
1015:	static Selectivity clauselist_apply_dependencies(PlannerInfo *, List *, int, JoinType, SpecialJoinInfo *, MVDependency **, int, AttrNumber *, Bitmapset **);
224:	static double dependency_degree(StatsBuildData *, int, AttrNumber *);
742:	static _Bool dependency_is_compatible_clause(Node *, Index, AttrNumber *);
1169:	static _Bool dependency_is_compatible_expression(Node *, Index, List *, Node **);
598:	static _Bool dependency_is_fully_matched(MVDependency *, Bitmapset *);
930:	static MVDependency *find_strongest_dependency(MVDependencies **, int, Bitmapset *);
159:	static void generate_dependencies(DependencyGenerator);
93:	static void generate_dependencies_recurse(DependencyGenerator, int, AttrNumber, AttrNumber *);

File dependency.c:
1536:	void AcquireDeletionLock(const ObjectAddress *, int);
1565:	void ReleaseDeletionLock(const ObjectAddress *);
2511:	void add_exact_object_address(const ObjectAddress *, ObjectAddresses *);
2751:	void free_object_addresses(ObjectAddresses *);
2766:	ObjectClass getObjectClass(const ObjectAddress *);
2456:	ObjectAddresses *new_object_addresses(void);
2571:	_Bool object_address_present(const ObjectAddress *, const ObjectAddresses *);
312:	void performDeletion(const ObjectAddress *, DropBehavior, int);
371:	void performMultipleDeletions(const ObjectAddresses *, DropBehavior, int);
1590:	void recordDependencyOnExpr(const ObjectAddress *, Node *, List *, DependencyType);
1633:	void recordDependencyOnSingleRelExpr(const ObjectAddress *, Node *, Oid, DependencyType, DependencyType, _Bool);
2720:	void record_object_address_dependencies(const ObjectAddress *, ObjectAddresses *, DependencyType);
2739:	void sort_object_addresses(ObjectAddresses *);
2901:	static void DeleteInitPrivs(const ObjectAddress *);
1234:	static void DropObjectById(const ObjectAddress *);
2536:	static void add_exact_object_address_extra(const ObjectAddress *, const ObjectAddressExtra *, ObjectAddresses *);
2478:	static void add_object_address(ObjectClass, Oid, int32, ObjectAddresses *);
224:	static void deleteObjectsInList(ObjectAddresses *, Relation *, int);
1291:	static void deleteOneObject(const ObjectAddress *, Relation *, int);
1395:	static void doDeletion(const ObjectAddress *, int);
2352:	static void eliminate_duplicate_dependencies(ObjectAddresses *);
471:	static void findDependentObjects(const ObjectAddress *, int, int, ObjectAddressStack *, ObjectAddresses *, const ObjectAddresses *, Relation *);
1736:	static _Bool find_expr_references_walker(Node *, find_expr_references_context *);
2412:	static int object_address_comparator(const void *, const void *);
2597:	static _Bool object_address_present_add_flags(const ObjectAddress *, int, ObjectAddresses *);
1024:	static void reportDependentObjects(const ObjectAddresses *, DropBehavior, int, const ObjectAddress *);
2670:	static _Bool stack_address_present_add_flags(const ObjectAddress *, int, ObjectAddressStack *);

File des_crypt.c:
96:	int __GI_cbc_crypt(char *, char *, unsigned int, unsigned int, char *);
114:	int __GI_ecb_crypt(char *, char *, unsigned int, unsigned int);

File des_impl.c:
516:	int _des_crypt(char *, unsigned int, struct desparams *);
440:	static void des_encrypt(unsigned long *, unsigned long *, int);

File des_soft.c:
64:	void __GI_des_setparity(char *);

File dest.c:
103:	void BeginCommand(CommandTag, CommandDest);
113:	DestReceiver *CreateDestReceiver(CommandDest);
166:	void EndCommand(const QueryCompletion *, CommandDest, _Bool);
221:	void EndReplicationCommand(const char *);
234:	void NullCommand(CommandDest);
271:	void ReadyForQuery(CommandDest);
61:	static void donothingCleanup(DestReceiver *);
50:	static _Bool donothingReceive(TupleTableSlot *, DestReceiver *);
56:	static void donothingStartup(DestReceiver *, int, TupleDesc);

File detoast.c:
116:	struct varlena *detoast_attr(struct varlena *);
205:	struct varlena *detoast_attr_slice(struct varlena *, int32, int32);
45:	struct varlena *detoast_external_attr(struct varlena *);
601:	Size toast_datum_size(Datum);
545:	Size toast_raw_datum_size(Datum);
471:	static struct varlena *toast_decompress_datum(struct varlena *);
503:	static struct varlena *toast_decompress_datum_slice(struct varlena *, int32);
343:	static struct varlena *toast_fetch_datum(struct varlena *);
396:	static struct varlena *toast_fetch_datum_slice(struct varlena *, int32, int32);

File dfmgr.c:
709:	Size EstimateLibraryStateSpace(void);
748:	void RestoreLibraryState(char *);
726:	void SerializeLibraryState(Size, char *);
671:	void **find_rendezvous_variable(const char *);
107:	void *load_external_function(const char *, const char *, _Bool, void **);
146:	void load_file(const char *, _Bool);
171:	void *lookup_external_function(void *, const char *);
541:	static void check_restricted_library_name(const char *);
486:	static char *expand_dynamic_library_name(const char *);
454:	static _Bool file_exists(const char *);
587:	static char *find_in_dynamic_libpath(const char *);
306:	static void incompatible_module_error(const char *, const Pg_magic_struct *);
184:	static void *internal_load_library(const char *);
400:	static void internal_unload_library(const char *);
556:	static char *substitute_libpath_macro(const char *);

File dgettext.c:
48:	char *__dgettext(const char *, const char *);

File dict.c:
26:	Datum ts_lexize(FunctionCallInfo);

File dict_ispell.c:
30:	Datum dispell_init(FunctionCallInfo);
111:	Datum dispell_lexize(FunctionCallInfo);

File dict_simple.c:
30:	Datum dsimple_init(FunctionCallInfo);
75:	Datum dsimple_lexize(FunctionCallInfo);

File dict_synonym.c:
92:	Datum dsynonym_init(FunctionCallInfo);
210:	Datum dsynonym_lexize(FunctionCallInfo);
85:	static int compareSyn(const void *, const void *);
44:	static char *findwrd(char *, char **, uint16 *);

File dict_thesaurus.c:
596:	Datum thesaurus_init(FunctionCallInfo);
786:	Datum thesaurus_lexize(FunctionCallInfo);
303:	static TheLexeme *addCompiledLexeme(TheLexeme *, int *, int *, TSLexeme *, LexemeInfo *, uint16);
106:	static void addWrd(DictThesaurus *, char *, char *, uint32, uint16, uint16, _Bool);
769:	static TSLexeme *checkMatch(DictThesaurus *, LexemeInfo *, uint16, _Bool *);
356:	static int cmpLexeme(const TheLexeme *, const TheLexeme *);
334:	static int cmpLexemeInfo(LexemeInfo *, LexemeInfo *);
372:	static int cmpLexemeQ(const void *, const void *);
378:	static int cmpTheLexeme(const void *, const void *);
391:	static void compileTheLexeme(DictThesaurus *);
502:	static void compileTheSubstitute(DictThesaurus *);
751:	static TSLexeme *copyTSLexeme(TheSubstitute *);
655:	static LexemeInfo *findTheLexeme(DictThesaurus *, char *);
694:	static LexemeInfo *findVariant(LexemeInfo *, LexemeInfo *, uint16, LexemeInfo **, int);
674:	static _Bool matchIdSubst(LexemeInfo *, uint32);
72:	static void newLexeme(DictThesaurus *, char *, char *, uint32, uint16);
168:	static void thesaurusRead(const char *, DictThesaurus *);

File difftime.c:
102:	double __difftime(time_t, time_t);

File digits_dots.c:
36:	int __GI___nss_hostname_digits_dots(const char *, struct hostent *, char **, size_t *, size_t, struct hostent **, enum nss_status *, int, int *);
62:	int __nss_hostname_digits_dots_context(struct resolv_context *, const char *, struct hostent *, char **, size_t *, size_t, struct hostent **, enum nss_status *, int, int *);

File dirname.c:
25:	char *dirname(char *);

File discard.c:
31:	void DiscardCommand(DiscardStmt *, _Bool);
57:	static void DiscardAll(_Bool);

File div.c:
54:	div_t div(int, int);

File divmod_1.c:
43:	mp_limb_t __mpn_divmod_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);

File divrem.c:
43:	mp_limb_t __mpn_divrem(mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);

File dl-addr-obj.c:
64:	int _dl_addr_inside_object(struct link_map *, const Elf64_Addr);

File dl-addr.c:
124:	int __GI__dl_addr(const void *, Dl_info *, struct link_map **, const Elf64_Sym **);

File dl-cache.c:
140:	int _dl_cache_libcmp(const char *, const char *);
186:	char *_dl_load_cache_lookup(const char *);
347:	void _dl_unload_cache(void);

File dl-close.c:
823:	void _dl_close(void *);
135:	void _dl_close_worker(struct link_map *, _Bool);
112:	static void call_destructors(void *);
49:	static _Bool remove_slotinfo(size_t, struct dtv_slotinfo_list *, size_t, _Bool);

File dl-conflict.c:
31:	void _dl_resolve_conflicts(struct link_map *, Elf64_Rela *, Elf64_Rela *);

File dl-debug.c:
72:	void __GI__dl_debug_state(void);
45:	struct r_debug *_dl_debug_initialize(Elf64_Addr, Lmid_t);

File dl-deps.c:
156:	void _dl_map_object_deps(struct link_map *, struct link_map **, unsigned int, int, int);
72:	static ptrdiff_t _dl_build_local_scope(struct link_map **, struct link_map *);
60:	static void openaux(void *);

File dl-environ.c:
27:	char *_dl_next_ld_env_entry(char ***);
56:	int unsetenv(const char *);

File dl-error-skeleton.c:
223:	int __GI__dl_catch_error(const char **, const char **, _Bool *, void (*)(void *), void *);
173:	int __GI__dl_catch_exception(struct dl_exception *, void (*)(void *), void *);
107:	void __GI__dl_signal_error(int, const char *, const char *, const char *);
89:	void __GI__dl_signal_exception(int, struct dl_exception *, const char *);
223:	int _dl_catch_error(const char **, const char **, _Bool *, void (*)(void *), void *);
173:	int _dl_catch_exception(struct dl_exception *, void (*)(void *), void *);
237:	void _dl_receive_error(receiver_fct, void (*)(void *), void *);
152:	void _dl_signal_cerror(int, const char *, const char *, const char *);
131:	void _dl_signal_cexception(int, struct dl_exception *, const char *);
107:	void _dl_signal_error(int, const char *, const char *, const char *);
89:	void _dl_signal_exception(int, struct dl_exception *, const char *);
74:	static void fatal_error(int, const char *, const char *, const char *);

File dl-exception.c:
71:	void __GI__dl_exception_create(struct dl_exception *, const char *, const char *);
94:	void __GI__dl_exception_create_format(struct dl_exception *, const char *, const char *, ...);
237:	void __GI__dl_exception_free(struct dl_exception *);
45:	static void length_mismatch(void);

File dl-fini.c:
29:	void _dl_fini(void);

File dl-hwcaps.c:
40:	const struct r_strlenpair *_dl_important_hwcaps(const char *, size_t, size_t *, size_t *);

File dl-init.c:
78:	void _dl_init(struct link_map *, int, char **, char **);
28:	static void call_init(struct link_map *, int, char **, char **);

File dl-iteratephdr.c:
32:	int __GI___dl_iterate_phdr(int (*)(struct dl_phdr_info *, size_t, void *), void *);

File dl-libc.c:
286:	int __GI___libc_dlclose(void *);
185:	void *__GI___libc_dlopen_mode(const char *, int);
237:	void *__GI___libc_dlsym(void *, const char *);
256:	void *__GI___libc_dlvsym(void *, const char *, const char *);
124:	static void do_dlclose(void *);
92:	static void do_dlopen(void *);
102:	static void do_dlsym(void *);
112:	static void do_dlvsym(void *);
325:	static void free_mem(void);
298:	static _Bool free_slotinfo(struct dtv_slotinfo_list **);

File dl-load.c:
230:	size_t _dl_dst_count(const char *);
268:	char *_dl_dst_substitute(struct link_map *, const char *, char *);
680:	void _dl_init_paths(const char *);
1925:	struct link_map *_dl_map_object(struct link_map *, const char *, int, int, int, Lmid_t);
2281:	void _dl_rtld_di_serinfo(struct link_map *, Dl_serinfo *, _Bool);
862:	static struct link_map *_dl_map_object_from_fd(const char *, const char *, int, struct filebuf *, char *, struct link_map *, int, int, void **, Lmid_t);
411:	static void add_name_to_object(const char *, struct link_map *);
2249:	static void add_path(struct add_path_state *, const struct r_search_path_struct *, unsigned int);
555:	static _Bool decompose_rpath(const char *, struct link_map *, const char *, struct r_search_path_struct *, struct r_search_path_struct *);
377:	static char *expand_dynamic_string_token(struct link_map *, const char *);
445:	static struct r_search_path_elem **fillin_rpath(char *, struct r_search_path_elem **, const char *, const char *, const char *, struct link_map *);
194:	static size_t is_dst(const char *, const char *);
121:	static _Bool is_trusted_path_normalize(const char *, size_t);
833:	static void lose(int, int, const char *, char *, struct link_map *, const char *, struct r_debug *, Lmid_t);
1775:	static int open_path(const char *, size_t, int, struct r_search_path_struct *, char **, struct filebuf *, struct link_map *, int, _Bool *);
1466:	static int open_verify(const char *, struct filebuf *, struct link_map *, int, _Bool *, int, _Bool, int);

File dl-lookup.c:
836:	lookup_t _dl_lookup_symbol_x(const char *, struct link_map *, const Elf64_Sym **, struct r_scope_elem **, const struct r_found_version *, int, int, struct link_map *);
960:	void _dl_setup_hash(struct link_map *);
64:	static const Elf64_Sym *check_match(const char * const, const Elf64_Sym * const, const struct r_found_version * const, const int, const int, const Elf64_Sym * const, const Elf_Symndx, const char * const, const struct link_map * const, const Elf64_Sym ** const, int * const);
363:	static int do_lookup_x(const char *, uint_fast32_t, unsigned long *, const Elf64_Sym *, struct sym_val *, struct r_scope_elem *, size_t, const struct r_found_version * const, int, struct link_map *, int, struct link_map *);

File dl-minimal.c:
207:	void __GI___assert_fail(const char *, const char *, unsigned int, const char *);
219:	void __GI___assert_perror_fail(int, const char *, unsigned int, const char *);
195:	void __GI___chk_fail(void);
187:	void __GI___libc_fatal(const char *);
138:	int __sigjmp_save(struct __jmp_buf_tag *, int);
149:	char *__strerror_r(int, char *, size_t);
261:	char *__strsep(char **, const char *);
238:	char *_itoa(unsigned long long, char *, unsigned int, int);
91:	void *calloc(size_t, size_t);
108:	void free(void *);
48:	void *malloc(size_t);
122:	void *realloc(void *, size_t);

File dl-misc.c:
245:	void _dl_debug_printf(const char *, ...);
257:	void _dl_debug_printf_c(const char *, ...);
269:	void _dl_dprintf(int, const char *, ...);
299:	unsigned long _dl_higher_prime_number(unsigned long);
281:	int _dl_name_match_p(const char *, const struct link_map *);
366:	uint64_t _dl_strtoul(const char *, char **);
43:	void *_dl_sysdep_read_whole_file(const char *, size_t *, int);
78:	static void _dl_debug_vdprintf(int, int, const char *, struct __va_list_tag *);

File dl-object.c:
30:	void _dl_add_to_namespace_list(struct link_map *, Lmid_t);
57:	struct link_map *_dl_new_object(char *, const char *, int, struct link_map *, int, Lmid_t);

File dl-open.c:
200:	struct link_map *__GI__dl_find_dso_for_object(const Elf64_Addr);
778:	void *_dl_open(const char *, int, const void *, Lmid_t, int, char **, char **);
900:	void _dl_show_scope(struct link_map *, int);
79:	static void add_to_global_resize(struct link_map *);
68:	static void add_to_global_resize_failure(struct link_map *);
160:	static void add_to_global_update(struct link_map *);
466:	static void call_dl_init(void *);
473:	static void dl_open_worker(void *);

File dl-profile.c:
490:	void __GI__dl_mcount(Elf64_Addr, Elf64_Addr);
184:	void _dl_start_profile(void);

File dl-profstub.c:
36:	void __GI__dl_mcount_wrapper_check(void *);
29:	void _dl_mcount_wrapper(void *);

File dl-reloc.c:
115:	void _dl_allocate_static_tls(struct link_map *);
129:	void _dl_nothread_init_static_tls(struct link_map *);
308:	void _dl_protect_relro(struct link_map *);
328:	void _dl_reloc_bad_type(struct link_map *, unsigned int, int);
146:	void _dl_relocate_object(struct link_map *, struct r_scope_elem **, int, int);
48:	int _dl_try_allocate_static_tls(struct link_map *);

File dl-scope.c:
25:	int _dl_scope_free(void *);

File dl-sort-maps.c:
26:	void _dl_sort_maps(struct link_map **, unsigned int, char *, _Bool);

File dl-sym.c:
272:	void *_dl_sym(void *, const char *, void *);
256:	void *_dl_vsym(void *, const char *, const char *, void *);
75:	static void call_dl_lookup(void *);

File dl-tunables.c:
367:	void __GI___tunable_get_val(tunable_id_t, void *, tunable_callback_t);
286:	void __GI___tunables_init(char **);
160:	void __tunable_set_val(tunable_id_t, void *);
104:	static void do_tunable_update_val(tunable_t *, const void *);

File dl-version.c:
361:	int _dl_check_all_versions(struct link_map *, int, int);
155:	int _dl_check_map_versions(struct link_map *, int, int);

File dladdr.c:
33:	int __dladdr(const void *, Dl_info *);

File dladdr1.c:
33:	int __dladdr1(const void *, Dl_info *, void **, int);

File dlclose.c:
39:	int __dlclose(void *);
33:	static void dlclose_doit(void *);

File dlerror.c:
61:	char *__dlerror(void);
238:	void __dlerror_main_freeres(void);
131:	int _dlerror_run(void (*)(void *), void *);
193:	static void check_free(struct dl_action_result *);
218:	static void fini(void);
226:	static void free_key_mem(void *);
182:	static void init(void);

File dlfcn.c:
27:	static void init(int, char **);

File dlfreeres.c:
26:	void __libdl_freeres(void);

File dlinfo.c:
92:	int __dlinfo(void *, int, void *);
44:	static void dlinfo_doit(void *);

File dlmopen.c:
79:	void *__dlmopen(Lmid_t, const char *, int);
51:	static void dlmopen_doit(void *);

File dlopen.c:
74:	void *__dlopen(const char *, int);
57:	static void dlopen_doit(void *);

File dlsym.c:
55:	void *__dlsym(void *, const char *);
46:	static void dlsym_doit(void *);

File dlvsym.c:
57:	void *__dlvsym(void *, const char *, const char *);
49:	static void dlvsym_doit(void *);

File dngettext.c:
48:	char *__dngettext(const char *, const char *, const char *, unsigned long);

File domains.c:
327:	void domain_check(Datum, _Bool, Oid, void **, MemoryContext);
212:	Datum domain_in(FunctionCallInfo);
268:	Datum domain_recv(FunctionCallInfo);
360:	int errdatatype(Oid);
384:	int errdomainconstraint(Oid, const char *);
131:	static void domain_check_input(Datum, _Bool, DomainIOData *);
73:	static DomainIOData *domain_state_setup(Oid, _Bool, MemoryContext);

File dprintf.c:
24:	int __GI___dprintf(int, const char *, ...);

File dprintf_chk.c:
24:	int __dprintf_chk(int, int, const char *, ...);

File drand48-iter.c:
30:	int __drand48_iterate(unsigned short *, struct drand48_data *);

File drand48.c:
23:	double drand48(void);

File drand48_r.c:
24:	int drand48_r(struct drand48_data *, double *);

File dropcmds.c:
57:	void RemoveObjects(DropStmt *);
248:	static void does_not_exist_skipping(ObjectType, Node *);
143:	static _Bool owningrel_does_not_exist_skipping(List *, const char **, char **);
179:	static _Bool schema_does_not_exist_skipping(List *, const char **, char **);
211:	static _Bool type_in_list_does_not_exist_skipping(List *, const char **, char **);

File dsa.c:
665:	dsa_pointer dsa_allocate_extended(dsa_area *, size_t, int);
506:	dsa_area *dsa_attach(dsa_handle);
541:	dsa_area *dsa_attach_in_place(void *, dsm_segment *);
420:	dsa_area *dsa_create(int);
469:	dsa_area *dsa_create_in_place(void *, size_t, int, dsm_segment *);
1910:	void dsa_detach(dsa_area *);
1065:	void dsa_dump(dsa_area *);
820:	void dsa_free(dsa_area *, dsa_pointer);
932:	void *dsa_get_address(dsa_area *, dsa_pointer);
494:	dsa_handle dsa_get_handle(dsa_area *);
1169:	size_t dsa_minimum_size(void);
572:	void dsa_on_dsm_detach_release_in_place(dsm_segment *, Datum);
586:	void dsa_on_shmem_exit_release_in_place(int, Datum);
965:	void dsa_pin(dsa_area *);
631:	void dsa_pin_mapping(dsa_area *);
601:	void dsa_release_in_place(void *);
1008:	void dsa_set_size_limit(dsa_area *, size_t);
1020:	void dsa_trim(dsa_area *);
984:	void dsa_unpin(dsa_area *);
1887:	static void add_span_to_fullness_class(dsa_area *, dsa_area_span *, dsa_pointer, int);
1437:	static dsa_pointer alloc_object(dsa_area *, int);
1291:	static dsa_area *attach_internal(void *, dsm_segment *, dsa_handle);
2229:	static void check_for_freed_segments(dsa_area *);
2265:	static void check_for_freed_segments_locked(dsa_area *);
1191:	static dsa_area *create_internal(void *, size_t, int, dsm_handle, dsm_segment *);
1800:	static void destroy_superblock(dsa_area *, dsa_pointer);
1525:	static _Bool ensure_active_superblock(dsa_area *, dsa_area_pool *, int);
1968:	static dsa_segment_map *get_best_segment(dsa_area *, size_t);
1722:	static dsa_segment_map *get_segment_by_index(dsa_area *, dsa_segment_index);
1342:	static void init_span(dsa_area *, dsa_pointer, dsa_area_pool *, dsa_pointer, size_t, uint16);
2060:	static dsa_segment_map *make_new_segment(dsa_area *, size_t);
1397:	static _Bool transfer_first_span(dsa_area *, dsa_area_pool *, int, int);
1936:	static void unlink_segment(dsa_area *, dsa_segment_map *);
1864:	static void unlink_span(dsa_area *, dsa_area_span *);

File dshash.c:
262:	dshash_table *dshash_attach(dsa_area *, const dshash_parameters *, dshash_table_handle, void *);
198:	dshash_table *dshash_create(dsa_area *, const dshash_parameters *, void *);
533:	void dshash_delete_entry(dshash_table *, void *);
495:	_Bool dshash_delete_key(dshash_table *, const void *);
315:	void dshash_destroy(dshash_table *);
299:	void dshash_detach(dshash_table *);
583:	void dshash_dump(dshash_table *);
382:	void *dshash_find(dshash_table *, const void *, _Bool);
425:	void *dshash_find_or_insert(dshash_table *, const void *, _Bool *);
359:	dshash_table_handle dshash_get_hash_table_handle(dshash_table *);
564:	int dshash_memcmp(const void *, const void *, size_t, void *);
573:	dshash_hash dshash_memhash(const void *, size_t, void *);
550:	void dshash_release_lock(dshash_table *, void *);
637:	static void delete_item(dshash_table *, dshash_table_item *);
838:	static _Bool delete_item_from_bucket(dshash_table *, dshash_table_item *, dsa_pointer *);
809:	static _Bool delete_key_from_bucket(dshash_table *, const void *, dsa_pointer *);
740:	static void ensure_valid_bucket_pointers(dshash_table *);
877:	static _Bool equal_keys(dshash_table *, const void *, const void *);
754:	static dshash_table_item *find_in_bucket(dshash_table *, const void *, dsa_pointer);
866:	static dshash_hash hash_key(dshash_table *, const void *);
789:	static dshash_table_item *insert_into_bucket(dshash_table *, const void *, dsa_pointer *);
773:	static void insert_item_into_bucket(dshash_table *, dsa_pointer, dshash_table_item *, dsa_pointer *);
663:	static void resize(dshash_table *, size_t);

File dsm.c:
1111:	void cancel_on_dsm_detach(dsm_segment *, on_dsm_detach_callback, Datum);
631:	dsm_segment *dsm_attach(dsm_handle);
723:	void dsm_backend_shutdown(void);
210:	void dsm_cleanup_using_control_segment(dsm_handle);
487:	dsm_segment *dsm_create(Size, int);
769:	void dsm_detach(dsm_segment *);
741:	void dsm_detach_all(void);
441:	size_t dsm_estimate_size(void);
1040:	dsm_segment *dsm_find_mapping(dsm_handle);
881:	void dsm_pin_mapping(dsm_segment *);
921:	void dsm_pin_segment(dsm_segment *);
149:	void dsm_postmaster_startup(PGShmemHeader *);
1059:	void *dsm_segment_address(dsm_segment *);
1087:	dsm_handle dsm_segment_handle(dsm_segment *);
1069:	Size dsm_segment_map_length(dsm_segment *);
450:	void dsm_shmem_init(void);
900:	void dsm_unpin_mapping(dsm_segment *);
953:	void dsm_unpin_segment(dsm_handle);
1096:	void on_dsm_detach(dsm_segment *, on_dsm_detach_callback, Datum);
1134:	void reset_on_dsm_detach(void);
395:	static void dsm_backend_startup(void);
292:	static void dsm_cleanup_for_mmap(void);
1219:	static uint64 dsm_control_bytes_needed(uint32);
1201:	static _Bool dsm_control_segment_sane(dsm_control_header *, Size);
1165:	static dsm_segment *dsm_create_descriptor(void);
330:	static void dsm_postmaster_shutdown(int, Datum);
1245:	static _Bool is_main_region_dsm_handle(dsm_handle);
1226:	static dsm_handle make_main_region_dsm_handle(int);

File dsm_impl.c:
163:	_Bool dsm_impl_op(dsm_op, dsm_handle, Size, void **, void **, Size *, int);
970:	void dsm_impl_pin_segment(dsm_handle, void *, void **);
1020:	void dsm_impl_unpin_segment(dsm_handle, void **);
799:	static _Bool dsm_impl_mmap(dsm_op, dsm_handle, Size, void **, void **, Size *, int);
216:	static _Bool dsm_impl_posix(dsm_op, dsm_handle, Size, void **, void **, Size *, int);
355:	static int dsm_impl_posix_resize(int, off_t);
430:	static _Bool dsm_impl_sysv(dsm_op, dsm_handle, Size, void **, void **, Size *, int);
1052:	static int errcode_for_dynamic_shared_memory(void);

File duplocale.c:
33:	locale_t __duplocale(locale_t);

File dynahash.c:
1909:	void AtEOSubXact_HashTables(_Bool, int);
1883:	void AtEOXact_HashTables(_Bool);
908:	uint32 get_hash_value(HTAB *, const void *);
349:	HTAB *hash_create(const char *, long, const HASHCTL *, int);
862:	void hash_destroy(HTAB *);
780:	Size hash_estimate_size(long, Size);
1532:	void hash_freeze(HTAB *);
1382:	long hash_get_num_entries(HTAB *);
851:	Size hash_get_shared_size(HASHCTL *, int);
954:	void *hash_search(HTAB *, const void *, HASHACTION, _Bool *);
967:	void *hash_search_with_hash_value(HTAB *, const void *, uint32, HASHACTION, _Bool *);
827:	long hash_select_dirsize(long);
1426:	void hash_seq_init(HASH_SEQ_STATUS *, HTAB *);
1436:	void *hash_seq_search(HASH_SEQ_STATUS *);
1512:	void hash_seq_term(HASH_SEQ_STATUS *);
881:	void hash_stats(const char *, HTAB *);
1162:	_Bool hash_update_hash_key(HTAB *, void *, const void *);
1765:	int my_log2(long);
289:	static void *DynaHashAlloc(Size);
915:	static uint32 calc_bucket(HASHHDR *, uint32);
653:	static int choose_nelem_alloc(Size);
1848:	static void deregister_seq_scan(HTAB *);
1646:	static _Bool dir_realloc(HTAB *);
1704:	static _Bool element_alloc(HTAB *, int, int);
1549:	static _Bool expand_table(HTAB *);
1297:	static HASHBUCKET get_hash_entry(HTAB *, int);
1869:	static _Bool has_seq_scans(HTAB *);
1751:	static void hash_corrupted(HTAB *);
626:	static void hdefault(HTAB *);
686:	static _Bool init_htab(HTAB *, long);
1791:	static int next_pow2_int(long);
1783:	static long next_pow2_long(long);
1836:	static void register_seq_scan(HTAB *);
1685:	static HASHSEGMENT seg_alloc(HTAB *);
304:	static int string_compare(const char *, const char *, Size);

File dynarray_at_failure.c:
23:	void __GI___libc_dynarray_at_failure(size_t, size_t);

File dynarray_emplace_enlarge.c:
25:	_Bool __GI___libc_dynarray_emplace_enlarge(struct dynarray_header *, void *, size_t);

File dynarray_finalize.c:
24:	_Bool __GI___libc_dynarray_finalize(struct dynarray_header *, void *, size_t, struct dynarray_finalize_result *);

File dynarray_resize.c:
25:	_Bool __GI___libc_dynarray_resize(struct dynarray_header *, size_t, void *, size_t);

File dynarray_resize_clear.c:
24:	_Bool __GI___libc_dynarray_resize_clear(struct dynarray_header *, size_t, void *, size_t);

File dysize.c:
21:	int dysize(int);

File e_exp10f.c:
24:	float __ieee754_exp10f(float);

File e_scalb.c:
37:	double __ieee754_scalb(double, double);
25:	static double invalid_fn(double, double);

File e_scalbf.c:
37:	float __ieee754_scalbf(float, float);
25:	static float invalid_fn(float, float);

File elog.c:
1560:	ErrorData *CopyErrorData(void);
1922:	void DebugFileOpen(void);
1509:	void EmitErrorReport(void);
1654:	void FlushErrorState(void);
1616:	void FreeErrorData(ErrorData *);
1855:	char *GetErrorContextStack(void);
1738:	void ReThrowError(ErrorData *);
1679:	void ThrowErrorData(ErrorData *);
1351:	int err_generic_string(int, const char *);
931:	int errbacktrace(void);
698:	int errcode(int);
721:	int errcode_for_file_access(void);
792:	int errcode_for_socket_access(void);
1204:	int errcontext_msg(const char *, ...);
1042:	int errdetail(const char *, ...);
1069:	int errdetail_internal(const char *, ...);
1090:	int errdetail_log(const char *, ...);
1111:	int errdetail_log_plural(const char *, const char *, unsigned long, ...);
1134:	int errdetail_plural(const char *, const char *, unsigned long, ...);
513:	void errfinish(const char *, int, const char *);
1269:	int errhidecontext(_Bool);
1250:	int errhidestmt(_Bool);
1156:	int errhint(const char *, ...);
1178:	int errhint_plural(const char *, const char *, unsigned long, ...);
909:	int errmsg(const char *, ...);
996:	int errmsg_internal(const char *, ...);
1019:	int errmsg_plural(const char *, const char *, unsigned long, ...);
1285:	int errposition(int);
340:	_Bool errstart(int, const char *);
324:	_Bool errstart_cold(int, const char *);
1476:	char *format_elog_string(const char *, ...);
1400:	int geterrcode(void);
1417:	int geterrposition(void);
1434:	int getinternalerrposition(void);
291:	_Bool in_error_recursion_trouble(void);
1301:	int internalerrposition(int);
1321:	int internalerrquery(const char *);
270:	_Bool message_level_is_interesting(int);
1799:	void pg_re_throw(void);
1467:	void pre_format_elog_string(int, const char *);
1230:	int set_errcontext_domain(const char *);
1973:	void set_syslog_parameters(const char *, int);
3609:	int trace_recovery(int);
2988:	char *unpack_sql_state(int);
3556:	void write_stderr(const char *, ...);
2738:	static void appendCSVLiteral(StringInfo, const char *);
3537:	static void append_with_tabs(StringInfo, const char *);
303:	static const char *err_gettext(const char *);
3287:	static void err_sendstring(StringInfo, const char *);
3485:	static const char *error_severity(int);
199:	static _Bool is_log_level_output(int, int);
2380:	static void log_line_prefix(StringInfo, ErrorData *);
483:	static _Bool matches_backtrace_functions(const char *);
2349:	static const char *process_log_prefix_padding(const char *, int *);
3299:	static void send_message_to_frontend(ErrorData *);
3008:	static void send_message_to_server_log(ErrorData *);
955:	static void set_backtrace(ErrorData *, int);
1387:	static void set_errdata_field(MemoryContextData *, char **, const char *);
2295:	static void setup_formatted_log_time(void);
2327:	static void setup_formatted_start_time(void);
242:	static _Bool should_output_to_client(int);
233:	static _Bool should_output_to_server(int);
2222:	static void write_console(const char *, int);
2762:	static void write_csvlog(ErrorData *);
3243:	static void write_pipe_chunks(char *, int, int);
2006:	static void write_syslog(int, const char *);

File encnames.c:
470:	const char *get_encoding_name_for_icu(int);
459:	_Bool is_encoding_supported_by_icu(int);
550:	int pg_char_to_encoding(const char *);
588:	const char *pg_encoding_to_char(int);
486:	int pg_valid_client_encoding(const char *);
500:	int pg_valid_server_encoding(const char *);
514:	int pg_valid_server_encoding_id(int);
525:	static char *clean_encoding_name(const char *, char *);

File encode.c:
95:	Datum binary_decode(FunctionCallInfo);
47:	Datum binary_encode(FunctionCallInfo);
193:	uint64 hex_decode(const char *, size_t, char *);
161:	uint64 hex_encode(const char *, size_t, char *);
513:	static uint64 esc_dec_len(const char *, size_t);
444:	static uint64 esc_decode(const char *, size_t, char *);
492:	static uint64 esc_enc_len(const char *, size_t);
405:	static uint64 esc_encode(const char *, size_t, char *);
175:	static char get_hex(const char *);
233:	static uint64 hex_dec_len(const char *, size_t);
227:	static uint64 hex_enc_len(const char *, size_t);
382:	static uint64 pg_base64_dec_len(const char *, size_t);
304:	static uint64 pg_base64_decode(const char *, size_t, char *);
375:	static uint64 pg_base64_enc_len(const char *, size_t);
257:	static uint64 pg_base64_encode(const char *, size_t, char *);
593:	static const struct pg_encoding *pg_find_encoding(const char *);

File endutxent.c:
23:	void endutxent(void);

File enum.c:
372:	Datum enum_cmp(FunctionCallInfo);
318:	Datum enum_eq(FunctionCallInfo);
431:	Datum enum_first(FunctionCallInfo);
336:	Datum enum_ge(FunctionCallInfo);
345:	Datum enum_gt(FunctionCallInfo);
109:	Datum enum_in(FunctionCallInfo);
363:	Datum enum_larger(FunctionCallInfo);
460:	Datum enum_last(FunctionCallInfo);
309:	Datum enum_le(FunctionCallInfo);
300:	Datum enum_lt(FunctionCallInfo);
327:	Datum enum_ne(FunctionCallInfo);
149:	Datum enum_out(FunctionCallInfo);
521:	Datum enum_range_all(FunctionCallInfo);
490:	Datum enum_range_bounds(FunctionCallInfo);
173:	Datum enum_recv(FunctionCallInfo);
215:	Datum enum_send(FunctionCallInfo);
354:	Datum enum_smaller(FunctionCallInfo);
63:	static void check_safe_enum_use(HeapTuple);
246:	static int enum_cmp_internal(Oid, Oid, FunctionCallInfo);
386:	static Oid enum_endpoint(Oid, ScanDirection);
541:	static ArrayType *enum_range_internal(Oid, Oid, Oid);

File envz.c:
32:	char *__GI_envz_entry(const char *, size_t, const char *);
78:	void __GI_envz_remove(char **, size_t *, const char *);
93:	error_t envz_add(char **, size_t *, const char *, const char *);
61:	char *envz_get(const char *, size_t, const char *);
130:	error_t envz_merge(char **, size_t *, const char *, size_t, int);
157:	void envz_strip(char **, size_t *);

File equalfuncs.c:
3117:	_Bool equal(const void *, const void *);
2405:	static _Bool _equalAConst(const A_Const *, const A_Const *);
2375:	static _Bool _equalAExpr(const A_Expr *, const A_Expr *);
2439:	static _Bool _equalAIndices(const A_Indices *, const A_Indices *);
2433:	static _Bool _equalAStar(const A_Star *, const A_Star *);
2458:	static _Bool _equalA_ArrayExpr(const A_ArrayExpr *, const A_ArrayExpr *);
2449:	static _Bool _equalA_Indirection(const A_Indirection *, const A_Indirection *);
1193:	static _Bool _equalAccessPriv(const AccessPriv *, const AccessPriv *);
217:	static _Bool _equalAggref(const Aggref *, const Aggref *);
98:	static _Bool _equalAlias(const Alias *, const Alias *);
1145:	static _Bool _equalAlterCollationStmt(const AlterCollationStmt *, const AlterCollationStmt *);
1726:	static _Bool _equalAlterDatabaseSetStmt(const AlterDatabaseSetStmt *, const AlterDatabaseSetStmt *);
1717:	static _Bool _equalAlterDatabaseStmt(const AlterDatabaseStmt *, const AlterDatabaseStmt *);
1215:	static _Bool _equalAlterDefaultPrivilegesStmt(const AlterDefaultPrivilegesStmt *, const AlterDefaultPrivilegesStmt *);
1153:	static _Bool _equalAlterDomainStmt(const AlterDomainStmt *, const AlterDomainStmt *);
1617:	static _Bool _equalAlterEnumStmt(const AlterEnumStmt *, const AlterEnumStmt *);
2093:	static _Bool _equalAlterEventTrigStmt(const AlterEventTrigStmt *, const AlterEventTrigStmt *);
1927:	static _Bool _equalAlterExtensionContentsStmt(const AlterExtensionContentsStmt *, const AlterExtensionContentsStmt *);
1918:	static _Bool _equalAlterExtensionStmt(const AlterExtensionStmt *, const AlterExtensionStmt *);
1948:	static _Bool _equalAlterFdwStmt(const AlterFdwStmt *, const AlterFdwStmt *);
1971:	static _Bool _equalAlterForeignServerStmt(const AlterForeignServerStmt *, const AlterForeignServerStmt *);
1453:	static _Bool _equalAlterFunctionStmt(const AlterFunctionStmt *, const AlterFunctionStmt *);
1486:	static _Bool _equalAlterObjectDependsStmt(const AlterObjectDependsStmt *, const AlterObjectDependsStmt *);
1498:	static _Bool _equalAlterObjectSchemaStmt(const AlterObjectSchemaStmt *, const AlterObjectSchemaStmt *);
1697:	static _Bool _equalAlterOpFamilyStmt(const AlterOpFamilyStmt *, const AlterOpFamilyStmt *);
1521:	static _Bool _equalAlterOperatorStmt(const AlterOperatorStmt *, const AlterOperatorStmt *);
1510:	static _Bool _equalAlterOwnerStmt(const AlterOwnerStmt *, const AlterOwnerStmt *);
2363:	static _Bool _equalAlterPolicyStmt(const AlterPolicyStmt *, const AlterPolicyStmt *);
2300:	static _Bool _equalAlterPublicationStmt(const AlterPublicationStmt *, const AlterPublicationStmt *);
2135:	static _Bool _equalAlterRoleSetStmt(const AlterRoleSetStmt *, const AlterRoleSetStmt *);
2125:	static _Bool _equalAlterRoleStmt(const AlterRoleStmt *, const AlterRoleStmt *);
1826:	static _Bool _equalAlterSeqStmt(const AlterSeqStmt *, const AlterSeqStmt *);
1418:	static _Bool _equalAlterStatsStmt(const AlterStatsStmt *, const AlterStatsStmt *);
2325:	static _Bool _equalAlterSubscriptionStmt(const AlterSubscriptionStmt *, const AlterSubscriptionStmt *);
1805:	static _Bool _equalAlterSystemStmt(const AlterSystemStmt *, const AlterSystemStmt *);
2273:	static _Bool _equalAlterTSConfigurationStmt(const AlterTSConfigurationStmt *, const AlterTSConfigurationStmt *);
2264:	static _Bool _equalAlterTSDictionaryStmt(const AlterTSDictionaryStmt *, const AlterTSDictionaryStmt *);
1130:	static _Bool _equalAlterTableCmd(const AlterTableCmd *, const AlterTableCmd *);
1895:	static _Bool _equalAlterTableMoveAllStmt(const AlterTableMoveAllStmt *, const AlterTableMoveAllStmt *);
1884:	static _Bool _equalAlterTableSpaceOptionsStmt(const AlterTableSpaceOptionsStmt *, const AlterTableSpaceOptionsStmt *);
1119:	static _Bool _equalAlterTableStmt(const AlterTableStmt *, const AlterTableStmt *);
1530:	static _Bool _equalAlterTypeStmt(const AlterTypeStmt *, const AlterTypeStmt *);
1993:	static _Bool _equalAlterUserMappingStmt(const AlterUserMappingStmt *, const AlterUserMappingStmt *);
472:	static _Bool _equalAlternativeSubPlan(const AlternativeSubPlan *, const AlternativeSubPlan *);
910:	static _Bool _equalAppendRelInfo(const AppendRelInfo *, const AppendRelInfo *);
528:	static _Bool _equalArrayCoerceExpr(const ArrayCoerceExpr *, const ArrayCoerceExpr *);
596:	static _Bool _equalArrayExpr(const ArrayExpr *, const ArrayExpr *);
426:	static _Bool _equalBoolExpr(const BoolExpr *, const BoolExpr *);
696:	static _Bool _equalBooleanTest(const BooleanTest *, const BooleanTest *);
2899:	static _Bool _equalCTECycleClause(const CTECycleClause *, const CTECycleClause *);
2888:	static _Bool _equalCTESearchClause(const CTESearchClause *, const CTESearchClause *);
1242:	static _Bool _equalCallStmt(const CallStmt *, const CallStmt *);
563:	static _Bool _equalCaseExpr(const CaseExpr *, const CaseExpr *);
586:	static _Bool _equalCaseTestExpr(const CaseTestExpr *, const CaseTestExpr *);
576:	static _Bool _equalCaseWhen(const CaseWhen *, const CaseWhen *);
1234:	static _Bool _equalClosePortalStmt(const ClosePortalStmt *, const ClosePortalStmt *);
1252:	static _Bool _equalClusterStmt(const ClusterStmt *, const ClusterStmt *);
634:	static _Bool _equalCoalesceExpr(const CoalesceExpr *, const CoalesceExpr *);
706:	static _Bool _equalCoerceToDomain(const CoerceToDomain *, const CoerceToDomain *);
719:	static _Bool _equalCoerceToDomainValue(const CoerceToDomainValue *, const CoerceToDomainValue *);
516:	static _Bool _equalCoerceViaIO(const CoerceViaIO *, const CoerceViaIO *);
2513:	static _Bool _equalCollateClause(const CollateClause *, const CollateClause *);
553:	static _Bool _equalCollateExpr(const CollateExpr *, const CollateExpr *);
2639:	static _Bool _equalColumnDef(const ColumnDef *, const ColumnDef *);
2387:	static _Bool _equalColumnRef(const ColumnRef *, const ColumnRef *);
1342:	static _Bool _equalCommentStmt(const CommentStmt *, const CommentStmt *);
2916:	static _Bool _equalCommonTableExpr(const CommonTableExpr *, const CommonTableExpr *);
1590:	static _Bool _equalCompositeTypeStmt(const CompositeTypeStmt *, const CompositeTypeStmt *);
183:	static _Bool _equalConst(const Const *, const Const *);
2664:	static _Bool _equalConstraint(const Constraint *, const Constraint *);
2164:	static _Bool _equalConstraintsSetStmt(const ConstraintsSetStmt *, const ConstraintsSetStmt *);
542:	static _Bool _equalConvertRowtypeExpr(const ConvertRowtypeExpr *, const ConvertRowtypeExpr *);
1262:	static _Bool _equalCopyStmt(const CopyStmt *, const CopyStmt *);
2050:	static _Bool _equalCreateAmStmt(const CreateAmStmt *, const CreateAmStmt *);
2207:	static _Bool _equalCreateCastStmt(const CreateCastStmt *, const CreateCastStmt *);
2195:	static _Bool _equalCreateConversionStmt(const CreateConversionStmt *, const CreateConversionStmt *);
1651:	static _Bool _equalCreateDomainStmt(const CreateDomainStmt *, const CreateDomainStmt *);
1599:	static _Bool _equalCreateEnumStmt(const CreateEnumStmt *, const CreateEnumStmt *);
2082:	static _Bool _equalCreateEventTrigStmt(const CreateEventTrigStmt *, const CreateEventTrigStmt *);
1908:	static _Bool _equalCreateExtensionStmt(const CreateExtensionStmt *, const CreateExtensionStmt *);
1938:	static _Bool _equalCreateFdwStmt(const CreateFdwStmt *, const CreateFdwStmt *);
1958:	static _Bool _equalCreateForeignServerStmt(const CreateForeignServerStmt *, const CreateForeignServerStmt *);
2013:	static _Bool _equalCreateForeignTableStmt(const CreateForeignTableStmt *, const CreateForeignTableStmt *);
1428:	static _Bool _equalCreateFunctionStmt(const CreateFunctionStmt *, const CreateFunctionStmt *);
1675:	static _Bool _equalCreateOpClassItem(const CreateOpClassItem *, const CreateOpClassItem *);
1662:	static _Bool _equalCreateOpClassStmt(const CreateOpClassStmt *, const CreateOpClassStmt *);
1688:	static _Bool _equalCreateOpFamilyStmt(const CreateOpFamilyStmt *, const CreateOpFamilyStmt *);
2102:	static _Bool _equalCreatePLangStmt(const CreatePLangStmt *, const CreatePLangStmt *);
2349:	static _Bool _equalCreatePolicyStmt(const CreatePolicyStmt *, const CreatePolicyStmt *);
2288:	static _Bool _equalCreatePublicationStmt(const CreatePublicationStmt *, const CreatePublicationStmt *);
1608:	static _Bool _equalCreateRangeStmt(const CreateRangeStmt *, const CreateRangeStmt *);
2115:	static _Bool _equalCreateRoleStmt(const CreateRoleStmt *, const CreateRoleStmt *);
2184:	static _Bool _equalCreateSchemaStmt(const CreateSchemaStmt *, const CreateSchemaStmt *);
1814:	static _Bool _equalCreateSeqStmt(const CreateSeqStmt *, const CreateSeqStmt *);
1404:	static _Bool _equalCreateStatsStmt(const CreateStatsStmt *, const CreateStatsStmt *);
1277:	static _Bool _equalCreateStmt(const CreateStmt *, const CreateStmt *);
2313:	static _Bool _equalCreateSubscriptionStmt(const CreateSubscriptionStmt *, const CreateSubscriptionStmt *);
1774:	static _Bool _equalCreateTableAsStmt(const CreateTableAsStmt *, const CreateTableAsStmt *);
1864:	static _Bool _equalCreateTableSpaceStmt(const CreateTableSpaceStmt *, const CreateTableSpaceStmt *);
2038:	static _Bool _equalCreateTransformStmt(const CreateTransformStmt *, const CreateTransformStmt *);
2060:	static _Bool _equalCreateTrigStmt(const CreateTrigStmt *, const CreateTrigStmt *);
1982:	static _Bool _equalCreateUserMappingStmt(const CreateUserMappingStmt *, const CreateUserMappingStmt *);
1708:	static _Bool _equalCreatedbStmt(const CreatedbStmt *, const CreatedbStmt *);
741:	static _Bool _equalCurrentOfExpr(const CurrentOfExpr *, const CurrentOfExpr *);
2238:	static _Bool _equalDeallocateStmt(const DeallocateStmt *, const DeallocateStmt *);
1224:	static _Bool _equalDeclareCursorStmt(const DeclareCursorStmt *, const DeclareCursorStmt *);
2699:	static _Bool _equalDefElem(const DefElem *, const DefElem *);
1306:	static _Bool _equalDefineStmt(const DefineStmt *, const DefineStmt *);
1032:	static _Bool _equalDeleteStmt(const DeleteStmt *, const DeleteStmt *);
1856:	static _Bool _equalDiscardStmt(const DiscardStmt *, const DiscardStmt *);
344:	static _Bool _equalDistinctExpr(const DistinctExpr *, const DistinctExpr *);
1463:	static _Bool _equalDoStmt(const DoStmt *, const DoStmt *);
2246:	static _Bool _equalDropOwnedStmt(const DropOwnedStmt *, const DropOwnedStmt *);
2145:	static _Bool _equalDropRoleStmt(const DropRoleStmt *, const DropRoleStmt *);
1320:	static _Bool _equalDropStmt(const DropStmt *, const DropStmt *);
2338:	static _Bool _equalDropSubscriptionStmt(const DropSubscriptionStmt *, const DropSubscriptionStmt *);
1875:	static _Bool _equalDropTableSpaceStmt(const DropTableSpaceStmt *, const DropTableSpaceStmt *);
2003:	static _Bool _equalDropUserMappingStmt(const DropUserMappingStmt *, const DropUserMappingStmt *);
1735:	static _Bool _equalDropdbStmt(const DropdbStmt *, const DropdbStmt *);
2229:	static _Bool _equalExecuteStmt(const ExecuteStmt *, const ExecuteStmt *);
1765:	static _Bool _equalExplainStmt(const ExplainStmt *, const ExplainStmt *);
941:	static _Bool _equalExtensibleNode(const ExtensibleNode *, const ExtensibleNode *);
1363:	static _Bool _equalFetchStmt(const FetchStmt *, const FetchStmt *);
480:	static _Bool _equalFieldSelect(const FieldSelect *, const FieldSelect *);
492:	static _Bool _equalFieldStore(const FieldStore *, const FieldStore *);
808:	static _Bool _equalFromExpr(const FromExpr *, const FromExpr *);
2415:	static _Bool _equalFuncCall(const FuncCall *, const FuncCall *);
291:	static _Bool _equalFuncExpr(const FuncExpr *, const FuncExpr *);
1442:	static _Bool _equalFunctionParameter(const FunctionParameter *, const FunctionParameter *);
1202:	static _Bool _equalGrantRoleStmt(const GrantRoleStmt *, const GrantRoleStmt *);
1166:	static _Bool _equalGrantStmt(const GrantStmt *, const GrantStmt *);
243:	static _Bool _equalGroupingFunc(const GroupingFunc *, const GroupingFunc *);
2813:	static _Bool _equalGroupingSet(const GroupingSet *, const GroupingSet *);
2025:	static _Bool _equalImportForeignSchemaStmt(const ImportForeignSchemaStmt *, const ImportForeignSchemaStmt *);
2614:	static _Bool _equalIndexElem(const IndexElem *, const IndexElem *);
1374:	static _Bool _equalIndexStmt(const IndexStmt *, const IndexStmt *);
2865:	static _Bool _equalInferClause(const InferClause *, const InferClause *);
760:	static _Bool _equalInferenceElem(const InferenceElem *, const InferenceElem *);
1018:	static _Bool _equalInsertStmt(const InsertStmt *, const InsertStmt *);
141:	static _Bool _equalIntoClause(const IntoClause *, const IntoClause *);
792:	static _Bool _equalJoinExpr(const JoinExpr *, const JoinExpr *);
3028:	static _Bool _equalList(const List *, const List *);
1562:	static _Bool _equalListenStmt(const ListenStmt *, const ListenStmt *);
1643:	static _Bool _equalLoadStmt(const LoadStmt *, const LoadStmt *);
2154:	static _Bool _equalLockStmt(const LockStmt *, const LockStmt *);
2711:	static _Bool _equalLockingClause(const LockingClause *, const LockingClause *);
645:	static _Bool _equalMinMaxExpr(const MinMaxExpr *, const MinMaxExpr *);
2478:	static _Bool _equalMultiAssignRef(const MultiAssignRef *, const MultiAssignRef *);
307:	static _Bool _equalNamedArgExpr(const NamedArgExpr *, const NamedArgExpr *);
751:	static _Bool _equalNextValueExpr(const NextValueExpr *, const NextValueExpr *);
1553:	static _Bool _equalNotifyStmt(const NotifyStmt *, const NotifyStmt *);
370:	static _Bool _equalNullIfExpr(const NullIfExpr *, const NullIfExpr *);
685:	static _Bool _equalNullTest(const NullTest *, const NullTest *);
1182:	static _Bool _equalObjectWithArgs(const ObjectWithArgs *, const ObjectWithArgs *);
2876:	static _Bool _equalOnConflictClause(const OnConflictClause *, const OnConflictClause *);
817:	static _Bool _equalOnConflictExpr(const OnConflictExpr *, const OnConflictExpr *);
318:	static _Bool _equalOpExpr(const OpExpr *, const OpExpr *);
1107:	static _Bool _equalPLAssignStmt(const PLAssignStmt *, const PLAssignStmt *);
204:	static _Bool _equalParam(const Param *, const Param *);
2396:	static _Bool _equalParamRef(const ParamRef *, const ParamRef *);
2989:	static _Bool _equalPartitionBoundSpec(const PartitionBoundSpec *, const PartitionBoundSpec *);
3014:	static _Bool _equalPartitionCmd(const PartitionCmd *, const PartitionCmd *);
2967:	static _Bool _equalPartitionElem(const PartitionElem *, const PartitionElem *);
3004:	static _Bool _equalPartitionRangeDatum(const PartitionRangeDatum *, const PartitionRangeDatum *);
2979:	static _Bool _equalPartitionSpec(const PartitionSpec *, const PartitionSpec *);
836:	static _Bool _equalPathKey(const PathKey *, const PathKey *);
925:	static _Bool _equalPlaceHolderInfo(const PlaceHolderInfo *, const PlaceHolderInfo *);
867:	static _Bool _equalPlaceHolderVar(const PlaceHolderVar *, const PlaceHolderVar *);
2219:	static _Bool _equalPrepareStmt(const PrepareStmt *, const PrepareStmt *);
962:	static _Bool _equalQuery(const Query *, const Query *);
2560:	static _Bool _equalRangeFunction(const RangeFunction *, const RangeFunction *);
2550:	static _Bool _equalRangeSubselect(const RangeSubselect *, const RangeSubselect *);
2585:	static _Bool _equalRangeTableFunc(const RangeTableFunc *, const RangeTableFunc *);
2599:	static _Bool _equalRangeTableFuncCol(const RangeTableFuncCol *, const RangeTableFuncCol *);
2573:	static _Bool _equalRangeTableSample(const RangeTableSample *, const RangeTableSample *);
2721:	static _Bool _equalRangeTblEntry(const RangeTblEntry *, const RangeTblEntry *);
2765:	static _Bool _equalRangeTblFunction(const RangeTblFunction *, const RangeTblFunction *);
784:	static _Bool _equalRangeTblRef(const RangeTblRef *, const RangeTblRef *);
107:	static _Bool _equalRangeVar(const RangeVar *, const RangeVar *);
1008:	static _Bool _equalRawStmt(const RawStmt *, const RawStmt *);
2255:	static _Bool _equalReassignOwnedStmt(const ReassignOwnedStmt *, const ReassignOwnedStmt *);
1786:	static _Bool _equalRefreshMatViewStmt(const RefreshMatViewStmt *, const RefreshMatViewStmt *);
2173:	static _Bool _equalReindexStmt(const ReindexStmt *, const ReindexStmt *);
503:	static _Bool _equalRelabelType(const RelabelType *, const RelabelType *);
1471:	static _Bool _equalRenameStmt(const RenameStmt *, const RenameStmt *);
1796:	static _Bool _equalReplicaIdentityStmt(const ReplicaIdentityStmt *, const ReplicaIdentityStmt *);
2467:	static _Bool _equalResTarget(const ResTarget *, const ResTarget *);
848:	static _Bool _equalRestrictInfo(const RestrictInfo *, const RestrictInfo *);
1099:	static _Bool _equalReturnStmt(const ReturnStmt *, const ReturnStmt *);
2947:	static _Bool _equalRoleSpec(const RoleSpec *, const RoleSpec *);
621:	static _Bool _equalRowCompareExpr(const RowCompareExpr *, const RowCompareExpr *);
609:	static _Bool _equalRowExpr(const RowExpr *, const RowExpr *);
2844:	static _Bool _equalRowMarkClause(const RowMarkClause *, const RowMarkClause *);
1539:	static _Bool _equalRuleStmt(const RuleStmt *, const RuleStmt *);
658:	static _Bool _equalSQLValueFunction(const SQLValueFunction *, const SQLValueFunction *);
396:	static _Bool _equalScalarArrayOpExpr(const ScalarArrayOpExpr *, const ScalarArrayOpExpr *);
1352:	static _Bool _equalSecLabelStmt(const SecLabelStmt *, const SecLabelStmt *);
1057:	static _Bool _equalSelectStmt(const SelectStmt *, const SelectStmt *);
1084:	static _Bool _equalSetOperationStmt(const SetOperationStmt *, const SetOperationStmt *);
730:	static _Bool _equalSetToDefault(const SetToDefault *, const SetToDefault *);
2523:	static _Bool _equalSortBy(const SortBy *, const SortBy *);
2801:	static _Bool _equalSortGroupClause(const SortGroupClause *, const SortGroupClause *);
892:	static _Bool _equalSpecialJoinInfo(const SpecialJoinInfo *, const SpecialJoinInfo *);
2630:	static _Bool _equalStatsElem(const StatsElem *, const StatsElem *);
436:	static _Bool _equalSubLink(const SubLink *, const SubLink *);
449:	static _Bool _equalSubPlan(const SubPlan *, const SubPlan *);
275:	static _Bool _equalSubscriptingRef(const SubscriptingRef *, const SubscriptingRef *);
121:	static _Bool _equalTableFunc(const TableFunc *, const TableFunc *);
1296:	static _Bool _equalTableLikeClause(const TableLikeClause *, const TableLikeClause *);
2779:	static _Bool _equalTableSampleClause(const TableSampleClause *, const TableSampleClause *);
770:	static _Bool _equalTargetEntry(const TargetEntry *, const TargetEntry *);
1578:	static _Bool _equalTransactionStmt(const TransactionStmt *, const TransactionStmt *);
2957:	static _Bool _equalTriggerTransition(const TriggerTransition *, const TriggerTransition *);
1332:	static _Bool _equalTruncateStmt(const TruncateStmt *, const TruncateStmt *);
2503:	static _Bool _equalTypeCast(const TypeCast *, const TypeCast *);
2488:	static _Bool _equalTypeName(const TypeName *, const TypeName *);
1570:	static _Bool _equalUnlistenStmt(const UnlistenStmt *, const UnlistenStmt *);
1044:	static _Bool _equalUpdateStmt(const UpdateStmt *, const UpdateStmt *);
1755:	static _Bool _equalVacuumRelation(const VacuumRelation *, const VacuumRelation *);
1745:	static _Bool _equalVacuumStmt(const VacuumStmt *, const VacuumStmt *);
3087:	static _Bool _equalValue(const Value *, const Value *);
163:	static _Bool _equalVar(const Var *, const Var *);
1837:	static _Bool _equalVariableSetStmt(const VariableSetStmt *, const VariableSetStmt *);
1848:	static _Bool _equalVariableShowStmt(const VariableShowStmt *, const VariableShowStmt *);
1630:	static _Bool _equalViewStmt(const ViewStmt *, const ViewStmt *);
2823:	static _Bool _equalWindowClause(const WindowClause *, const WindowClause *);
2535:	static _Bool _equalWindowDef(const WindowDef *, const WindowDef *);
258:	static _Bool _equalWindowFunc(const WindowFunc *, const WindowFunc *);
2789:	static _Bool _equalWithCheckOption(const WithCheckOption *, const WithCheckOption *);
2855:	static _Bool _equalWithClause(const WithClause *, const WithClause *);
669:	static _Bool _equalXmlExpr(const XmlExpr *, const XmlExpr *);
2936:	static _Bool _equalXmlSerialize(const XmlSerialize *, const XmlSerialize *);

File equivclass.c:
2696:	void add_child_join_rel_equivalences(PlannerInfo *, int, AppendRelInfo **, RelOptInfo *, RelOptInfo *);
2568:	void add_child_rel_equivalences(PlannerInfo *, AppendRelInfo *, RelOptInfo *, RelOptInfo *);
500:	Expr *canonicalize_ec_expression(Expr *, Oid, Oid);
3091:	_Bool eclass_useful_for_merging(PlannerInfo *, EquivalenceClass *, RelOptInfo *);
2386:	_Bool exprs_known_equal(PlannerInfo *, Node *, Node *);
851:	EquivalenceMember *find_computable_ec_member(PlannerInfo *, EquivalenceClass *, List *, Relids, _Bool);
2528:	RestrictInfo *find_derived_clause_for_ec_member(EquivalenceClass *, EquivalenceMember *);
786:	EquivalenceMember *find_ec_member_matching_expr(EquivalenceClass *, Expr *, Relids);
939:	Expr *find_em_expr_for_rel(EquivalenceClass *, RelOptInfo *);
1088:	void generate_base_implied_equalities(PlannerInfo *);
2850:	List *generate_implied_equalities_for_column(PlannerInfo *, RelOptInfo *, ec_matches_callback_type, void *, Relids);
1421:	List *generate_join_implied_equalities(PlannerInfo *, Relids, Relids, RelOptInfo *);
1499:	List *generate_join_implied_equalities_for_ecs(PlannerInfo *, List *, Relids, Relids, RelOptInfo *);
621:	EquivalenceClass *get_eclass_for_sort_expr(PlannerInfo *, Expr *, Relids, List *, Oid, Oid, Index, Relids, _Bool);
3047:	_Bool has_relevant_eclass_joinclause(PlannerInfo *, RelOptInfo *);
2980:	_Bool have_relevant_eclass_joinclause(PlannerInfo *, RelOptInfo *, RelOptInfo *);
3149:	_Bool is_redundant_derived_clause(RestrictInfo *, List *);
3176:	_Bool is_redundant_with_indexclauses(RestrictInfo *, List *);
2437:	EquivalenceClass *match_eclasses_to_foreign_key_col(PlannerInfo *, ForeignKeyOptInfo *, int);
119:	_Bool process_equivalence(PlannerInfo *, RestrictInfo **, _Bool);
1984:	void reconsider_outer_join_clauses(PlannerInfo *);
977:	_Bool relation_can_be_sorted_early(PlannerInfo *, RelOptInfo *, EquivalenceClass *, _Bool);
545:	static EquivalenceMember *add_eq_member(EquivalenceClass *, Expr *, Relids, Relids, _Bool, Oid);
1830:	static RestrictInfo *create_join_clause(PlannerInfo *, EquivalenceClass *, Oid, EquivalenceMember *, EquivalenceMember *, EquivalenceClass *);
1364:	static void generate_base_implied_equalities_broken(PlannerInfo *, EquivalenceClass *);
1162:	static void generate_base_implied_equalities_const(PlannerInfo *, EquivalenceClass *);
1257:	static void generate_base_implied_equalities_no_const(PlannerInfo *, EquivalenceClass *);
1746:	static List *generate_join_implied_equalities_broken(PlannerInfo *, EquivalenceClass *, Relids, Relids, Relids, RelOptInfo *);
1570:	static List *generate_join_implied_equalities_normal(PlannerInfo *, EquivalenceClass *, Relids, Relids, Relids);
3236:	static Bitmapset *get_common_eclass_indexes(PlannerInfo *, Relids, Relids);
3212:	static Bitmapset *get_eclass_indexes_for_relids(PlannerInfo *, Relids);
917:	static _Bool is_exprlist_member(Expr *, List *);
2205:	static _Bool reconsider_full_join_clause(PlannerInfo *, RestrictInfo *);
2079:	static _Bool reconsider_outer_join_clause(PlannerInfo *, RestrictInfo *, _Bool);
1795:	static Oid select_equality_operator(EquivalenceClass *, Oid, Oid);

File era.c:
142:	struct era_entry *_nl_get_era_entry(const struct tm *, struct __locale_data *);
168:	struct era_entry *_nl_select_era_entry(int, struct __locale_data *);
39:	static void _nl_init_era_entries(struct __locale_data *);

File erand48.c:
23:	double erand48(unsigned short *);
88:	double pg_erand48(unsigned short *);
112:	long pg_jrand48(unsigned short *);
100:	long pg_lrand48(void);
131:	void pg_srand48(long);
63:	static uint64 _dorand48(unsigned short *);

File erand48_r.c:
25:	int __erand48_r(unsigned short *, struct drand48_data *, double *);

File err.c:
103:	void __GI_verr(int, const char *, struct __va_list_tag *);
111:	void __GI_verrx(int, const char *, struct __va_list_tag *);
75:	void __GI_vwarn(const char *, struct __va_list_tag *);
82:	void __GI_vwarnx(const char *, struct __va_list_tag *);
89:	void __GI_warn(const char *, ...);
96:	void __GI_warnx(const char *, ...);
53:	void __vwarn_internal(const char *, struct __va_list_tag *, unsigned int);
41:	void __vwarnx_internal(const char *, struct __va_list_tag *, unsigned int);
119:	void err(int, const char *, ...);
125:	void errx(int, const char *, ...);

File errno-loc.c:
24:	int *__GI___errno_location(void);

File error.c:
273:	void __error(int, int, const char *, ...);
351:	void __error_at_line(int, int, const char *, unsigned int, const char *, ...);
286:	void __error_at_line_internal(int, int, const char *, unsigned int, const char *, struct __va_list_tag *, unsigned int);
236:	void __error_internal(int, int, const char *, struct __va_list_tag *, unsigned int);
203:	static void error_tail(int, int, const char *, struct __va_list_tag *, unsigned int);
172:	static void print_errno_message(int);

File ether_aton.c:
23:	struct ether_addr *ether_aton(const char *);

File ether_aton_r.c:
26:	struct ether_addr *__GI_ether_aton_r(const char *, struct ether_addr *);

File ether_hton.c:
31:	int ether_hostton(const char *, struct ether_addr *);

File ether_line.c:
26:	int ether_line(const char *, struct ether_addr *, char *);

File ether_ntoa.c:
24:	char *ether_ntoa(const struct ether_addr *);

File ether_ntoa_r.c:
25:	char *__GI_ether_ntoa_r(const struct ether_addr *, char *);

File ether_ntoh.c:
32:	int ether_ntohost(char *, const struct ether_addr *);

File eval-plural.h:
24:	static unsigned long plural_eval(const struct expression *, unsigned long);

File event_trigger.c:
362:	Oid AlterEventTrigger(AlterEventTrigStmt *);
406:	ObjectAddress AlterEventTriggerOwner(const char *, Oid);
441:	void AlterEventTriggerOwner_oid(Oid, Oid);
108:	Oid CreateEventTrigger(CreateEventTrigStmt *);
1635:	void EventTriggerAlterTableEnd(void);
1582:	void EventTriggerAlterTableRelid(Oid);
1548:	void EventTriggerAlterTableStart(Node *);
1075:	_Bool EventTriggerBeginCompleteQuery(void);
1819:	void EventTriggerCollectAlterDefPrivs(AlterDefaultPrivilegesStmt *);
1717:	void EventTriggerCollectAlterOpFam(AlterOpFamilyStmt *, Oid, List *, List *);
1784:	void EventTriggerCollectAlterTSConfig(AlterTSConfigurationStmt *, Oid, Oid *, int);
1600:	void EventTriggerCollectAlterTableSubcmd(Node *, ObjectAddress);
1750:	void EventTriggerCollectCreateOpClass(CreateOpClassStmt *, Oid, List *, List *);
1673:	void EventTriggerCollectGrant(InternalGrant *);
1510:	void EventTriggerCollectSimpleCommand(ObjectAddress, ObjectAddress, Node *);
689:	void EventTriggerDDLCommandEnd(Node *);
641:	void EventTriggerDDLCommandStart(Node *);
1119:	void EventTriggerEndCompleteQuery(void);
1476:	void EventTriggerInhibitCommandCollection(void);
737:	void EventTriggerSQLDrop(Node *);
1169:	void EventTriggerSQLDropAddObject(const ObjectAddress *, _Bool, _Bool);
1010:	_Bool EventTriggerSupportsObjectClass(ObjectClass);
936:	_Bool EventTriggerSupportsObjectType(ObjectType);
808:	void EventTriggerTableRewrite(Node *, Oid, int);
1488:	void EventTriggerUndoInhibitCommandCollection(void);
506:	Oid get_event_trigger_oid(const char *, _Bool);
1847:	Datum pg_event_trigger_ddl_commands(FunctionCallInfo);
1288:	Datum pg_event_trigger_dropped_objects(FunctionCallInfo);
1415:	Datum pg_event_trigger_table_rewrite_oid(FunctionCallInfo);
1436:	Datum pg_event_trigger_table_rewrite_reason(FunctionCallInfo);
1137:	_Bool trackDroppedObjectsNeeded(void);
466:	static void AlterEventTriggerOwner_internal(Relation, HeapTuple, Oid);
556:	static List *EventTriggerCommonSetup(Node *, EventTriggerEvent, const char *, EventTriggerData *);
873:	static void EventTriggerInvoke(List *, EventTriggerData *);
244:	static void error_duplicate_filter_variable(const char *);
525:	static _Bool filter_event_trigger(CommandTag, EventTriggerCacheItem *);
332:	static Datum filter_list_to_array(List *);
256:	static Oid insert_event_trigger_tuple(const char *, const char *, Oid, Oid, List *);
2159:	static const char *stringify_adefprivs_objtype(ObjectType);
2077:	static const char *stringify_grant_objtype(ObjectType);
195:	static void validate_ddl_tags(const char *, List *);
222:	static void validate_table_rewrite_tags(const char *, List *);

File events.c:
24:	void __GI___nptl_create_event(void);

File evtcache.c:
64:	List *EventCacheLookup(EventTriggerEvent);
78:	static void BuildEventTriggerCache(void);
221:	static Bitmapset *DecodeTextArrayToBitmapset(Datum);
255:	static void InvalidateEventCacheCallback(Datum, int, uint32);

File exec.c:
140:	int find_my_exec(const char *, char *);
335:	int find_other_exec(const char *, const char *, const char *, char *);
408:	int pclose_check(FILE *);
371:	char *pipe_read_line(char *, char *, int);
446:	void set_pglocale_pgservice(const char *, const char *);
79:	int validate_exec(const char *);
243:	static int resolve_symlinks(char *);

File execAmi.c:
328:	void ExecMarkPos(PlanState *);
644:	_Bool ExecMaterializesOutput(NodeTag);
78:	void ExecReScan(PlanState *);
377:	void ExecRestrPos(PlanState *);
515:	_Bool ExecSupportsBackwardScan(Plan *);
419:	_Bool ExecSupportsMarkRestore(Path *);
611:	static _Bool IndexSupportsBackwardScan(Oid);

File execAsync.c:
62:	void ExecAsyncConfigureWait(AsyncRequest *);
88:	void ExecAsyncNotify(AsyncRequest *);
26:	void ExecAsyncRequest(AsyncRequest *);
137:	void ExecAsyncRequestDone(AsyncRequest *, TupleTableSlot *);
149:	void ExecAsyncRequestPending(AsyncRequest *);
117:	void ExecAsyncResponse(AsyncRequest *);

File execCurrent.c:
44:	_Bool execCurrentOf(CurrentOfExpr *, ExprContext *, Oid, ItemPointer);
258:	static char *fetch_cursor_param_value(ExprContext *, int);
314:	static ScanState *search_plan_tree(PlanState *, Oid, _Bool *);

File execExpr.c:
3324:	ExprState *ExecBuildAggTrans(AggState *, AggStatePerPhase, _Bool, _Bool, _Bool);
3742:	ExprState *ExecBuildGroupingEqual(TupleDesc, TupleDesc, const TupleTableSlotOps *, const TupleTableSlotOps *, int, const AttrNumber *, const Oid *, const Oid *, PlanState *);
3899:	ExprState *ExecBuildParamSetEqual(TupleDesc, const TupleTableSlotOps *, const TupleTableSlotOps *, const Oid *, const Oid *, const List *, PlanState *);
356:	ProjectionInfo *ExecBuildProjectionInfo(List *, ExprContext *, TupleTableSlot *, PlanState *, TupleDesc);
516:	ProjectionInfo *ExecBuildUpdateProjection(List *, _Bool, List *, TupleDesc, ExprContext *, TupleTableSlot *, PlanState *);
841:	_Bool ExecCheck(ExprState *, ExprContext *);
301:	ExprState *ExecInitCheck(List *, PlanState *);
126:	ExprState *ExecInitExpr(Expr *, PlanState *);
321:	List *ExecInitExprList(List *, PlanState *);
163:	ExprState *ExecInitExprWithParams(Expr *, ParamListInfo);
212:	ExprState *ExecInitQual(List *, PlanState *);
785:	ExprState *ExecPrepareCheck(List *, EState *);
734:	ExprState *ExecPrepareExpr(Expr *, EState *);
808:	List *ExecPrepareExprList(List *, EState *);
762:	ExprState *ExecPrepareQual(List *, EState *);
2432:	void ExprEvalPushStep(ExprState *, const ExprEvalStep *);
3626:	static void ExecBuildAggTransCall(ExprState *, AggState *, ExprEvalStep *, FunctionCallInfo, AggStatePerTrans, int, int, int, _Bool, _Bool);
2726:	static _Bool ExecComputeSlotInfo(ExprState *, ExprEvalStep *);
2563:	static void ExecCreateExprSetupSteps(ExprState *, Node *);
3170:	static void ExecInitCoerceToDomain(ExprEvalStep *, CoerceToDomain *, ExprState *, Datum *, _Bool *);
888:	static void ExecInitExprRec(Expr *, ExprState *, Datum *, _Bool *);
2458:	static void ExecInitFunc(ExprEvalStep *, Expr *, List *, Oid, Oid, ExprState *);
2897:	static void ExecInitSubscriptingRef(ExprEvalStep *, SubscriptingRef *, ExprState *, Datum *, _Bool *);
2824:	static void ExecInitWholeRowVar(ExprEvalStep *, Var *, ExprState *);
2579:	static void ExecPushExprSetupSteps(ExprState *, ExprSetupInfo *);
871:	static void ExecReadyExpr(ExprState *);
2662:	static _Bool expr_setup_walker(Node *, ExprSetupInfo *);
3139:	static _Bool isAssignmentIndirectionExpr(Expr *);

File execExprInterp.c:
1832:	void CheckExprStillValid(ExprState *, ExprContext *);
4189:	void ExecAggInitGroup(AggState *, AggStatePerTrans, AggStatePerGroup, ExprContext *);
4217:	Datum ExecAggTransReparent(AggState *, AggStatePerTrans, Datum, _Bool, Datum, _Bool);
4263:	void ExecEvalAggOrderedTransDatum(ExprState *, ExprEvalStep *, ExprContext *);
4277:	void ExecEvalAggOrderedTransTuple(ExprState *, ExprEvalStep *, ExprContext *);
2885:	void ExecEvalArrayCoerce(ExprState *, ExprEvalStep *, ExprContext *);
2676:	void ExecEvalArrayExpr(ExprState *, ExprEvalStep *);
3661:	void ExecEvalConstraintCheck(ExprState *, ExprEvalStep *);
3647:	void ExecEvalConstraintNotNull(ExprState *, ExprEvalStep *);
3194:	void ExecEvalConvertRowtype(ExprState *, ExprEvalStep *, ExprContext *);
2537:	void ExecEvalCurrentOfExpr(ExprState *, ExprEvalStep *);
2999:	void ExecEvalFieldSelect(ExprState *, ExprEvalStep *, ExprContext *);
3124:	void ExecEvalFieldStoreDeForm(ExprState *, ExprEvalStep *, ExprContext *);
3170:	void ExecEvalFieldStoreForm(ExprState *, ExprEvalStep *, ExprContext *);
2348:	void ExecEvalFuncExprFusage(ExprState *, ExprEvalStep *, ExprContext *);
2369:	void ExecEvalFuncExprStrictFusage(ExprState *, ExprEvalStep *, ExprContext *);
3900:	void ExecEvalGroupingFunc(ExprState *, ExprEvalStep *);
3492:	void ExecEvalHashedScalarArrayOp(ExprState *, ExprEvalStep *, ExprContext *);
2946:	void ExecEvalMinMax(ExprState *, ExprEvalStep *);
2548:	void ExecEvalNextValueExpr(ExprState *, ExprEvalStep *);
2406:	void ExecEvalParamExec(ExprState *, ExprEvalStep *, ExprContext *);
2428:	void ExecEvalParamExtern(ExprState *, ExprEvalStep *, ExprContext *);
2926:	void ExecEvalRow(ExprState *, ExprEvalStep *);
2583:	void ExecEvalRowNotNull(ExprState *, ExprEvalStep *, ExprContext *);
2574:	void ExecEvalRowNull(ExprState *, ExprEvalStep *, ExprContext *);
2470:	void ExecEvalSQLValueFunction(ExprState *, ExprEvalStep *);
3289:	void ExecEvalScalarArrayOp(ExprState *, ExprEvalStep *);
2318:	ExprEvalOp ExecEvalStepOp(ExprState *, ExprEvalStep *);
3925:	void ExecEvalSubPlan(ExprState *, ExprEvalStep *, ExprContext *);
4169:	void ExecEvalSysVar(ExprState *, ExprEvalStep *, ExprContext *, TupleTableSlot *);
3942:	void ExecEvalWholeRowVar(ExprState *, ExprEvalStep *, ExprContext *);
3681:	void ExecEvalXmlExpr(ExprState *, ExprEvalStep *);
1812:	Datum ExecInterpExprStillValid(ExprState *, ExprContext *, _Bool *);
230:	void ExecReadyInterpretedExpr(ExprState *);
1934:	static void CheckOpSlotCompatibility(ExprEvalStep *, TupleTableSlot *);
1883:	static void CheckVarSlotCompatibility(TupleTableSlot *, int, Oid);
4323:	static void ExecAggPlainTransByRef(AggState *, AggStatePerTrans, AggStatePerGroup, ExprContext *, int);
4291:	static void ExecAggPlainTransByVal(AggState *, AggStatePerTrans, AggStatePerGroup, ExprContext *, int);
2590:	static void ExecEvalRowNullInt(ExprState *, ExprEvalStep *, ExprContext *, _Bool);
2286:	static void ExecInitInterpreter(void);
390:	static Datum ExecInterpExpr(ExprState *, ExprContext *, _Bool *);
2131:	static Datum ExecJustApplyFuncToCase(ExprState *, ExprContext *, _Bool *);
2110:	static Datum ExecJustAssignInnerVar(ExprState *, ExprContext *, _Bool *);
2244:	static Datum ExecJustAssignInnerVarVirt(ExprState *, ExprContext *, _Bool *);
2117:	static Datum ExecJustAssignOuterVar(ExprState *, ExprContext *, _Bool *);
2251:	static Datum ExecJustAssignOuterVarVirt(ExprState *, ExprContext *, _Bool *);
2124:	static Datum ExecJustAssignScanVar(ExprState *, ExprContext *, _Bool *);
2258:	static Datum ExecJustAssignScanVarVirt(ExprState *, ExprContext *, _Bool *);
2084:	static Datum ExecJustAssignVarImpl(ExprState *, TupleTableSlot *, _Bool *);
2222:	static Datum ExecJustAssignVarVirtImpl(ExprState *, TupleTableSlot *, _Bool *);
2169:	static Datum ExecJustConst(ExprState *, ExprContext *, _Bool *);
2063:	static Datum ExecJustInnerVar(ExprState *, ExprContext *, _Bool *);
2201:	static Datum ExecJustInnerVarVirt(ExprState *, ExprContext *, _Bool *);
2070:	static Datum ExecJustOuterVar(ExprState *, ExprContext *, _Bool *);
2208:	static Datum ExecJustOuterVarVirt(ExprState *, ExprContext *, _Bool *);
2077:	static Datum ExecJustScanVar(ExprState *, ExprContext *, _Bool *);
2215:	static Datum ExecJustScanVarVirt(ExprState *, ExprContext *, _Bool *);
2046:	static Datum ExecJustVarImpl(ExprState *, TupleTableSlot *, _Bool *);
2179:	static Datum ExecJustVarVirtImpl(ExprState *, TupleTableSlot *, _Bool *);
2269:	static int dispatch_compare_ptr(const void *, const void *);
1980:	static TupleDesc get_cached_rowtype(Oid, int32, ExprEvalRowtypeCache *, _Bool *);
3442:	static uint32 saop_element_hash(struct saophash_hash *, Datum);
3461:	static _Bool saop_hash_element_match(struct saophash_hash *, Datum, Datum);

File execGrouping.c:
255:	TupleHashTable BuildTupleHashTable(PlanState *, TupleDesc, int, AttrNumber *, const Oid *, FmgrInfo *, Oid *, long, Size, MemoryContext, MemoryContext, _Bool);
154:	TupleHashTable BuildTupleHashTableExt(PlanState *, TupleDesc, int, AttrNumber *, const Oid *, FmgrInfo *, Oid *, long, Size, MemoryContext, MemoryContext, MemoryContext, _Bool);
393:	TupleHashEntry FindTupleHashEntry(TupleHashTable, TupleTableSlot *, ExprState *, FmgrInfo *);
306:	TupleHashEntry LookupTupleHashEntry(TupleHashTable, TupleTableSlot *, _Bool *, uint32 *);
361:	TupleHashEntry LookupTupleHashEntryHash(TupleHashTable, TupleTableSlot *, _Bool *, uint32);
285:	void ResetTupleHashTable(TupleHashTable);
338:	uint32 TupleHashTableHash(TupleHashTable, TupleTableSlot *);
96:	void execTuplesHashPrepare(int, const Oid *, Oid **, FmgrInfo **);
59:	ExprState *execTuplesMatchPrepare(TupleDesc, int, const AttrNumber *, const Oid *, const Oid *, PlanState *);
496:	static TupleHashEntry LookupTupleHashEntry_internal(TupleHashTable, TupleTableSlot *, _Bool *, uint32);
426:	static uint32 TupleHashTableHash_internal(struct tuplehash_hash *, const MinimalTuple);
537:	static int TupleHashTableMatch(struct tuplehash_hash *, const MinimalTuple, const MinimalTuple);

File execIndexing.c:
501:	_Bool ExecCheckIndexConstraints(ResultRelInfo *, TupleTableSlot *, EState *, ItemPointer, List *);
226:	void ExecCloseIndices(ResultRelInfo *);
279:	List *ExecInsertIndexTuples(ResultRelInfo *, TupleTableSlot *, EState *, _Bool, _Bool, _Bool *, List *);
151:	void ExecOpenIndices(ResultRelInfo *, _Bool);
883:	void check_exclusion_constraint(Relation, Relation, IndexInfo *, ItemPointer, Datum *, _Bool *, EState *, _Bool);
663:	static _Bool check_exclusion_or_unique_constraint(Relation, Relation, IndexInfo *, ItemPointer, Datum *, _Bool *, EState *, _Bool, CEOUC_WAIT_MODE, _Bool, ItemPointer);
900:	static _Bool index_recheck_constraint(Relation, Oid *, Datum *, _Bool *, Datum *);

File execJunk.c:
247:	TupleTableSlot *ExecFilterJunk(JunkFilter *, TupleTableSlot *);
210:	AttrNumber ExecFindJunkAttribute(JunkFilter *, const char *);
222:	AttrNumber ExecFindJunkAttributeInTlist(List *, const char *);
60:	JunkFilter *ExecInitJunkFilter(List *, TupleTableSlot *);
137:	JunkFilter *ExecInitJunkFilterConversion(List *, TupleDesc, TupleTableSlot *);

File execMain.c:
992:	void CheckValidResultRel(ResultRelInfo *, CmdType);
2359:	TupleTableSlot *EvalPlanQual(EPQState *, Relation, Index, TupleTableSlot *);
2622:	void EvalPlanQualBegin(EPQState *);
2834:	void EvalPlanQualEnd(EPQState *);
2497:	_Bool EvalPlanQualFetchRowMark(EPQState *, Index, TupleTableSlot *);
2413:	void EvalPlanQualInit(EPQState *, EState *, Plan *, List *, int);
2606:	TupleTableSlot *EvalPlanQualNext(EPQState *);
2452:	void EvalPlanQualSetPlan(EPQState *, Plan *, List *);
2469:	TupleTableSlot *EvalPlanQualSlot(EPQState *, Relation, Index);
2289:	ExecAuxRowMark *ExecBuildAuxRowMark(ExecRowMark *, List *);
568:	_Bool ExecCheckRTPerms(List *, _Bool);
1482:	void ExecCloseRangeTableRelations(EState *);
1439:	void ExecCloseResultRelations(EState *);
1821:	void ExecConstraints(ResultRelInfo *, TupleTableSlot *, EState *);
2266:	ExecRowMark *ExecFindRowMark(EState *, Index, _Bool);
1282:	ResultRelInfo *ExecGetTriggerResultRel(EState *, Oid);
1697:	_Bool ExecPartitionCheck(ResultRelInfo *, TupleTableSlot *, EState *, _Bool);
1750:	void ExecPartitionCheckEmitError(ResultRelInfo *, TupleTableSlot *, EState *);
2240:	LockTupleMode ExecUpdateLockMode(EState *, ResultRelInfo *);
1954:	void ExecWithCheckOptions(WCOKind, ResultRelInfo *, TupleTableSlot *, EState *);
459:	void ExecutorEnd(QueryDesc *);
399:	void ExecutorFinish(QueryDesc *);
525:	void ExecutorRewind(QueryDesc *);
298:	void ExecutorRun(QueryDesc *, ScanDirection, uint64, _Bool);
130:	void ExecutorStart(QueryDesc *, int);
1193:	void InitResultRelInfo(ResultRelInfo *, Relation, Index, ResultRelInfo *, int);
468:	void standard_ExecutorEnd(QueryDesc *);
408:	void standard_ExecutorFinish(QueryDesc *);
309:	void standard_ExecutorRun(QueryDesc *, ScanDirection, uint64, _Bool);
147:	void standard_ExecutorStart(QueryDesc *, int);
1128:	static void CheckValidRowMarkRel(Relation, RowMarkType);
2683:	static void EvalPlanQualStart(EPQState *, Plan *);
2103:	static char *ExecBuildSlotValueDescription(Oid, TupleTableSlot *, TupleDesc, Bitmapset *, int);
599:	static _Bool ExecCheckRTEPerms(RangeTblEntry *);
719:	static _Bool ExecCheckRTEPermsModified(Oid, Oid, Bitmapset *, AclMode);
766:	static void ExecCheckXactReadOnly(PlannedStmt *);
1400:	static void ExecEndPlan(PlanState *, EState *);
1354:	static void ExecPostprocessPlan(EState *);
1622:	static const char *ExecRelCheck(ResultRelInfo *, TupleTableSlot *, EState *);
1506:	static void ExecutePlan(EState *, PlanState *, _Bool, CmdType, _Bool, uint64, ScanDirection, DestReceiver *, _Bool);
803:	static void InitPlan(QueryDesc *, int);

File execParallel.c:
588:	ParallelExecutorInfo *ExecInitParallelPlan(PlanState *, EState *, Bitmapset *, int, int64);
1178:	void ExecParallelCleanup(ParallelExecutorInfo *);
872:	void ExecParallelCreateReaders(ParallelExecutorInfo *);
1125:	void ExecParallelFinish(ParallelExecutorInfo *);
898:	void ExecParallelReinitialize(PlanState *, ParallelExecutorInfo *, Bitmapset *);
1394:	void ParallelQueryMain(dsm_segment *, shm_toc *);
311:	static Size EstimateParamExecSpace(EState *, Bitmapset *);
230:	static _Bool ExecParallelEstimate(PlanState *, ExecParallelEstimateContext *);
1230:	static QueryDesc *ExecParallelGetQueryDesc(shm_toc *, DestReceiver *, int);
1214:	static DestReceiver *ExecParallelGetReceiver(dsm_segment *, shm_toc *);
439:	static _Bool ExecParallelInitializeDSM(PlanState *, ExecParallelInitializeDSMContext *);
1303:	static _Bool ExecParallelInitializeWorker(PlanState *, ParallelWorkerContext *);
947:	static _Bool ExecParallelReInitializeDSM(PlanState *, ParallelContext *);
1262:	static _Bool ExecParallelReportInstrumentation(PlanState *, SharedExecutorInstrumentation *);
1016:	static _Bool ExecParallelRetrieveInstrumentation(PlanState *, SharedExecutorInstrumentation *);
1085:	static void ExecParallelRetrieveJitInstrumentation(PlanState *, SharedJitInstrumentation *);
536:	static shm_mq_handle **ExecParallelSetupTupleQueues(ParallelContext *, _Bool);
147:	static char *ExecSerializePlan(Plan *, EState *);
410:	static void RestoreParamExecParams(char *, EState *);
355:	static dsa_pointer SerializeParamExecParams(EState *, Bitmapset *, dsa_area *);

File execPartition.c:
1124:	void ExecCleanupTupleRouting(ModifyTableState *, PartitionTupleRouting *);
1531:	PartitionPruneState *ExecCreatePartitionPruneState(PlanState *, PartitionPruneInfo *);
1823:	Bitmapset *ExecFindInitialMatchingSubPlans(PartitionPruneState *, int);
1990:	Bitmapset *ExecFindMatchingSubPlans(PartitionPruneState *);
257:	ResultRelInfo *ExecFindPartition(ModifyTableState *, ResultRelInfo *, PartitionTupleRouting *, TupleTableSlot *, EState *);
210:	PartitionTupleRouting *ExecSetupPartitionTupleRouting(EState *, Relation);
1348:	static char *ExecBuildSlotPartitionKeyDescription(Relation, Datum *, _Bool *, int);
986:	static PartitionDispatch ExecInitPartitionDispatchInfo(EState *, PartitionTupleRouting *, Oid, PartitionDispatch, int, ResultRelInfo *);
490:	static ResultRelInfo *ExecInitPartitionInfo(ModifyTableState *, EState *, PartitionTupleRouting *, PartitionDispatch, ResultRelInfo *, int);
1745:	static void ExecInitPruningContext(PartitionPruneContext *, List *, PartitionDesc, PartitionKey, PlanState *);
868:	static void ExecInitRoutingInfo(ModifyTableState *, EState *, PartitionTupleRouting *, PartitionDispatch, ResultRelInfo *, int, _Bool);
1185:	static void FormPartitionKeyDatum(PartitionDispatch, TupleTableSlot *, EState *, Datum *, _Bool *);
1434:	static List *adjust_partition_colnos(List *, ResultRelInfo *);
2049:	static void find_matching_subplans_recurse(PartitionPruningData *, PartitionedRelPruningData *, _Bool, Bitmapset **);
1243:	static int get_partition_for_tuple(PartitionDispatch, Datum *, _Bool *);

File execProcnode.c:
557:	void ExecEndNode(PlanState *);
142:	PlanState *ExecInitNode(Plan *, EState *, int);
425:	void ExecSetExecProcNode(PlanState *, ExecProcNodeMtd);
849:	void ExecSetTupleBound(int64, PlanState *);
773:	_Bool ExecShutdownNode(PlanState *);
502:	Node *MultiExecProcNode(PlanState *);
443:	static TupleTableSlot *ExecProcNodeFirst(PlanState *);
474:	static TupleTableSlot *ExecProcNodeInstr(PlanState *);
779:	static _Bool ExecShutdownNode_walker(PlanState *, void *);

File execReplication.c:
568:	void CheckCmdReplicaIdentity(Relation, CmdType);
615:	void CheckSubscriptionRelkind(char, const char *, const char *);
534:	void ExecSimpleRelationDelete(ResultRelInfo *, EState *, EPQState *, TupleTableSlot *);
407:	void ExecSimpleRelationInsert(ResultRelInfo *, EState *, TupleTableSlot *);
471:	void ExecSimpleRelationUpdate(ResultRelInfo *, EState *, EPQState *, TupleTableSlot *, TupleTableSlot *);
120:	_Bool RelationFindReplTupleByIndex(Relation, Oid, LockTupleMode, TupleTableSlot *, TupleTableSlot *);
295:	_Bool RelationFindReplTupleSeq(Relation, LockTupleMode, TupleTableSlot *, TupleTableSlot *);
50:	static _Bool build_replindex_scan_key(ScanKey, Relation, Relation, TupleTableSlot *);
229:	static _Bool tuples_equal(TupleTableSlot *, TupleTableSlot *, TypeCacheEntry **);

File execSRF.c:
444:	SetExprState *ExecInitFunctionResultSet(Expr *, ExprContext *, PlanState *);
56:	SetExprState *ExecInitTableFunctionResult(Expr *, ExprContext *, PlanState *);
497:	Datum ExecMakeFunctionResultSet(SetExprState *, ExprContext *, MemoryContext, _Bool *, ExprDoneCond *);
101:	Tuplestorestate *ExecMakeTableFunctionResult(SetExprState *, ExprContext *, MemoryContext, TupleDesc, _Bool);
834:	static void ExecEvalFuncArgs(FunctionCallInfo, List *, ExprContext *);
864:	static void ExecPrepareTuplestoreResult(SetExprState *, ExprContext *, Tuplestorestate *, TupleDesc);
810:	static void ShutdownSetExpr(Datum);
696:	static void init_sexpr(Oid, Oid, Expr *, SetExprState *, PlanState *, MemoryContext, _Bool, _Bool);
943:	static void tupledesc_match(TupleDesc, TupleDesc);

File execScan.c:
272:	void ExecAssignScanProjectionInfo(ScanState *);
285:	void ExecAssignScanProjectionInfoWithVarno(ScanState *, Index);
158:	TupleTableSlot *ExecScan(ScanState *, ExecScanAccessMtd, ExecScanRecheckMtd);
299:	void ExecScanReScan(ScanState *);
35:	static TupleTableSlot *ExecScanFetch(ScanState *, ExecScanAccessMtd, ExecScanRecheckMtd);

File execTuples.c:
2071:	TupleDesc BlessTupleDesc(TupleDesc);
2135:	HeapTuple BuildTupleFromCStrings(AttInMetadata *, char **);
1171:	TupleTableSlot *ExecAllocTableSlot(List **, TupleDesc, const TupleTableSlotOps *);
1950:	TupleDesc ExecCleanTypeFromTL(List *);
1254:	void ExecDropSingleTupleTableSlot(TupleTableSlot *);
1644:	HeapTuple ExecFetchSlotHeapTuple(TupleTableSlot *, _Bool, _Bool *);
1723:	Datum ExecFetchSlotHeapTupleDatum(TupleTableSlot *);
1692:	MinimalTuple ExecFetchSlotMinimalTuple(TupleTableSlot *, _Bool *);
1469:	void ExecForceStoreHeapTuple(HeapTuple, TupleTableSlot *, _Bool);
1512:	void ExecForceStoreMinimalTuple(MinimalTuple, TupleTableSlot *, _Bool);
1831:	TupleTableSlot *ExecInitExtraTupleSlot(EState *, TupleDesc, const TupleTableSlotOps *);
1847:	TupleTableSlot *ExecInitNullTupleSlot(EState *, TupleDesc, const TupleTableSlotOps *);
1779:	void ExecInitResultSlot(PlanState *, const TupleTableSlotOps *);
1799:	void ExecInitResultTupleSlotTL(PlanState *, const TupleTableSlotOps *);
1755:	void ExecInitResultTypeTL(PlanState *);
1811:	void ExecInitScanTupleSlot(EState *, ScanState *, TupleDesc, const TupleTableSlotOps *);
1191:	void ExecResetTupleTable(List *, _Bool);
1289:	void ExecSetSlotDescriptor(TupleTableSlot *, TupleDesc);
1576:	TupleTableSlot *ExecStoreAllNullTuple(TupleTableSlot *);
1392:	TupleTableSlot *ExecStoreBufferHeapTuple(HeapTuple, TupleTableSlot *, Buffer);
1352:	TupleTableSlot *ExecStoreHeapTuple(HeapTuple, TupleTableSlot *, _Bool);
1606:	void ExecStoreHeapTupleDatum(Datum, TupleTableSlot *);
1446:	TupleTableSlot *ExecStoreMinimalTuple(MinimalTuple, TupleTableSlot *, _Bool);
1418:	TupleTableSlot *ExecStorePinnedBufferHeapTuple(HeapTuple, TupleTableSlot *, Buffer);
1552:	TupleTableSlot *ExecStoreVirtualTuple(TupleTableSlot *);
1997:	TupleDesc ExecTypeFromExprList(List *);
1938:	TupleDesc ExecTypeFromTL(List *);
2030:	void ExecTypeSetColNames(TupleDesc, List *);
2224:	Datum HeapTupleHeaderGetDatum(HeapTupleHeader);
1238:	TupleTableSlot *MakeSingleTupleTableSlot(TupleDesc, const TupleTableSlotOps *);
1112:	TupleTableSlot *MakeTupleTableSlot(TupleDesc, const TupleTableSlotOps *);
2086:	AttInMetadata *TupleDescGetAttInMetadata(TupleDesc);
2255:	TupOutputState *begin_tup_output_tupdesc(DestReceiver *, TupleDesc, const TupleTableSlotOps *);
2303:	void do_text_output_multiline(TupOutputState *, const char *);
2275:	void do_tup_output(TupOutputState *, Datum *, _Bool *);
2333:	void end_tup_output(TupOutputState *);
1868:	void slot_getmissingattrs(TupleTableSlot *, int, int);
1902:	void slot_getsomeattrs_int(TupleTableSlot *, int);
1956:	static TupleDesc ExecTypeFromTLInternal(List *, _Bool);
925:	static void slot_deform_heap_tuple(TupleTableSlot *, HeapTuple, uint32 *, int);
659:	static void tts_buffer_heap_clear(TupleTableSlot *);
833:	static HeapTuple tts_buffer_heap_copy_heap_tuple(TupleTableSlot *);
846:	static MinimalTuple tts_buffer_heap_copy_minimal_tuple(TupleTableSlot *);
778:	static void tts_buffer_heap_copyslot(TupleTableSlot *, TupleTableSlot *);
820:	static HeapTuple tts_buffer_heap_get_heap_tuple(TupleTableSlot *);
689:	static void tts_buffer_heap_getsomeattrs(TupleTableSlot *, int);
699:	static Datum tts_buffer_heap_getsysattr(TupleTableSlot *, int, _Bool *);
649:	static void tts_buffer_heap_init(TupleTableSlot *);
719:	static void tts_buffer_heap_materialize(TupleTableSlot *);
654:	static void tts_buffer_heap_release(TupleTableSlot *);
859:	static void tts_buffer_heap_store_tuple(TupleTableSlot *, HeapTuple, Buffer, _Bool);
311:	static void tts_heap_clear(TupleTableSlot *);
425:	static HeapTuple tts_heap_copy_heap_tuple(TupleTableSlot *);
437:	static MinimalTuple tts_heap_copy_minimal_tuple(TupleTableSlot *);
400:	static void tts_heap_copyslot(TupleTableSlot *, TupleTableSlot *);
413:	static HeapTuple tts_heap_get_heap_tuple(TupleTableSlot *);
330:	static void tts_heap_getsomeattrs(TupleTableSlot *, int);
340:	static Datum tts_heap_getsysattr(TupleTableSlot *, int, _Bool *);
301:	static void tts_heap_init(TupleTableSlot *);
360:	static void tts_heap_materialize(TupleTableSlot *);
306:	static void tts_heap_release(TupleTableSlot *);
448:	static void tts_heap_store_tuple(TupleTableSlot *, HeapTuple, _Bool);
487:	static void tts_minimal_clear(TupleTableSlot *);
598:	static HeapTuple tts_minimal_copy_heap_tuple(TupleTableSlot *);
609:	static MinimalTuple tts_minimal_copy_minimal_tuple(TupleTableSlot *);
574:	static void tts_minimal_copyslot(TupleTableSlot *, TupleTableSlot *);
587:	static MinimalTuple tts_minimal_get_minimal_tuple(TupleTableSlot *);
505:	static void tts_minimal_getsomeattrs(TupleTableSlot *, int);
515:	static Datum tts_minimal_getsysattr(TupleTableSlot *, int, _Bool *);
470:	static void tts_minimal_init(TupleTableSlot *);
527:	static void tts_minimal_materialize(TupleTableSlot *);
482:	static void tts_minimal_release(TupleTableSlot *);
620:	static void tts_minimal_store_tuple(TupleTableSlot *, MinimalTuple, _Bool);
107:	static void tts_virtual_clear(TupleTableSlot *);
276:	static HeapTuple tts_virtual_copy_heap_tuple(TupleTableSlot *);
286:	static MinimalTuple tts_virtual_copy_minimal_tuple(TupleTableSlot *);
252:	static void tts_virtual_copyslot(TupleTableSlot *, TupleTableSlot *);
129:	static void tts_virtual_getsomeattrs(TupleTableSlot *, int);
140:	static Datum tts_virtual_getsysattr(TupleTableSlot *, int, _Bool *);
97:	static void tts_virtual_init(TupleTableSlot *);
159:	static void tts_virtual_materialize(TupleTableSlot *);
102:	static void tts_virtual_release(TupleTableSlot *);

File execUtils.c:
91:	EState *CreateExecutorState(void);
307:	ExprContext *CreateExprContext(EState *);
358:	ExprContext *CreateStandaloneExprContext(void);
322:	ExprContext *CreateWorkExprContext(EState *);
486:	void ExecAssignExprContext(EState *, PlanState *);
541:	void ExecAssignProjectionInfo(PlanState *, TupleDesc);
676:	void ExecAssignScanType(ScanState *, TupleDesc);
1153:	int ExecCleanTargetListLength(List *);
561:	void ExecConditionalAssignProjectionInfo(PlanState *, TupleDesc, Index);
688:	void ExecCreateScanSlotFromOuterPlan(EState *, ScanState *, const TupleTableSlotOps *);
656:	void ExecFreeExprContext(PlanState *);
1353:	Bitmapset *ExecGetAllUpdatedCols(ResultRelInfo *, EState *);
1240:	TupleConversionMap *ExecGetChildToRootMap(ResultRelInfo *);
1327:	Bitmapset *ExecGetExtraUpdatedCols(ResultRelInfo *, EState *);
1262:	Bitmapset *ExecGetInsertedCols(ResultRelInfo *, EState *);
788:	Relation ExecGetRangeTableRelation(EState *, Index);
505:	const TupleTableSlotOps *ExecGetResultSlotOps(PlanState *, _Bool *);
496:	TupleDesc ExecGetResultType(PlanState *);
1216:	TupleTableSlot *ExecGetReturningSlot(EState *, ResultRelInfo *);
1194:	TupleTableSlot *ExecGetTriggerNewSlot(EState *, ResultRelInfo *);
1172:	TupleTableSlot *ExecGetTriggerOldSlot(EState *, ResultRelInfo *);
1301:	Bitmapset *ExecGetUpdatedCols(ResultRelInfo *, EState *);
757:	void ExecInitRangeTable(EState *, List *);
840:	void ExecInitResultRelation(EState *, ResultRelInfo *, Index);
726:	Relation ExecOpenScanRelation(EState *, Index, int);
713:	_Bool ExecRelationIsTargetRelation(EState *, Index);
1143:	int ExecTargetListLength(List *);
192:	void FreeExecutorState(EState *);
417:	void FreeExprContext(ExprContext *, _Bool);
1029:	Datum GetAttributeByName(HeapTupleHeader, const char *, _Bool *);
1092:	Datum GetAttributeByNum(HeapTupleHeader, AttrNumber, _Bool *);
459:	ExprContext *MakePerTupleExprContext(EState *);
444:	void ReScanExprContext(ExprContext *);
931:	void RegisterExprContextCallback(ExprContext *, ExprContextCallbackFunction, Datum);
957:	void UnregisterExprContextCallback(ExprContext *, ExprContextCallbackFunction, Datum);
870:	void UpdateChangedParamSet(PlanState *, Bitmapset *);
904:	int executor_errposition(EState *, int);
237:	static ExprContext *CreateExprContextInternal(EState *, Size, Size, Size);
988:	static void ShutdownExprContext(ExprContext *, _Bool);
588:	static _Bool tlist_matches_tupdesc(PlanState *, List *, Index, TupleDesc);

File execl.c:
26:	int __GI_execl(const char *, const char *, ...);

File execle.c:
26:	int __GI_execle(const char *, const char *, ...);

File execlp.c:
27:	int __GI_execlp(const char *, const char *, ...);

File execv.c:
23:	int execv(const char *, char * const *);

File execvp.c:
24:	int __GI_execvp(const char *, char * const *);

File execvpe.c:
188:	int __execvpe(const char *, char * const *, char * const *);
196:	int __execvpex(const char *, char * const *, char * const *);

File exit.c:
137:	void __GI_exit(int);
38:	void __run_exit_handlers(int, struct exit_function_list **, _Bool, _Bool);

File expandeddatum.c:
29:	ExpandedObjectHeader *DatumGetEOHP(Datum);
136:	void DeleteExpandedObject(Datum);
81:	void EOH_flatten_into(ExpandedObjectHeader *, void *, Size);
75:	Size EOH_get_flat_size(ExpandedObjectHeader *);
48:	void EOH_init_header(ExpandedObjectHeader *, const ExpandedObjectMethods *, MemoryContext);
95:	Datum MakeExpandedObjectReadOnlyInternal(Datum);
118:	Datum TransferExpandedObject(Datum, MemoryContext);

File expandedrecord.c:
927:	ExpandedRecordHeader *DatumGetExpandedRecord(Datum);
952:	void deconstruct_expanded_record(ExpandedRecordHeader *);
1063:	Datum expanded_record_fetch_field(ExpandedRecordHeader *, int, _Bool *);
824:	TupleDesc expanded_record_fetch_tupdesc(ExpandedRecordHeader *);
884:	HeapTuple expanded_record_get_tuple(ExpandedRecordHeader *);
1017:	_Bool expanded_record_lookup_field(ExpandedRecordHeader *, const char *, ExpandedRecordFieldInfo *);
1112:	void expanded_record_set_field_internal(ExpandedRecordHeader *, int, Datum, _Bool, _Bool, _Bool);
1249:	void expanded_record_set_fields(ExpandedRecordHeader *, const Datum *, const _Bool *, _Bool);
440:	void expanded_record_set_tuple(ExpandedRecordHeader *, HeapTuple, _Bool, _Bool);
580:	Datum make_expanded_record_from_datum(Datum, MemoryContext);
329:	ExpandedRecordHeader *make_expanded_record_from_exprecord(ExpandedRecordHeader *, MemoryContext);
205:	ExpandedRecordHeader *make_expanded_record_from_tupdesc(TupleDesc, MemoryContext);
69:	ExpandedRecordHeader *make_expanded_record_from_typeid(Oid, int32, MemoryContext);
764:	static void ER_flatten_into(ExpandedObjectHeader *, void *, Size);
652:	static Size ER_get_flat_size(ExpandedObjectHeader *);
902:	static void ER_mc_callback(void *);
1402:	static void build_dummy_expanded_header(ExpandedRecordHeader *);
1494:	static void check_domain_for_new_field(ExpandedRecordHeader *, int, Datum, _Bool);
1576:	static void check_domain_for_new_tuple(ExpandedRecordHeader *, HeapTuple);
1379:	static MemoryContext get_short_term_cxt(ExpandedRecordHeader *);

File explain.c:
4755:	void ExplainBeginOutput(ExplainState *);
4562:	void ExplainCloseGroup(const char *, const char *, _Bool, ExplainState *);
4786:	void ExplainEndOutput(ExplainState *);
518:	void ExplainOnePlan(PlannedStmt *, IntoClause *, ExplainState *, const char *, ParamListInfo, QueryEnvironment *, const instr_time *, const BufferUsage *);
428:	void ExplainOneUtility(Node *, IntoClause *, ExplainState *, const char *, ParamListInfo, QueryEnvironment *);
4499:	void ExplainOpenGroup(const char *, const char *, _Bool, ExplainState *);
849:	void ExplainPrintJITSummary(ExplainState *, QueryDesc *);
757:	void ExplainPrintPlan(ExplainState *, QueryDesc *);
806:	void ExplainPrintTriggers(ExplainState *, QueryDesc *);
4484:	void ExplainPropertyBool(const char *, _Bool, ExplainState *);
4470:	void ExplainPropertyFloat(const char *, const char *, double, int, ExplainState *);
4443:	void ExplainPropertyInteger(const char *, const char *, int64, ExplainState *);
4258:	void ExplainPropertyList(const char *, List *, ExplainState *);
4328:	void ExplainPropertyListNested(const char *, List *, ExplainState *);
4434:	void ExplainPropertyText(const char *, const char *, ExplainState *);
4456:	void ExplainPropertyUInteger(const char *, const char *, uint64, ExplainState *);
164:	void ExplainQuery(ParseState *, ExplainStmt *, ParamListInfo, DestReceiver *);
969:	void ExplainQueryText(ExplainState *, QueryDesc *);
328:	TupleDesc ExplainResultDesc(ExplainStmt *);
4815:	void ExplainSeparatePlans(ExplainState *);
311:	ExplainState *NewExplainState(void);
4192:	static void ExplainCloseWorker(int, ExplainState *);
4113:	static ExplainWorkersState *ExplainCreateWorkersState(int);
4091:	static void ExplainCustomChildren(CustomScanState *, List *, ExplainState *);
4709:	static void ExplainDummyGroup(const char *, const char *, ExplainState *);
4228:	static void ExplainFlushWorkersState(ExplainState *);
4871:	static void ExplainIndentText(ExplainState *);
3671:	static void ExplainIndexScanDetails(Oid, ScanDirection, ExplainState *);
4886:	static void ExplainJSONLineEnding(ExplainState *);
4016:	static void ExplainMemberNodes(PlanState **, int, List *, ExplainState *);
4034:	static void ExplainMissingMembers(int, int, ExplainState *);
3723:	static void ExplainModifyTarget(ModifyTable *, ExplainState *);
1145:	static void ExplainNode(PlanState *, List *, const char *, const char *, ExplainState *);
367:	static void ExplainOneQuery(Query *, int, IntoClause *, ExplainState *, const char *, ParamListInfo, QueryEnvironment *);
4609:	static void ExplainOpenSetAsideGroup(const char *, const char *, _Bool, int, ExplainState *);
4130:	static void ExplainOpenWorker(int, ExplainState *);
1070:	static _Bool ExplainPreScanNode(PlanState *, Bitmapset **);
875:	static void ExplainPrintJIT(ExplainState *, int, JitInstrumentation *);
687:	static void ExplainPrintSettings(ExplainState *);
4381:	static void ExplainProperty(const char *, const char *, const char *, _Bool, ExplainState *);
4678:	static void ExplainRestoreGroup(ExplainState *, int, int *);
4648:	static void ExplainSaveGroup(ExplainState *, int, int *);
3710:	static void ExplainScanTarget(Scan *, ExplainState *);
4048:	static void ExplainSubPlans(List *, List *, const char *, ExplainState *);
3732:	static void ExplainTargetRel(Plan *, Index, ExplainState *);
4844:	static void ExplainXMLTag(const char *, int, ExplainState *);
4906:	static void ExplainYAMLLineStarting(ExplainState *);
1051:	static double elapsed_time(instr_time *);
4931:	static void escape_yaml(StringInfo, const char *);
3475:	static const char *explain_get_index_name(Oid);
980:	static void report_triggers(ResultRelInfo *, _Bool, ExplainState *);
2379:	static void show_agg_keys(AggState *, List *, ExplainState *);
3497:	static void show_buffer_usage(ExplainState *, const BufferUsage *, _Bool);
3445:	static void show_eval_params(Bitmapset *, ExplainState *);
2259:	static void show_expression(Node *, const char *, PlanState *, List *, _Bool, ExplainState *);
3424:	static void show_foreignscan_info(ForeignScanState *, ExplainState *);
2511:	static void show_group_keys(GroupState *, List *, ExplainState *);
2433:	static void show_grouping_set_keys(PlanState *, Agg *, Sort *, List *, _Bool, List *, ExplainState *);
2402:	static void show_grouping_sets(PlanState *, Agg *, List *, ExplainState *);
3008:	static void show_hash_info(HashState *, ExplainState *);
3243:	static void show_hashagg_info(AggState *, ExplainState *);
2808:	static void show_incremental_sort_group_info(IncrementalSortGroupInfo *, const char *, _Bool, ExplainState *);
2922:	static void show_incremental_sort_info(IncrementalSortState *, ExplainState *);
2346:	static void show_incremental_sort_keys(IncrementalSortState *, List *, ExplainState *);
3395:	static void show_instrumentation_count(const char *, int, PlanState *, ExplainState *);
3099:	static void show_memoize_info(MemoizeState *, List *, ExplainState *);
2363:	static void show_merge_append_keys(MergeAppendState *, List *, ExplainState *);
3856:	static void show_modifytable_info(ModifyTableState *, List *, ExplainState *);
2201:	static void show_plan_tlist(PlanState *, List *, ExplainState *);
2282:	static void show_qual(List *, const char *, PlanState *, List *, _Bool, ExplainState *);
2303:	static void show_scan_qual(List *, const char *, PlanState *, List *, ExplainState *);
2531:	static void show_sort_group_keys(PlanState *, const char *, int, int, AttrNumber *, Oid *, Oid *, _Bool *, List *, ExplainState *);
2717:	static void show_sort_info(SortState *, ExplainState *);
2331:	static void show_sort_keys(SortState *, List *, ExplainState *);
2593:	static void show_sortorder_options(StringInfo, Node *, Oid, Oid, _Bool);
2651:	static void show_tablesample(TableSampleClause *, PlanState *, List *, ExplainState *);
3365:	static void show_tidbitmap_info(BitmapHeapScanState *, ExplainState *);
2317:	static void show_upper_qual(List *, const char *, PlanState *, List *, ExplainState *);
3633:	static void show_wal_usage(ExplainState *, const WalUsage *);

File explicit_bzero.c:
33:	void explicit_bzero(void *, size_t);

File explicit_bzero_chk.c:
30:	void __explicit_bzero_chk(void *, size_t, size_t);

File explodename.c:
54:	int _nl_explode_name(char *, const char **, const char **, const char **, const char **, const char **);

File extended_stats.c:
114:	void BuildRelationExtStatistics(Relation, double, int, HeapTuple *, int, VacAttrStats **);
266:	int ComputeExtStatisticsRows(Relation, int, VacAttrStats **);
970:	AttrNumber *build_attnums_array(Bitmapset *, int, int *);
1015:	SortItem *build_sorted_items(StatsBuildData *, int *, MultiSortSupport, int, AttrNumber *);
1238:	StatisticExtInfo *choose_best_statistics(List *, char, Bitmapset **, List **, int);
956:	int compare_datums_simple(Datum, Datum, SortSupport);
948:	int compare_scalars_simple(const void *, const void *, void *);
2090:	_Bool examine_opclause_args(List *, Node **, Const **, _Bool *);
1147:	_Bool has_stats_of_kind(List *, char);
880:	void multi_sort_add_dimension(MultiSortSupport, int, Oid, Oid);
894:	int multi_sort_compare(const void *, const void *, void *);
919:	int multi_sort_compare_dim(int, const SortItem *, const SortItem *, MultiSortSupport);
928:	int multi_sort_compare_dims(int, int, const SortItem *, const SortItem *, MultiSortSupport);
861:	MultiSortSupport multi_sort_init(int);
2039:	Selectivity statext_clauselist_selectivity(PlannerInfo *, List *, int, JoinType, SpecialJoinInfo *, RelOptInfo *, Bitmapset **, _Bool);
2464:	HeapTuple statext_expressions_load(Oid, int);
390:	_Bool statext_is_kind_built(HeapTuple, char);
2306:	static AnlExprData *build_expr_data(List *, int);
2145:	static void compute_expr_stats(Relation, double, AnlExprData *, int, HeapTuple *, int);
528:	static VacAttrStats *examine_attribute(Node *);
612:	static VacAttrStats *examine_expression(Node *, int);
2290:	static Datum expr_fetch_func(VacAttrStatsP, int, _Bool *);
423:	static List *fetch_statentries_for_relation(Relation, Oid);
710:	static VacAttrStats **lookup_var_attr_stats(Relation, Bitmapset *, List *, int, VacAttrStats **);
2510:	static StatsBuildData *make_build_data(Relation, StatExtEntry *, int, HeapTuple *, VacAttrStats **, int);
2331:	static Datum serialize_expr_stats(AnlExprData *, int);
1197:	static _Bool stat_covers_expressions(StatisticExtInfo *, List *, Bitmapset **);
1170:	static int stat_find_expression(StatisticExtInfo *, Node *);
348:	static int statext_compute_stattarget(int, int, VacAttrStats **);
1597:	static _Bool statext_is_compatible_clause(PlannerInfo *, Node *, Index, Bitmapset **, List **);
1353:	static _Bool statext_is_compatible_clause_internal(PlannerInfo *, Node *, Index, Bitmapset **, List **);
1741:	static Selectivity statext_mcv_clauselist_selectivity(PlannerInfo *, List *, int, JoinType, SpecialJoinInfo *, RelOptInfo *, Bitmapset **, _Bool);
785:	static void statext_store(Oid, MVNDistinct *, MVDependencies *, MCVList *, Datum, VacAttrStats **);

File extensible.c:
137:	const CustomScanMethods *GetCustomScanMethods(const char *, _Bool);
125:	const ExtensibleNodeMethods *GetExtensibleNodeMethods(const char *, _Bool);
88:	void RegisterCustomScanMethods(const CustomScanMethods *);
76:	void RegisterExtensibleNodeMethods(const ExtensibleNodeMethods *);
100:	static const void *GetExtensibleNodeEntry(HTAB *, const char *, _Bool);
39:	static void RegisterExtensibleNodeEntry(HTAB **, const char *, const char *, const void *);

File extension.c:
2788:	ObjectAddress AlterExtensionNamespace(const char *, const char *, Oid *);
1681:	ObjectAddress CreateExtension(ParseState *, CreateExtensionStmt *);
3278:	ObjectAddress ExecAlterExtensionContentsStmt(AlterExtensionContentsStmt *, ObjectAddress *);
2970:	ObjectAddress ExecAlterExtensionStmt(ParseState *, AlterExtensionStmt *);
1788:	ObjectAddress InsertExtensionTuple(const char *, Oid, Oid, _Bool, const char *, Datum, Datum, List *);
1876:	void RemoveExtensionById(Oid);
2238:	_Bool extension_file_exists(const char *);
185:	char *get_extension_name(Oid);
140:	Oid get_extension_oid(const char *, _Bool);
2038:	Datum pg_available_extension_versions(FunctionCallInfo);
1930:	Datum pg_available_extensions(FunctionCallInfo);
2432:	Datum pg_extension_config_dump(FunctionCallInfo);
2319:	Datum pg_extension_update_paths(FunctionCallInfo);
3120:	static void ApplyExtensionUpdates(Oid, ExtensionControlFile *, const char *, List *, char *, _Bool, _Bool);
1371:	static ObjectAddress CreateExtensionInternal(char *, char *, const char *, _Bool, List *, _Bool);
261:	static void check_valid_extension_name(const char *);
308:	static void check_valid_version_name(const char *);
2291:	static Datum convert_requires_to_datum(List *);
836:	static void execute_extension_script(Oid, ExtensionControlFile *, const char *, const char *, List *, const char *, Oid);
709:	static void execute_sql_string(const char *);
2619:	static void extension_config_remove(Oid, Oid);
816:	static _Bool extension_is_trusted(ExtensionControlFile *);
1316:	static ExtensionVersionInfo *find_install_path(List *, ExtensionVersionInfo *, List **);
1223:	static List *find_update_path(List *, ExtensionVersionInfo *, ExtensionVersionInfo *, _Bool, _Bool);
2124:	static void get_available_versions_for_extension(ExtensionControlFile *, Tuplestorestate *, TupleDesc);
1056:	static ExtensionVersionInfo *get_ext_ver_info(const char *, List **);
1117:	static List *get_ext_ver_list(ExtensionControlFile *);
421:	static char *get_extension_aux_control_filename(ExtensionControlFile *, const char *);
371:	static char *get_extension_control_directory(void);
384:	static char *get_extension_control_filename(const char *);
224:	static Oid get_extension_schema(Oid);
398:	static char *get_extension_script_directory(ExtensionControlFile *);
439:	static char *get_extension_script_filename(ExtensionControlFile *, const char *, const char *);
1089:	static ExtensionVersionInfo *get_nearest_unprocessed_vertex(List *);
1610:	static Oid get_required_extension(char *, char *, char *, _Bool, List *, _Bool);
1180:	static List *identify_update_path(ExtensionControlFile *, const char *, const char *);
355:	static _Bool is_extension_control_filename(const char *);
363:	static _Bool is_extension_script_filename(const char *);
471:	static void parse_extension_control_file(ExtensionControlFile *, const char *);
645:	static ExtensionControlFile *read_extension_aux_control_file(const ExtensionControlFile *, const char *);
616:	static ExtensionControlFile *read_extension_control_file(const char *);
668:	static char *read_extension_script_file(const ExtensionControlFile *, const char *);
3443:	static char *read_whole_file(const char *, int *);

File f2s.c:
797:	char *float_to_shortest_decimal(float);
780:	int float_to_shortest_decimal_buf(float, char *);
742:	int float_to_shortest_decimal_bufn(float, char *);
174:	static uint32 decimalLength(const uint32);
222:	static floating_decimal_32 f2d(const uint32, const uint32);
689:	static _Bool f2d_small_int(const uint32, const uint32, floating_decimal_32 *);
162:	static uint32 mulPow5InvDivPow2(const uint32, const uint32, const int32);
168:	static uint32 mulPow5divPow2(const uint32, const uint32, const int32);
120:	static uint32 mulShift(const uint32, const uint64, const int32);
109:	static _Bool multipleOfPowerOf2(const uint32, const uint32);
102:	static _Bool multipleOfPowerOf5(const uint32, const uint32);
81:	static uint32 pow5Factor(uint32);
563:	static int to_chars(const floating_decimal_32, const _Bool, char * const);
440:	static int to_chars_f(const floating_decimal_32, const uint32, char * const);

File fastpath.c:
188:	void HandleFunctionRequest(StringInfo);
67:	static void SendFunctionResult(Datum, _Bool, Oid, int16);
119:	static void fetch_fp_info(Oid, struct fp_info *);
329:	static int16 parse_fcall_arguments(StringInfo, struct fp_info *, FunctionCallInfo);

File fchflags.c:
27:	int fchflags(int, unsigned long);

File fcloseall.c:
31:	int __fcloseall(void);

File fd.c:
1103:	_Bool AcquireExternalFD(void);
2642:	DIR *AllocateDir(const char *);
2381:	FILE *AllocateFile(const char *, const char *);
2930:	void AtEOSubXact_Files(_Bool, SubTransactionId, SubTransactionId);
2963:	void AtEOXact_Files(_Bool);
1041:	int BasicOpenFile(const char *, int);
1063:	int BasicOpenFilePerm(const char *, int, mode_t);
2790:	int ClosePipeStream(FILE *);
2608:	int CloseTransientFile(int);
1881:	void FileClose(File);
2275:	int FileGetRawDesc(File);
2285:	int FileGetRawFlags(File);
2295:	mode_t FileGetRawMode(File);
2259:	char *FilePathName(File);
1981:	int FilePrefetch(File, off_t, int, uint32);
2032:	int FileRead(File, char *, int, off_t, uint32);
2207:	off_t FileSize(File);
2186:	int FileSync(File, uint32);
2224:	int FileTruncate(File, off_t, uint32);
2088:	int FileWrite(File, char *, int, off_t, uint32);
2009:	void FileWriteback(File, off_t, off_t, uint32);
2760:	int FreeDir(DIR *);
2580:	int FreeFile(FILE *);
2909:	Oid GetNextTempTableSpace(void);
2891:	int GetTempTablespaces(Oid *, int);
879:	void InitFileAccess(void);
3699:	int MakePGDirectory(const char *);
2484:	FILE *OpenPipeStream(const char *, const char *);
1633:	File OpenTemporaryFile(_Bool);
2431:	int OpenTransientFile(const char *, int);
2440:	int OpenTransientFilePerm(const char *, int, mode_t);
1569:	void PathNameCreateTemporaryDir(const char *, const char *);
1768:	File PathNameCreateTemporaryFile(const char *, _Bool);
1600:	void PathNameDeleteTemporaryDir(const char *);
1835:	_Bool PathNameDeleteTemporaryFile(const char *, _Bool);
1492:	File PathNameOpenFile(const char *, int);
1505:	File PathNameOpenFilePerm(const char *, int, mode_t);
1806:	File PathNameOpenTemporaryFile(const char *, int);
2708:	struct dirent *ReadDir(DIR *, const char *);
2723:	struct dirent *ReadDirExtended(DIR *, const char *, int);
1156:	void ReleaseExternalFD(void);
3067:	void RemovePgTempFiles(void);
3126:	void RemovePgTempFilesInDir(const char *, _Bool, _Bool);
1138:	void ReserveExternalFD(void);
2848:	void SetTempTablespaces(Oid *, int);
3340:	void SyncDataDirectory(void);
1686:	void TempTablespacePath(char *, Oid);
2876:	_Bool TempTablespacesAreSet(void);
2819:	void closeAllVfds(void);
3722:	int data_sync_elevel(int);
692:	int durable_rename(const char *, const char *, int);
822:	int durable_rename_excl(const char *, const char *, int);
782:	int durable_unlink(const char *, int);
666:	void fsync_fname(const char *, _Bool);
3583:	int fsync_fname_ext(const char *, _Bool, _Bool, int);
3248:	_Bool looks_like_temp_rel_name(const char *);
442:	int pg_fdatasync(int);
462:	void pg_flush_data(int, off_t, off_t);
352:	int pg_fsync(int);
407:	int pg_fsync_no_writethrough(int);
419:	int pg_fsync_writethrough(int);
3732:	ssize_t pg_pwritev_with_retry(int, const struct iovec *, int, off_t);
635:	int pg_truncate(const char *, off_t);
998:	void set_max_safe_fds(void);
1331:	static File AllocateVfd(void);
2977:	static void AtProcExit_Files(int, Datum);
2995:	static void CleanupTempFiles(_Bool, _Bool);
1185:	static void Delete(File);
1409:	static int FileAccess(File);
2541:	static int FreeDesc(AllocateDesc *);
1389:	static void FreeVfd(File);
1230:	static void Insert(File);
1204:	static void LruDelete(File);
1252:	static int LruInsert(File);
1711:	static File OpenTemporaryFileInTablespace(Oid, _Bool);
1464:	static void RegisterTemporaryFile(File);
1299:	static _Bool ReleaseLruFile(void);
1321:	static void ReleaseLruFiles(void);
3192:	static void RemovePgTempRelationFiles(const char *);
3220:	static void RemovePgTempRelationFilesInDbspace(const char *);
1445:	static void ReportTemporaryFileUsage(const char *, off_t);
914:	static void count_usable_fds(int, int *, int *);
3548:	static void datadir_fsync_fname(const char *, _Bool, int);
3297:	static void do_syncfs(const char *);
3659:	static int fsync_parent_path(const char *, int);
3513:	static void pre_sync_fname(const char *, _Bool, int);
2306:	static _Bool reserveAllocatedDesc(void);
3558:	static void unlink_if_exists_fname(const char *, _Bool, int);
3450:	static void walkdir(const char *, void (*)(const char *, _Bool, int), _Bool, int);

File fdelt_chk.c:
22:	long __fdelt_chk(long);

File feof.c:
31:	int _IO_feof(FILE *);

File feof_u.c:
33:	int __feof_unlocked(FILE *);

File ferror.c:
31:	int _IO_ferror(FILE *);

File ferror_u.c:
33:	int __ferror_unlocked(FILE *);

File fetestexceptflag.c:
22:	int fetestexceptflag(const fexcept_t *, int);

File fgetgrent.c:
32:	struct group *fgetgrent(FILE *);

File fgetgrent_r.c:
37:	int __GI__nss_files_parse_grent(char *, struct group *, struct parser_data *, size_t, int *);
59:	int __fgetgrent_r(FILE *, struct group *, char *, size_t, struct group **);

File fgetpwent.c:
32:	struct passwd *fgetpwent(FILE *);

File fgetpwent_r.c:
34:	int __GI__nss_files_parse_pwent(char *, struct passwd *, struct parser_data *, size_t, int *);
72:	int __fgetpwent_r(FILE *, struct passwd *, char *, size_t, struct passwd **);

File fgets_chk.c:
32:	char *__fgets_chk(char *, size_t, int, FILE *);

File fgets_u_chk.c:
32:	char *__fgets_unlocked_chk(char *, size_t, int, FILE *);

File fgetsgent.c:
35:	struct sgrp *fgetsgent(FILE *);

File fgetsgent_r.c:
36:	int __fgetsgent_r(FILE *, struct sgrp *, char *, size_t, struct sgrp **);

File fgetspent.c:
35:	struct spwd *fgetspent(FILE *);

File fgetspent_r.c:
39:	int __fgetspent_r(FILE *, struct spwd *, char *, size_t, struct spwd **);

File fgetws_chk.c:
23:	wchar_t *__fgetws_chk(wchar_t *, size_t, int, FILE *);

File fgetws_u_chk.c:
32:	wchar_t *__fgetws_unlocked_chk(wchar_t *, size_t, int, FILE *);

File file_perm.c:
34:	void SetDataDirectoryCreatePerm(int);

File file_utils.c:
410:	PGFileType get_dirent_type(const char *, const struct dirent *, _Bool, int);

File filedoalloc.c:
77:	int __GI__IO_file_doallocate(FILE *);

File fileno.c:
31:	int __GI___fileno(FILE *);

File fileops.c:
1153:	int _IO_file_close_mmap(FILE *);
1059:	off64_t _IO_file_seekoff_mmap(FILE *, off64_t, int, int);
396:	FILE *_IO_file_setbuf_mmap(FILE *, char *, ssize_t);
721:	int _IO_file_underflow_maybe_mmap(FILE *);
642:	int _IO_file_underflow_mmap(FILE *);
423:	int _IO_new_do_write(FILE *, const char *, size_t);
361:	FILE *_IO_new_file_attach(FILE *, int);
128:	int _IO_new_file_close_it(FILE *);
168:	void _IO_new_file_finish(FILE *, int);
212:	FILE *_IO_new_file_fopen(FILE *, const char *, const char *, int);
121:	void _IO_new_file_init(struct _IO_FILE_plus *);
106:	void _IO_new_file_init_internal(struct _IO_FILE_plus *);
731:	int _IO_new_file_overflow(FILE *, int);
900:	off64_t _IO_new_file_seekoff(FILE *, off64_t, int, int);
381:	FILE *_IO_new_file_setbuf(FILE *, char *, ssize_t);
792:	int _IO_new_file_sync(FILE *);
461:	int _IO_new_file_underflow(FILE *);
1173:	ssize_t _IO_new_file_write(FILE *, const void *, ssize_t);
1197:	size_t _IO_new_file_xsputn(FILE *, const void *, size_t);
1164:	int __GI__IO_file_close(FILE *);
181:	FILE *__GI__IO_file_open(FILE *, const char *, int, int, int, int);
1130:	ssize_t __GI__IO_file_read(FILE *, void *, ssize_t);
1139:	off64_t __GI__IO_file_seek(FILE *, off64_t, int);
1146:	int __GI__IO_file_stat(FILE *, void *);
1272:	size_t __GI__IO_file_xsgetn(FILE *, void *, size_t);
1114:	static off64_t _IO_file_seekoff_maybe_mmap(FILE *, off64_t, int, int);
820:	static int _IO_file_sync_mmap(FILE *);
1410:	static size_t _IO_file_xsgetn_maybe_mmap(FILE *, void *, size_t);
1365:	static size_t _IO_file_xsgetn_mmap(FILE *, void *, size_t);

File finddomain.c:
58:	struct loaded_l10nfile *_nl_find_domain(const char *, char *, const char *, struct binding *);
189:	void _nl_finddomain_subfreeres(void);

File findlocale.c:
102:	struct __locale_data *_nl_find_locale(const char *, size_t, int, const char **);
331:	void _nl_remove_locale(int, struct __locale_data *);

File float.c:
1005:	Datum btfloat48cmp(FunctionCallInfo);
884:	Datum btfloat4cmp(FunctionCallInfo);
902:	Datum btfloat4sortsupport(FunctionCallInfo);
1015:	Datum btfloat84cmp(FunctionCallInfo);
978:	Datum btfloat8cmp(FunctionCallInfo);
996:	Datum btfloat8sortsupport(FunctionCallInfo);
1759:	Datum dacos(FunctionCallInfo);
2112:	Datum dacosd(FunctionCallInfo);
2693:	Datum dacosh(FunctionCallInfo);
1790:	Datum dasin(FunctionCallInfo);
2149:	Datum dasind(FunctionCallInfo);
2676:	Datum dasinh(FunctionCallInfo);
1821:	Datum datan(FunctionCallInfo);
1847:	Datum datan2(FunctionCallInfo);
2218:	Datum datan2d(FunctionCallInfo);
2186:	Datum datand(FunctionCallInfo);
2718:	Datum datanh(FunctionCallInfo);
1474:	Datum dcbrt(FunctionCallInfo);
1384:	Datum dceil(FunctionCallInfo);
1873:	Datum dcos(FunctionCallInfo);
2322:	Datum dcosd(FunctionCallInfo);
2631:	Datum dcosh(FunctionCallInfo);
1914:	Datum dcot(FunctionCallInfo);
2377:	Datum dcotd(FunctionCallInfo);
2565:	Datum degrees(FunctionCallInfo);
1648:	Datum dexp(FunctionCallInfo);
1396:	Datum dfloor(FunctionCallInfo);
1694:	Datum dlog1(FunctionCallInfo);
1726:	Datum dlog10(FunctionCallInfo);
2577:	Datum dpi(FunctionCallInfo);
1493:	Datum dpow(FunctionCallInfo);
2753:	Datum drandom(FunctionCallInfo);
1372:	Datum dround(FunctionCallInfo);
1409:	Datum dsign(FunctionCallInfo);
1942:	Datum dsin(FunctionCallInfo);
2443:	Datum dsind(FunctionCallInfo);
2602:	Datum dsinh(FunctionCallInfo);
1450:	Datum dsqrt(FunctionCallInfo);
1969:	Datum dtan(FunctionCallInfo);
2499:	Datum dtand(FunctionCallInfo);
2656:	Datum dtanh(FunctionCallInfo);
1199:	Datum dtof(FunctionCallInfo);
1243:	Datum dtoi2(FunctionCallInfo);
1218:	Datum dtoi4(FunctionCallInfo);
1432:	Datum dtrunc(FunctionCallInfo);
3834:	Datum float48div(FunctionCallInfo);
3894:	Datum float48eq(FunctionCallInfo);
3939:	Datum float48ge(FunctionCallInfo);
3930:	Datum float48gt(FunctionCallInfo);
3921:	Datum float48le(FunctionCallInfo);
3912:	Datum float48lt(FunctionCallInfo);
3816:	Datum float48mi(FunctionCallInfo);
3825:	Datum float48mul(FunctionCallInfo);
3903:	Datum float48ne(FunctionCallInfo);
3807:	Datum float48pl(FunctionCallInfo);
3063:	Datum float4_accum(FunctionCallInfo);
820:	int float4_cmp_internal(float4, float4);
595:	Datum float4abs(FunctionCallInfo);
759:	Datum float4div(FunctionCallInfo);
830:	Datum float4eq(FunctionCallInfo);
875:	Datum float4ge(FunctionCallInfo);
866:	Datum float4gt(FunctionCallInfo);
162:	Datum float4in(FunctionCallInfo);
624:	Datum float4larger(FunctionCallInfo);
857:	Datum float4le(FunctionCallInfo);
848:	Datum float4lt(FunctionCallInfo);
741:	Datum float4mi(FunctionCallInfo);
750:	Datum float4mul(FunctionCallInfo);
839:	Datum float4ne(FunctionCallInfo);
294:	Datum float4out(FunctionCallInfo);
732:	Datum float4pl(FunctionCallInfo);
314:	Datum float4recv(FunctionCallInfo);
325:	Datum float4send(FunctionCallInfo);
638:	Datum float4smaller(FunctionCallInfo);
606:	Datum float4um(FunctionCallInfo);
616:	Datum float4up(FunctionCallInfo);
3876:	Datum float84div(FunctionCallInfo);
3951:	Datum float84eq(FunctionCallInfo);
3996:	Datum float84ge(FunctionCallInfo);
3987:	Datum float84gt(FunctionCallInfo);
3978:	Datum float84le(FunctionCallInfo);
3969:	Datum float84lt(FunctionCallInfo);
3858:	Datum float84mi(FunctionCallInfo);
3867:	Datum float84mul(FunctionCallInfo);
3960:	Datum float84ne(FunctionCallInfo);
3849:	Datum float84pl(FunctionCallInfo);
2980:	Datum float8_accum(FunctionCallInfo);
3148:	Datum float8_avg(FunctionCallInfo);
914:	int float8_cmp_internal(float8, float8);
2886:	Datum float8_combine(FunctionCallInfo);
3674:	Datum float8_corr(FunctionCallInfo);
3636:	Datum float8_covar_pop(FunctionCallInfo);
3655:	Datum float8_covar_samp(FunctionCallInfo);
3277:	Datum float8_regr_accum(FunctionCallInfo);
3598:	Datum float8_regr_avgx(FunctionCallInfo);
3617:	Datum float8_regr_avgy(FunctionCallInfo);
3401:	Datum float8_regr_combine(FunctionCallInfo);
3763:	Datum float8_regr_intercept(FunctionCallInfo);
3703:	Datum float8_regr_r2(FunctionCallInfo);
3736:	Datum float8_regr_slope(FunctionCallInfo);
3535:	Datum float8_regr_sxx(FunctionCallInfo);
3577:	Datum float8_regr_sxy(FunctionCallInfo);
3556:	Datum float8_regr_syy(FunctionCallInfo);
3212:	Datum float8_stddev_pop(FunctionCallInfo);
3234:	Datum float8_stddev_samp(FunctionCallInfo);
3168:	Datum float8_var_pop(FunctionCallInfo);
3190:	Datum float8_var_samp(FunctionCallInfo);
661:	Datum float8abs(FunctionCallInfo);
801:	Datum float8div(FunctionCallInfo);
924:	Datum float8eq(FunctionCallInfo);
969:	Datum float8ge(FunctionCallInfo);
960:	Datum float8gt(FunctionCallInfo);
339:	Datum float8in(FunctionCallInfo);
513:	double float8in_internal(char *, char **, const char *, const char *);
379:	double float8in_internal_opt_error(char *, char **, const char *, const char *, _Bool *);
691:	Datum float8larger(FunctionCallInfo);
951:	Datum float8le(FunctionCallInfo);
942:	Datum float8lt(FunctionCallInfo);
783:	Datum float8mi(FunctionCallInfo);
792:	Datum float8mul(FunctionCallInfo);
933:	Datum float8ne(FunctionCallInfo);
526:	Datum float8out(FunctionCallInfo);
541:	char *float8out_internal(double);
774:	Datum float8pl(FunctionCallInfo);
560:	Datum float8recv(FunctionCallInfo);
571:	Datum float8send(FunctionCallInfo);
705:	Datum float8smaller(FunctionCallInfo);
673:	Datum float8um(FunctionCallInfo);
683:	Datum float8up(FunctionCallInfo);
84:	void float_overflow_error(void);
92:	void float_underflow_error(void);
100:	void float_zero_divide_error(void);
1187:	Datum ftod(FunctionCallInfo);
1317:	Datum ftoi2(FunctionCallInfo);
1292:	Datum ftoi4(FunctionCallInfo);
1280:	Datum i2tod(FunctionCallInfo);
1354:	Datum i2tof(FunctionCallInfo);
1268:	Datum i4tod(FunctionCallInfo);
1342:	Datum i4tof(FunctionCallInfo);
1107:	Datum in_range_float4_float8(FunctionCallInfo);
1031:	Datum in_range_float8_float8(FunctionCallInfo);
116:	int is_infinite(double);
2587:	Datum radians(FunctionCallInfo);
2790:	Datum setseed(FunctionCallInfo);
4019:	Datum width_bucket_float8(FunctionCallInfo);
2085:	static double acosd_q1(double);
2052:	static double asind_q1(double);
893:	static int btfloat4fastcmp(Datum, Datum, SortSupport);
987:	static int btfloat8fastcmp(Datum, Datum, SortSupport);
2862:	static float8 *check_float8_array(ArrayType *, const char *, int);
2270:	static double cosd_0_to_60(double);
2303:	static double cosd_q1(double);
2023:	static void init_degree_constants(void);
2256:	static double sind_0_to_30(double);
2283:	static double sind_q1(double);

File fls.c:
55:	int fls(int);

File fmemopen.c:
149:	FILE *__GI___fmemopen(void *, size_t, const char *);
136:	static int fmemopen_close(void *);
46:	static ssize_t fmemopen_read(void *, char *, size_t);
100:	static int fmemopen_seek(void *, off64_t *, int);
66:	static ssize_t fmemopen_write(void *, const char *, size_t);

File fmgr.c:
1064:	Datum CallerFInfoFunctionCall1(PGFunction, FmgrInfo *, Oid, Datum);
1084:	Datum CallerFInfoFunctionCall2(PGFunction, FmgrInfo *, Oid, Datum, Datum);
2035:	_Bool CheckFunctionValidatorAccess(Oid, Oid);
791:	Datum DirectFunctionCall1Coll(PGFunction, Oid, Datum);
811:	Datum DirectFunctionCall2Coll(PGFunction, Oid, Datum, Datum);
833:	Datum DirectFunctionCall3Coll(PGFunction, Oid, Datum, Datum, Datum);
858:	Datum DirectFunctionCall4Coll(PGFunction, Oid, Datum, Datum, Datum, Datum);
885:	Datum DirectFunctionCall5Coll(PGFunction, Oid, Datum, Datum, Datum, Datum, Datum);
914:	Datum DirectFunctionCall6Coll(PGFunction, Oid, Datum, Datum, Datum, Datum, Datum, Datum);
946:	Datum DirectFunctionCall7Coll(PGFunction, Oid, Datum, Datum, Datum, Datum, Datum, Datum, Datum);
980:	Datum DirectFunctionCall8Coll(PGFunction, Oid, Datum, Datum, Datum, Datum, Datum, Datum, Datum, Datum);
1016:	Datum DirectFunctionCall9Coll(PGFunction, Oid, Datum, Datum, Datum, Datum, Datum, Datum, Datum, Datum, Datum);
1111:	Datum FunctionCall0Coll(FmgrInfo *, Oid);
1128:	Datum FunctionCall1Coll(FmgrInfo *, Oid, Datum);
1148:	Datum FunctionCall2Coll(FmgrInfo *, Oid, Datum, Datum);
1170:	Datum FunctionCall3Coll(FmgrInfo *, Oid, Datum, Datum, Datum);
1195:	Datum FunctionCall4Coll(FmgrInfo *, Oid, Datum, Datum, Datum, Datum);
1222:	Datum FunctionCall5Coll(FmgrInfo *, Oid, Datum, Datum, Datum, Datum, Datum);
1251:	Datum FunctionCall6Coll(FmgrInfo *, Oid, Datum, Datum, Datum, Datum, Datum, Datum);
1283:	Datum FunctionCall7Coll(FmgrInfo *, Oid, Datum, Datum, Datum, Datum, Datum, Datum, Datum);
1317:	Datum FunctionCall8Coll(FmgrInfo *, Oid, Datum, Datum, Datum, Datum, Datum, Datum, Datum, Datum);
1353:	Datum FunctionCall9Coll(FmgrInfo *, Oid, Datum, Datum, Datum, Datum, Datum, Datum, Datum, Datum, Datum);
1529:	Datum InputFunctionCall(FmgrInfo *, char *, Oid, int32);
1400:	Datum OidFunctionCall0Coll(Oid, Oid);
1410:	Datum OidFunctionCall1Coll(Oid, Oid, Datum);
1420:	Datum OidFunctionCall2Coll(Oid, Oid, Datum, Datum);
1430:	Datum OidFunctionCall3Coll(Oid, Oid, Datum, Datum, Datum);
1441:	Datum OidFunctionCall4Coll(Oid, Oid, Datum, Datum, Datum, Datum);
1452:	Datum OidFunctionCall5Coll(Oid, Oid, Datum, Datum, Datum, Datum, Datum);
1463:	Datum OidFunctionCall6Coll(Oid, Oid, Datum, Datum, Datum, Datum, Datum, Datum);
1476:	Datum OidFunctionCall7Coll(Oid, Oid, Datum, Datum, Datum, Datum, Datum, Datum, Datum);
1489:	Datum OidFunctionCall8Coll(Oid, Oid, Datum, Datum, Datum, Datum, Datum, Datum, Datum, Datum);
1502:	Datum OidFunctionCall9Coll(Oid, Oid, Datum, Datum, Datum, Datum, Datum, Datum, Datum, Datum, Datum);
1644:	Datum OidInputFunctionCall(Oid, char *, Oid, int32);
1653:	char *OidOutputFunctionCall(Oid, Datum);
1662:	Datum OidReceiveFunctionCall(Oid, StringInfo, Oid, int32);
1672:	bytea *OidSendFunctionCall(Oid, Datum);
1573:	char *OutputFunctionCall(FmgrInfo *, Datum);
1587:	Datum ReceiveFunctionCall(FmgrInfo *, StringInfo, Oid, int32);
1634:	bytea *SendFunctionCall(FmgrInfo *, Datum);
592:	void clear_external_function_hash(void *);
469:	const Pg_finfo_record *fetch_finfo_record(void *, const char *);
126:	void fmgr_info(Oid, FmgrInfo *);
608:	void fmgr_info_copy(FmgrInfo *, FmgrInfo *, MemoryContext);
136:	void fmgr_info_cxt(Oid, FmgrInfo *, MemoryContext);
623:	Oid fmgr_internal_function(const char *);
658:	Datum fmgr_security_definer(FunctionCallInfo);
283:	void fmgr_symbol(Oid, char **, char **);
1884:	_Bool get_call_expr_arg_stable(Node *, int);
1819:	Oid get_call_expr_argtype(Node *, int);
1865:	_Bool get_fn_expr_arg_stable(FmgrInfo *, int);
1800:	Oid get_fn_expr_argtype(FmgrInfo *, int);
1778:	Oid get_fn_expr_rettype(FmgrInfo *);
1934:	_Bool get_fn_expr_variadic(FmgrInfo *);
1987:	bytea *get_fn_opclass_options(FmgrInfo *);
1971:	_Bool has_fn_opclass_options(FmgrInfo *);
1722:	struct varlena *pg_detoast_datum(struct varlena *);
1731:	struct varlena *pg_detoast_datum_copy(struct varlena *);
1754:	struct varlena *pg_detoast_datum_packed(struct varlena *);
1747:	struct varlena *pg_detoast_datum_slice(struct varlena *, int32, int32);
1960:	void set_fn_opclass_options(FmgrInfo *, bytea *);
358:	static void fmgr_info_C_lang(Oid, FmgrInfo *, HeapTuple);
146:	static void fmgr_info_cxt_security(Oid, FmgrInfo *, MemoryContext, _Bool);
432:	static void fmgr_info_other_lang(Oid, FmgrInfo *, HeapTuple);
75:	static const FmgrBuiltin *fmgr_isbuiltin(Oid);
100:	static const FmgrBuiltin *fmgr_lookupByName(const char *);
529:	static CFuncHashTabEntry *lookup_C_func(HeapTuple);
553:	static void record_C_func(HeapTuple, PGFunction, const Pg_finfo_record *);

File fmtmsg.c:
348:	int __addseverity(int, const char *);
101:	int fmtmsg(long, const char *, int, const char *, const char *, const char *);
370:	static void free_mem(void);
210:	static void init(void);

File fnmatch.c:
324:	int __fnmatch(const char *, const char *, int);

File fnmatch_loop.c:
946:	static const char *end_pattern(const char *);
946:	static const wchar_t *end_wpattern(const wchar_t *);
989:	static int ext_match(int, const char *, const char *, const char *, int, int, size_t);
989:	static int ext_wmatch(wint_t, const wchar_t *, const wchar_t *, const wchar_t *, int, int, size_t);
38:	static int internal_fnmatch(const char *, const char *, const char *, int, int, struct fnmatch_struct *, size_t);
38:	static int internal_fnwmatch(const wchar_t *, const wchar_t *, const wchar_t *, int, int, struct fnwmatch_struct *, size_t);

File foreign.c:
751:	Path *GetExistingLocalJoinPath(RelOptInfo *);
319:	FdwRoutine *GetFdwRoutine(Oid);
404:	FdwRoutine *GetFdwRoutineByRelId(Oid);
362:	FdwRoutine *GetFdwRoutineByServerId(Oid);
427:	FdwRoutine *GetFdwRoutineForRelation(Relation, _Bool);
286:	List *GetForeignColumnOptions(Oid, AttrNumber);
35:	ForeignDataWrapper *GetForeignDataWrapper(Oid);
94:	ForeignDataWrapper *GetForeignDataWrapperByName(const char *, _Bool);
47:	ForeignDataWrapper *GetForeignDataWrapperExtended(Oid, bits16);
109:	ForeignServer *GetForeignServer(Oid);
180:	ForeignServer *GetForeignServerByName(const char *, _Bool);
121:	ForeignServer *GetForeignServerExtended(Oid, bits16);
340:	Oid GetForeignServerIdByRelId(Oid);
248:	ForeignTable *GetForeignTable(Oid);
198:	UserMapping *GetUserMapping(Oid, Oid);
467:	_Bool IsImportableForeignTable(const char *, ImportForeignSchemaStmt *);
691:	Oid get_foreign_data_wrapper_oid(const char *, _Bool);
714:	Oid get_foreign_server_oid(const char *, _Bool);
570:	Datum pg_options_to_table(FunctionCallInfo);
644:	Datum postgresql_fdw_validator(FunctionCallInfo);
506:	static void deflist_to_tuplestore(ReturnSetInfo *, List *);
620:	static _Bool is_conninfo_option(const char *, Oid);

File foreigncmds.c:
678:	ObjectAddress AlterForeignDataWrapper(AlterFdwStmt *);
275:	ObjectAddress AlterForeignDataWrapperOwner(const char *, Oid);
313:	void AlterForeignDataWrapperOwner_oid(Oid, Oid);
978:	ObjectAddress AlterForeignServer(AlterForeignServerStmt *);
415:	ObjectAddress AlterForeignServerOwner(const char *, Oid);
450:	void AlterForeignServerOwner_oid(Oid, Oid);
1230:	ObjectAddress AlterUserMapping(AlterUserMappingStmt *);
562:	ObjectAddress CreateForeignDataWrapper(CreateFdwStmt *);
842:	ObjectAddress CreateForeignServer(CreateForeignServerStmt *);
1408:	void CreateForeignTable(CreateForeignTableStmt *, Oid);
1104:	ObjectAddress CreateUserMapping(CreateUserMappingStmt *);
1488:	void ImportForeignSchema(ImportForeignSchemaStmt *);
1328:	Oid RemoveUserMapping(DropUserMappingStmt *);
110:	Datum transformGenericOptions(Oid, Datum, List *, Oid);
205:	static void AlterForeignDataWrapperOwner_internal(Relation, HeapTuple, Oid);
338:	static void AlterForeignServerOwner_internal(Relation, HeapTuple, Oid);
1604:	static void import_error_callback(void *);
475:	static Oid lookup_fdw_handler_func(DefElem *);
499:	static Oid lookup_fdw_validator_func(DefElem *);
66:	static Datum optionListToArray(List *);
518:	static void parse_func_options(List *, _Bool *, Oid *, _Bool *, Oid *);
1079:	static void user_mapping_ddl_aclcheck(Oid, Oid, const char *);

File fork_process.c:
29:	pid_t fork_process(void);

File format_type.c:
60:	Datum format_type(FunctionCallInfo);
339:	char *format_type_be(Oid);
349:	char *format_type_be_qualified(Oid);
112:	char *format_type_extended(Oid, int32, bits16);
358:	char *format_type_with_typemod(Oid, int32);
443:	Datum oidvectortypes(FunctionCallInfo);
408:	int32 type_maximum_size(Oid, int32);
367:	static char *printTypmod(const char *, int32, Oid);

File formatting.c:
2081:	char *asc_initcap(const char *, size_t);
2035:	char *asc_tolower(const char *, size_t);
2058:	char *asc_toupper(const char *, size_t);
6478:	Datum float4_to_char(FunctionCallInfo);
6580:	Datum float8_to_char(FunctionCallInfo);
6278:	Datum int4_to_char(FunctionCallInfo);
6372:	Datum int8_to_char(FunctionCallInfo);
4159:	Datum interval_to_char(FunctionCallInfo);
6153:	Datum numeric_to_char(FunctionCallInfo);
6094:	Datum numeric_to_number(FunctionCallInfo);
4282:	Datum parse_datetime(text *, text *, Oid, _Bool, Oid *, int32 *, int *, _Bool *);
1886:	char *str_initcap(const char *, size_t, Oid);
1638:	char *str_tolower(const char *, size_t, Oid);
1762:	char *str_toupper(const char *, size_t, Oid);
4091:	Datum timestamp_to_char(FunctionCallInfo);
4122:	Datum timestamptz_to_char(FunctionCallInfo);
4236:	Datum to_date(FunctionCallInfo);
4193:	Datum to_timestamp(FunctionCallInfo);
3995:	static DCHCacheEntry *DCH_cache_fetch(const char *, _Bool);
3914:	static DCHCacheEntry *DCH_cache_getnew(const char *, _Bool);
3974:	static DCHCacheEntry *DCH_cache_search(const char *, _Bool);
3810:	static int DCH_datetime_type(FormatNode *, _Bool *);
3296:	static void DCH_from_char(FormatNode *, const char *, TmFromChar *, Oid, _Bool, _Bool *);
3794:	static void DCH_prevent_counter_overflow(void);
2654:	static void DCH_to_char(FormatNode *, _Bool, TmToChar *, char *, Oid);
1149:	static void NUMDesc_prepare(NUMDesc *, FormatNode *);
4934:	static FormatNode *NUM_cache(int, NUMDesc *, text *, _Bool *);
4906:	static NUMCacheEntry *NUM_cache_fetch(const char *);
4826:	static NUMCacheEntry *NUM_cache_getnew(const char *);
4885:	static NUMCacheEntry *NUM_cache_search(const char *);
5564:	static void NUM_eat_non_data_chars(NUMProc *, int, int);
5159:	static void NUM_numpart_from_char(NUMProc *, int, int);
5374:	static void NUM_numpart_to_char(NUMProc *, int);
5041:	static void NUM_prepare_locale(NUMProc *);
4814:	static void NUM_prevent_counter_overflow(void);
5577:	static char *NUM_processor(FormatNode *, NUMDesc *, char *, char *, int, int, int, _Bool, Oid);
2231:	static int adjust_partial_year_to_2020(int);
2130:	static char *asc_tolower_z(const char *);
2136:	static char *asc_toupper_z(const char *);
4022:	static text *datetime_to_char_body(TmToChar *, text *, _Bool, Oid);
4468:	static void do_to_timestamp(text *, text *, Oid, _Bool, struct pg_tm *, fsec_t *, int *, uint32 *, _Bool *);
4792:	static char *fill_str(char *, int, int);
2447:	static int from_char_parse_int(int *, const char **, FormatNode *, _Bool *);
2344:	static int from_char_parse_int_len(int *, const char **, const int, FormatNode *, _Bool *);
2605:	static int from_char_seq_search(int *, const char **, const char * const *, char **, Oid, FormatNode *, _Bool *);
2303:	static void from_char_set_int(int *, const int, const FormatNode *, _Bool *);
2276:	static void from_char_set_mode(TmFromChar *, const FromCharDateMode, _Bool *);
5123:	static char *get_last_relevant_decnum(char *);
1512:	static const char *get_th(char *, int);
1095:	static const KeyWord *index_seq_search(const char *, const KeyWord *, const int *);
4992:	static char *int_to_roman(int);
2198:	static _Bool is_next_separator(FormatNode *);
1135:	static _Bool is_separator_char(const char *);
1324:	static void parse_format(FormatNode *, const char *, const KeyWord *, const KeySuffix *, const int *, uint32, NUMDesc *);
2464:	static int seq_search_ascii(const char *, const char * const *, int *);
2521:	static int seq_search_localized(const char *, char **, int *, Oid);
2124:	static char *str_initcap_z(const char *, Oid);
1557:	static char *str_numth(char *, char *, int);
2112:	static char *str_tolower_z(const char *, Oid);
2118:	static char *str_toupper_z(const char *, Oid);
2255:	static int strspace_len(const char *);
1119:	static const KeySuffix *suff_search(const char *, const KeySuffix *, int);

File fortify_fail.c:
22:	void __GI___fortify_fail(const char *);

File forward.c:
79:	int __pthread_cond_broadcast(pthread_cond_t *);
74:	int __pthread_cond_broadcast_2_0(pthread_cond_2_0_t *);
89:	int __pthread_cond_destroy(pthread_cond_t *);
84:	int __pthread_cond_destroy_2_0(pthread_cond_2_0_t *);
99:	int __pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
94:	int __pthread_cond_init_2_0(pthread_cond_2_0_t *, const pthread_condattr_t *);
110:	int __pthread_cond_signal(pthread_cond_t *);
105:	int __pthread_cond_signal_2_0(pthread_cond_2_0_t *);
134:	int __pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *, const struct timespec *);
127:	int __pthread_cond_timedwait_2_0(pthread_cond_2_0_t *, pthread_mutex_t *, const struct timespec *);
121:	int __pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
115:	int __pthread_cond_wait_2_0(pthread_cond_2_0_t *, pthread_mutex_t *);
141:	void __pthread_exit(void *);
164:	int __pthread_setcancelstate(int, int *);
170:	void __pthread_unwind(__pthread_unwind_buf_t *);
59:	int pthread_attr_getschedpolicy(const pthread_attr_t *, int *);
64:	int pthread_attr_getscope(const pthread_attr_t *, int *);
61:	int pthread_attr_setschedpolicy(pthread_attr_t *, int);
66:	int pthread_attr_setscope(pthread_attr_t *, int);
70:	int pthread_condattr_destroy(pthread_condattr_t *);
71:	int pthread_condattr_init(pthread_condattr_t *);
146:	int pthread_getschedparam(pthread_t, int *, struct sched_param *);
154:	int pthread_mutex_destroy(pthread_mutex_t *);
156:	int pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
160:	int pthread_mutex_lock(pthread_mutex_t *);
162:	int pthread_mutex_unlock(pthread_mutex_t *);
168:	int pthread_setcanceltype(int, int *);
149:	int pthread_setschedparam(pthread_t, int, const struct sched_param *);

File fprintf.c:
26:	int __fprintf(FILE *, const char *, ...);

File fprintf_chk.c:
24:	int ___fprintf_chk(FILE *, int, const char *, ...);

File fputc.c:
31:	int fputc(int, FILE *);

File fputc_u.c:
33:	int __GI_fputc_unlocked(int, FILE *);

File fputwc.c:
31:	wint_t fputwc(wchar_t, FILE *);

File fputwc_u.c:
33:	wint_t fputwc_unlocked(wchar_t, FILE *);

File fread_chk.c:
31:	size_t __fread_chk(void * restrict, size_t, size_t, size_t, FILE * restrict);

File fread_u_chk.c:
31:	size_t __fread_unlocked_chk(void * restrict, size_t, size_t, size_t, FILE * restrict);

File freelist.c:
597:	void FreeAccessStrategy(BufferAccessStrategy);
542:	BufferAccessStrategy GetAccessStrategy(BufferAccessStrategyType);
364:	void StrategyFreeBuffer(BufferDesc *);
201:	BufferDesc *StrategyGetBuffer(BufferAccessStrategy, uint32 *);
475:	void StrategyInitialize(_Bool);
432:	void StrategyNotifyBgWriter(int);
686:	_Bool StrategyRejectBuffer(BufferAccessStrategy, BufferDesc *);
454:	Size StrategyShmemSize(void);
395:	int StrategySyncStart(uint32 *, uint32 *);
180:	_Bool have_free_buffer(void);
669:	static void AddBufferToRing(BufferAccessStrategy, BufferDesc *);
113:	static uint32 ClockSweepTick(void);
611:	static BufferDesc *GetBufferFromRing(BufferAccessStrategy, uint32 *);

File freelocale.c:
32:	void __freelocale(locale_t);

File freepage.c:
424:	char *FreePageManagerDump(FreePageManager *);
210:	_Bool FreePageManagerGet(FreePageManager *, Size, Size *);
183:	void FreePageManagerInitialize(FreePageManager *, char *);
379:	void FreePageManagerPut(FreePageManager *, Size, Size);
501:	static void FreePageBtreeAdjustAncestorKeys(FreePageManager *, FreePageBtree *);
580:	static Size FreePageBtreeCleanup(FreePageManager *);
695:	static void FreePageBtreeConsolidate(FreePageManager *, FreePageBtree *);
774:	static FreePageBtree *FreePageBtreeFindLeftSibling(char *, FreePageBtree *);
819:	static FreePageBtree *FreePageBtreeFindRightSibling(char *, FreePageBtree *);
863:	static Size FreePageBtreeFirstKey(FreePageBtree *);
880:	static FreePageBtree *FreePageBtreeGetRecycled(FreePageManager *);
900:	static void FreePageBtreeInsertInternal(char *, FreePageBtree *, Size, Size, FreePageBtree *);
917:	static void FreePageBtreeInsertLeaf(FreePageBtree *, Size, Size, Size);
934:	static void FreePageBtreeRecycle(FreePageManager *, Size);
955:	static void FreePageBtreeRemove(FreePageManager *, FreePageBtree *, Size);
987:	static void FreePageBtreeRemovePage(FreePageManager *, FreePageBtree *);
1064:	static void FreePageBtreeSearch(FreePageManager *, Size, FreePageBtreeSearchResult *);
1140:	static Size FreePageBtreeSearchInternal(FreePageBtree *, Size);
1170:	static Size FreePageBtreeSearchLeaf(FreePageBtree *, Size);
1201:	static FreePageBtree *FreePageBtreeSplitPage(FreePageManager *, FreePageBtree *);
1232:	static void FreePageBtreeUpdateParentPointers(char *, FreePageBtree *);
1250:	static void FreePageManagerDumpBtree(FreePageManager *, FreePageBtree *, FreePageBtree *, int, StringInfo);
1296:	static void FreePageManagerDumpSpans(FreePageManager *, FreePageSpanLeader *, Size, StringInfo);
1319:	static _Bool FreePageManagerGetInternal(FreePageManager *, Size, Size *);
324:	static Size FreePageManagerLargestContiguous(FreePageManager *);
1476:	static Size FreePageManagerPutInternal(FreePageManager *, Size, Size, _Bool);
366:	static void FreePageManagerUpdateLargest(FreePageManager *);
1843:	static void FreePagePopSpanLeader(FreePageManager *, Size);
1871:	static void FreePagePushSpanLeader(FreePageManager *, Size, Size);

File freespace.c:
261:	BlockNumber FreeSpaceMapPrepareTruncateRel(Relation, BlockNumber);
333:	void FreeSpaceMapVacuum(Relation);
352:	void FreeSpaceMapVacuumRange(Relation, BlockNumber, BlockNumber);
132:	BlockNumber GetPageWithFreeSpace(Relation, Size);
230:	Size GetRecordedFreeSpace(Relation, BlockNumber);
149:	BlockNumber RecordAndGetPageWithFreeSpace(Relation, BlockNumber, Size, Size);
181:	void RecordPageWithFreeSpace(Relation, BlockNumber, Size);
198:	void XLogRecordPageWithFreeSpace(RelFileNode, BlockNumber, Size);
606:	static void fsm_extend(Relation, BlockNumber);
510:	static FSMAddress fsm_get_child(FSMAddress, uint16);
481:	static BlockNumber fsm_get_heap_blk(FSMAddress, uint16);
466:	static FSMAddress fsm_get_location(BlockNumber, uint16 *);
492:	static FSMAddress fsm_get_parent(FSMAddress, uint16 *);
430:	static BlockNumber fsm_logical_to_physical(FSMAddress);
529:	static Buffer fsm_readbuf(Relation, FSMAddress, _Bool);
700:	static BlockNumber fsm_search(Relation, uint8);
668:	static int fsm_set_and_search(Relation, FSMAddress, uint16, uint8, uint8);
367:	static uint8 fsm_space_avail_to_cat(Size);
393:	static Size fsm_space_cat_to_avail(uint8);
407:	static uint8 fsm_space_needed_to_cat(Size);
798:	static uint8 fsm_vacuum_page(Relation, FSMAddress, BlockNumber, BlockNumber, _Bool *);

File freopen.c:
37:	FILE *freopen(const char *, const char *, FILE *);

File freopen64.c:
36:	FILE *freopen64(const char *, const char *, FILE *);

File fscanf.c:
30:	int __fscanf(FILE *, const char *, ...);

File fseek.c:
31:	int __GI_fseek(FILE *, long, int);

File fseeko.c:
35:	int __fseeko(FILE *, off_t, int);

File fsmpage.c:
122:	uint8 fsm_get_avail(Page, int);
138:	uint8 fsm_get_max_avail(Page);
342:	_Bool fsm_rebuild_page(Page);
158:	int fsm_search_avail(Buffer, uint8, _Bool, _Bool);
63:	_Bool fsm_set_avail(Page, int, uint8);
313:	_Bool fsm_truncate_avail(Page, int);
37:	static int rightneighbor(int);

File fstab.c:
96:	void endfsent(void);
50:	struct fstab *getfsent(void);
80:	struct fstab *getfsfile(const char *);
64:	struct fstab *getfsspec(const char *);
43:	int setfsent(void);
154:	static struct fstab *fstab_convert(struct fstab_state *);
180:	static void fstab_free(void);

File ftello.c:
37:	off_t __GI___ftello(FILE *);

File ftime.c:
23:	int ftime(struct timeb *);

File ftok.c:
23:	key_t ftok(const char *, int);

File funcapi.c:
1806:	TupleDesc RelationNameGetTupleDesc(const char *);
1839:	TupleDesc TypeGetTupleDesc(Oid, List *);
1686:	TupleDesc build_function_result_tupdesc_d(char, Datum, Datum, Datum);
1636:	TupleDesc build_function_result_tupdesc_t(HeapTuple);
151:	void end_MultiFuncCall(FunctionCallInfo, FuncCallContext *);
1941:	int extract_variadic_args(FunctionCallInfo, int, _Bool, Datum **, Oid **, _Bool **);
207:	TypeFuncClass get_call_result_type(FunctionCallInfo, Oid *, TupleDesc *);
474:	TupleDesc get_expr_result_tupdesc(Node *, _Bool);
223:	TypeFuncClass get_expr_result_type(Node *, Oid *, TupleDesc *);
1302:	int get_func_arg_info(HeapTuple, Oid **, char ***, char **);
1446:	int get_func_input_arg_names(Datum, Datum, char ***);
1532:	char *get_func_result_name(Oid);
334:	TypeFuncClass get_func_result_type(Oid, Oid *, TupleDesc *);
1399:	int get_func_trftypes(HeapTuple, Oid **);
64:	FuncCallContext *init_MultiFuncCall(FunctionCallInfo);
139:	FuncCallContext *per_MultiFuncCall(FunctionCallInfo);
987:	_Bool resolve_polymorphic_argtypes(int, Oid *, char *, Node *);
1251:	static TypeFuncClass get_type_func_class(Oid, Oid *);
354:	static TypeFuncClass internal_get_result_type(Oid, Node *, ReturnSetInfo *, Oid *, TupleDesc *);
578:	static void resolve_anyarray_from_others(polymorphic_actuals *);
512:	static void resolve_anyelement_from_others(polymorphic_actuals *);
633:	static void resolve_anymultirange_from_others(polymorphic_actuals *);
604:	static void resolve_anyrange_from_others(polymorphic_actuals *);
667:	static _Bool resolve_polymorphic_tupdesc(TupleDesc, oidvector *, Node *);
169:	static void shutdown_MultiFuncCall(Datum);

File functioncmds.c:
1372:	ObjectAddress AlterFunction(ParseState *, AlterFunctionStmt *);
2378:	TupleDesc CallStmtResultDesc(CallStmt *);
1546:	ObjectAddress CreateCast(CreateCastStmt *);
1039:	ObjectAddress CreateFunction(ParseState *, CreateFunctionStmt *);
1820:	ObjectAddress CreateTransform(CreateTransformStmt *);
2201:	void ExecuteCallStmt(CallStmt *, ParamListInfo, _Bool, DestReceiver *);
2075:	void ExecuteDoStmt(DoStmt *, _Bool);
2052:	void IsThereFunctionInNamespace(const char *, int, oidvector *, Oid);
1324:	void RemoveFunctionById(Oid);
2028:	Oid get_transform_oid(Oid, Oid, _Bool);
189:	void interpret_function_parameter_list(ParseState *, List *, Oid, ObjectType, oidvector **, List **, ArrayType **, ArrayType **, ArrayType **, List **, List **, Oid *, Oid *);
1790:	static void check_transform_function(Form_pg_proc);
509:	static _Bool compute_common_attribute(ParseState *, _Bool, DefElem *, DefElem **, DefElem **, DefElem **, DefElem **, List **, DefElem **, DefElem **, DefElem **, DefElem **);
730:	static void compute_function_attributes(ParseState *, _Bool, List *, List **, char **, Node **, _Bool *, char *, _Bool *, _Bool *, _Bool *, ArrayType **, float4 *, float4 *, Oid *, char *);
93:	static void compute_return_type(TypeName *, Oid, Oid *, _Bool *);
879:	static void interpret_AS_clause(Oid, const char *, char *, List *, Node *, List *, List *, char **, char **, Node **, const char *);
636:	static char interpret_func_parallel(DefElem *);
686:	static Oid interpret_func_support(DefElem *);
618:	static char interpret_func_volatility(DefElem *);
661:	static ArrayType *update_proconfig_value(ArrayType *, List *);

File functions.c:
2061:	DestReceiver *CreateSQLFunctionDestReceiver(void);
1614:	_Bool check_sql_fn_retval(List *, Oid, TupleDesc, _Bool, List **);
1539:	void check_sql_fn_statements(List *);
1034:	Datum fmgr_sql(FunctionCallInfo);
176:	SQLFunctionParseInfoPtr prepare_sql_fn_parse_info(HeapTuple, Node *, Oid);
265:	void sql_fn_parser_setup(struct ParseState *, SQLFunctionParseInfoPtr);
1493:	static void ShutdownSQLFunction(Datum);
1995:	static _Bool coerce_fn_result_column(TargetEntry *, Oid, int32, _Bool, List **, _Bool *);
466:	static List *init_execution_state(List *, SQLFunctionCachePtr, _Bool);
584:	static void init_sql_fcache(FunctionCallInfo, Oid, _Bool);
916:	static void postquel_end(execution_state *);
991:	static Datum postquel_get_single_result(TupleTableSlot *, FunctionCallInfo, SQLFunctionCachePtr, MemoryContext);
881:	static _Bool postquel_getnext(execution_state *, SQLFunctionCachePtr);
819:	static void postquel_start(execution_state *, SQLFunctionCachePtr);
936:	static void postquel_sub_params(SQLFunctionCachePtr, FunctionCallInfo);
1411:	static void sql_exec_error_callback(void *);
412:	static Node *sql_fn_make_param(SQLFunctionParseInfoPtr, int, int);
396:	static Node *sql_fn_param_ref(ParseState *, ParamRef *);
278:	static Node *sql_fn_post_column_ref(ParseState *, ColumnRef *, Node *);
442:	static Node *sql_fn_resolve_param_name(SQLFunctionParseInfoPtr, const char *, int);
2115:	static void sqlfunction_destroy(DestReceiver *);
2089:	static _Bool sqlfunction_receive(TupleTableSlot *, DestReceiver *);
2106:	static void sqlfunction_shutdown(DestReceiver *);
2080:	static void sqlfunction_startup(DestReceiver *, int, TupleDesc);

File fwide.c:
32:	int fwide(FILE *, int);

File fwprintf.c:
27:	int __fwprintf(FILE *, const wchar_t *, ...);

File fwprintf_chk.c:
24:	int __fwprintf_chk(FILE *, int, const wchar_t *, ...);

File fwscanf.c:
31:	int __fwscanf(FILE *, const wchar_t *, ...);

File fxprintf.c:
78:	int __fxprintf(FILE *, const char *, ...);
88:	int __fxprintf_nocancel(FILE *, const char *, ...);
66:	int __vfxprintf(FILE *, const char *, struct __va_list_tag *, unsigned int);
27:	static int locked_vfxprintf(FILE *, const char *, struct __va_list_tag *, unsigned int);

File gconv.c:
31:	int __gconv(__gconv_t, const unsigned char **, const unsigned char *, unsigned char **, unsigned char *, size_t *);

File gconv_builtin.c:
62:	void __gconv_get_builtin_trans(const char *, struct __gconv_step *);

File gconv_cache.c:
227:	int __gconv_compare_alias_cache(const char *, const char *, int *);
41:	void *__gconv_get_cache(void);
48:	int __gconv_load_cache(void);
246:	int __gconv_lookup_cache(const char *, const char *, struct __gconv_step **, size_t *, int);
447:	void __gconv_release_cache(struct __gconv_step *, size_t);
182:	static int find_module(const char *, const char *, struct __gconv_step *);
144:	static int find_module_idx(const char *, size_t *);
457:	static void free_mem(void);

File gconv_charset.c:
164:	struct gconv_spec *__GI___gconv_create_spec(struct gconv_spec *, const char *, const char *);
222:	void __GI___gconv_destroy_spec(struct gconv_spec *);
73:	static void gconv_parse_code(struct gconv_parsed_code *);

File gconv_close.c:
26:	int __gconv_close(__gconv_t);

File gconv_conf.c:
616:	void __gconv_load_conf(void);
432:	static void __gconv_get_path(void);
538:	static void __gconv_read_conf(void);
250:	static void add_module(char *, const char *, size_t, int, size_t *, void **);
623:	static void free_mem(void);
192:	static void insert_module(struct gconv_module *, int);

File gconv_db.c:
61:	int __gconv_alias_compare(const void *, const void *);
784:	int __gconv_close_transform(struct __gconv_step *, size_t);
703:	int __gconv_compare_alias(const char *, const char *);
719:	int __gconv_find_transform(const char *, const char *, struct __gconv_step **, size_t *, int);
53:	void *__gconv_get_alias_db(void);
47:	struct gconv_module *__gconv_get_modules_db(void);
205:	void __gconv_release_step(struct __gconv_step *);
107:	static int derivation_compare(const void *, const void *);
428:	static int find_derivation(const char *, const char *, const char *, const char *, struct __gconv_step **, size_t *);
174:	static void free_derivation(void *);
831:	static void free_mem(void);
813:	static void free_modules_db(struct gconv_module *);

File gconv_dl.c:
67:	struct __gconv_loaded_object *__gconv_find_shlib(const char *);
180:	void __gconv_release_shlib(struct __gconv_loaded_object *);
191:	static void do_release_all(void *);
153:	static void do_release_shlib(const void *, VISIT, void *);
202:	static void free_mem(void);
54:	static int known_compare(const void *, const void *);

File gconv_open.c:
34:	int __GI___gconv_open(struct gconv_spec *, __gconv_t *, int);

File gconv_simple.c:
49:	wint_t __gconv_btwoc_ascii(struct __gconv_step *, unsigned char);

File gconv_trans.c:
33:	int __GI___gconv_transliterate(struct __gconv_step *, struct __gconv_step_data *, const unsigned char *, const unsigned char **, const unsigned char *, unsigned char **, size_t *);

File genam.c:
177:	char *BuildIndexValueDescription(Relation, Datum *, _Bool *);
145:	void IndexScanEnd(IndexScanDesc);
81:	IndexScanDesc RelationGetIndexScan(Relation, int, int);
293:	TransactionId index_compute_xid_horizon_for_tuples(Relation, Relation, Buffer, OffsetNumber *, int);
383:	SysScanDesc systable_beginscan(Relation, Oid, _Bool, Snapshot, int, ScanKey);
642:	SysScanDesc systable_beginscan_ordered(Relation, Relation, Snapshot, int, ScanKey);
595:	void systable_endscan(SysScanDesc);
732:	void systable_endscan_ordered(SysScanDesc);
502:	HeapTuple systable_getnext(SysScanDesc);
707:	HeapTuple systable_getnext_ordered(SysScanDesc, ScanDirection);
561:	_Bool systable_recheck_tuple(SysScanDesc, HeapTuple);
479:	static void HandleConcurrentAbort();

File generation.c:
197:	MemoryContext GenerationContextCreate(MemoryContext, const char *, Size);
326:	static void *GenerationAlloc(MemoryContext, Size);
304:	static void GenerationDelete(MemoryContext);
462:	static void GenerationFree(MemoryContext, void *);
639:	static Size GenerationGetChunkSpace(MemoryContext, void *);
655:	static _Bool GenerationIsEmpty(MemoryContext);
523:	static void *GenerationRealloc(MemoryContext, void *, Size);
267:	static void GenerationReset(MemoryContext);
675:	static void GenerationStats(MemoryContext, MemoryStatsPrintFunc, void *, MemoryContextCounters *, _Bool);

File generic_xlog.c:
444:	void GenericXLogAbort(GenericXLogState *);
333:	XLogRecPtr GenericXLogFinish(GenericXLogState *);
295:	Page GenericXLogRegisterBuffer(GenericXLogState *, Buffer, int);
267:	GenericXLogState *GenericXLogStart(Relation);
539:	void generic_mask(char *, BlockNumber);
478:	void generic_redo(XLogReaderState *);
453:	static void applyPageRedo(Page, const char *, Size);
226:	static void computeDelta(PageData *, Page, Page);
119:	static void computeRegionDelta(PageData *, const char *, const char *, int, int, int, int);
88:	static void writeFragment(PageData *, OffsetNumber, OffsetNumber, const char *);

File genericdesc.c:
25:	void generic_desc(StringInfo, XLogReaderState *);
53:	const char *generic_identify(uint8);

File genfile.c:
719:	Datum pg_ls_archive_statusdir(FunctionCallInfo);
479:	Datum pg_ls_dir(FunctionCallInfo);
564:	Datum pg_ls_dir_1arg(FunctionCallInfo);
665:	Datum pg_ls_logdir(FunctionCallInfo);
710:	Datum pg_ls_tmpdir_1arg(FunctionCallInfo);
700:	Datum pg_ls_tmpdir_noargs(FunctionCallInfo);
672:	Datum pg_ls_waldir(FunctionCallInfo);
324:	Datum pg_read_binary_file(FunctionCallInfo);
385:	Datum pg_read_binary_file_all(FunctionCallInfo);
379:	Datum pg_read_binary_file_off_len(FunctionCallInfo);
241:	Datum pg_read_file(FunctionCallInfo);
373:	Datum pg_read_file_all(FunctionCallInfo);
367:	Datum pg_read_file_off_len(FunctionCallInfo);
288:	Datum pg_read_file_v2(FunctionCallInfo);
394:	Datum pg_stat_file(FunctionCallInfo);
470:	Datum pg_stat_file_1arg(FunctionCallInfo);
53:	static char *convert_and_check_filename(text *);
576:	static Datum pg_ls_dir_files(FunctionCallInfo, const char *, _Bool);
681:	static Datum pg_ls_tmpdir(FunctionCallInfo, Oid);
108:	static bytea *read_binary_file(const char *, int64, int64, _Bool);
216:	static text *read_text_file(const char *, int64, int64, _Bool);

File genops.c:
862:	int _IO_cleanup(void);
1060:	void _IO_default_imbue(FILE *, void *);
1042:	ssize_t _IO_default_read(FILE *, void *, ssize_t);
1030:	off64_t _IO_default_seek(FILE *, off64_t, int);
628:	off64_t _IO_default_seekoff(FILE *, off64_t, int, int);
471:	off64_t _IO_default_seekpos(FILE *, off64_t, int);
451:	FILE *_IO_default_setbuf(FILE *, char *, ssize_t);
1036:	int _IO_default_stat(FILE *, void *);
591:	int _IO_default_sync(FILE *);
354:	int _IO_default_underflow(FILE *);
1048:	ssize_t _IO_default_write(FILE *, const void *, ssize_t);
685:	int _IO_flush_all_lockp(int);
497:	void _IO_init(FILE *, int);
491:	void _IO_init_internal(FILE *, int);
882:	void _IO_init_marker(struct _IO_marker *, FILE *);
114:	ssize_t _IO_least_marker(FILE *, char *);
926:	int _IO_marker_delta(struct _IO_marker *);
919:	int _IO_marker_difference(struct _IO_marker *, struct _IO_marker *);
561:	void _IO_no_init(FILE *, int, int, struct _IO_wide_data *, const struct _IO_jump_t *);
530:	void _IO_old_init(FILE *, int);
898:	void _IO_remove_marker(struct _IO_marker *);
939:	int _IO_seekmark(FILE *, struct _IO_marker *, int);
655:	int _IO_sungetc(FILE *);
146:	void _IO_switch_to_backup_area(FILE *);
127:	void _IO_switch_to_main_get_area(FILE *);
674:	unsigned int __GI__IO_adjust_column(unsigned int, const char *, int);
477:	int __GI__IO_default_doallocate(FILE *);
600:	void __GI__IO_default_finish(FILE *, int);
973:	int __GI__IO_default_pbackfail(FILE *, int);
360:	int __GI__IO_default_uflow(FILE *);
416:	size_t __GI__IO_default_xsgetn(FILE *, void *, size_t);
370:	size_t __GI__IO_default_xsputn(FILE *, const void *, size_t);
342:	void __GI__IO_doallocbuf(FILE *);
517:	void __GI__IO_enable_locks(void);
724:	int __GI__IO_flush_all(void);
732:	void __GI__IO_flush_all_linebuffered(void);
186:	void __GI__IO_free_backup_area(FILE *);
1065:	_IO_ITER __GI__IO_iter_begin(void);
1072:	_IO_ITER __GI__IO_iter_end(void);
1086:	FILE *__GI__IO_iter_file(_IO_ITER);
1079:	_IO_ITER __GI__IO_iter_next(_IO_ITER);
86:	void __GI__IO_link_in(struct _IO_FILE_plus *);
1093:	void __GI__IO_list_lock(void);
1111:	void __GI__IO_list_resetlock(void);
1102:	void __GI__IO_list_unlock(void);
328:	void __GI__IO_setb(FILE *, char *, char *, int);
408:	size_t __GI__IO_sgetn(FILE *, void *, size_t);
634:	int __GI__IO_sputbackc(FILE *, int);
163:	int __GI__IO_switch_to_get_mode(FILE *);
52:	void __GI__IO_un_link(struct _IO_FILE_plus *);
959:	void __GI__IO_unsave_markers(FILE *);
198:	int __GI___overflow(FILE *, int);
298:	int __GI___uflow(FILE *);
268:	int __GI___underflow(FILE *);
848:	static void buffer_free(void);
43:	static void flush_cleanup(void *);
208:	static int save_for_backup(FILE *, char *);

File geo_ops.c:
646:	Datum box_above(FunctionCallInfo);
719:	Datum box_above_eq(FunctionCallInfo);
4232:	Datum box_add(FunctionCallInfo);
784:	Datum box_area(FunctionCallInfo);
623:	Datum box_below(FunctionCallInfo);
710:	Datum box_below_eq(FunctionCallInfo);
837:	Datum box_center(FunctionCallInfo);
5218:	Datum box_circle(FunctionCallInfo);
680:	Datum box_contain(FunctionCallInfo);
3207:	Datum box_contain_pt(FunctionCallInfo);
669:	Datum box_contained(FunctionCallInfo);
921:	Datum box_diagonal(FunctionCallInfo);
820:	Datum box_distance(FunctionCallInfo);
4281:	Datum box_div(FunctionCallInfo);
750:	Datum box_eq(FunctionCallInfo);
768:	Datum box_ge(FunctionCallInfo);
741:	Datum box_gt(FunctionCallInfo);
808:	Datum box_height(FunctionCallInfo);
413:	Datum box_in(FunctionCallInfo);
896:	Datum box_intersect(FunctionCallInfo);
759:	Datum box_le(FunctionCallInfo);
571:	Datum box_left(FunctionCallInfo);
732:	Datum box_lt(FunctionCallInfo);
4262:	Datum box_mul(FunctionCallInfo);
443:	Datum box_out(FunctionCallInfo);
658:	Datum box_overabove(FunctionCallInfo);
635:	Datum box_overbelow(FunctionCallInfo);
551:	Datum box_overlap(FunctionCallInfo);
586:	Datum box_overleft(FunctionCallInfo);
612:	Datum box_overright(FunctionCallInfo);
4550:	Datum box_poly(FunctionCallInfo);
454:	Datum box_recv(FunctionCallInfo);
597:	Datum box_right(FunctionCallInfo);
539:	Datum box_same(FunctionCallInfo);
489:	Datum box_send(FunctionCallInfo);
4247:	Datum box_sub(FunctionCallInfo);
796:	Datum box_width(FunctionCallInfo);
4322:	Datum boxes_bound_box(FunctionCallInfo);
4873:	Datum circle_above(FunctionCallInfo);
4975:	Datum circle_add_pt(FunctionCallInfo);
5042:	Datum circle_area(FunctionCallInfo);
4861:	Datum circle_below(FunctionCallInfo);
5196:	Datum circle_box(FunctionCallInfo);
5153:	Datum circle_center(FunctionCallInfo);
4848:	Datum circle_contain(FunctionCallInfo);
5092:	Datum circle_contain_pt(FunctionCallInfo);
4836:	Datum circle_contained(FunctionCallInfo);
5053:	Datum circle_diameter(FunctionCallInfo);
5076:	Datum circle_distance(FunctionCallInfo);
5024:	Datum circle_div_pt(FunctionCallInfo);
4913:	Datum circle_eq(FunctionCallInfo);
4958:	Datum circle_ge(FunctionCallInfo);
4940:	Datum circle_gt(FunctionCallInfo);
4626:	Datum circle_in(FunctionCallInfo);
4949:	Datum circle_le(FunctionCallInfo);
4799:	Datum circle_left(FunctionCallInfo);
4931:	Datum circle_lt(FunctionCallInfo);
5009:	Datum circle_mul_pt(FunctionCallInfo);
4922:	Datum circle_ne(FunctionCallInfo);
4691:	Datum circle_out(FunctionCallInfo);
4899:	Datum circle_overabove(FunctionCallInfo);
4886:	Datum circle_overbelow(FunctionCallInfo);
4774:	Datum circle_overlap(FunctionCallInfo);
4787:	Datum circle_overleft(FunctionCallInfo);
4824:	Datum circle_overright(FunctionCallInfo);
5235:	Datum circle_poly(FunctionCallInfo);
5064:	Datum circle_radius(FunctionCallInfo);
4713:	Datum circle_recv(FunctionCallInfo);
4811:	Datum circle_right(FunctionCallInfo);
4761:	Datum circle_same(FunctionCallInfo);
4737:	Datum circle_send(FunctionCallInfo);
4990:	Datum circle_sub_pt(FunctionCallInfo);
3124:	Datum close_lb(FunctionCallInfo);
3033:	Datum close_ls(FunctionCallInfo);
2856:	Datum close_lseg(FunctionCallInfo);
2936:	Datum close_pb(FunctionCallInfo);
2753:	Datum close_pl(FunctionCallInfo);
2794:	Datum close_ps(FunctionCallInfo);
3108:	Datum close_sb(FunctionCallInfo);
2961:	Datum close_sl(FunctionCallInfo);
4097:	Datum construct_point(FunctionCallInfo);
5180:	Datum cr_circle(FunctionCallInfo);
2558:	Datum dist_bl(FunctionCallInfo);
2479:	Datum dist_bp(FunctionCallInfo);
2527:	Datum dist_bs(FunctionCallInfo);
5137:	Datum dist_cpoint(FunctionCallInfo);
2591:	Datum dist_cpoly(FunctionCallInfo);
2539:	Datum dist_lb(FunctionCallInfo);
2367:	Datum dist_lp(FunctionCallInfo);
2503:	Datum dist_ls(FunctionCallInfo);
2455:	Datum dist_pathp(FunctionCallInfo);
2467:	Datum dist_pb(FunctionCallInfo);
5119:	Datum dist_pc(FunctionCallInfo);
2355:	Datum dist_pl(FunctionCallInfo);
2603:	Datum dist_polyc(FunctionCallInfo);
2624:	Datum dist_polyp(FunctionCallInfo);
2443:	Datum dist_ppath(FunctionCallInfo);
2615:	Datum dist_ppoly(FunctionCallInfo);
2379:	Datum dist_ps(FunctionCallInfo);
2515:	Datum dist_sb(FunctionCallInfo);
2491:	Datum dist_sl(FunctionCallInfo);
2391:	Datum dist_sp(FunctionCallInfo);
3389:	Datum inter_lb(FunctionCallInfo);
3376:	Datum inter_sb(FunctionCallInfo);
3299:	Datum inter_sl(FunctionCallInfo);
1088:	Datum line_construct_pp(FunctionCallInfo);
1234:	Datum line_distance(FunctionCallInfo);
1167:	Datum line_eq(FunctionCallInfo);
1155:	Datum line_horizontal(FunctionCallInfo);
958:	Datum line_in(FunctionCallInfo);
1259:	Datum line_interpt(FunctionCallInfo);
1110:	Datum line_intersect(FunctionCallInfo);
996:	Datum line_out(FunctionCallInfo);
1119:	Datum line_parallel(FunctionCallInfo);
1128:	Datum line_perp(FunctionCallInfo);
1011:	Datum line_recv(FunctionCallInfo);
1034:	Datum line_send(FunctionCallInfo);
1147:	Datum line_vertical(FunctionCallInfo);
2281:	Datum lseg_center(FunctionCallInfo);
2094:	Datum lseg_construct(FunctionCallInfo);
2271:	Datum lseg_distance(FunctionCallInfo);
2201:	Datum lseg_eq(FunctionCallInfo);
2251:	Datum lseg_ge(FunctionCallInfo);
2241:	Datum lseg_gt(FunctionCallInfo);
2192:	Datum lseg_horizontal(FunctionCallInfo);
2034:	Datum lseg_in(FunctionCallInfo);
2326:	Datum lseg_interpt(FunctionCallInfo);
2153:	Datum lseg_intersect(FunctionCallInfo);
2231:	Datum lseg_le(FunctionCallInfo);
2137:	Datum lseg_length(FunctionCallInfo);
2221:	Datum lseg_lt(FunctionCallInfo);
2211:	Datum lseg_ne(FunctionCallInfo);
2046:	Datum lseg_out(FunctionCallInfo);
2163:	Datum lseg_parallel(FunctionCallInfo);
2175:	Datum lseg_perp(FunctionCallInfo);
2057:	Datum lseg_recv(FunctionCallInfo);
2076:	Datum lseg_send(FunctionCallInfo);
2184:	Datum lseg_vertical(FunctionCallInfo);
3198:	Datum on_pb(FunctionCallInfo);
3156:	Datum on_pl(FunctionCallInfo);
3227:	Datum on_ppath(FunctionCallInfo);
3178:	Datum on_ps(FunctionCallInfo);
3285:	Datum on_sb(FunctionCallInfo);
3262:	Datum on_sl(FunctionCallInfo);
4349:	Datum path_add(FunctionCallInfo);
4397:	Datum path_add_pt(FunctionCallInfo);
1353:	Datum path_area(FunctionCallInfo);
4453:	Datum path_center(FunctionCallInfo);
1597:	Datum path_close(FunctionCallInfo);
1700:	Datum path_distance(FunctionCallInfo);
4439:	Datum path_div_pt(FunctionCallInfo);
1375:	Datum path_in(FunctionCallInfo);
1623:	Datum path_inter(FunctionCallInfo);
1572:	Datum path_isclosed(FunctionCallInfo);
1580:	Datum path_isopen(FunctionCallInfo);
1762:	Datum path_length(FunctionCallInfo);
4426:	Datum path_mul_pt(FunctionCallInfo);
1541:	Datum path_n_eq(FunctionCallInfo);
1559:	Datum path_n_ge(FunctionCallInfo);
1532:	Datum path_n_gt(FunctionCallInfo);
1550:	Datum path_n_le(FunctionCallInfo);
1523:	Datum path_n_lt(FunctionCallInfo);
1588:	Datum path_npoints(FunctionCallInfo);
1607:	Datum path_open(FunctionCallInfo);
1444:	Datum path_out(FunctionCallInfo);
4467:	Datum path_poly(FunctionCallInfo);
1458:	Datum path_recv(FunctionCallInfo);
1496:	Datum path_send(FunctionCallInfo);
4410:	Datum path_sub_pt(FunctionCallInfo);
5529:	float8 pg_hypot(float8, float8);
1888:	Datum point_above(FunctionCallInfo);
4120:	Datum point_add(FunctionCallInfo);
1897:	Datum point_below(FunctionCallInfo);
4303:	Datum point_box(FunctionCallInfo);
1962:	Datum point_distance(FunctionCallInfo);
4197:	Datum point_div(FunctionCallInfo);
1924:	Datum point_eq(FunctionCallInfo);
1915:	Datum point_horiz(FunctionCallInfo);
1801:	Datum point_in(FunctionCallInfo);
1870:	Datum point_left(FunctionCallInfo);
4168:	Datum point_mul(FunctionCallInfo);
1933:	Datum point_ne(FunctionCallInfo);
1811:	Datum point_out(FunctionCallInfo);
1822:	Datum point_recv(FunctionCallInfo);
1879:	Datum point_right(FunctionCallInfo);
1837:	Datum point_send(FunctionCallInfo);
1977:	Datum point_slope(FunctionCallInfo);
4143:	Datum point_sub(FunctionCallInfo);
1906:	Datum point_vert(FunctionCallInfo);
4218:	Datum points_box(FunctionCallInfo);
3729:	Datum poly_above(FunctionCallInfo);
3683:	Datum poly_below(FunctionCallInfo);
4534:	Datum poly_box(FunctionCallInfo);
4518:	Datum poly_center(FunctionCallInfo);
5317:	Datum poly_circle(FunctionCallInfo);
4014:	Datum poly_contain(FunctionCallInfo);
4056:	Datum poly_contain_pt(FunctionCallInfo);
4036:	Datum poly_contained(FunctionCallInfo);
4075:	Datum poly_distance(FunctionCallInfo);
3476:	Datum poly_in(FunctionCallInfo);
3591:	Datum poly_left(FunctionCallInfo);
4509:	Datum poly_npoints(FunctionCallInfo);
3517:	Datum poly_out(FunctionCallInfo);
3752:	Datum poly_overabove(FunctionCallInfo);
3706:	Datum poly_overbelow(FunctionCallInfo);
3802:	Datum poly_overlap(FunctionCallInfo);
3614:	Datum poly_overleft(FunctionCallInfo);
3660:	Datum poly_overright(FunctionCallInfo);
4579:	Datum poly_path(FunctionCallInfo);
3533:	Datum poly_recv(FunctionCallInfo);
3637:	Datum poly_right(FunctionCallInfo);
3778:	Datum poly_same(FunctionCallInfo);
3568:	Datum poly_send(FunctionCallInfo);
5104:	Datum pt_contained_circle(FunctionCallInfo);
4065:	Datum pt_contained_poly(FunctionCallInfo);
851:	static float8 box_ar(BOX *);
3058:	static float8 box_closept_lseg(Point *, BOX *, LSEG *);
2881:	static float8 box_closept_point(Point *, BOX *, Point *);
860:	static void box_cn(Point *, BOX *);
506:	static void box_construct(BOX *, Point *, Point *);
692:	static _Bool box_contain_box(BOX *, BOX *);
3278:	static _Bool box_contain_lseg(BOX *, LSEG *);
3191:	static _Bool box_contain_point(BOX *, Point *);
881:	static float8 box_ht(BOX *);
3324:	static _Bool box_interpt_lseg(Point *, BOX *, LSEG *);
560:	static _Bool box_ov(BOX *, BOX *);
871:	static float8 box_wd(BOX *);
5169:	static float8 circle_ar(CIRCLE *);
2574:	static float8 dist_cpoly_internal(CIRCLE *, POLYGON *);
2400:	static float8 dist_ppath_internal(Point *, PATH *);
2633:	static float8 dist_ppoly_internal(Point *, POLYGON *);
2727:	static float8 line_closept_point(Point *, LINE *, Point *);
1056:	static void line_construct(LINE *, Point *, float8);
3148:	static _Bool line_contain_point(LINE *, Point *);
938:	static _Bool line_decode(char *, const char *, LINE *);
1287:	static _Bool line_interpt_line(Point *, LINE *, LINE *);
1220:	static float8 line_invsl(LINE *);
1206:	static float8 line_sl(LINE *);
3005:	static float8 lseg_closept_line(Point *, LSEG *, LINE *);
2813:	static float8 lseg_closept_lseg(Point *, LSEG *, LSEG *);
2775:	static float8 lseg_closept_point(Point *, LSEG *, Point *);
3170:	static _Bool lseg_contain_point(LSEG *, Point *);
5407:	static int lseg_crossing(float8, float8, float8, float8);
3914:	static _Bool lseg_inside_poly(Point *, Point *, POLYGON *, int);
2678:	static _Bool lseg_interpt_line(Point *, LSEG *, LINE *);
2303:	static _Bool lseg_interpt_lseg(Point *, LSEG *, LSEG *);
2130:	static float8 lseg_invsl(LSEG *);
2120:	static float8 lseg_sl(LSEG *);
3437:	static void make_bound_box(POLYGON *);
383:	static int pair_count(char *, char);
205:	static void pair_decode(char *, float8 *, float8 *, char **, const char *, const char *);
247:	static void pair_encode(float8, float8, StringInfo);
258:	static void path_decode(char *, _Bool, int, Point *, _Bool *, char **, const char *, const char *);
331:	static char *path_encode(enum path_delim, int, Point *);
5467:	static _Bool plist_same(int, Point *, Point *);
4112:	static void point_add_point(Point *, Point *, Point *);
1853:	static void point_construct(Point *, float8, float8);
4183:	static void point_div_point(Point *, Point *, Point *);
1971:	static float8 point_dt(Point *, Point *);
1946:	static _Bool point_eq_point(Point *, Point *);
5350:	static int point_inside(Point *, int, Point *);
2008:	static float8 point_invsl(Point *, Point *);
4158:	static void point_mul_point(Point *, Point *, Point *);
1992:	static float8 point_sl(Point *, Point *);
4135:	static void point_sub_point(Point *, Point *, Point *);
3986:	static _Bool poly_contain_poly(POLYGON *, POLYGON *);
5295:	static void poly_to_circle(CIRCLE *, POLYGON *);
189:	static float8 single_decode(char *, char **, const char *, const char *);
196:	static void single_encode(float8, StringInfo);
2107:	static void statlseg_construct(LSEG *, Point *, Point *);
3878:	static _Bool touched_lseg_inside_poly(Point *, Point *, LSEG *, POLYGON *, int);

File geo_selfuncs.c:
55:	Datum areajoinsel(FunctionCallInfo);
49:	Datum areasel(FunctionCallInfo);
93:	Datum contjoinsel(FunctionCallInfo);
87:	Datum contsel(FunctionCallInfo);
74:	Datum positionjoinsel(FunctionCallInfo);
68:	Datum positionsel(FunctionCallInfo);

File geo_spgist.c:
859:	Datum spg_bbox_quad_config(FunctionCallInfo);
417:	Datum spg_box_quad_choose(FunctionCallInfo);
401:	Datum spg_box_quad_config(FunctionCallInfo);
553:	Datum spg_box_quad_inner_consistent(FunctionCallInfo);
741:	Datum spg_box_quad_leaf_consistent(FunctionCallInfo);
441:	Datum spg_box_quad_picksplit(FunctionCallInfo);
876:	Datum spg_poly_quad_compress(FunctionCallInfo);
360:	static _Bool above4D(RectBox *, RangeBox *);
346:	static _Bool below4D(RectBox *, RangeBox *);
93:	static int compareDoubles(const void *, const void *);
252:	static _Bool contain2D(RangeBox *, Range *);
260:	static _Bool contain4D(RectBox *, RangeBox *);
268:	static _Bool contained2D(RangeBox *, Range *);
278:	static _Bool contained4D(RectBox *, RangeBox *);
130:	static uint8 getQuadrant(BOX *, BOX *);
157:	static RangeBox *getRangeBox(BOX *);
302:	static _Bool higher2D(RangeBox *, Range *);
177:	static RectBox *initRectBox(void);
508:	static _Bool is_bounding_box_test_exact(StrategyNumber);
318:	static _Bool left4D(RectBox *, RangeBox *);
286:	static _Bool lower2D(RangeBox *, Range *);
205:	static RectBox *nextRectBox(RectBox *, RangeBox *, uint8);
367:	static _Bool overAbove4D(RectBox *, RangeBox *);
353:	static _Bool overBelow4D(RectBox *, RangeBox *);
310:	static _Bool overHigher2D(RangeBox *, Range *);
325:	static _Bool overLeft4D(RectBox *, RangeBox *);
294:	static _Bool overLower2D(RangeBox *, Range *);
339:	static _Bool overRight4D(RectBox *, RangeBox *);
236:	static _Bool overlap2D(RangeBox *, Range *);
244:	static _Bool overlap4D(RectBox *, RangeBox *);
374:	static double pointToRectBoxDistance(Point *, RectBox *);
332:	static _Bool right4D(RectBox *, RangeBox *);
531:	static BOX *spg_box_quad_get_scankey_bbox(ScanKey, _Bool *);

File geqo_copy.c:
45:	void geqo_copy(PlannerInfo *, Chromosome *, Chromosome *, int);

File geqo_erx.c:
54:	Edge *alloc_edge_table(PlannerInfo *, int);
74:	void free_edge_table(PlannerInfo *, Edge *);
93:	float gimme_edge_table(PlannerInfo *, Gene *, Gene *, int, Edge *);
194:	int gimme_tour(PlannerInfo *, Edge *, Gene *, int);
373:	static Gene edge_failure(PlannerInfo *, Gene *, int, Edge *, int);
152:	static int gimme_edge(PlannerInfo *, Gene, Gene, Edge *);
282:	static Gene gimme_gene(PlannerInfo *, Edge, Edge *);
240:	static void remove_gene(PlannerInfo *, Gene, Edge, Edge *);

File geqo_eval.c:
57:	Cost geqo_eval(PlannerInfo *, Gene *, int);
163:	RelOptInfo *gimme_tree(PlannerInfo *, Gene *, int);
325:	static _Bool desirable_join(PlannerInfo *, RelOptInfo *, RelOptInfo *);
238:	static List *merge_clump(PlannerInfo *, List *, Clump *, int, _Bool);

File geqo_main.c:
67:	RelOptInfo *geqo(PlannerInfo *, int, List *);
347:	static int gimme_number_generations(int);
315:	static int gimme_pool_size(int);

File geqo_pool.c:
162:	Chromosome *alloc_chromo(PlannerInfo *, int);
42:	Pool *alloc_pool(PlannerInfo *, int, int);
176:	void free_chromo(PlannerInfo *, Chromosome *);
69:	void free_pool(PlannerInfo *, Pool *);
91:	void random_init_pool(PlannerInfo *, Pool *);
135:	void sort_pool(PlannerInfo *, Pool *);
187:	void spread_chromo(PlannerInfo *, Chromosome *, Pool *);
145:	static int compare(const void *, const void *);

File geqo_random.c:
35:	double geqo_rand(PlannerInfo *);
20:	void geqo_set_seed(PlannerInfo *, double);

File geqo_recombination.c:
34:	void init_tour(PlannerInfo *, Gene *, int);

File geqo_selection.c:
54:	void geqo_selection(PlannerInfo *, Chromosome *, Chromosome *, Pool *, double);
92:	static int linear_rand(PlannerInfo *, int, double);

File get_myaddr.c:
56:	void __GI_get_myaddress(struct sockaddr_in *);

File getauxval.c:
24:	unsigned long __GI___getauxval(unsigned long);

File getc.c:
33:	int _IO_getc(FILE *);

File getc_u.c:
33:	int __getc_unlocked(FILE *);

File getchar.c:
33:	int getchar(void);

File getchar_u.c:
33:	int getchar_unlocked(void);

File getcwd_chk.c:
24:	char *__getcwd_chk(char *, size_t, size_t);

File getdate.c:
108:	int __getdate_r(const char *, struct tm *);
299:	struct tm *getdate(const char *);

File getdirname.c:
28:	char *get_current_dir_name(void);

File getdomain.c:
32:	int __GI_getdomainname(char *, size_t);

File getdomainname_chk.c:
22:	int __getdomainname_chk(char *, size_t, size_t);

File getenv.c:
33:	char *__GI_getenv(const char *);

File getgroups_chk.c:
23:	int __getgroups_chk(int, __gid_t *, size_t);

File gethostname_chk.c:
22:	int __gethostname_chk(char *, size_t, size_t);

File getline.c:
26:	ssize_t __getline(char **, size_t *, FILE *);

File getlogin_r_chk.c:
22:	int __getlogin_r_chk(char *, size_t, size_t);

File getnameinfo.c:
486:	int __GI_getnameinfo(const struct sockaddr *, socklen_t, char *, socklen_t, char *, socklen_t, int);
87:	static char *nrl_domainname(void);

File getnetgrent.c:
37:	int getnetgrent(char **, char **, char **);
31:	static void allocate(void);

File getnetgrent_r.c:
211:	void __GI___internal_endnetgrent(struct __netgrent *);
259:	int __GI___internal_getnetgrent_r(char **, char **, char **, struct __netgrent *, char *, size_t, int *);
170:	int __GI___internal_setnetgrent(const char *, struct __netgrent *);
386:	int __GI_innetgr(const char *, const char *, const char *, const char *);
368:	int __getnetgrent_r(char **, char **, char **, char *, size_t);
221:	void endnetgrent(void);
195:	int setnetgrent(const char *);
113:	static int __internal_setnetgrent_reuse(const char *, struct __netgrent *, int *);
240:	static enum nss_status nscd_getnetgrent(struct __netgrent *, char *, size_t, int *);

File getnssent.c:
24:	void *__nss_getent(getent_r_function, void **, char **, size_t, size_t *, int *);

File getnssent_r.c:
112:	void __nss_endent(const char *, db_lookup_function, service_user **, service_user **, service_user **, int);
154:	int __nss_getent_r(const char *, const char *, db_lookup_function, service_user **, service_user **, service_user **, int *, int, void *, char *, size_t, void **, int *);
51:	void __nss_setent(const char *, db_lookup_function, service_user **, service_user **, service_user **, int, int *, int);

File getopt.c:
736:	int __posix_getopt(int, char * const *, const char *);
702:	int _getopt_internal(int, char **, const char *, const struct option *, int *, int, int);
470:	int _getopt_internal_r(int, char **, const char *, const struct option *, int *, int, struct _getopt_data *, int);
735:	int getopt(int, char * const *, const char *);
130:	static void exchange(char **, struct _getopt_data *);
193:	static int process_long_option(int, char **, const char *, const struct option *, int *, int, struct _getopt_data *, int, const char *);

File getopt1.c:
59:	int _getopt_long_only_r(int, char **, const char *, const struct option *, int *, struct _getopt_data *);
36:	int _getopt_long_r(int, char **, const char *, const struct option *, int *, struct _getopt_data *);
28:	int getopt_long(int, char * const *, const char *, const struct option *, int *);
50:	int getopt_long_only(int, char * const *, const char *, const struct option *, int *);

File getpass.c:
46:	char *getpass(const char *);

File getpeereid.c:
35:	int getpeereid(int, uid_t *, gid_t *);

File getpw.c:
32:	int __getpw(__uid_t, char *);

File getrpcport.c:
61:	int getrpcport(const char *, u_long, u_long, u_int);

File gets_chk.c:
31:	char *__gets_chk(char *, size_t);

File getsubopt.c:
39:	int getsubopt(char **, char * const *, char **);

File gettext.c:
53:	char *__gettext(const char *);

File getttyent.c:
201:	int __GI___endttyent(void);
64:	struct ttyent *__GI___getttyent(void);
184:	int __GI___setttyent(void);
47:	struct ttyent *__getttynam(const char *);
144:	static char *skip(char *);

File getusershell.c:
78:	void endusershell(void);
65:	char *getusershell(void);
89:	void setusershell(void);
96:	static char **initshells(void);

File getutent.c:
28:	struct utmp *__GI___getutent(void);

File getutent_r.c:
43:	int __GI___getutent_r(struct utmp *, struct utmp **);
60:	struct utmp *__GI___pututline(const struct utmp *);
77:	void __endutent(void);
31:	void __setutent(void);

File getutid.c:
27:	struct utmp *__GI___getutid(const struct utmp *);

File getutid_r.c:
33:	int __GI___getutid_r(const struct utmp *, struct utmp *, struct utmp **);

File getutline.c:
28:	struct utmp *__GI___getutline(const struct utmp *);

File getutline_r.c:
32:	int __GI___getutline_r(const struct utmp *, struct utmp *, struct utmp **);

File getutxent.c:
23:	struct utmpx *getutxent(void);

File getutxid.c:
23:	struct utmpx *getutxid(const struct utmpx *);

File getutxline.c:
23:	struct utmpx *getutxline(const struct utmpx *);

File getw.c:
25:	int getw(FILE *);

File getwc.c:
34:	wint_t _IO_getwc(FILE *);

File getwc_u.c:
33:	wint_t __getwc_unlocked(FILE *);

File getwchar.c:
33:	wint_t getwchar(void);

File getwchar_u.c:
33:	wint_t getwchar_unlocked(void);

File getwd.c:
26:	char *getwd(char *);

File getwd_chk.c:
24:	char *__getwd_chk(char *, size_t);

File ginarrayproc.c:
142:	Datum ginarrayconsistent(FunctionCallInfo);
33:	Datum ginarrayextract(FunctionCallInfo);
68:	Datum ginarrayextract_2args(FunctionCallInfo);
226:	Datum ginarraytriconsistent(FunctionCallInfo);
79:	Datum ginqueryarrayextract(FunctionCallInfo);

File ginbtree.c:
194:	void freeGinBtreeStack(GinBtreeStack *);
80:	GinBtreeStack *ginFindLeafPage(GinBtree, _Bool, _Bool, Snapshot);
776:	void ginInsertValue(GinBtree, GinBtreeStack *, void *, GinStatsData *);
173:	Buffer ginStepRight(Buffer, Relation, int);
36:	int ginTraverseLock(Buffer, _Bool);
214:	static void ginFindParents(GinBtree, GinBtreeStack *);
667:	static void ginFinishSplit(GinBtree, GinBtreeStack *, _Bool, GinStatsData *);
329:	static _Bool ginPlaceToPage(GinBtree, GinBtreeStack *, void *, BlockNumber, Buffer, GinStatsData *);

File ginbulk.c:
257:	void ginBeginBAScan(BuildAccumulator *);
268:	ItemPointerData *ginGetBAEntry(BuildAccumulator *, OffsetNumber *, Datum *, GinNullCategory *, uint32 *);
109:	void ginInitBA(BuildAccumulator *);
210:	void ginInsertBAEntries(BuildAccumulator *, ItemPointer, OffsetNumber, Datum *, GinNullCategory *, int32);
72:	static int cmpEntryAccumulator(const RBTNode *, const RBTNode *, void *);
128:	static Datum getDatumCopy(BuildAccumulator *, OffsetNumber, Datum);
85:	static RBTNode *ginAllocEntryAccumulator(void *);
30:	static void ginCombineData(RBTNode *, const RBTNode *, void *);
148:	static void ginInsertBAEntry(BuildAccumulator *, ItemPointer, OffsetNumber, Datum, GinNullCategory);
246:	static int qsortCompareItemPointers(const void *, const void *);

File gindatapage.c:
135:	ItemPointer GinDataLeafPageGetItems(Page, int *, ItemPointerData);
182:	int GinDataLeafPageGetItemsToTbm(Page, TIDBitmap *);
380:	void GinDataPageAddPostingItem(Page, PostingItem *, OffsetNumber);
417:	void GinPageDeletePostingItem(Page, OffsetNumber);
1769:	BlockNumber createPostingTree(Relation, ItemPointerData *, uint32, GinStatsData *, Buffer);
1343:	void ginDataFillRoot(GinBtree, Page, BlockNumber, Page, BlockNumber, Page);
1902:	void ginInsertItemPointers(Relation, BlockNumber, ItemPointerData *, uint32, GinStatsData *);
1930:	GinBtreeStack *ginScanBeginPostingTree(GinBtree, Relation, BlockNumber, Snapshot);
735:	void ginVacuumPostingTreeLeaf(Relation, Buffer, GinVacuumState *);
1438:	static _Bool addItemsToLeaf(disassembledLeaf *, ItemPointer, int);
869:	static void computeLeafRecompressWALData(disassembledLeaf *);
1195:	static GinPlaceToPageRC dataBeginPlaceToPage(GinBtree, Buffer, GinBtreeStack *, void *, BlockNumber, void **, Page *, Page *);
1116:	static GinPlaceToPageRC dataBeginPlaceToPageInternal(GinBtree, Buffer, GinBtreeStack *, void *, BlockNumber, void **, Page *, Page *);
448:	static GinPlaceToPageRC dataBeginPlaceToPageLeaf(GinBtree, Buffer, GinBtreeStack *, void *, void **, Page *, Page *);
1225:	static void dataExecPlaceToPage(GinBtree, Buffer, GinBtreeStack *, void *, BlockNumber, void *);
1142:	static void dataExecPlaceToPageInternal(GinBtree, Buffer, GinBtreeStack *, void *, BlockNumber, void *);
716:	static void dataExecPlaceToPageLeaf(GinBtree, Buffer, GinBtreeStack *, void *, void *);
319:	static OffsetNumber dataFindChildPtr(GinBtree, Page, BlockNumber, OffsetNumber);
364:	static BlockNumber dataGetLeftMostPage(GinBtree, Page);
234:	static _Bool dataIsMoveRight(GinBtree, Page);
211:	static ItemPointer dataLeafPageGetUncompressed(Page, int *);
252:	static BlockNumber dataLocateItem(GinBtree, GinBtreeStack *);
975:	static void dataPlaceToPageLeafRecompress(Buffer, disassembledLeaf *);
1031:	static void dataPlaceToPageLeafSplit(disassembledLeaf *, ItemPointerData, ItemPointerData, Page, Page);
1327:	static void *dataPrepareDownlink(GinBtree, Buffer);
1246:	static void dataSplitPageInternal(GinBtree, Buffer, GinBtreeStack *, void *, BlockNumber, Page *, Page *);
1364:	static disassembledLeaf *disassembleLeaf(Page);
1876:	static void ginPrepareDataScan(GinBtree, Relation, BlockNumber);
1565:	static _Bool leafRepackItems(disassembledLeaf *, ItemPointer);

File gindesc.c:
74:	void gin_desc(StringInfo, XLogReaderState *);
182:	const char *gin_identify(uint8);
23:	static void desc_recompress_leaf(StringInfo, ginxlogRecompressDataLeaf *);

File ginentrypage.c:
45:	IndexTuple GinFormTuple(GinState *, OffsetNumber, Datum, GinNullCategory, Pointer, Size, int, _Bool);
721:	void ginEntryFillRoot(GinBtree, Page, BlockNumber, Page, BlockNumber, Page);
745:	void ginPrepareEntryScan(GinBtree, OffsetNumber, Datum, GinNullCategory, GinState *);
163:	ItemPointer ginReadTuple(GinState *, OffsetNumber, IndexTuple, int *);
202:	static IndexTuple GinFormInteriorTuple(IndexTuple, Page, BlockNumber);
528:	static GinPlaceToPageRC entryBeginPlaceToPage(GinBtree, Buffer, GinBtreeStack *, void *, BlockNumber, void **, Page *, Page *);
555:	static void entryExecPlaceToPage(GinBtree, Buffer, GinBtreeStack *, void *, BlockNumber, void *);
406:	static OffsetNumber entryFindChildPtr(GinBtree, Page, BlockNumber, OffsetNumber);
447:	static BlockNumber entryGetLeftMostPage(GinBtree, Page);
460:	static _Bool entryIsEnoughSpace(GinBtree, Buffer, OffsetNumber, GinBtreeEntryInsertData *);
244:	static _Bool entryIsMoveRight(GinBtree, Page);
271:	static BlockNumber entryLocateEntry(GinBtree, GinBtreeStack *);
347:	static _Bool entryLocateLeafEntry(GinBtree, GinBtreeStack *);
700:	static void *entryPrepareDownlink(GinBtree, Buffer);
491:	static void entryPreparePage(GinBtree, Page, OffsetNumber, GinBtreeEntryInsertData *, BlockNumber);
600:	static void entrySplitPage(GinBtree, Buffer, GinBtreeStack *, GinBtreeEntryInsertData *, BlockNumber, Page *, Page *);
236:	static IndexTuple getRightMostTuple(Page);

File ginfast.c:
477:	void ginHeapTupleFastCollect(GinState *, GinTupleCollector *, OffsetNumber, Datum, _Bool, ItemPointer);
219:	void ginHeapTupleFastInsert(GinState *, GinTupleCollector *);
777:	void ginInsertCleanup(GinState *, _Bool, _Bool, _Bool, IndexBulkDeleteResult *);
1028:	Datum gin_clean_pending_list(FunctionCallInfo);
680:	static void addDatum(KeyArray *, Datum, GinNullCategory);
669:	static void initKeyArray(KeyArray *, int32);
145:	static void makeSublist(Relation, IndexTuple *, int32, GinMetaPageData *);
706:	static void processPendingPage(BuildAccumulator *, KeyArray *, Page, OffsetNumber);
548:	static void shiftList(Relation, Buffer, BlockNumber, _Bool, IndexBulkDeleteResult *);
59:	static int32 writeListPage(Relation, Buffer, IndexTuple *, int32, BlockNumber);

File ginget.c:
1917:	int64 gingetbitmap(IndexScanDesc, TIDBitmap *);
120:	static _Bool collectMatchBitmap(GinBtreeData *, GinBtreeStack *, GinScanEntry, Snapshot);
1606:	static _Bool collectMatchesForHeapRow(IndexScanDesc, pendingPosition *);
807:	static void entryGetItem(GinState *, GinScanEntry, ItemPointerData, Snapshot);
487:	static int entryIndexByFrequencyCmp(const void *, const void *, void *);
652:	static void entryLoadMoreItems(GinState *, GinScanEntry, ItemPointerData, Snapshot);
989:	static void keyGetItem(GinState *, MemoryContext, GinScanKey, ItemPointerData, Snapshot);
1538:	static _Bool matchPartialInPendingList(GinState *, Page, OffsetNumber, OffsetNumber, GinScanEntry, Datum *, GinNullCategory *, _Bool *);
42:	static _Bool moveRightIfItNeeded(GinBtreeData *, GinBtreeStack *, Snapshot);
1450:	static _Bool scanGetCandidate(IndexScanDesc, pendingPosition *);
1284:	static _Bool scanGetItem(IndexScanDesc, ItemPointerData, ItemPointerData *, _Bool *);
1822:	static void scanPendingInsert(IndexScanDesc, TIDBitmap *, int64 *);
68:	static void scanPostingTree(Relation, GinScanEntry, BlockNumber, Snapshot);
600:	static void startScan(IndexScanDesc);
318:	static void startScanEntry(GinState *, GinScanEntry, Snapshot);
504:	static void startScanKey(GinState *, GinScanOpaque, GinScanKey);

File gininsert.c:
179:	void ginEntryInsert(GinState *, OffsetNumber, Datum, GinNullCategory, ItemPointerData *, uint32, GinStatsData *);
320:	IndexBuildResult *ginbuild(Relation, Relation, IndexInfo *);
437:	void ginbuildempty(Relation);
488:	_Bool gininsert(Relation, Datum *, _Bool *, ItemPointer, Relation, IndexUniqueCheck, _Bool, IndexInfo *);
49:	static IndexTuple addItemPointersToLeafTuple(GinState *, IndexTuple, ItemPointerData *, uint32, GinStatsData *, Buffer);
129:	static IndexTuple buildFreshLeafTuple(GinState *, OffsetNumber, Datum, GinNullCategory, ItemPointerData *, uint32, GinStatsData *, Buffer);
280:	static void ginBuildCallback(Relation, ItemPointer, Datum *, _Bool *, _Bool, void *);
256:	static void ginHeapTupleBulkInsert(GinBuildState *, OffsetNumber, Datum, _Bool, ItemPointer);
470:	static void ginHeapTupleInsert(GinState *, OffsetNumber, Datum, _Bool, ItemPointer);

File ginlogic.c:
223:	void ginInitConsistentFunction(GinState *, GinScanKey);
71:	static _Bool directBoolConsistentFn(GinScanKey);
95:	static GinTernaryValue directTriConsistentFn(GinScanKey);
114:	static _Bool shimBoolConsistentFn(GinScanKey);
152:	static GinTernaryValue shimTriConsistentFn(GinScanKey);
56:	static _Bool trueConsistentFn(GinScanKey);
62:	static GinTernaryValue trueTriConsistentFn(GinScanKey);

File ginpostinglist.c:
197:	GinPostingList *ginCompressPostingList(const ItemPointer, int, int, int *);
378:	ItemPointer ginMergeItemPointers(ItemPointerData *, uint32, ItemPointerData *, uint32, int *);
284:	ItemPointer ginPostingListDecode(GinPostingList *, int *);
297:	ItemPointer ginPostingListDecodeAllSegments(GinPostingList *, int, int *);
358:	int ginPostingListDecodeAllSegmentsToTbm(GinPostingList *, int, TIDBitmap *);
133:	static uint64 decode_varbyte(unsigned char **);
115:	static void encode_varbyte(uint64, unsigned char **);
87:	static uint64 itemptr_to_uint64(const ItemPointer);
102:	static void uint64_to_itemptr(uint64, ItemPointer);

File ginscan.c:
233:	void ginFreeScanKeys(GinScanOpaque);
263:	void ginNewScanKey(IndexScanDesc);
25:	IndexScanDesc ginbeginscan(Relation, int, int);
458:	void ginendscan(IndexScanDesc);
442:	void ginrescan(IndexScanDesc, ScanKey, int, ScanKey, int);
57:	static GinScanEntry ginFillScanEntry(GinScanOpaque, OffsetNumber, StrategyNumber, int32, Datum, GinNullCategory, _Bool, Pointer);
153:	static void ginFillScanKey(GinScanOpaque, OffsetNumber, StrategyNumber, int32, Datum, uint32, Datum *, GinNullCategory *, _Bool *, Pointer *);
137:	static void ginScanKeyAddHiddenEntry(GinScanOpaque, GinScanKey, GinNullCategory);

File ginutil.c:
356:	void GinInitBuffer(Buffer, uint32);
362:	void GinInitMetabuffer(Buffer);
344:	void GinInitPage(Page, uint32, Size);
298:	Buffer GinNewBuffer(Relation);
416:	int ginCompareAttEntries(GinState *, OffsetNumber, Datum, GinNullCategory, OffsetNumber, Datum, GinNullCategory);
394:	int ginCompareEntries(GinState *, OffsetNumber, Datum, GinNullCategory, Datum, GinNullCategory);
489:	Datum *ginExtractEntries(GinState *, OffsetNumber, Datum, _Bool, int32 *, GinNullCategory **);
629:	void ginGetStats(Relation, GinStatsData *);
656:	void ginUpdateStats(Relation, const GinStatsData *, _Bool);
38:	Datum ginhandler(FunctionCallInfo);
608:	bytea *ginoptions(Datum, _Bool);
224:	OffsetNumber gintuple_get_attrnum(GinState *, IndexTuple);
257:	Datum gintuple_get_key(GinState *, IndexTuple, GinNullCategory *);
95:	void initGinState(GinState *, Relation);
449:	static int cmpEntries(const void *, const void *, void *);

File ginvacuum.c:
802:	_Bool GinPageIsRecyclable(Page);
48:	ItemPointer ginVacuumItemPointers(GinVacuumState *, ItemPointerData *, int, int *);
565:	IndexBulkDeleteResult *ginbulkdelete(IndexVacuumInfo *, IndexBulkDeleteResult *, IndexBulkDeleteCallback, void *);
688:	IndexBulkDeleteResult *ginvacuumcleanup(IndexVacuumInfo *, IndexBulkDeleteResult *);
130:	static void ginDeletePage(GinVacuumState *, BlockNumber, BlockNumber, BlockNumber, OffsetNumber, _Bool);
247:	static _Bool ginScanToDelete(GinVacuumState *, BlockNumber, _Bool, DataPageDeleteStack *, OffsetNumber);
456:	static Page ginVacuumEntryPage(GinVacuumState *, Buffer, BlockNumber *, uint32 *);
409:	static void ginVacuumPostingTree(GinVacuumState *, BlockNumber);
346:	static _Bool ginVacuumPostingTreeLeaves(GinVacuumState *, BlockNumber);
90:	static void xlogVacuumPage(Relation, Buffer);

File ginvalidate.c:
279:	void ginadjustmembers(Oid, Oid, List *, List *);
33:	_Bool ginvalidate(Oid);

File ginxlog.c:
793:	void gin_mask(char *, BlockNumber);
726:	void gin_redo(XLogReaderState *);
783:	void gin_xlog_cleanup(void);
775:	void gin_xlog_startup(void);
25:	static void ginRedoClearIncompleteSplit(XLogReaderState *, uint8);
44:	static void ginRedoCreatePTree(XLogReaderState *);
675:	static void ginRedoDeleteListPages(XLogReaderState *);
477:	static void ginRedoDeletePage(XLogReaderState *);
347:	static void ginRedoInsert(XLogReaderState *);
319:	static void ginRedoInsertData(Buffer, _Bool, BlockNumber, void *);
71:	static void ginRedoInsertEntry(Buffer, _Bool, BlockNumber, void *);
620:	static void ginRedoInsertListPage(XLogReaderState *);
117:	static void ginRedoRecompress(Page, ginxlogRecompressDataLeaf *);
402:	static void ginRedoSplit(XLogReaderState *);
528:	static void ginRedoUpdateMetapage(XLogReaderState *);
452:	static void ginRedoVacuumDataLeafPage(XLogReaderState *);
440:	static void ginRedoVacuumPage(XLogReaderState *);

File gist.c:
119:	MemoryContext createTempGistContext(void);
1631:	void freeGISTstate(GISTSTATE *);
1416:	SplitedPageLayout *gistSplit(Relation, Page, IndexTuple *, int, GISTSTATE *);
130:	void gistbuildempty(Relation);
632:	void gistdoinsert(Relation, IndexTuple, Size, GISTSTATE *, Relation, _Bool);
59:	Datum gisthandler(FunctionCallInfo);
156:	_Bool gistinsert(Relation, Datum *, _Bool *, ItemPointer, Relation, IndexUniqueCheck, _Bool, IndexInfo *);
222:	_Bool gistplacetopage(Relation, Size, GISTSTATE *, Buffer, IndexTuple *, int, OffsetNumber, BlockNumber *, Buffer, List **, _Bool, Relation, _Bool);
1503:	GISTSTATE *initGISTstate(Relation);
1020:	static void gistFindCorrectParent(Relation, GISTInsertStack *);
907:	static GISTInsertStack *gistFindPath(Relation, BlockNumber, OffsetNumber *);
1321:	static void gistfinishsplit(GISTInsertState *, GISTInsertStack *, GISTSTATE *, List *, _Bool);
1167:	static void gistfixsplit(GISTInsertState *, GISTSTATE *);
1107:	static IndexTuple gistformdownlink(Relation, Buffer, GISTSTATE *, GISTInsertStack *);
1227:	static _Bool gistinserttuple(GISTInsertState *, GISTInsertStack *, GISTSTATE *, IndexTuple, OffsetNumber);
1261:	static _Bool gistinserttuples(GISTInsertState *, GISTInsertStack *, GISTSTATE *, IndexTuple *, int, OffsetNumber, Buffer, Buffer, _Bool, _Bool);
1642:	static void gistprunepage(Relation, Page, Buffer, Relation);

File gistbuild.c:
175:	IndexBuildResult *gistbuild(Relation, Relation, IndexInfo *);
778:	static int calculatePagesPerBuffer(GISTBuildState *, int);
889:	static void gistBufferingBuildInsert(GISTBuildState *, IndexTuple);
1205:	static Buffer gistBufferingFindCorrectParent(GISTBuildState *, BlockNumber, int, BlockNumber *, OffsetNumber *);
811:	static void gistBuildCallback(Relation, ItemPointer, Datum *, _Bool *, _Bool, void *);
1352:	static void gistEmptyAllBuffers(GISTBuildState *);
1407:	static int gistGetMaxLevel(Relation);
1547:	static BlockNumber gistGetParent(GISTBuildState *, BlockNumber);
617:	static void gistInitBuffering(GISTBuildState *);
1496:	static void gistInitParentMap(GISTBuildState *);
1526:	static void gistMemorizeAllDownlinks(GISTBuildState *, Buffer);
1510:	static void gistMemorizeParent(GISTBuildState *, BlockNumber, BlockNumber);
1279:	static void gistProcessEmptyingQueue(GISTBuildState *);
905:	static _Bool gistProcessItup(GISTBuildState *, IndexTuple, BlockNumber, int);
362:	static void gistSortedBuildCallback(Relation, ItemPointer, Datum *, _Bool *, _Bool, void *);
396:	static void gist_indexsortbuild(GISTBuildState *);
570:	static void gist_indexsortbuild_flush_ready_pages(GISTBuildState *);
481:	static void gist_indexsortbuild_pagestate_add(GISTBuildState *, GistSortedBuildPageState *, IndexTuple);
496:	static void gist_indexsortbuild_pagestate_flush(GISTBuildState *, GistSortedBuildPageState *);
1036:	static BlockNumber gistbufferinginserttuples(GISTBuildState *, Buffer, int, IndexTuple *, int, OffsetNumber, BlockNumber, OffsetNumber);

File gistbuildbuffers.c:
511:	void gistFreeBuildBuffers(GISTBuildBuffers *);
117:	GISTNodeBuffer *gistGetNodeBuffer(GISTBuildBuffers *, GISTSTATE *, BlockNumber, int);
48:	GISTBuildBuffers *gistInitBuildBuffers(int, int, int);
410:	_Bool gistPopItupFromNodeBuffer(GISTBuildBuffers *, GISTNodeBuffer *, IndexTuple *);
340:	void gistPushItupToNodeBuffer(GISTBuildBuffers *, GISTNodeBuffer *, IndexTuple);
537:	void gistRelocateBuildBuffersOnSplit(GISTBuildBuffers *, GISTSTATE *, Relation, int, Buffer, List *);
276:	void gistUnloadNodeBuffers(GISTBuildBuffers *);
757:	static void ReadTempFileBlock(BufFile *, long, void *);
770:	static void WriteTempFileBlock(BufFile *, long, void *);
202:	static void gistAddLoadedBuffer(GISTBuildBuffers *, GISTNodeBuffer *);
185:	static GISTNodeBufferPage *gistAllocateNewPageBuffer(GISTBuildBuffers *);
472:	static long gistBuffersGetFreeBlock(GISTBuildBuffers *);
489:	static void gistBuffersReleaseBlock(GISTBuildBuffers *, long);
315:	static void gistGetItupFromPage(GISTNodeBufferPage *, IndexTuple *);
225:	static void gistLoadNodeBuffer(GISTBuildBuffers *, GISTNodeBuffer *);
292:	static void gistPlaceItupToPage(GISTNodeBufferPage *, IndexTuple);
250:	static void gistUnloadNodeBuffer(GISTBuildBuffers *, GISTNodeBuffer *);

File gistdesc.c:
61:	void gist_desc(StringInfo, XLogReaderState *);
90:	const char *gist_identify(uint8);
37:	static void out_gistxlogDelete(StringInfo, gistxlogDelete *);
52:	static void out_gistxlogPageDelete(StringInfo, gistxlogPageDelete *);
27:	static void out_gistxlogPageReuse(StringInfo, gistxlogPageReuse *);
45:	static void out_gistxlogPageSplit(StringInfo, gistxlogPageSplit *);
22:	static void out_gistxlogPageUpdate(StringInfo, gistxlogPageUpdate *);

File gistget.c:
795:	_Bool gistcanreturn(Relation, int);
745:	int64 gistgetbitmap(IndexScanDesc, TIDBitmap *);
614:	_Bool gistgettuple(IndexScanDesc, ScanDirection);
540:	static GISTSearchItem *getNextGISTSearchItem(GISTScanOpaque);
562:	static _Bool getNextNearest(IndexScanDesc);
329:	static void gistScanPage(IndexScanDesc, GISTSearchItem *, IndexOrderByDistance *, TIDBitmap *, int64 *);
126:	static _Bool gistindex_keytest(IndexScanDesc, IndexTuple, Page, OffsetNumber, _Bool *, _Bool *);
39:	static void gistkillitems(IndexScanDesc);

File gistproc.c:
114:	Datum gist_box_consistent(FunctionCallInfo);
1501:	Datum gist_box_distance(FunctionCallInfo);
200:	Datum gist_box_penalty(FunctionCallInfo);
496:	Datum gist_box_picksplit(FunctionCallInfo);
853:	Datum gist_box_same(FunctionCallInfo);
165:	Datum gist_box_union(FunctionCallInfo);
1101:	Datum gist_circle_compress(FunctionCallInfo);
1131:	Datum gist_circle_consistent(FunctionCallInfo);
1527:	Datum gist_circle_distance(FunctionCallInfo);
1169:	Datum gist_point_compress(FunctionCallInfo);
1338:	Datum gist_point_consistent(FunctionCallInfo);
1456:	Datum gist_point_distance(FunctionCallInfo);
1197:	Datum gist_point_fetch(FunctionCallInfo);
1761:	Datum gist_point_sortsupport(FunctionCallInfo);
1036:	Datum gist_poly_compress(FunctionCallInfo);
1063:	Datum gist_poly_consistent(FunctionCallInfo);
1544:	Datum gist_poly_distance(FunctionCallInfo);
147:	static void adjustBox(BOX *, const BOX *);
98:	static float8 box_penalty(const BOX *, const BOX *);
461:	static int common_entry_cmp(const void *, const void *);
1222:	static float8 computeDistance(_Bool, BOX *, Point *);
217:	static void fallbackSplit(GistEntryVector *, GIST_SPLITVEC *);
352:	static void g_box_consider_split(ConsiderSplitContext *, int, float8, int, float8, int);
1480:	static float8 gist_bbox_distance(GISTENTRY *, Datum, StrategyNumber);
1752:	static _Bool gist_bbox_zorder_abbrev_abort(int, SortSupport);
1715:	static Datum gist_bbox_zorder_abbrev_convert(Datum, SortSupport);
1682:	static int gist_bbox_zorder_cmp(Datum, Datum, SortSupport);
1730:	static int gist_bbox_zorder_cmp_abbrev(Datum, Datum, SortSupport);
873:	static _Bool gist_box_leaf_consistent(BOX *, BOX *, StrategyNumber);
1288:	static _Bool gist_point_consistent_internal(StrategyNumber, _Bool, BOX *, Point *);
1604:	static uint32 ieee_float32_to_uint32(float);
316:	static int interval_cmp_lower(const void *, const void *);
328:	static int interval_cmp_upper(const void *, const void *);
340:	static float non_negative(float);
1587:	static uint64 part_bits32_by2(uint32);
1576:	static uint64 point_zorder_internal(float4, float4);
56:	static void rt_box_union(BOX *, const BOX *, const BOX *);
958:	static _Bool rtree_internal_consistent(BOX *, BOX *, StrategyNumber);
69:	static float8 size_box(const BOX *);

File gistscan.c:
74:	IndexScanDesc gistbeginscan(Relation, int, int);
349:	void gistendscan(IndexScanDesc);
127:	void gistrescan(IndexScanDesc, ScanKey, int, ScanKey, int);
30:	static int pairingheap_GISTSearchItem_cmp(const pairingheap_node *, const pairingheap_node *, void *);

File gistsplit.c:
623:	void gistSplitByKey(Relation, Page, IndexTuple *, int, GISTSTATE *, GistSplitVector *, int);
113:	static int findDontCares(Relation, GISTSTATE *, GISTENTRY *, GistSplitVector *, int);
344:	static void genericPickSplit(GISTSTATE *, GistEntryVector *, GIST_SPLITVEC *, int);
585:	static void gistSplitHalf(GIST_SPLITVEC *, int);
415:	static _Bool gistUserPicksplit(Relation, GistEntryVector *, int, GistSplitVector *, IndexTuple *, int, GISTSTATE *);
80:	static void gistunionsubkey(GISTSTATE *, IndexTuple *, GistSplitVector *);
47:	static void gistunionsubkeyvec(GISTSTATE *, IndexTuple *, GistSplitUnion *);
200:	static void placeOne(Relation, GISTSTATE *, GistSplitVector *, IndexTuple, OffsetNumber, int);
167:	static void removeDontCares(OffsetNumber *, int *, const _Bool *);
258:	static void supportSecondarySplit(Relation, GISTSTATE *, int, GIST_SPLITVEC *, Datum, Datum);

File gistutil.c:
772:	void GISTInitBuffer(Buffer, uint32);
595:	void gistCompressValues(GISTSTATE *, Relation, Datum *, _Bool *, _Bool, Datum *);
295:	void gistDeCompressAtt(GISTSTATE *, Relation, IndexTuple, Page, OffsetNumber, GISTENTRY *, _Bool *);
666:	HeapTuple gistFetchTuple(GISTSTATE *, Relation, IndexTuple);
574:	IndexTuple gistFormTuple(GISTSTATE *, Relation, Datum *, _Bool *, _Bool);
1024:	XLogRecPtr gistGetFakeLSN(Relation);
280:	_Bool gistKeyIsEQ(GISTSTATE *, int, Datum, Datum);
154:	void gistMakeUnionItVec(GISTSTATE *, IndexTuple *, int, Datum *, _Bool *);
232:	void gistMakeUnionKey(GISTSTATE *, int, GISTENTRY *, _Bool, GISTENTRY *, _Bool, Datum *, _Bool *);
823:	Buffer gistNewBuffer(Relation);
896:	_Bool gistPageRecyclable(Page);
784:	void gistcheckpage(Relation, Buffer);
373:	OffsetNumber gistchoose(Relation, Page, IndexTuple, GISTSTATE *);
546:	void gistdentryinit(GISTSTATE *, int, GISTENTRY *, Datum, Relation, Page, OffsetNumber, _Bool, _Bool);
94:	IndexTuple *gistextractpage(Page, int *);
33:	void gistfillbuffer(Page, IndexTuple *, int, OffsetNumber);
126:	IndexTupleData *gistfillitupvec(IndexTuple *, int, int *);
78:	_Bool gistfitpage(IndexTuple *, int);
315:	IndexTuple gistgetadjusted(Relation, IndexTuple, IndexTuple, GISTSTATE *);
756:	void gistinitpage(Page, uint32);
113:	IndexTuple *gistjoinvector(IndexTuple *, int *, IndexTuple *, int);
58:	_Bool gistnospace(Page, IndexTuple *, int, OffsetNumber, Size);
920:	bytea *gistoptions(Datum, _Bool);
723:	float gistpenalty(GISTSTATE *, int, GISTENTRY *, _Bool, GISTENTRY *, _Bool);
941:	_Bool gistproperty(Oid, int, IndexAMProperty, const char *, _Bool *, _Bool *);
218:	IndexTuple gistunion(Relation, IndexTuple *, int, GISTSTATE *);
645:	static Datum gistFetchAtt(GISTSTATE *, int, Datum, Relation);

File gistvacuum.c:
59:	IndexBulkDeleteResult *gistbulkdelete(IndexVacuumInfo *, IndexBulkDeleteResult *, IndexBulkDeleteCallback, void *);
75:	IndexBulkDeleteResult *gistvacuumcleanup(IndexVacuumInfo *, IndexBulkDeleteResult *);
582:	static _Bool gistdeletepage(IndexVacuumInfo *, IndexBulkDeleteResult *, Buffer, OffsetNumber, Buffer);
455:	static void gistvacuum_delete_empty_pages(IndexVacuumInfo *, GistVacState *);
266:	static void gistvacuumpage(GistVacState *, BlockNumber, BlockNumber);
125:	static void gistvacuumscan(IndexVacuumInfo *, IndexBulkDeleteResult *, IndexBulkDeleteCallback, void *);

File gistvalidate.c:
291:	void gistadjustmembers(Oid, Oid, List *, List *);
34:	_Bool gistvalidate(Oid);

File gistxlog.c:
581:	XLogRecPtr gistXLogAssignLSN(void);
673:	XLogRecPtr gistXLogDelete(Buffer, OffsetNumber *, int, TransactionId);
557:	XLogRecPtr gistXLogPageDelete(Buffer, FullTransactionId, Buffer, OffsetNumber);
599:	void gistXLogPageReuse(Relation, BlockNumber, FullTransactionId);
500:	XLogRecPtr gistXLogSplit(_Bool, SplitedPageLayout *, BlockNumber, GistNSN, Buffer, _Bool);
632:	XLogRecPtr gistXLogUpdate(Buffer, OffsetNumber *, int, IndexTuple *, int, Buffer);
458:	void gist_mask(char *, BlockNumber);
402:	void gist_redo(XLogReaderState *);
449:	void gist_xlog_cleanup(void);
443:	void gist_xlog_startup(void);
229:	static IndexTuple *decodePageSplitRecord(char *, int, int *);
42:	static void gistRedoClearFollowRight(XLogReaderState *, uint8);
174:	static void gistRedoDeleteRecord(XLogReaderState *);
348:	static void gistRedoPageDelete(XLogReaderState *);
382:	static void gistRedoPageReuse(XLogReaderState *);
253:	static void gistRedoPageSplitRecord(XLogReaderState *);
72:	static void gistRedoPageUpdateRecord(XLogReaderState *);

File glob_pattern_p.c:
29:	int __glob_pattern_p(const char *, int);

File gmon.c:
96:	void __GI___moncontrol(int);
122:	void __monstartup(u_long, u_long);
420:	void __write_profiling(void);
439:	void _mcleanup(void);
53:	static int callback(struct dl_phdr_info *, size_t, void *);
354:	static void write_gmon(void);

File gmtime.c:
24:	struct tm *__GI___gmtime_r(const time_t *, struct tm *);
49:	struct tm *gmtime(const time_t *);

File gram.c:
26730:	int base_yyparse(core_yyscan_t);
26708:	static void yydestruct(const char *, int, YYSTYPE *, int *, core_yyscan_t);

File gram.y:
16846:	List *SystemFuncName(char *);
16858:	TypeName *SystemTypeName(char *);
17262:	void parser_init(base_yy_extra_type *);
17091:	static void SplitColQualList(List *, List **, CollateClause **, core_yyscan_t);
17029:	static TypeName *TableFuncTypeName(List *);
16403:	static void base_yyerror(int *, core_yyscan_t, const char *);
16640:	static List *check_func_name(List *, core_yyscan_t);
16658:	static List *check_indirection(List *, core_yyscan_t);
16623:	static void check_qualified_name(List *, core_yyscan_t);
16878:	static Node *doNegate(Node *, int);
16903:	static void doNegateFloat(Value *);
16699:	static List *extractAggrArgTypes(List *);
16680:	static List *extractArgTypes(List *);
16751:	static void insertSelectOptions(SelectStmt *, List *, List *, SelectLimit *, WithClause *, core_yyscan_t);
16957:	static Node *makeAArrayExpr(List *, int);
16565:	static Node *makeAConst(Value *, int);
16917:	static Node *makeAndExpr(Node *, Node *, int);
16542:	static Node *makeBitStringConst(char *, int);
16592:	static Node *makeBoolAConst(_Bool, int);
16436:	static Node *makeColumnRef(char *, List *, int, core_yyscan_t);
16530:	static Node *makeFloatConst(char *, int);
16518:	static Node *makeIntConst(int, int);
16951:	static Node *makeNotExpr(Node *, int);
16554:	static Node *makeNullAConst(int);
16934:	static Node *makeOrExpr(Node *, Node *, int);
16711:	static List *makeOrderedSetArgs(List *, List *, core_yyscan_t);
17053:	static RangeVar *makeRangeVarFromAnyName(List *, int, core_yyscan_t);
16409:	static RawStmt *makeRawStmt(Node *, int);
17215:	static Node *makeRecursiveViewSelect(char *, List *, Node *);
16607:	static RoleSpec *makeRoleSpec(RoleSpecType, int);
16967:	static Node *makeSQLValueFunction(SQLValueFunctionOp, int32, int);
16831:	static Node *makeSetOp(SetOperation, _Bool, Node *, Node *);
16498:	static Node *makeStringConst(char *, int);
16510:	static Node *makeStringConstCast(char *, int, TypeName *);
16488:	static Node *makeTypeCast(Node *, TypeName *, int);
16979:	static Node *makeXmlExpr(XmlExprOp, char *, List *, List *, int);
17004:	static List *mergeTableFuncParameters(List *, List *);
17132:	static void processCASbits(int, int, const char *, _Bool *, _Bool *, _Bool *, _Bool *, core_yyscan_t);
16421:	static void updateRawStmtEnd(RawStmt *, int);

File group_member.c:
29:	int __group_member(gid_t);

File grouping.c:
51:	const char *__correctly_grouped_prefixmb(const char *, const char *, const char *, const char *);
48:	const wchar_t *__correctly_grouped_prefixwc(const wchar_t *, const wchar_t *, wchar_t, const char *);

File grp-merge.c:
39:	int __GI___copy_grp(const struct group, const size_t, struct group *, char *, char **);
119:	int __GI___merge_grp(struct group *, char *, char *, size_t, struct group *, char *);

File gtty.c:
24:	int gtty(int, struct sgttyb *);

File guc-file.c:
1622:	YY_BUFFER_STATE GUC_yy_create_buffer(FILE *, int);
1650:	void GUC_yy_delete_buffer(YY_BUFFER_STATE);
1697:	void GUC_yy_flush_buffer(YY_BUFFER_STATE);
1824:	YY_BUFFER_STATE GUC_yy_scan_buffer(char *, yy_size_t);
1874:	YY_BUFFER_STATE GUC_yy_scan_bytes(const char *, int);
1861:	YY_BUFFER_STATE GUC_yy_scan_string(const char *);
1577:	void GUC_yy_switch_to_buffer(YY_BUFFER_STATE);
2086:	void *GUC_yyalloc(yy_size_t);
2104:	void GUC_yyfree(void *);
2001:	int GUC_yyget_debug(void);
1945:	FILE *GUC_yyget_in(void);
1961:	int GUC_yyget_leng(void);
1936:	int GUC_yyget_lineno(void);
1953:	FILE *GUC_yyget_out(void);
1970:	char *GUC_yyget_text(void);
992:	int GUC_yylex(void);
2040:	int GUC_yylex_destroy(void);
1756:	void GUC_yypop_buffer_state(void);
1726:	void GUC_yypush_buffer_state(YY_BUFFER_STATE);
2091:	void *GUC_yyrealloc(void *, yy_size_t);
1560:	void GUC_yyrestart(FILE *);
2006:	void GUC_yyset_debug(int);
1991:	void GUC_yyset_in(FILE *);
1979:	void GUC_yyset_lineno(int);
1996:	void GUC_yyset_out(FILE *);
1669:	static void GUC_yy_init_buffer(YY_BUFFER_STATE, FILE *);
1608:	static void GUC_yy_load_buffer_state(void);
1775:	static void GUC_yyensure_buffer_stack(void);
1908:	static void yy_fatal_error(const char *);
1284:	static int yy_get_next_buffer(void);
1422:	static yy_state_type yy_get_previous_state(void);
2011:	static int yy_init_globals(void);
1454:	static yy_state_type yy_try_NUL_trans(yy_state_type);

File guc-file.l:
1147:	char *DeescapeQuotedString(const char *);
1103:	void FreeConfigVariables(ConfigVariable *);
959:	_Bool ParseConfigDirectory(const char *, const char *, int, int, int, ConfigVariable **, ConfigVariable **);
561:	_Bool ParseConfigFile(const char *, _Bool, const char *, int, int, int, ConfigVariable **, ConfigVariable **);
735:	_Bool ParseConfigFp(FILE *, const char *, int, int, ConfigVariable **, ConfigVariable **);
122:	void ProcessConfigFile(GucContext);
521:	static char *AbsoluteConfigLocation(const char *, const char *);
1121:	static void FreeConfigVariable(ConfigVariable *);
697:	static int GUC_flex_fatal(const char *);
170:	static ConfigVariable *ProcessConfigFileInternal(GucContext, _Bool, int);
664:	static void record_config_file_error(const char *, const char *, int, ConfigVariable **, ConfigVariable **);

File guc.c:
8485:	void AlterSystemSetConfigFile(AlterSystemStmt *);
6215:	void AtEOXact_GUC(_Bool, int);
6181:	void AtStart_GUC(void);
6500:	void BeginReportingGUCOptions(void);
9148:	void DefineCustomBoolVariable(const char *, const char *, const char *, _Bool *, _Bool, GucContext, int, GucBoolCheckHook, GucBoolAssignHook, GucShowHook);
9259:	void DefineCustomEnumVariable(const char *, const char *, const char *, int *, int, const struct config_enum_entry *, GucContext, int, GucEnumCheckHook, GucEnumAssignHook, GucShowHook);
9174:	void DefineCustomIntVariable(const char *, const char *, const char *, int *, int, int, int, GucContext, int, GucIntCheckHook, GucIntAssignHook, GucShowHook);
9204:	void DefineCustomRealVariable(const char *, const char *, const char *, double *, double, double, double, GucContext, int, GucRealCheckHook, GucRealAssignHook, GucShowHook);
9234:	void DefineCustomStringVariable(const char *, const char *, const char *, char **, const char *, GucContext, int, GucStringCheckHook, GucStringAssignHook, GucShowHook);
9287:	void EmitWarningsOnPlaceholders(const char *);
10592:	Size EstimateGUCStateSpace(void);
8695:	void ExecSetVariableStmt(VariableSetStmt *, _Bool);
8819:	char *ExtractSetVariableArgs(VariableSetStmt *);
11089:	ArrayType *GUCArrayAdd(ArrayType *, const char *, const char *);
11169:	ArrayType *GUCArrayDelete(ArrayType *, const char *);
11241:	ArrayType *GUCArrayReset(ArrayType *);
11387:	void GUC_check_errcode(int);
8107:	const char *GetConfigOption(const char *, _Bool, _Bool);
9558:	char *GetConfigOptionByName(const char *, const char **, _Bool);
9588:	void GetConfigOptionByNum(int, const char **, _Bool *);
8202:	int GetConfigOptionFlags(const char *, _Bool);
8156:	const char *GetConfigOptionResetString(const char *);
9816:	int GetNumConfigOptions(void);
9313:	void GetPGVariable(const char *, DestReceiver *);
9322:	TupleDesc GetPGVariableResultDesc(const char *);
5599:	void InitializeGUCOptions(void);
6201:	int NewGUCNestLevel(void);
10986:	void ParseLongOption(const char *, char **, char **);
11024:	void ProcessGUCArray(ArrayType *, GucContext, GucSource, GucAction);
6546:	void ReportChangedGUCOptions(void);
5997:	void ResetAllOptions(void);
10821:	void RestoreGUCState(void *);
5822:	_Bool SelectConfigFiles(const char *, const char *);
10735:	void SerializeGUCState(Size, char *);
8083:	void SetConfigOption(const char *, const char *, GucContext, GucSource);
8839:	void SetPGVariable(const char *, List *, _Bool);
5261:	void build_guc_variables(void);
7007:	_Bool config_enum_lookup_by_name(struct config_enum *, const char *, int *);
6984:	const char *config_enum_lookup_by_value(struct config_enum *, int);
9465:	struct config_generic **get_explain_guc_options(int *);
5249:	struct config_generic **get_guc_variables(void);
6832:	_Bool parse_int(const char *, int *, int, const char **);
6922:	_Bool parse_real(const char *, double *, int, const char **);
8856:	Datum set_config_by_name(FunctionCallInfo);
7292:	int set_config_option(const char *, const char *, GucContext, GucSource, GucAction, _Bool, int, _Bool);
10002:	Datum show_all_file_settings(FunctionCallInfo);
9868:	Datum show_all_settings(FunctionCallInfo);
9826:	Datum show_config_by_name(FunctionCallInfo);
9844:	Datum show_config_by_name_missing_ok(FunctionCallInfo);
5655:	static void InitializeGUCOptionsFromEnvironment(void);
5701:	static void InitializeOneGUCOption(struct config_generic *);
6592:	static void ReportGUCOption(struct config_generic *);
9385:	static void ShowAllGUCConfig(DestReceiver *);
9357:	static void ShowGUCConfigOption(const char *, DestReceiver *);
10111:	static char *_ShowOption(struct config_generic *, _Bool);
5348:	static _Bool add_guc_variable(struct config_generic *, int);
5426:	static struct config_generic *add_placeholder_variable(const char *, int);
12140:	static void assign_application_name(const char *, void *);
12259:	static void assign_backtrace_functions(const char *, void *);
11729:	static void assign_log_destination(const char *, void *);
12102:	static void assign_pgstat_temp_directory(const char *, void *);
12338:	static void assign_recovery_target(const char *, void *);
12506:	static void assign_recovery_target_lsn(const char *, void *);
12470:	static void assign_recovery_target_name(const char *, void *);
12444:	static void assign_recovery_target_time(const char *, void *);
12295:	static void assign_recovery_target_timeline(const char *, void *);
12371:	static void assign_recovery_target_xid(const char *, void *);
11755:	static void assign_session_replication_role(int, void *);
11735:	static void assign_syslog_facility(int, void *);
11745:	static void assign_syslog_ident(const char *, void *);
11955:	static void assign_tcp_keepalives_count(int, void *);
11911:	static void assign_tcp_keepalives_idle(int, void *);
11938:	static void assign_tcp_keepalives_interval(int, void *);
11972:	static void assign_tcp_user_timeout(int, void *);
11875:	static void assign_timezone_abbreviations(const char *, void *);
11666:	static void assign_wal_consistency_checking(const char *, void *);
11400:	static _Bool call_bool_check_hook(struct config_bool *, _Bool *, void **, GucSource, int);
11552:	static _Bool call_enum_check_hook(struct config_enum *, int *, void **, GucSource, int);
11434:	static _Bool call_int_check_hook(struct config_int *, int *, void **, GucSource, int);
11468:	static _Bool call_real_check_hook(struct config_real *, double *, void **, GucSource, int);
11502:	static _Bool call_string_check_hook(struct config_string *, char **, void **, GucSource, int);
10453:	static _Bool can_skip_gucvar(struct config_generic *);
12131:	static _Bool check_application_name(char **, void **, GucSource);
11998:	static _Bool check_autovacuum_max_workers(int *, void **, GucSource);
12016:	static _Bool check_autovacuum_work_mem(int *, void **, GucSource);
12203:	static _Bool check_backtrace_functions(char **, void **, GucSource);
11781:	static _Bool check_bonjour(_Bool *, void **, GucSource);
11832:	static _Bool check_canonical_path(char **, void **, GucSource);
12088:	static _Bool check_client_connection_check_interval(int *, void **, GucSource);
12147:	static _Bool check_cluster_name(char **, void **, GucSource);
12532:	static _Bool check_default_with_oids(_Bool *, void **, GucSource);
12048:	static _Bool check_effective_io_concurrency(int *, void **, GucSource);
12074:	static _Bool check_huge_page_size(int *, void **, GucSource);
11672:	static _Bool check_log_destination(char **, void **, GucSource);
11818:	static _Bool check_log_stats(_Bool *, void **, GucSource);
12061:	static _Bool check_maintenance_io_concurrency(int *, void **, GucSource);
12007:	static _Bool check_max_wal_senders(int *, void **, GucSource);
12039:	static _Bool check_max_worker_processes(int *, void **, GucSource);
11989:	static _Bool check_maxconnections(int *, void **, GucSource);
12522:	static _Bool check_primary_slot_name(char **, void **, GucSource);
12327:	static _Bool check_recovery_target(char **, void **, GucSource);
12486:	static _Bool check_recovery_target_lsn(char **, void **, GucSource);
12457:	static _Bool check_recovery_target_name(char **, void **, GucSource);
12394:	static _Bool check_recovery_target_time(char **, void **, GucSource);
12265:	static _Bool check_recovery_target_timeline(char **, void **, GucSource);
12351:	static _Bool check_recovery_target_xid(char **, void **, GucSource);
11794:	static _Bool check_ssl(_Bool *, void **, GucSource);
11807:	static _Bool check_stage_log_stats(_Bool *, void **, GucSource);
11766:	static _Bool check_temp_buffers(int *, void **, GucSource);
11845:	static _Bool check_timezone_abbreviations(char **, void **, GucSource);
11592:	static _Bool check_wal_consistency_checking(char **, void **, GucSource);
7033:	static char *config_enum_get_options(struct config_enum *, const char *, const char *, const char *);
6690:	static void convert_int_from_base_unit(int64, int, int64 *, const char **);
6732:	static void convert_real_from_base_unit(double, int, double *, const char **);
6632:	static _Bool convert_to_base_unit(double, const char *, int, double *);
8967:	static void define_custom_variable(struct config_generic *);
5225:	static void discard_stack_value(struct config_generic *, config_var_value *);
10615:	static void do_serialize(char **, Size *, const char *, ...);
10645:	static void do_serialize_binary(char **, Size *, void *, Size);
12318:	static void error_multiple_recovery_targets(void);
10493:	static Size estimate_variable_size(struct config_generic *);
5126:	static _Bool extra_field_used(struct config_generic *, void *);
5484:	static struct config_generic *find_option(const char *, _Bool, _Bool, int);
8225:	static char *flatten_set_variable_args(const char *, List *);
6775:	static const char *get_config_unit_name(int);
5038:	static void *guc_malloc(int, size_t);
5565:	static int guc_name_compare(const char *, const char *);
5054:	static void *guc_realloc(int, void *, size_t);
10799:	static void guc_restore_error_context_callback(void *);
5070:	static char *guc_strdup(int, const char *);
5553:	static int guc_var_compare(const void *, const void *);
8907:	static struct config_generic *init_custom_variable(const char *, const char *, const char *, GucContext, int, enum config_type, size_t);
7091:	static _Bool parse_and_validate_value(struct config_generic *, const char *, const char *, GucSource, int, union config_var_val *, void **);
11895:	static void pg_timezone_abbrev_initialize(void);
6100:	static void push_old_value(struct config_generic *, GucAction);
10762:	static char *read_gucstate(char **, char *);
10785:	static void read_gucstate_binary(char **, char *, void *, Size);
9067:	static void reapply_stacked_values(struct config_generic *, struct config_string *, GucStack *, const char *, GucContext, GucSource);
8415:	static void replace_auto_config_value(ConfigVariable **, ConfigVariable **, const char *, const char *);
10660:	static void serialize_variable(char **, Size *, struct config_generic *);
8049:	static void set_config_sourcefile(const char *, char *, int);
5171:	static void set_extra_field(struct config_generic *, void **, void *);
5191:	static void set_stack_value(struct config_generic *, config_var_value *);
5110:	static void set_string_field(struct config_string *, char **, char *);
11902:	static const char *show_archive_command(void);
12174:	static const char *show_data_directory_mode(void);
12183:	static const char *show_in_hot_standby(void);
12165:	static const char *show_log_file_mode(void);
11962:	static const char *show_tcp_keepalives_count(void);
11928:	static const char *show_tcp_keepalives_idle(void);
11945:	static const char *show_tcp_keepalives_interval(void);
11979:	static const char *show_tcp_user_timeout(void);
12156:	static const char *show_unix_socket_permissions(void);
5087:	static _Bool string_field_used(struct config_string *, char *);
5390:	static _Bool valid_custom_variable_name(const char *);
11315:	static _Bool validate_option_array_item(const char *, const char *, _Bool);
8347:	static void write_auto_conf_file(int, const char *, ConfigVariable *);

File hash-string.c:
31:	unsigned long __hash_string(const char *);

File hash.c:
363:	IndexScanDesc hashbeginscan(Relation, int, int);
683:	void hashbucketcleanup(Relation, Bucket, Buffer, BlockNumber, BufferAccessStrategy, uint32, uint32, uint32, double *, double *, _Bool, IndexBulkDeleteCallback, void *);
111:	IndexBuildResult *hashbuild(Relation, Relation, IndexInfo *);
197:	void hashbuildempty(Relation);
458:	IndexBulkDeleteResult *hashbulkdelete(IndexVacuumInfo *, IndexBulkDeleteResult *, IndexBulkDeleteCallback, void *);
427:	void hashendscan(IndexScanDesc);
331:	int64 hashgetbitmap(IndexScanDesc, TIDBitmap *);
279:	_Bool hashgettuple(IndexScanDesc, ScanDirection);
56:	Datum hashhandler(FunctionCallInfo);
247:	_Bool hashinsert(Relation, Datum *, _Bool *, ItemPointer, Relation, IndexUniqueCheck, _Bool, IndexInfo *);
393:	void hashrescan(IndexScanDesc, ScanKey, int, ScanKey, int);
644:	IndexBulkDeleteResult *hashvacuumcleanup(IndexVacuumInfo *, IndexBulkDeleteResult *);
206:	static void hashbuildCallback(Relation, ItemPointer, Datum *, _Bool *, _Bool, void *);

File hash_xlog.c:
1107:	void hash_mask(char *, BlockNumber);
1053:	void hash_redo(XLogReaderState *);
176:	static void hash_xlog_add_ovfl_page(XLogReaderState *);
845:	static void hash_xlog_delete(XLogReaderState *);
66:	static void hash_xlog_init_bitmap_page(XLogReaderState *);
30:	static void hash_xlog_init_meta_page(XLogReaderState *);
128:	static void hash_xlog_insert(XLogReaderState *);
505:	static void hash_xlog_move_page_contents(XLogReaderState *);
315:	static void hash_xlog_split_allocate_page(XLogReaderState *);
923:	static void hash_xlog_split_cleanup(XLogReaderState *);
446:	static void hash_xlog_split_complete(XLogReaderState *);
432:	static void hash_xlog_split_page(XLogReaderState *);
631:	static void hash_xlog_squeeze_page(XLogReaderState *);
948:	static void hash_xlog_update_meta_page(XLogReaderState *);
975:	static void hash_xlog_vacuum_one_page(XLogReaderState *);

File hashdesc.c:
20:	void hash_desc(StringInfo, XLogReaderState *);
125:	const char *hash_identify(uint8);

File hashfn.c:
146:	uint32 hash_bytes(const unsigned char *, int);
372:	uint64 hash_bytes_extended(const unsigned char *, int, uint64);
610:	uint32 hash_bytes_uint32(uint32);
631:	uint64 hash_bytes_uint32_extended(uint32, uint64);
660:	uint32 string_hash(const void *, Size);
677:	uint32 tag_hash(const void *, Size);
688:	uint32 uint32_hash(const void *, Size);

File hashfunc.c:
48:	Datum hashchar(FunctionCallInfo);
54:	Datum hashcharextended(FunctionCallInfo);
129:	Datum hashenum(FunctionCallInfo);
135:	Datum hashenumextended(FunctionCallInfo);
141:	Datum hashfloat4(FunctionCallInfo);
177:	Datum hashfloat4extended(FunctionCallInfo);
194:	Datum hashfloat8(FunctionCallInfo);
218:	Datum hashfloat8extended(FunctionCallInfo);
60:	Datum hashint2(FunctionCallInfo);
66:	Datum hashint2extended(FunctionCallInfo);
72:	Datum hashint4(FunctionCallInfo);
78:	Datum hashint4extended(FunctionCallInfo);
84:	Datum hashint8(FunctionCallInfo);
104:	Datum hashint8extended(FunctionCallInfo);
251:	Datum hashname(FunctionCallInfo);
259:	Datum hashnameextended(FunctionCallInfo);
117:	Datum hashoid(FunctionCallInfo);
123:	Datum hashoidextended(FunctionCallInfo);
233:	Datum hashoidvector(FunctionCallInfo);
241:	Datum hashoidvectorextended(FunctionCallInfo);
268:	Datum hashtext(FunctionCallInfo);
325:	Datum hashtextextended(FunctionCallInfo);
386:	Datum hashvarlena(FunctionCallInfo);
401:	Datum hashvarlenaextended(FunctionCallInfo);

File hashinsert.c:
36:	void _hash_doinsert(Relation, IndexTuple, Relation);
299:	void _hash_pgaddmultitup(Relation, Buffer, IndexTuple *, OffsetNumber *, uint16);
268:	OffsetNumber _hash_pgaddtup(Relation, Buffer, Size, IndexTuple);
338:	static void _hash_vacuum_one_page(Relation, Relation, Buffer, Buffer);

File hashovfl.c:
111:	Buffer _hash_addovflpage(Relation, Buffer, Buffer, _Bool);
489:	BlockNumber _hash_freeovflpage(Relation, Buffer, Buffer, Buffer, IndexTuple *, OffsetNumber *, Size *, uint16, BufferAccessStrategy);
740:	void _hash_initbitmapbuffer(Buffer, uint16, _Bool);
61:	uint32 _hash_ovflblkno_to_bitno(HashMetaPage, BlockNumber);
805:	void _hash_squeezebucket(Relation, Bucket, BlockNumber, Buffer, BufferAccessStrategy);
447:	static uint32 _hash_firstfreebit(uint32);
34:	static BlockNumber bitno_to_blkno(HashMetaPage, uint32);

File hashpage.c:
276:	void _hash_dropbuf(Relation, Buffer);
288:	void _hash_dropscanbuf(Relation, HashScanOpaque);
613:	void _hash_expandtable(Relation, Buffer);
1355:	void _hash_finish_split(Relation, Buffer, Buffer, Bucket, uint32, uint32, uint32);
1558:	Buffer _hash_getbucketbuf_from_hashkey(Relation, uint32, int, HashMetaPage *);
69:	Buffer _hash_getbuf(Relation, BlockNumber, int, int);
95:	Buffer _hash_getbuf_with_condlock_cleanup(Relation, BlockNumber, int);
238:	Buffer _hash_getbuf_with_strategy(Relation, BlockNumber, int, int, BufferAccessStrategy);
1500:	HashMetaPage _hash_getcachedmetap(Relation, Buffer *, _Bool);
134:	Buffer _hash_getinitbuf(Relation, BlockNumber);
197:	Buffer _hash_getnewbuf(Relation, BlockNumber, ForkNumber);
326:	uint32 _hash_init(Relation, double, ForkNumber);
497:	void _hash_init_metabuffer(Buffer, double, RegProcedure, uint16, _Bool);
156:	void _hash_initbuf(Buffer, uint32, uint32, uint32, _Bool);
595:	void _hash_pageinit(Page, Size);
265:	void _hash_relbuf(Relation, Buffer);
991:	static _Bool _hash_alloc_buckets(Relation, BlockNumber, uint32);
1072:	static void _hash_splitbucket(Relation, Buffer, Bucket, Bucket, Buffer, Buffer, HTAB *, uint32, uint32, uint32);
1473:	static void log_split_page(Relation, Buffer);

File hashsearch.c:
292:	_Bool _hash_first(IndexScanDesc, ScanDirection);
48:	_Bool _hash_next(IndexScanDesc, ScanDirection);
608:	static int _hash_load_qualified_items(IndexScanDesc, Page, OffsetNumber, ScanDirection);
133:	static void _hash_readnext(IndexScanDesc, Buffer *, Page *, HashPageOpaque *);
452:	static _Bool _hash_readpage(IndexScanDesc, Buffer *, ScanDirection);
200:	static void _hash_readprev(IndexScanDesc, Buffer *, Page *, HashPageOpaque *);
714:	static void _hash_saveitem(HashScanOpaque, int, OffsetNumber, IndexTuple);

File hashsort.c:
119:	void _h_indexbuild(HSpool *, Relation);
108:	void _h_spool(HSpool *, ItemPointer, Datum *, _Bool *);
98:	void _h_spooldestroy(HSpool *);
59:	HSpool *_h_spoolinit(Relation, Relation, uint32);

File hashutil.c:
351:	OffsetNumber _hash_binsearch(Page, uint32);
389:	OffsetNumber _hash_binsearch_last(Page, uint32);
211:	void _hash_checkpage(Relation, Buffer, int);
32:	_Bool _hash_checkqual(IndexScanDesc, IndexTuple);
319:	_Bool _hash_convert_tuple(Relation, Datum *, _Bool *, Datum *, _Bool *);
83:	uint32 _hash_datum2hashkey(Relation, Datum);
103:	uint32 _hash_datum2hashkey_type(Relation, Datum, Oid);
292:	uint32 _hash_get_indextuple_hashkey(IndexTuple);
462:	BlockNumber _hash_get_newblock_from_oldbucket(Relation, Bucket);
495:	Bucket _hash_get_newbucket_from_oldbucket(Relation, Bucket, uint32, uint32);
423:	BlockNumber _hash_get_oldblock_from_newbucket(Relation, Bucket);
175:	uint32 _hash_get_totalbuckets(uint32);
126:	Bucket _hash_hashkey2bucket(uint32, uint32, uint32, uint32);
537:	void _hash_kill_items(IndexScanDesc);
143:	uint32 _hash_spareindex(uint32);
276:	bytea *hashoptions(Datum, _Bool);

File hashvalidate.c:
352:	void hashadjustmembers(Oid, Oid, List *, List *);
47:	_Bool hashvalidate(Oid);
275:	static _Bool check_hash_func_signature(Oid, int16, Oid);

File hba.c:
2978:	int check_usermap(const char *, const char *, const char *, _Bool);
3157:	const char *hba_authname(UserAuth);
3144:	void hba_getauthmethod(hbaPort *);
2239:	_Bool load_hba(void);
3033:	_Bool load_ident(void);
2704:	Datum pg_hba_file_rules(FunctionCallInfo);
158:	_Bool pg_isblank(const char);
630:	static _Bool check_db(const char *, const char *, Oid, List *);
2125:	static void check_hba(hbaPort *);
713:	static _Bool check_hostname(hbaPort *, const char *);
2843:	static void check_ident_usermap(IdentLine *, const char *, const char *, const char *, _Bool, _Bool *, _Bool *);
806:	static _Bool check_ip(SockAddr *, struct sockaddr *, struct sockaddr *);
820:	static void check_network_callback(struct sockaddr *, struct sockaddr *, void *);
606:	static _Bool check_role(const char *, Oid, List *);
847:	static _Bool check_same_host_or_net(SockAddr *, IPCompareMethod);
313:	static HbaToken *copy_hba_token(HbaToken *);
2470:	static void fill_hba_line(Tuplestorestate *, TupleDesc, int, HbaLine *, const char *);
2650:	static void fill_hba_view(Tuplestorestate *, TupleDesc);
2346:	static ArrayType *gethba_options(HbaLine *);
693:	static _Bool hostname_match(const char *, const char *);
669:	static _Bool ipv4eq(struct sockaddr_in *, struct sockaddr_in *);
677:	static _Bool ipv6eq(struct sockaddr_in6 *, struct sockaddr_in6 *);
582:	static _Bool is_member(Oid, const char *);
294:	static HbaToken *make_hba_token(const char *, _Bool);
336:	static List *next_field_expand(const char *, char **, int, char **);
201:	static _Bool next_token(char **, char *, int, _Bool *, _Bool *, int, char **);
1705:	static _Bool parse_hba_auth_opt(char *, char *, HbaLine *, int, char **);
966:	static HbaLine *parse_hba_line(TokenizedLine *, int);
2766:	static IdentLine *parse_ident_line(TokenizedLine *);
476:	static MemoryContext tokenize_file(const char *, FILE *, List **, int);
378:	static List *tokenize_inc_file(List *, const char *, const char *, int, char **);

File heap.c:
2584:	List *AddRelationNewConstraints(Relation, List *, List *, _Bool, _Bool, _Bool, const char *);
498:	void CheckAttributeNamesTypes(TupleDesc, char, int);
590:	void CheckAttributeType(const char *, Oid, Oid, List *, int);
3191:	void CopyStatistics(Oid, Oid);
1586:	void DeleteAttributeTuples(Oid);
1557:	void DeleteRelationTuple(Oid);
1623:	void DeleteSystemAttributeTuples(Oid);
739:	void InsertPgAttributeTuples(Relation, TupleDesc, Oid, Datum *, CatalogIndexState);
924:	void InsertPgClassTuple(Relation, Relation, Oid, Datum, Datum);
2082:	void RelationClearMissing(Relation);
1777:	void RemoveAttrDefault(Oid, AttrNumber, DropBehavior, _Bool, _Bool);
1832:	void RemoveAttrDefaultById(Oid);
1664:	void RemoveAttributeById(Oid, AttrNumber);
3766:	void RemovePartitionKeyByRelId(Oid);
3236:	void RemoveStatistics(Oid, AttrNumber);
2150:	void SetAttrMissing(Oid, char *, char *);
2218:	Oid StoreAttrDefault(Relation, AttrNumber, Node *, _Bool, _Bool);
3797:	void StorePartitionBound(Relation, Relation, PartitionBoundSpec *);
3639:	void StorePartitionKey(Relation, char, int16, AttrNumber *, List *, Oid *, Oid *);
263:	const FormData_pg_attribute *SystemAttributeByName(const char *);
251:	const FormData_pg_attribute *SystemAttributeDefinition(AttrNumber);
3078:	Node *cookDefault(ParseState *, Node *, Oid, int32, const char *, char);
296:	Relation heap_create(const char *, Oid, Oid, Oid, Oid, Oid, TupleDesc, char, char, _Bool, _Bool, _Bool, TransactionId *, MultiXactId *);
1146:	Oid heap_create_with_catalog(const char *, Oid, Oid, Oid, Oid, Oid, Oid, Oid, TupleDesc, List *, char, char, _Bool, _Bool, OnCommitAction, Datum, _Bool, _Bool, _Bool, Oid, ObjectAddress *);
1905:	void heap_drop_with_catalog(Oid);
3331:	void heap_truncate(List *);
3416:	void heap_truncate_check_FKs(List *, _Bool);
3511:	List *heap_truncate_find_FKs(List *);
3372:	void heap_truncate_one_rel(Relation);
846:	static void AddNewAttributeTuples(Oid, TupleDesc, char);
997:	static void AddNewRelationTuple(Relation, Relation, Oid, Oid, Oid, Oid, char, TransactionId, TransactionId, Datum, Datum);
1068:	static ObjectAddress AddNewRelationType(const char *, Oid, Oid, char, Oid, Oid, Oid);
2834:	static _Bool MergeWithExistingConstraint(Relation, const char *, Node *, _Bool, _Bool, _Bool, _Bool);
1524:	static void RelationRemoveInheritance(Oid);
3283:	static void RelationTruncateIndexes(Relation);
2984:	static void SetRelationNumChecks(Relation, int);
2512:	static void StoreConstraints(Relation, List *, _Bool);
2404:	static Oid StoreRelCheck(Relation, const char *, Node *, _Bool, _Bool, int, _Bool, _Bool);
3060:	static void check_nested_generated(ParseState *, Node *);
3018:	static _Bool check_nested_generated_walker(Node *, void *);
3153:	static Node *cookConstraint(ParseState *, Node *, char *);

File heapam.c:
2049:	void FreeBulkInsertState(BulkInsertState);
2035:	BulkInsertState GetBulkInsertState(void);
9884:	void HeapCheckForSerializableConflictOut(_Bool, Relation, HeapTuple, Buffer, Snapshot);
6912:	TransactionId HeapTupleGetUpdateXid(HeapTupleHeader);
7275:	void HeapTupleHeaderAdvanceLatestRemovedXid(HeapTupleHeader, TransactionId *);
2061:	void ReleaseBulkInsertStatePin(BulkInsertState);
9745:	void heap2_redo(XLogReaderState *);
5934:	void heap_abort_speculative(Relation, ItemPointer);
1187:	TableScanDesc heap_beginscan(Relation, Snapshot, int, ScanKey, ParallelTableScanDesc, uint32);
2728:	TM_Result heap_delete(Relation, ItemPointer, CommandId, Snapshot, _Bool, TM_FailureData *, _Bool);
1309:	void heap_endscan(TableScanDesc);
6727:	void heap_execute_freeze_tuple(HeapTupleHeader, xl_heap_freeze_tuple *);
1600:	_Bool heap_fetch(Relation, Snapshot, HeapTuple, Buffer *);
1618:	_Bool heap_fetch_extended(Relation, Snapshot, HeapTuple, Buffer *, _Bool);
5843:	void heap_finish_speculative(Relation, ItemPointer);
6748:	_Bool heap_freeze_tuple(HeapTupleHeader, TransactionId, TransactionId, TransactionId, TransactionId);
1890:	void heap_get_latest_tid(TableScanDesc, ItemPointer);
1342:	HeapTuple heap_getnext(TableScanDesc, ScanDirection);
1391:	_Bool heap_getnextslot(TableScanDesc, ScanDirection, TupleTableSlot *);
1494:	_Bool heap_getnextslot_tidrange(TableScanDesc, ScanDirection, TupleTableSlot *);
1738:	_Bool heap_hot_search_buffer(ItemPointer, Relation, Buffer, Snapshot, HeapTuple, _Bool *, _Bool);
7365:	TransactionId heap_index_delete_tuples(Relation, TM_IndexDeleteOp *);
6087:	void heap_inplace_update(Relation, HeapTuple);
2088:	void heap_insert(Relation, HeapTuple, CommandId, int, BulkInsertState);
4334:	TM_Result heap_lock_tuple(Relation, HeapTuple, CommandId, LockTupleMode, LockWaitPolicy, _Bool, Buffer *, TM_FailureData *);
9788:	void heap_mask(char *, BlockNumber);
2330:	void heap_multi_insert(Relation, TupleTableSlot **, int, CommandId, int, BulkInsertState);
6498:	_Bool heap_prepare_freeze_tuple(HeapTupleHeader, TransactionId, TransactionId, TransactionId, TransactionId, xl_heap_freeze_tuple *, _Bool *);
9699:	void heap_redo(XLogReaderState *);
1272:	void heap_rescan(TableScanDesc, ScanKey, _Bool, _Bool, _Bool, _Bool);
1421:	void heap_set_tidrange(TableScanDesc, ItemPointer, ItemPointer);
350:	void heap_setscanlimits(TableScanDesc, BlockNumber, BlockNumber);
7143:	_Bool heap_tuple_needs_eventual_freeze(HeapTupleHeader);
7196:	_Bool heap_tuple_needs_freeze(HeapTupleHeader, TransactionId, MultiXactId, Buffer);
3189:	TM_Result heap_update(Relation, ItemPointer, HeapTuple, CommandId, Snapshot, _Bool, TM_FailureData *, LockTupleMode *);
373:	void heapgetpage(TableScanDesc, BlockNumber);
8026:	XLogRecPtr log_heap_freeze(Relation, Buffer, TransactionId, xl_heap_freeze_tuple *, int);
8067:	XLogRecPtr log_heap_visible(RelFileNode, Buffer, Buffer, TransactionId, uint8);
3143:	void simple_heap_delete(Relation, ItemPointer);
2670:	void simple_heap_insert(Relation, HeapTuple);
4246:	void simple_heap_update(Relation, ItemPointer, HeapTuple);
7127:	static _Bool ConditionalMultiXactIdWait(MultiXactId, MultiXactStatus, uint16, Relation, int *);
7027:	static _Bool Do_MultiXactIdWait(MultiXactId, MultiXactStatus, uint16, _Bool, Relation, ItemPointer, XLTW_Oper, int *);
6928:	static _Bool DoesMultiXactIdConflict(MultiXactId, uint16, LockTupleMode, _Bool *);
8403:	static HeapTuple ExtractReplicaIdentity(Relation, HeapTuple, _Bool, _Bool *);
6198:	static TransactionId FreezeMultiXactId(MultiXactId, uint16, TransactionId, TransactionId, TransactionId, MultiXactId, uint16 *);
6779:	static void GetMultiXactIdHintBits(MultiXactId, uint16 *, uint16 *);
4150:	static Bitmapset *HeapDetermineColumnsInfo(Relation, Bitmapset *, Bitmapset *, HeapTuple, HeapTuple, _Bool *);
6860:	static TransactionId MultiXactIdGetUpdateXid(TransactionId, uint16);
7105:	static void MultiXactIdWait(MultiXactId, MultiXactStatus, uint16, Relation, ItemPointer, XLTW_Oper, int *);
2013:	static void UpdateXmaxHintBits(HeapTupleHeader, Buffer, TransactionId);
7791:	static int bottomup_nblocksfavorable(IndexDeleteCounts *, int, TM_IndexDelete *);
7907:	static int bottomup_sort_and_shrink(TM_IndexDeleteOp *);
7834:	static int bottomup_sort_and_shrink_cmp(const void *, const void *);
2683:	static uint8 compute_infobits(uint16, uint16);
5081:	static void compute_new_xmax_infomask(TransactionId, uint16, uint16, TransactionId, LockTupleMode, _Bool, TransactionId *, uint16 *, uint16 *);
8858:	static void fix_infomask_from_infobits(uint8, uint16 *, uint16 *);
4286:	static MultiXactStatus get_mxact_status_for_lock(LockTupleMode, _Bool);
5032:	static _Bool heap_acquire_tuplock(Relation, ItemPointer, LockTupleMode, LockWaitPolicy, _Bool *);
4096:	static _Bool heap_attr_equals(TupleDesc, int, Datum, Datum, _Bool, _Bool);
5798:	static TM_Result heap_lock_updated_tuple(Relation, HeapTuple, ItemPointer, TransactionId, LockTupleMode);
5453:	static TM_Result heap_lock_updated_tuple_rec(Relation, ItemPointer, TransactionId, LockTupleMode);
2276:	static HeapTuple heap_prepare_insert(Relation, HeapTuple, TransactionId, CommandId, int);
9491:	static void heap_xlog_confirm(XLogReaderState *);
8879:	static void heap_xlog_delete(XLogReaderState *);
8800:	static void heap_xlog_freeze_page(XLogReaderState *);
9658:	static void heap_xlog_inplace(XLogReaderState *);
8952:	static void heap_xlog_insert(XLogReaderState *);
9527:	static void heap_xlog_lock(XLogReaderState *);
9598:	static void heap_xlog_lock_updated(XLogReaderState *);
9072:	static void heap_xlog_multi_insert(XLogReaderState *);
8497:	static void heap_xlog_prune(XLogReaderState *);
9219:	static void heap_xlog_update(XLogReaderState *, _Bool);
8583:	static void heap_xlog_vacuum(XLogReaderState *);
8658:	static void heap_xlog_visible(XLogReaderState *);
508:	static void heapgettup(HeapScanDesc, ScanDirection, int, ScanKey);
846:	static void heapgettup_pagemode(HeapScanDesc, ScanDirection, int, ScanKey);
7317:	static void index_delete_prefetch_buffer(Relation, IndexDeletePrefetchState *, int);
7694:	static void index_delete_sort(TM_IndexDeleteOp *);
7658:	static int index_delete_sort_cmp(TM_IndexDelete *, TM_IndexDelete *);
229:	static void initscan(HeapScanDesc, ScanKey, _Bool);
8321:	static XLogRecPtr log_heap_new_cid(Relation, HeapTuple);
8099:	static XLogRecPtr log_heap_update(Relation, Buffer, Buffer, HeapTuple, HeapTuple, HeapTuple, _Bool, _Bool);
5362:	static TM_Result test_lockmode_for_conflict(MultiXactStatus, TransactionId, LockTupleMode, HeapTuple, _Bool *);
2705:	static _Bool xmax_infomask_changed(uint16, uint16);

File heapam_handler.c:
2598:	const TableAmRoutine *GetHeapamTableAmRoutine(void);
2604:	Datum heap_tableam_handler(FunctionCallInfo);
2488:	static _Bool SampleHeapTupleVisible(TableScanDesc, Buffer, HeapTuple, OffsetNumber);
2096:	static void heapam_estimate_rel_size(Relation, int32 *, BlockNumber *, double *, double *);
180:	static _Bool heapam_fetch_row_version(Relation, ItemPointer, Snapshot, TupleTableSlot *);
1160:	static double heapam_index_build_range_scan(Relation, Relation, IndexInfo *, _Bool, _Bool, _Bool, BlockNumber, BlockNumber, IndexBuildCallback, void *, TableScanDesc);
79:	static IndexFetchTableData *heapam_index_fetch_begin(Relation);
102:	static void heapam_index_fetch_end(IndexFetchTableData *);
90:	static void heapam_index_fetch_reset(IndexFetchTableData *);
112:	static _Bool heapam_index_fetch_tuple(struct IndexFetchTableData *, ItemPointer, Snapshot, TupleTableSlot *, _Bool *, _Bool *);
1735:	static void heapam_index_validate_scan(Relation, Relation, IndexInfo *, Snapshot, ValidateIndexState *);
626:	static void heapam_relation_copy_data(Relation, const RelFileNode *);
681:	static void heapam_relation_copy_for_cluster(Relation, Relation, Relation, _Bool, TransactionId, TransactionId *, MultiXactId *, double *, double *, double *);
2031:	static _Bool heapam_relation_needs_toast_table(Relation);
620:	static void heapam_relation_nontransactional_truncate(Relation);
570:	static void heapam_relation_set_new_filenode(Relation, const RelFileNode *, char, TransactionId *, MultiXactId *);
2079:	static Oid heapam_relation_toast_am(Relation);
992:	static _Bool heapam_scan_analyze_next_block(TableScanDesc, BlockNumber, BufferAccessStrategy);
1017:	static _Bool heapam_scan_analyze_next_tuple(TableScanDesc, TransactionId, double *, double *, TupleTableSlot *);
2113:	static _Bool heapam_scan_bitmap_next_block(TableScanDesc, TBMIterateResult *);
2226:	static _Bool heapam_scan_bitmap_next_tuple(TableScanDesc, TBMIterateResult *, TupleTableSlot *);
1986:	static BlockNumber heapam_scan_get_blocks_done(HeapScanDesc);
2267:	static _Bool heapam_scan_sample_next_block(TableScanDesc, SampleScanState *);
2341:	static _Bool heapam_scan_sample_next_tuple(TableScanDesc, SampleScanState *, TupleTableSlot *);
67:	static const TupleTableSlotOps *heapam_slot_callbacks(Relation);
283:	static void heapam_tuple_complete_speculative(Relation, TupleTableSlot *, uint32, _Bool);
300:	static TM_Result heapam_tuple_delete(Relation, ItemPointer, CommandId, Snapshot, Snapshot, _Bool, TM_FailureData *, _Bool);
241:	static void heapam_tuple_insert(Relation, TupleTableSlot *, CommandId, int, BulkInsertState);
260:	static void heapam_tuple_insert_speculative(Relation, TupleTableSlot *, CommandId, int, BulkInsertState, uint32);
348:	static TM_Result heapam_tuple_lock(Relation, ItemPointer, Snapshot, TupleTableSlot *, CommandId, LockTupleMode, LockWaitPolicy, uint8, TM_FailureData *);
213:	static _Bool heapam_tuple_satisfies_snapshot(Relation, TupleTableSlot *, Snapshot);
204:	static _Bool heapam_tuple_tid_valid(TableScanDesc, ItemPointer);
314:	static TM_Result heapam_tuple_update(Relation, ItemPointer, TupleTableSlot *, CommandId, Snapshot, Snapshot, _Bool, TM_FailureData *, LockTupleMode *, _Bool *);
2458:	static void reform_and_rewrite_tuple(HeapTuple, Relation, Relation, Datum *, _Bool *, RewriteState);

File heapam_visibility.c:
1519:	_Bool HeapTupleHeaderIsOnlyLocked(HeapTupleHeader);
1464:	_Bool HeapTupleIsSurelyDead(HeapTuple, GlobalVisState *);
457:	TM_Result HeapTupleSatisfiesUpdate(HeapTuple, CommandId, Buffer);
1161:	HTSV_Result HeapTupleSatisfiesVacuum(HeapTuple, TransactionId, Buffer);
1195:	HTSV_Result HeapTupleSatisfiesVacuumHorizon(HeapTuple, Buffer, TransactionId *);
1766:	_Bool HeapTupleSatisfiesVisibility(HeapTuple, Snapshot, Buffer);
140:	void HeapTupleSetHintBits(HeapTupleHeader, Buffer, uint16, TransactionId);
339:	static _Bool HeapTupleSatisfiesAny(HeapTuple, Snapshot, Buffer);
742:	static _Bool HeapTupleSatisfiesDirty(HeapTuple, Snapshot, Buffer);
1586:	static _Bool HeapTupleSatisfiesHistoricMVCC(HeapTuple, Snapshot, Buffer);
959:	static _Bool HeapTupleSatisfiesMVCC(HeapTuple, Snapshot, Buffer);
1428:	static _Bool HeapTupleSatisfiesNonVacuumable(HeapTuple, Snapshot, Buffer);
169:	static _Bool HeapTupleSatisfiesSelf(HeapTuple, Snapshot, Buffer);
361:	static _Bool HeapTupleSatisfiesToast(HeapTuple, Snapshot, Buffer);
113:	static void SetHintBits(HeapTupleHeader, Buffer, uint16, TransactionId);
1565:	static _Bool TransactionIdInArray(TransactionId, TransactionId *, Size);

File heapdesc.c:
118:	void heap2_desc(StringInfo, XLogReaderState *);
229:	const char *heap2_identify(uint8);
35:	void heap_desc(StringInfo, XLogReaderState *);
184:	const char *heap_identify(uint8);
20:	static void out_infobits(StringInfo, uint8);

File heaptoast.c:
626:	void heap_fetch_toast_slice(Relation, Oid, int32, int32, int32, struct varlena *);
43:	void heap_toast_delete(Relation, HeapTuple, _Bool);
96:	HeapTuple heap_toast_insert_or_update(Relation, HeapTuple, HeapTuple, int);
563:	HeapTuple toast_build_flattened_tuple(TupleDesc, Datum *, _Bool *);
350:	HeapTuple toast_flatten_tuple(HeapTuple, TupleDesc);
449:	Datum toast_flatten_tuple_to_datum(HeapTupleHeader, uint32, TupleDesc);

File heaptuple.c:
84:	Datum getmissingattr(TupleDesc, int, _Bool *);
359:	_Bool heap_attisnull(HeapTuple, int, TupleDesc);
119:	Size heap_compute_data_size(TupleDesc, Datum *, _Bool *);
1439:	MinimalTuple heap_copy_minimal_tuple(MinimalTuple);
984:	Datum heap_copy_tuple_as_datum(HeapTuple, TupleDesc);
680:	HeapTuple heap_copytuple(HeapTuple);
706:	void heap_copytuple_with_tuple(HeapTuple, HeapTuple);
1249:	void heap_deform_tuple(HeapTuple, TupleDesc, Datum *, _Bool *);
969:	HeapTuple heap_expand_tuple(HeapTuple, TupleDesc);
304:	void heap_fill_tuple(TupleDesc, Datum *, _Bool *, char *, Size, uint16 *, bits8 *);
1356:	MinimalTuple heap_form_minimal_tuple(TupleDesc, Datum *, _Bool *);
1020:	HeapTuple heap_form_tuple(TupleDesc, Datum *, _Bool *);
1427:	void heap_free_minimal_tuple(MinimalTuple);
1338:	void heap_freetuple(HeapTuple);
627:	Datum heap_getsysattr(HeapTuple, int, TupleDesc, _Bool *);
1113:	HeapTuple heap_modify_tuple(HeapTuple, TupleDesc, Datum *, _Bool *, _Bool *);
1181:	HeapTuple heap_modify_tuple_by_cols(HeapTuple, TupleDesc, int, int *, Datum *, _Bool *);
1458:	HeapTuple heap_tuple_from_minimal_tuple(MinimalTuple);
957:	MinimalTuple minimal_expand_tuple(HeapTuple, TupleDesc);
1480:	MinimalTuple minimal_tuple_from_heap_tuple(HeapTuple);
423:	Datum nocachegetattr(HeapTuple, int, TupleDesc);
1498:	size_t varsize_any(void *);
732:	static void expand_tuple(HeapTuple *, MinimalTuple *, HeapTuple, TupleDesc);
175:	static void fill_val(Form_pg_attribute, bits8 **, int *, char **, uint16 *, Datum, _Bool);

File help_config.c:
46:	void GucInfoMain(void);
75:	static _Bool displayStruct(mixedStruct *);
88:	static void printMixedStruct(mixedStruct *);

File herrno-loc.c:
25:	int *__GI___h_errno_location(void);

File herrno.c:
31:	int *__h_errno_location(void);

File herror.c:
100:	const char *__GI_hstrerror(int);
76:	void herror(const char *);

File hio.c:
333:	Buffer RelationGetBufferForTuple(Relation, Size, Buffer, int, BulkInsertState, Buffer *, Buffer *);
36:	void RelationPutHeapTuple(Relation, Buffer, HeapTuple, _Bool);
139:	static void GetVisibilityMapPins(Relation, Buffer, Buffer, BlockNumber, BlockNumber, Buffer *, Buffer *);
89:	static Buffer ReadBufferBI(Relation, BlockNumber, ReadBufferMode, BulkInsertState);
195:	static void RelationAddExtraBlocks(Relation, BulkInsertState);

File hmac.c:
67:	pg_hmac_ctx *pg_hmac_create(pg_cryptohash_type);
220:	int pg_hmac_final(pg_hmac_ctx *, uint8 *, size_t);
258:	void pg_hmac_free(pg_hmac_ctx *);
126:	int pg_hmac_init(pg_hmac_ctx *, const uint8 *, size_t);
203:	int pg_hmac_update(pg_hmac_ctx *, const uint8 *, size_t);

File hooks.c:
57:	void __malloc_check_init(void);
432:	void *malloc_get_state(void);
441:	int malloc_set_state(void *);
245:	static void free_check(void *, const void *);
226:	static void *malloc_check(size_t, const void *);
28:	static void *malloc_hook_ini(size_t, const void *);
148:	static mchunkptr mem2chunk_check(void *, unsigned char **);
350:	static void *memalign_check(size_t, size_t, const void *);
45:	static void *memalign_hook_ini(size_t, size_t, const void *);
267:	static void *realloc_check(void *, size_t, const void *);
36:	static void *realloc_hook_ini(void *, size_t, const void *);

File hsearch.c:
45:	void __hdestroy(void);
38:	int hcreate(size_t);
27:	ENTRY *hsearch(ENTRY, ACTION);

File hsearch_r.c:
63:	int __GI___hcreate_r(size_t, struct hsearch_data *);
112:	void __GI___hdestroy_r(struct hsearch_data *);
145:	int __GI___hsearch_r(ENTRY, ACTION, ENTRY **, struct hsearch_data *);

File htons.c:
24:	uint16_t htons(uint16_t);

File hyperloglog.c:
167:	void addHyperLogLog(hyperLogLogState *, uint32);
186:	double estimateHyperLogLog(hyperLogLogState *);
151:	void freeHyperLogLog(hyperLogLogState *);
66:	void initHyperLogLog(hyperLogLogState *, uint8);
128:	void initHyperLogLogError(hyperLogLogState *, double);
242:	static uint8 rho(uint32, uint8);

File iconv.c:
31:	size_t iconv(iconv_t, char **, size_t *, char **, size_t *);

File iconv_close.c:
27:	int iconv_close(iconv_t);

File iconv_open.c:
32:	iconv_t iconv_open(const char *, const char *);

File idna.c:
158:	int __GI___idna_from_dns_encoding(const char *, char **);
113:	int __GI___idna_to_dns_encoding(const char *, char **);
46:	static void *functions_allocate(void *);
84:	static void functions_deallocate(void *, void *);

File idna_name_classify.c:
26:	enum idna_name_classification __idna_name_classify(const char *);

File ifaddr.c:
308:	int pg_foreach_ifaddr(PgIfAddrCallback, void *);
53:	int pg_range_sockaddr(const struct sockaddr_storage *, const struct sockaddr_storage *, const struct sockaddr_storage *);
115:	int pg_sockaddr_cidr_mask(struct sockaddr_storage *, char *, int);
72:	static int range_sockaddr_AF_INET(const struct sockaddr_in *, const struct sockaddr_in *, const struct sockaddr_in *);
87:	static int range_sockaddr_AF_INET6(const struct sockaddr_in6 *, const struct sockaddr_in6 *, const struct sockaddr_in6 *);
192:	static void run_ifaddr_callback(PgIfAddrCallback, void *, struct sockaddr *, struct sockaddr *);

File ilist.c:
31:	void slist_delete(slist_head *, slist_node *);

File index.c:
2476:	IndexInfo *BuildDummyIndexInfo(Relation);
2417:	IndexInfo *BuildIndexInfo(Relation);
2641:	void BuildSpeculativeIndexInfo(Relation, IndexInfo *);
2522:	_Bool CompareIndexInfo(IndexInfo *, IndexInfo *, Oid *, Oid *, Oid *, Oid *, AttrMap *);
4128:	Size EstimateReindexStateSpace(void);
2701:	void FormIndexDatum(IndexInfo *, TupleTableSlot *, EState *, Datum *, _Bool *);
3513:	Oid IndexGetRelation(Oid, _Bool);
4005:	_Bool ReindexIsProcessingHeap(Oid);
4026:	_Bool ReindexIsProcessingIndex(Oid);
4099:	void ResetReindexState(int);
4157:	void RestoreReindexState(void *);
4139:	void SerializeReindexState(Size, char *);
2937:	void index_build(Relation, Relation, IndexInfo *, _Bool, _Bool);
204:	void index_check_primary_key(Relation, IndexInfo *, _Bool, IndexStmt *);
1423:	void index_concurrently_build(Oid, Oid);
1254:	Oid index_concurrently_create_copy(Relation, Oid, Oid, const char *);
1838:	void index_concurrently_set_dead(Oid, Oid);
1489:	void index_concurrently_swap(Oid, Oid, const char *);
1899:	ObjectAddress index_constraint_create(Relation, Oid, Oid, IndexInfo *, const char *, char, bits16, _Bool, _Bool);
699:	Oid index_create(Relation, const char *, Oid, Oid, Oid, Oid, IndexInfo *, List *, Oid, Oid, Oid *, Oid *, int16 *, Datum, bits16, bits16, _Bool, _Bool, Oid *);
2130:	void index_drop(Oid, _Bool, _Bool);
3433:	void index_set_state_flags(Oid, IndexStateFlagsAction);
3538:	void reindex_index(Oid, _Bool, char, ReindexParams *);
3852:	_Bool reindex_relation(Oid, int, ReindexParams *);
3285:	void validate_index(Oid, Oid, Snapshot);
503:	static void AppendAttributeTuples(Relation, Datum *);
270:	static TupleDesc ConstructTupleDescriptor(Relation, IndexInfo *, List *, Oid, Oid *, Oid *);
3129:	static void IndexCheckExclusion(Relation, Relation, IndexInfo *);
485:	static void InitializeAttributeOids(Relation, int, Oid);
4015:	static _Bool ReindexIsCurrentlyProcessingIndex(Oid);
4086:	static void RemoveReindexPending(Oid);
4056:	static void ResetReindexProcessing(void);
4070:	static void SetReindexPending(List *);
4037:	static void SetReindexProcessing(Oid, Oid);
535:	static void UpdateIndexRelation(Oid, Oid, Oid, IndexInfo *, Oid *, Oid *, int16 *, _Bool, _Bool, _Bool, _Bool, _Bool);
2780:	static void index_update_stats(Relation, _Bool, double);
150:	static _Bool relationHasPrimaryKey(Relation);
3413:	static _Bool validate_index_callback(ItemPointer, void *);

File indexam.c:
205:	IndexScanDesc index_beginscan(Relation, Relation, Snapshot, int, int);
234:	IndexScanDesc index_beginscan_bitmap(Relation, Snapshot, int);
484:	IndexScanDesc index_beginscan_parallel(Relation, Relation, int, int, ParallelIndexScanDesc);
691:	IndexBulkDeleteResult *index_bulk_delete(IndexVacuumInfo *, IndexBulkDeleteResult *, IndexBulkDeleteCallback, void *);
731:	_Bool index_can_return(Relation, int);
158:	void index_close(Relation, LOCKMODE);
323:	void index_endscan(IndexScanDesc);
575:	_Bool index_fetch_heap(IndexScanDesc, TupleTableSlot *);
661:	int64 index_getbitmap(IndexScanDesc, TIDBitmap *);
616:	_Bool index_getnext_slot(IndexScanDesc, ScanDirection, TupleTableSlot *);
517:	ItemPointer index_getnext_tid(IndexScanDesc, ScanDirection);
769:	RegProcedure index_getprocid(Relation, AttrNumber, uint16);
803:	FmgrInfo *index_getprocinfo(Relation, AttrNumber, uint16);
176:	_Bool index_insert(Relation, Datum *, _Bool *, ItemPointer, Relation, IndexUniqueCheck, _Bool, IndexInfo *);
353:	void index_markpos(IndexScanDesc);
939:	bytea *index_opclass_options(Relation, AttrNumber, Datum, _Bool);
132:	Relation index_open(Oid, LOCKMODE);
466:	void index_parallelrescan(IndexScanDesc);
402:	Size index_parallelscan_estimate(Relation, Snapshot);
435:	void index_parallelscan_initialize(Relation, Relation, Snapshot, ParallelIndexScanDesc);
297:	void index_rescan(IndexScanDesc, ScanKey, int, ScanKey, int);
377:	void index_restrpos(IndexScanDesc);
871:	void index_store_float8_orderby_distances(IndexScanDesc, Oid *, IndexOrderByDistance *, _Bool);
712:	IndexBulkDeleteResult *index_vacuum_cleanup(IndexVacuumInfo *, IndexBulkDeleteResult *);
255:	static IndexScanDesc index_beginscan_internal(Relation, int, int, Snapshot, ParallelIndexScanDesc, _Bool);

File indexcmds.c:
167:	_Bool CheckIndexCompatible(Oid, const char *, List *, List *);
2423:	char *ChooseRelationName(const char *, const char *, const char *, Oid, _Bool);
521:	ObjectAddress DefineIndex(Oid, IndexStmt *, Oid, Oid, Oid, _Bool, _Bool, _Bool, _Bool, _Bool);
2609:	void ExecReindex(ParseState *, ReindexStmt *, _Bool);
2228:	Oid GetDefaultOpClass(Oid, Oid);
4173:	void IndexSetParentIndex(Relation, Oid);
2143:	Oid ResolveOpClass(List *, Oid, const char *, Oid);
416:	void WaitForOlderSnapshots(TransactionId, _Bool);
2337:	char *makeObjectName(const char *, const char *, const char *);
1711:	static _Bool CheckMutability(Expr *);
1745:	static void CheckPredicate(Expr *);
2548:	static List *ChooseIndexColumnNames(List *);
2459:	static char *ChooseIndexName(const char *, Oid, List *, List *, _Bool, _Bool);
2514:	static char *ChooseIndexNameAddition(List *);
349:	static _Bool CompareOpclassOptions(Datum *, Datum *, int);
1772:	static void ComputeIndexAttrs(IndexInfo *, Oid *, Oid *, Oid *, int16 *, List *, List *, Oid, const char *, Oid, _Bool, _Bool, Oid, int, int *);
2757:	static void RangeVarCallbackForReindexIndex(const RangeVar *, Oid, Oid, void *);
2704:	static void ReindexIndex(RangeVar *, ReindexParams *, _Bool);
3209:	static void ReindexMultipleInternal(List *, ReindexParams *);
2885:	static void ReindexMultipleTables(const char *, ReindexObjectType, ReindexParams *);
3114:	static void ReindexPartitions(Oid, ReindexParams *, _Bool);
3334:	static _Bool ReindexRelationConcurrently(Oid, ReindexParams *);
2827:	static Oid ReindexTable(RangeVar *, ReindexParams *, _Bool);
3092:	static void reindex_error_callback(void *);
4337:	static void set_indexsafe_procflags(void);
4302:	static void update_relispartition(Oid, _Bool);

File indexfsm.c:
38:	BlockNumber GetFreeIndexPage(Relation);
71:	void IndexFreeSpaceMapVacuum(Relation);
52:	void RecordFreeIndexPage(Relation, BlockNumber);
62:	void RecordUsedIndexPage(Relation, BlockNumber);

File indexing.c:
61:	void CatalogCloseIndexes(CatalogIndexState);
43:	CatalogIndexState CatalogOpenIndexes(Relation);
350:	void CatalogTupleDelete(Relation, ItemPointer);
221:	void CatalogTupleInsert(Relation, HeapTuple);
244:	void CatalogTupleInsertWithInfo(Relation, HeapTuple, CatalogIndexState);
301:	void CatalogTupleUpdate(Relation, ItemPointer, HeapTuple);
324:	void CatalogTupleUpdateWithInfo(Relation, ItemPointer, HeapTuple, CatalogIndexState);
261:	void CatalogTuplesMultiInsertWithInfo(Relation, TupleTableSlot **, int, CatalogIndexState);
75:	static void CatalogIndexInsert(CatalogIndexState, HeapTuple);

File indextuple.c:
528:	IndexTuple CopyIndexTuple(IndexTuple);
437:	void index_deform_tuple(IndexTuple, TupleDesc, Datum *, _Bool *);
460:	void index_deform_tuple_internal(TupleDesc, Datum *, _Bool *, char *, bits8 *, int);
47:	IndexTuple index_form_tuple(TupleDesc, Datum *, _Bool *);
557:	IndexTuple index_truncate_tuple(TupleDesc, IndexTuple, int);
222:	Datum nocache_index_getattr(IndexTuple, int, TupleDesc);

File indxpath.c:
3320:	void check_index_predicates(PlannerInfo *, RelOptInfo *);
235:	void create_index_paths(PlannerInfo *, RelOptInfo *);
3682:	_Bool indexcol_is_bool_constant_for_query(PlannerInfo *, IndexOptInfo *, int);
3818:	_Bool is_pseudo_constant_for_index(PlannerInfo *, Node *, IndexOptInfo *);
3733:	_Bool match_index_to_operand(Node *, int, IndexOptInfo *);
3511:	_Bool relation_has_unique_index_for(PlannerInfo *, RelOptInfo *, List *, List *, List *);
1970:	static double adjust_rowcount_for_semijoins(PlannerInfo *, Index, Index, double);
2014:	static double approximate_joinrel_size(PlannerInfo *, Relids);
1635:	static Cost bitmap_and_cost_est(PlannerInfo *, RelOptInfo *, List *);
1601:	static Cost bitmap_scan_cost_est(PlannerInfo *, RelOptInfo *, Path *);
704:	static _Bool bms_equal_any(Relids, List *);
855:	static List *build_index_paths(PlannerInfo *, RelOptInfo *, IndexOptInfo *, IndexClauseSet *, _Bool, ScanTypeControl, _Bool *, _Bool *);
1160:	static List *build_paths_for_OR(PlannerInfo *, RelOptInfo *, List *, List *);
1805:	static _Bool check_index_only(RelOptInfo *, IndexOptInfo *);
1362:	static Path *choose_bitmap_and(PlannerInfo *, RelOptInfo *, List *);
1664:	static PathClauseUsage *classify_index_clause_usage(Path *, List **);
433:	static void consider_index_join_clauses(PlannerInfo *, RelOptInfo *, IndexOptInfo *, IndexClauseSet *, IndexClauseSet *, IndexClauseSet *, List **);
499:	static void consider_index_join_outer_rels(PlannerInfo *, RelOptInfo *, IndexOptInfo *, IndexClauseSet *, IndexClauseSet *, IndexClauseSet *, List **, List *, int, List **);
3453:	static _Bool ec_member_matches_indexcol(PlannerInfo *, RelOptInfo *, EquivalenceClass *, EquivalenceMember *, void *);
680:	static _Bool eclass_already_used(EquivalenceClass *, Relids, List *);
2869:	static IndexClause *expand_indexqual_rowcompare(PlannerInfo *, RestrictInfo *, int, IndexOptInfo *, Oid, _Bool);
1732:	static void find_indexpath_quals(Path *, List **, List **);
1779:	static int find_list_position(Node *, List **);
1255:	static List *generate_bitmap_or_paths(PlannerInfo *, RelOptInfo *, List *, List *);
2628:	static IndexClause *get_index_clause_from_support(PlannerInfo *, RestrictInfo *, Oid, int, int, IndexOptInfo *);
733:	static void get_index_paths(PlannerInfo *, RelOptInfo *, IndexOptInfo *, IndexClauseSet *, List **);
602:	static void get_join_index_paths(PlannerInfo *, RelOptInfo *, IndexOptInfo *, IndexClauseSet *, IndexClauseSet *, IndexClauseSet *, List **, Relids, List **);
1917:	static double get_loop_count(PlannerInfo *, Index, Relids);
2376:	static IndexClause *match_boolean_index_clause(PlannerInfo *, RestrictInfo *, int, IndexOptInfo *);
2172:	static void match_clause_to_index(PlannerInfo *, RestrictInfo *, IndexOptInfo *, IndexClauseSet *);
2291:	static IndexClause *match_clause_to_indexcol(PlannerInfo *, RestrictInfo *, int, IndexOptInfo *);
3206:	static Expr *match_clause_to_ordering_op(IndexOptInfo *, int, Expr *, Oid);
2139:	static void match_clauses_to_index(PlannerInfo *, List *, IndexOptInfo *, IndexClauseSet *);
2101:	static void match_eclass_clauses_to_index(PlannerInfo *, IndexOptInfo *, IndexClauseSet *);
2582:	static IndexClause *match_funcclause_to_indexcol(PlannerInfo *, RestrictInfo *, int, IndexOptInfo *);
2071:	static void match_join_clauses_to_index(PlannerInfo *, RelOptInfo *, IndexOptInfo *, IndexClauseSet *, List **);
2463:	static IndexClause *match_opclause_to_indexcol(PlannerInfo *, RestrictInfo *, int, IndexOptInfo *);
3091:	static void match_pathkeys_to_index(IndexOptInfo *, List *, List **, List **);
2056:	static void match_restriction_clauses_to_index(PlannerInfo *, IndexOptInfo *, IndexClauseSet *);
2762:	static IndexClause *match_rowcompare_to_indexcol(PlannerInfo *, RestrictInfo *, int, IndexOptInfo *);
2694:	static IndexClause *match_saopclause_to_indexcol(PlannerInfo *, RestrictInfo *, int, IndexOptInfo *);
1568:	static int path_usage_comparator(const void *, const void *);

File inet6_opt.c:
80:	int inet6_opt_append(void *, socklen_t, int, uint8_t, socklen_t, uint8_t, void **);
229:	int inet6_opt_find(void *, socklen_t, int, uint8_t, socklen_t *, void **);
140:	int inet6_opt_finish(void *, socklen_t, int);
276:	int inet6_opt_get_val(void *, int, void *, socklen_t);
32:	int inet6_opt_init(void *, socklen_t);
187:	int inet6_opt_next(void *, socklen_t, int, uint8_t *, socklen_t *, void **);
170:	int inet6_opt_set_val(void *, int, void *, socklen_t);

File inet6_option.c:
218:	uint8_t *inet6_option_alloc(struct cmsghdr *, int, int, int);
141:	int inet6_option_append(struct cmsghdr *, const uint8_t *, int, int);
292:	int inet6_option_find(const struct cmsghdr *, uint8_t **, int);
107:	int inet6_option_init(void *, struct cmsghdr **, int);
236:	int inet6_option_next(const struct cmsghdr *, uint8_t **);
90:	int inet6_option_space(int);

File inet6_rth.c:
86:	int inet6_rth_add(void *, const struct in6_addr *);
179:	struct in6_addr *inet6_rth_getaddr(const void *, int);
52:	void *inet6_rth_init(void *, socklen_t, int, int);
117:	int inet6_rth_reverse(const void *, void *);
157:	int inet6_rth_segments(const void *);
31:	socklen_t inet6_rth_space(int, int);

File inet6_scopeid_pton.c:
32:	int __GI___inet6_scopeid_pton(const struct in6_addr *, const char *, uint32_t *);

File inet_addr.c:
182:	int __GI___inet_aton_exact(const char *, struct in_addr *);
209:	in_addr_t __inet_addr(const char *);
199:	int __inet_aton_ignore_trailing(const char *, struct in_addr *);
106:	static int inet_aton_end(const char *, struct in_addr *, const char **);

File inet_cidr_ntop.c:
56:	char *pg_inet_cidr_ntop(int, const void *, int, char *, size_t);
85:	static char *inet_cidr_ntop_ipv4(const u_char *, int, char *, size_t);
165:	static char *inet_cidr_ntop_ipv6(const u_char *, int, char *, size_t);

File inet_lnaof.c:
40:	in_addr_t inet_lnaof(struct in_addr);

File inet_mkadr.c:
39:	struct in_addr __GI___inet_makeaddr(in_addr_t, in_addr_t);

File inet_net.c:
58:	uint32_t inet_network(const char *);

File inet_net_ntop.c:
77:	char *pg_inet_net_ntop(int, const void *, int, char *, size_t);
156:	static int decoct(const u_char *, int, char *, size_t);
115:	static char *inet_net_ntop_ipv4(const u_char *, int, char *, size_t);
179:	static char *inet_net_ntop_ipv6(const u_char *, int, char *, size_t);

File inet_net_pton.c:
62:	int pg_inet_net_pton(int, const char *, void *, size_t);
349:	static int getbits(const char *, int *);
382:	static int getv4(const char *, u_char *, int *);
97:	static int inet_cidr_pton_ipv4(const char *, u_char *, size_t);
439:	static int inet_cidr_pton_ipv6(const char *, u_char *, size_t);
260:	static int inet_net_pton_ipv4(const char *, u_char *);
429:	static int inet_net_pton_ipv6(const char *, u_char *);

File inet_netof.c:
39:	in_addr_t __GI_inet_netof(struct in_addr);

File inet_ntoa.c:
31:	char *inet_ntoa(struct in_addr);

File inet_ntop.c:
53:	const char *__GI_inet_ntop(int, const void *, char *, socklen_t);

File inet_pton.c:
67:	int __GI___inet_pton(int, const char *, void *);
49:	int __GI___inet_pton_length(int, const char *, size_t, void *);
81:	static int inet_pton4(const char *, const char *, unsigned char *);

File inherit.c:
835:	_Bool apply_child_basequals(PlannerInfo *, RelOptInfo *, RelOptInfo *, RangeTblEntry *, AppendRelInfo *);
84:	void expand_inherited_rtentry(PlannerInfo *, RelOptInfo *, RangeTblEntry *, Index);
654:	Bitmapset *get_rel_all_updated_cols(PlannerInfo *, RelOptInfo *);
794:	static void expand_appendrel_subquery(PlannerInfo *, RelOptInfo *, RangeTblEntry *, Index);
310:	static void expand_partitioned_rtentry(PlannerInfo *, RelOptInfo *, RangeTblEntry *, Index, Relation, PlanRowMark *, LOCKMODE);
435:	static void expand_single_inheritance_child(PlannerInfo *, RangeTblEntry *, Index, Relation, PlanRowMark *, Relation, RangeTblEntry **, Index *);
706:	static Bitmapset *translate_col_privs(const Bitmapset *, List *);
756:	static Bitmapset *translate_col_privs_multilevel(PlannerInfo *, RelOptInfo *, RelOptInfo *, Bitmapset *);

File init-first.c:
43:	void __libc_init_first(int, char **, char **);
95:	void _dl_start(void);
51:	void _init(int, char **, char **);

File init-misc.c:
29:	void __init_misc(int, char **, char **);

File initgroups.c:
156:	int getgrouplist(const char *, gid_t, gid_t *, int *);
187:	int initgroups(const char *, gid_t);
52:	static int internal_getgrouplist(const char *, gid_t, long *, gid_t **, long);

File initsplan.c:
106:	void add_base_rels_to_query(PlannerInfo *, Node *);
144:	void add_other_rels_to_query(PlannerInfo *);
230:	void add_vars_to_targetlist(PlannerInfo *, List *, Relids, _Bool);
183:	void build_base_rel_tlists(PlannerInfo *, List *);
2422:	RestrictInfo *build_implied_join_equality(PlannerInfo *, Oid, Oid, Expr *, Expr *, Relids, Relids, Index);
450:	void create_lateral_join_info(PlannerInfo *);
687:	List *deconstruct_jointree(PlannerInfo *);
2177:	void distribute_restrictinfo_to_rels(PlannerInfo *, RestrictInfo *);
304:	void find_lateral_references(PlannerInfo *);
2483:	void match_foreign_keys_to_quals(PlannerInfo *);
2272:	RestrictInfo *process_implied_equality(PlannerInfo *, Oid, Oid, Expr *, Expr *, Relids, Relids, Index, _Bool, _Bool);
2104:	static _Bool check_equivalence_delay(PlannerInfo *, RestrictInfo *);
2690:	static void check_hashjoinable(RestrictInfo *);
2718:	static void check_memoizable(RestrictInfo *);
2653:	static void check_mergejoinable(RestrictInfo *);
2020:	static _Bool check_outerjoin_delay(PlannerInfo *, Relids *, Relids *, _Bool);
2139:	static _Bool check_redundant_nullability_qual(PlannerInfo *, Node *);
1396:	static void compute_semijoin_info(PlannerInfo *, SpecialJoinInfo *, List *);
733:	static List *deconstruct_recurse(PlannerInfo *, Node *, _Bool, Relids *, Relids *, List **);
1606:	static void distribute_qual_to_rels(PlannerInfo *, Node *, _Bool, JoinType, Index, Relids, Relids, Relids, List **);
352:	static void extract_lateral_references(PlannerInfo *, RelOptInfo *, Index);
1148:	static SpecialJoinInfo *make_outerjoininfo(PlannerInfo *, Relids, Relids, Relids, JoinType, List *);
1084:	static void process_security_barrier_quals(PlannerInfo *, int, Relids, _Bool);

File insremque.c:
24:	void insque(void *, void *);
45:	void remque(void *);

File instrument.c:
244:	void BufferUsageAccumDiff(BufferUsage *, const BufferUsage *, const BufferUsage *);
218:	void InstrAccumParallelQuery(BufferUsage *, WalUsage *);
169:	void InstrAggNode(Instrumentation *, Instrumentation *);
31:	Instrumentation *InstrAlloc(int, int, _Bool);
140:	void InstrEndLoop(Instrumentation *);
208:	void InstrEndParallelQuery(BufferUsage *, WalUsage *);
58:	void InstrInit(Instrumentation *, int);
68:	void InstrStartNode(Instrumentation *);
200:	void InstrStartParallelQuery(void);
84:	void InstrStopNode(Instrumentation *, double);
132:	void InstrUpdateTupleCount(Instrumentation *, double);
274:	void WalUsageAccumDiff(WalUsage *, const WalUsage *, const WalUsage *);
226:	static void BufferUsageAdd(BufferUsage *, const BufferUsage *);
266:	static void WalUsageAdd(WalUsage *, WalUsage *);

File int.c:
351:	Datum bool_int4(FunctionCallInfo);
114:	int2vector *buildint2vector(const int16 *, int);
1482:	Datum generate_series_int4(FunctionCallInfo);
1564:	Datum generate_series_int4_support(FunctionCallInfo);
1488:	Datum generate_series_step_int4(FunctionCallInfo);
319:	Datum i2toi4(FunctionCallInfo);
327:	Datum i4toi2(FunctionCallInfo);
718:	Datum in_range_int2_int2(FunctionCallInfo);
683:	Datum in_range_int2_int4(FunctionCallInfo);
730:	Datum in_range_int2_int8(FunctionCallInfo);
636:	Datum in_range_int4_int2(FunctionCallInfo);
602:	Datum in_range_int4_int4(FunctionCallInfo);
648:	Datum in_range_int4_int8(FunctionCallInfo);
1009:	Datum int24div(FunctionCallInfo);
483:	Datum int24eq(FunctionCallInfo);
528:	Datum int24ge(FunctionCallInfo);
519:	Datum int24gt(FunctionCallInfo);
510:	Datum int24le(FunctionCallInfo);
501:	Datum int24lt(FunctionCallInfo);
981:	Datum int24mi(FunctionCallInfo);
995:	Datum int24mul(FunctionCallInfo);
492:	Datum int24ne(FunctionCallInfo);
967:	Datum int24pl(FunctionCallInfo);
1184:	Datum int2abs(FunctionCallInfo);
1425:	Datum int2and(FunctionCallInfo);
928:	Datum int2div(FunctionCallInfo);
429:	Datum int2eq(FunctionCallInfo);
474:	Datum int2ge(FunctionCallInfo);
465:	Datum int2gt(FunctionCallInfo);
63:	Datum int2in(FunctionCallInfo);
1325:	Datum int2larger(FunctionCallInfo);
456:	Datum int2le(FunctionCallInfo);
447:	Datum int2lt(FunctionCallInfo);
899:	Datum int2mi(FunctionCallInfo);
1137:	Datum int2mod(FunctionCallInfo);
913:	Datum int2mul(FunctionCallInfo);
438:	Datum int2ne(FunctionCallInfo);
1452:	Datum int2not(FunctionCallInfo);
1434:	Datum int2or(FunctionCallInfo);
74:	Datum int2out(FunctionCallInfo);
885:	Datum int2pl(FunctionCallInfo);
87:	Datum int2recv(FunctionCallInfo);
98:	Datum int2send(FunctionCallInfo);
1461:	Datum int2shl(FunctionCallInfo);
1470:	Datum int2shr(FunctionCallInfo);
1334:	Datum int2smaller(FunctionCallInfo);
865:	Datum int2um(FunctionCallInfo);
877:	Datum int2up(FunctionCallInfo);
141:	Datum int2vectorin(FunctionCallInfo);
180:	Datum int2vectorout(FunctionCallInfo);
204:	Datum int2vectorrecv(FunctionCallInfo);
252:	Datum int2vectorsend(FunctionCallInfo);
1443:	Datum int2xor(FunctionCallInfo);
1070:	Datum int42div(FunctionCallInfo);
537:	Datum int42eq(FunctionCallInfo);
582:	Datum int42ge(FunctionCallInfo);
573:	Datum int42gt(FunctionCallInfo);
564:	Datum int42le(FunctionCallInfo);
555:	Datum int42lt(FunctionCallInfo);
1042:	Datum int42mi(FunctionCallInfo);
1056:	Datum int42mul(FunctionCallInfo);
546:	Datum int42ne(FunctionCallInfo);
1028:	Datum int42pl(FunctionCallInfo);
341:	Datum int4_bool(FunctionCallInfo);
1170:	Datum int4abs(FunctionCallInfo);
1372:	Datum int4and(FunctionCallInfo);
812:	Datum int4div(FunctionCallInfo);
375:	Datum int4eq(FunctionCallInfo);
1273:	Datum int4gcd(FunctionCallInfo);
420:	Datum int4ge(FunctionCallInfo);
411:	Datum int4gt(FunctionCallInfo);
266:	Datum int4in(FunctionCallInfo);
851:	Datum int4inc(FunctionCallInfo);
1343:	Datum int4larger(FunctionCallInfo);
1288:	Datum int4lcm(FunctionCallInfo);
402:	Datum int4le(FunctionCallInfo);
393:	Datum int4lt(FunctionCallInfo);
784:	Datum int4mi(FunctionCallInfo);
1109:	Datum int4mod(FunctionCallInfo);
798:	Datum int4mul(FunctionCallInfo);
384:	Datum int4ne(FunctionCallInfo);
1417:	Datum int4not(FunctionCallInfo);
1381:	Datum int4or(FunctionCallInfo);
277:	Datum int4out(FunctionCallInfo);
770:	Datum int4pl(FunctionCallInfo);
290:	Datum int4recv(FunctionCallInfo);
301:	Datum int4send(FunctionCallInfo);
1399:	Datum int4shl(FunctionCallInfo);
1408:	Datum int4shr(FunctionCallInfo);
1352:	Datum int4smaller(FunctionCallInfo);
750:	Datum int4um(FunctionCallInfo);
762:	Datum int4up(FunctionCallInfo);
1390:	Datum int4xor(FunctionCallInfo);
1212:	static int32 int4gcd_internal(int32, int32);

File int8.c:
1340:	Datum dtoi8(FunctionCallInfo);
1375:	Datum ftoi8(FunctionCallInfo);
1420:	Datum generate_series_int8(FunctionCallInfo);
1502:	Datum generate_series_int8_support(FunctionCallInfo);
1426:	Datum generate_series_step_int8(FunctionCallInfo);
1326:	Datum i8tod(FunctionCallInfo);
1361:	Datum i8tof(FunctionCallInfo);
1396:	Datum i8tooid(FunctionCallInfo);
487:	Datum in_range_int8_int8(FunctionCallInfo);
1305:	Datum int28(FunctionCallInfo);
1198:	Datum int28div(FunctionCallInfo);
427:	Datum int28eq(FunctionCallInfo);
472:	Datum int28ge(FunctionCallInfo);
454:	Datum int28gt(FunctionCallInfo);
463:	Datum int28le(FunctionCallInfo);
445:	Datum int28lt(FunctionCallInfo);
1170:	Datum int28mi(FunctionCallInfo);
1184:	Datum int28mul(FunctionCallInfo);
436:	Datum int28ne(FunctionCallInfo);
1156:	Datum int28pl(FunctionCallInfo);
1284:	Datum int48(FunctionCallInfo);
1056:	Datum int48div(FunctionCallInfo);
313:	Datum int48eq(FunctionCallInfo);
358:	Datum int48ge(FunctionCallInfo);
340:	Datum int48gt(FunctionCallInfo);
349:	Datum int48le(FunctionCallInfo);
331:	Datum int48lt(FunctionCallInfo);
1028:	Datum int48mi(FunctionCallInfo);
1042:	Datum int48mul(FunctionCallInfo);
322:	Datum int48ne(FunctionCallInfo);
1014:	Datum int48pl(FunctionCallInfo);
1313:	Datum int82(FunctionCallInfo);
1117:	Datum int82div(FunctionCallInfo);
370:	Datum int82eq(FunctionCallInfo);
415:	Datum int82ge(FunctionCallInfo);
397:	Datum int82gt(FunctionCallInfo);
406:	Datum int82le(FunctionCallInfo);
388:	Datum int82lt(FunctionCallInfo);
1089:	Datum int82mi(FunctionCallInfo);
1103:	Datum int82mul(FunctionCallInfo);
379:	Datum int82ne(FunctionCallInfo);
1075:	Datum int82pl(FunctionCallInfo);
1292:	Datum int84(FunctionCallInfo);
975:	Datum int84div(FunctionCallInfo);
256:	Datum int84eq(FunctionCallInfo);
301:	Datum int84ge(FunctionCallInfo);
283:	Datum int84gt(FunctionCallInfo);
292:	Datum int84le(FunctionCallInfo);
274:	Datum int84lt(FunctionCallInfo);
947:	Datum int84mi(FunctionCallInfo);
961:	Datum int84mul(FunctionCallInfo);
265:	Datum int84ne(FunctionCallInfo);
933:	Datum int84pl(FunctionCallInfo);
632:	Datum int8abs(FunctionCallInfo);
1227:	Datum int8and(FunctionCallInfo);
843:	Datum int8dec(FunctionCallInfo);
902:	Datum int8dec_any(FunctionCallInfo);
590:	Datum int8div(FunctionCallInfo);
199:	Datum int8eq(FunctionCallInfo);
753:	Datum int8gcd(FunctionCallInfo);
244:	Datum int8ge(FunctionCallInfo);
226:	Datum int8gt(FunctionCallInfo);
134:	Datum int8in(FunctionCallInfo);
805:	Datum int8inc(FunctionCallInfo);
890:	Datum int8inc_any(FunctionCallInfo);
896:	Datum int8inc_float8_float8(FunctionCallInfo);
909:	Datum int8larger(FunctionCallInfo);
768:	Datum int8lcm(FunctionCallInfo);
235:	Datum int8le(FunctionCallInfo);
217:	Datum int8lt(FunctionCallInfo);
562:	Datum int8mi(FunctionCallInfo);
649:	Datum int8mod(FunctionCallInfo);
576:	Datum int8mul(FunctionCallInfo);
208:	Datum int8ne(FunctionCallInfo);
1254:	Datum int8not(FunctionCallInfo);
1236:	Datum int8or(FunctionCallInfo);
147:	Datum int8out(FunctionCallInfo);
548:	Datum int8pl(FunctionCallInfo);
169:	Datum int8recv(FunctionCallInfo);
180:	Datum int8send(FunctionCallInfo);
1262:	Datum int8shl(FunctionCallInfo);
1271:	Datum int8shr(FunctionCallInfo);
921:	Datum int8smaller(FunctionCallInfo);
526:	Datum int8um(FunctionCallInfo);
540:	Datum int8up(FunctionCallInfo);
1245:	Datum int8xor(FunctionCallInfo);
1409:	Datum oidtoi8(FunctionCallInfo);
55:	_Bool scanint8(const char *, _Bool, int64 *);
692:	static int64 int8gcd_internal(int64, int64);

File integerset.c:
371:	void intset_add_member(IntegerSet *, uint64);
627:	void intset_begin_iterate(IntegerSet *);
285:	IntegerSet *intset_create(void);
555:	_Bool intset_is_member(IntegerSet *, uint64);
646:	_Bool intset_iterate_next(IntegerSet *, uint64 *);
360:	uint64 intset_memory_usage(IntegerSet *);
351:	uint64 intset_num_entries(IntegerSet *);
750:	static int intset_binsrch_leaf(uint64, leaf_item *, int, _Bool);
717:	static int intset_binsrch_uint64(uint64, uint64 *, int, _Bool);
397:	static void intset_flush_buffered_values(IntegerSet *);
317:	static intset_internal_node *intset_new_internal_node(IntegerSet *);
332:	static intset_leaf_node *intset_new_leaf_node(IntegerSet *);
482:	static void intset_update_upper(IntegerSet *, int, intset_node *, uint64);
1007:	static _Bool simple8b_contains(uint64, uint64, uint64);
978:	static int simple8b_decode(uint64, uint64 *, uint64);
876:	static uint64 simple8b_encode(const uint64 *, int *, uint64);

File interrupt.c:
33:	void HandleMainLoopInterrupts(void);
56:	void SignalHandlerForConfigReload(int);
72:	void SignalHandlerForCrashExit(int);
104:	void SignalHandlerForShutdownRequest(int);

File inv_api.c:
99:	void close_lo_relation(_Bool);
339:	void inv_close(LargeObjectDesc *);
212:	Oid inv_create(Oid);
351:	int inv_drop(Oid);
255:	LargeObjectDesc *inv_open(Oid, int, MemoryContext);
490:	int inv_read(LargeObjectDesc *, char *, int);
428:	int64 inv_seek(LargeObjectDesc *, int64, int);
477:	int64 inv_tell(LargeObjectDesc *);
780:	void inv_truncate(LargeObjectDesc *, int64);
583:	int inv_write(LargeObjectDesc *, const char *, int);
170:	static void getdatafield(Form_pg_largeobject, bytea **, int *, _Bool *);
380:	static uint64 inv_getsize(LargeObjectDesc *);
132:	static _Bool myLargeObjectExists(Oid, Snapshot);
75:	static void open_lo_relation(void);

File inval.c:
707:	void AcceptInvalidationMessages(void);
1032:	void AtEOSubXact_Inval(_Bool);
973:	void AtEOXact_Inval(_Bool);
1275:	void CacheInvalidateCatalog(Oid);
1143:	void CacheInvalidateHeapTuple(Relation, HeapTuple, HeapTuple);
1299:	void CacheInvalidateRelcache(Relation);
1323:	void CacheInvalidateRelcacheAll(void);
1358:	void CacheInvalidateRelcacheByRelid(Oid);
1335:	void CacheInvalidateRelcacheByTuple(HeapTuple);
1428:	void CacheInvalidateRelmap(Oid);
1398:	void CacheInvalidateSmgr(RelFileNodeBackend);
1497:	void CacheRegisterRelcacheCallback(RelcacheCallbackFunction, Datum);
1455:	void CacheRegisterSyscacheCallback(int, SyscacheCallbackFunction, Datum);
1516:	void CallSyscacheCallbacks(int, uint32);
1109:	void CommandEndInvalidationMessages(void);
663:	void InvalidateSystemCaches(void);
669:	void InvalidateSystemCachesExtended(_Bool);
576:	void LocalExecuteInvalidationMessage(SharedInvalidationMessage *);
1542:	void LogLogicalInvalidations(void);
793:	void PostPrepare_Inval(void);
908:	void ProcessCommittedInvalidationMessages(SharedInvalidationMessage *, int, _Bool, Oid, Oid);
852:	int xactGetCommittedInvalidationMessages(SharedInvalidationMessage **, _Bool *);
387:	static void AddCatalogInvalidationMessage(InvalidationListHeader *, Oid, Oid);
359:	static void AddCatcacheInvalidationMessage(InvalidationListHeader *, int, uint32, Oid);
249:	static void AddInvalidationMessage(InvalidationChunk **, SharedInvalidationMessage *);
405:	static void AddRelcacheInvalidationMessage(InvalidationListHeader *, Oid, Oid);
435:	static void AddSnapshotInvalidationMessage(InvalidationListHeader *, Oid, Oid);
291:	static void AppendInvalidationMessageList(InvalidationChunk **, InvalidationChunk **);
462:	static void AppendInvalidationMessages(InvalidationListHeader *, InvalidationListHeader *);
802:	static void MakeSharedInvalidMessagesArray(const SharedInvalidationMessage *, int);
756:	static void PrepareInvalidationState(void);
476:	static void ProcessInvalidationMessages(InvalidationListHeader *, void (*)(SharedInvalidationMessage *));
488:	static void ProcessInvalidationMessagesMulti(InvalidationListHeader *, void (*)(const SharedInvalidationMessage *, int));
520:	static void RegisterCatalogInvalidation(Oid, Oid);
506:	static void RegisterCatcacheInvalidation(int, uint32, Oid);
532:	static void RegisterRelcacheInvalidation(Oid, Oid);
562:	static void RegisterSnapshotInvalidation(Oid, Oid);

File iofclose.c:
33:	int _IO_new_fclose(FILE *);

File iofdopen.c:
34:	FILE *_IO_new_fdopen(int, const char *);

File iofflush.c:
31:	int __GI__IO_fflush(FILE *);

File iofflush_u.c:
31:	int __GI___fflush_unlocked(FILE *);

File iofgetpos.c:
45:	int _IO_new_fgetpos(FILE *, __fpos_t *);

File iofgets.c:
31:	char *_IO_fgets(char *, int, FILE *);

File iofgets_u.c:
31:	char *__GI___fgets_unlocked(char *, int, FILE *);

File iofgetws.c:
31:	wchar_t *fgetws(wchar_t *, int, FILE *);

File iofgetws_u.c:
31:	wchar_t *fgetws_unlocked(wchar_t *, int, FILE *);

File iofopen.c:
84:	FILE *_IO_new_fopen(const char *, const char *);
56:	FILE *__fopen_internal(const char *, const char *, int);
34:	FILE *__fopen_maybe_mmap(FILE *);

File iofopncook.c:
151:	void _IO_cookie_init(struct _IO_cookie_file *, int, void *, cookie_io_functions_t);
175:	FILE *_IO_fopencookie(void *, const char *, cookie_io_functions_t);
86:	static int _IO_cookie_close(FILE *);
33:	static ssize_t _IO_cookie_read(FILE *, void *, ssize_t);
70:	static off64_t _IO_cookie_seek(FILE *, off64_t, int);
102:	static off64_t _IO_cookie_seekoff(FILE *, off64_t, int, int);
48:	static ssize_t _IO_cookie_write(FILE *, const void *, ssize_t);

File iofputs.c:
31:	int __GI__IO_fputs(const char *, FILE *);

File iofputs_u.c:
32:	int __GI___fputs_unlocked(const char *, FILE *);

File iofputws.c:
31:	int fputws(const wchar_t *, FILE *);

File iofputws_u.c:
32:	int __GI_fputws_unlocked(const wchar_t *, FILE *);

File iofread.c:
30:	size_t __GI__IO_fread(void *, size_t, size_t, FILE *);

File iofread_u.c:
33:	size_t __GI___fread_unlocked(void *, size_t, size_t, FILE *);

File iofsetpos.c:
44:	int _IO_new_fsetpos(FILE *, const __fpos_t *);

File ioftell.c:
33:	long __GI__IO_ftell(FILE *);

File iofwide.c:
46:	int _IO_fwide(FILE *, int);
214:	int __libio_codecvt_encoding(struct _IO_codecvt *);
162:	enum __codecvt_result __libio_codecvt_in(struct _IO_codecvt *, __mbstate_t *, const char *, const char *, const char **, wchar_t *, wchar_t *, wchar_t **);
231:	int __libio_codecvt_length(struct _IO_codecvt *, __mbstate_t *, const char *, const char *, size_t);
110:	enum __codecvt_result __libio_codecvt_out(struct _IO_codecvt *, __mbstate_t *, const wchar_t *, const wchar_t *, const wchar_t **, char *, char *, char **);

File iofwrite.c:
30:	size_t __GI__IO_fwrite(const void *, size_t, size_t, FILE *);

File iofwrite_u.c:
33:	size_t __GI_fwrite_unlocked(const void *, size_t, size_t, FILE *);

File iogetdelim.c:
40:	ssize_t _IO_getdelim(char **, size_t *, int, FILE *);

File iogetline.c:
31:	size_t __GI__IO_getline(FILE *, char *, size_t, int, int);
47:	size_t __GI__IO_getline_info(FILE *, char *, size_t, int, int, int *);

File iogets.c:
31:	char *_IO_gets(char *);

File iogetwline.c:
32:	size_t _IO_getwline(FILE *, wchar_t *, size_t, wint_t, int);
47:	size_t _IO_getwline_info(FILE *, wchar_t *, size_t, wint_t, int, wint_t *);

File iopadn.c:
36:	ssize_t __GI__IO_padn(FILE *, int, ssize_t);

File iopopen.c:
220:	FILE *_IO_new_popen(const char *, const char *);
249:	int _IO_new_proc_close(FILE *);
109:	FILE *_IO_new_proc_open(FILE *, const char *, const char *);
57:	static void unlock(void *);

File ioputs.c:
32:	int __GI__IO_puts(const char *);

File ioseekoff.c:
64:	off64_t _IO_seekoff(FILE *, off64_t, int, int);
32:	off64_t _IO_seekoff_unlocked(FILE *, off64_t, int, int);

File ioseekpos.c:
51:	off64_t _IO_seekpos(FILE *, off64_t, int);
30:	off64_t _IO_seekpos_unlocked(FILE *, off64_t, int);

File iosetbuffer.c:
30:	void __GI__IO_setbuffer(FILE *, char *, size_t);

File iosetvbuf.c:
34:	int __GI__IO_setvbuf(FILE *, char *, int, size_t);

File ioungetc.c:
30:	int _IO_ungetc(int, FILE *);

File ioungetwc.c:
31:	wint_t ungetwc(wint_t, FILE *);

File iovdprintf.c:
65:	int __vdprintf(int, const char *, struct __va_list_tag *);
31:	int __vdprintf_internal(int, const char *, struct __va_list_tag *, unsigned int);

File iovfscanf.c:
29:	int __IO_vfscanf(FILE *, const char *, struct __va_list_tag *, int *);

File iovfwscanf.c:
29:	int __IO_vfwscanf(FILE *, const wchar_t *, struct __va_list_tag *, int *);

File iovsprintf.c:
102:	int __vsprintf(char *, const char *, struct __va_list_tag *);
69:	int __vsprintf_internal(char *, size_t, const char *, struct __va_list_tag *, unsigned int);
31:	static int _IO_str_chk_overflow(FILE *, int);

File iovsscanf.c:
35:	int _IO_vsscanf(const char *, const char *, struct __va_list_tag *);

File iovswscanf.c:
36:	int __vswscanf(const wchar_t *, const wchar_t *, struct __va_list_tag *);

File iowpadn.c:
42:	ssize_t _IO_wpadn(FILE *, wint_t, ssize_t);

File ip.c:
88:	void pg_freeaddrinfo_all(int, struct addrinfo *);
57:	int pg_getaddrinfo_all(const char *, const char *, const struct addrinfo *, struct addrinfo **);
122:	int pg_getnameinfo_all(const struct sockaddr_storage *, int, char *, int, char *, int, int);
165:	static int getaddrinfo_unix(const char *, const struct addrinfo *, struct addrinfo **);
246:	static int getnameinfo_unix(const struct sockaddr_un *, int, char *, int, char *, int, int);

File ipc.c:
333:	void before_shmem_exit(pg_on_exit_callback, Datum);
390:	void cancel_before_shmem_exit(pg_on_exit_callback, Datum);
428:	void check_on_shmem_exit_lists_are_empty(void);
412:	void on_exit_reset(void);
305:	void on_proc_exit(pg_on_exit_callback, Datum);
361:	void on_shmem_exit(pg_on_exit_callback, Datum);
104:	void proc_exit(int);
224:	void shmem_exit(int);
290:	static void atexit_callback(void);
161:	static void proc_exit_prepare(int);

File ipci.c:
95:	void CreateSharedMemoryAndSemaphores(void);
71:	void RequestAddinShmemSpace(Size);

File isctype.c:
23:	int __isctype(int, int);

File isoc99_fscanf.c:
24:	int __isoc99_fscanf(FILE *, const char *, ...);

File isoc99_fwscanf.c:
25:	int __isoc99_fwscanf(FILE *, const wchar_t *, ...);

File isoc99_scanf.c:
24:	int __isoc99_scanf(const char *, ...);

File isoc99_sscanf.c:
23:	int __GI___isoc99_sscanf(const char *, const char *, ...);

File isoc99_swscanf.c:
24:	int __isoc99_swscanf(const wchar_t *, const wchar_t *, ...);

File isoc99_vfscanf.c:
23:	int __GI___isoc99_vfscanf(FILE *, const char *, struct __va_list_tag *);

File isoc99_vfwscanf.c:
24:	int __GI___isoc99_vfwscanf(FILE *, const wchar_t *, struct __va_list_tag *);

File isoc99_vscanf.c:
23:	int __isoc99_vscanf(const char *, struct __va_list_tag *);

File isoc99_vsscanf.c:
30:	int __GI___isoc99_vsscanf(const char *, const char *, struct __va_list_tag *);

File isoc99_vswscanf.c:
31:	int __GI___isoc99_vswscanf(const wchar_t *, const wchar_t *, struct __va_list_tag *);

File isoc99_vwscanf.c:
24:	int __isoc99_vwscanf(const wchar_t *, struct __va_list_tag *);

File isoc99_wscanf.c:
26:	int __isoc99_wscanf(const wchar_t *, ...);

File iswctype.c:
27:	int __GI___iswctype(wint_t, wctype_t);

File iswctype_l.c:
27:	int __iswctype_l(wint_t, wctype_t, locale_t);

File itemptr.c:
52:	int32 ItemPointerCompare(ItemPointer, ItemPointer);
115:	void ItemPointerDec(ItemPointer);
29:	_Bool ItemPointerEquals(ItemPointer, ItemPointer);
85:	void ItemPointerInc(ItemPointer);

File jit.c:
184:	void InstrJitAgg(JitInstrumentation *, JitInstrumentation *);
153:	_Bool jit_compile_expr(struct ExprState *);
138:	void jit_release_context(JitContext *);
128:	void jit_reset_after_error(void);
57:	Datum pg_jit_available(FunctionCallInfo);
194:	static _Bool file_exists(const char *);
68:	static _Bool provider_init(void);

File joininfo.c:
95:	void add_join_clause_to_rels(PlannerInfo *, RestrictInfo *, Relids);
36:	_Bool have_relevant_joinclause(PlannerInfo *, RelOptInfo *, RelOptInfo *);
122:	void remove_join_clause_from_rels(PlannerInfo *, RestrictInfo *, Relids);

File joinpath.c:
123:	void add_paths_to_joinrel(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, JoinType, SpecialJoinInfo *, List *);
356:	static _Bool allow_star_schema_join(PlannerInfo *, Relids, Relids);
1108:	static _Bool clause_sides_match_join(RestrictInfo *, RelOptInfo *, RelOptInfo *);
1840:	static void consider_parallel_mergejoin(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, JoinType, JoinPathExtraData *, Path *);
1880:	static void consider_parallel_nestloop(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, JoinType, JoinPathExtraData *);
1342:	static void generate_mergejoin_paths(PlannerInfo *, RelOptInfo *, RelOptInfo *, Path *, JoinType, JoinPathExtraData *, _Bool, Path *, List *, _Bool);
488:	static Path *get_memoize_path(PlannerInfo *, RelOptInfo *, RelOptInfo *, Path *, Path *, JoinType, JoinPathExtraData *);
1964:	static void hash_inner_and_outer(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, JoinType, JoinPathExtraData *);
1590:	static void match_unsorted_outer(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, JoinType, JoinPathExtraData *);
378:	static _Bool paraminfo_get_equal_hashops(PlannerInfo *, ParamPathInfo *, RelOptInfo *, RelOptInfo *, List **, List **, _Bool *);
2219:	static List *select_mergejoin_clauses(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, List *, JoinType, _Bool *);
1140:	static void sort_inner_and_outer(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, JoinType, JoinPathExtraData *);
981:	static void try_hashjoin_path(PlannerInfo *, RelOptInfo *, Path *, Path *, List *, JoinType, JoinPathExtraData *);
816:	static void try_mergejoin_path(PlannerInfo *, RelOptInfo *, Path *, Path *, List *, List *, List *, List *, JoinType, JoinPathExtraData *, _Bool);
622:	static void try_nestloop_path(PlannerInfo *, RelOptInfo *, Path *, Path *, List *, JoinType, JoinPathExtraData *);
1047:	static void try_partial_hashjoin_path(PlannerInfo *, RelOptInfo *, Path *, Path *, List *, JoinType, JoinPathExtraData *, _Bool);
911:	static void try_partial_mergejoin_path(PlannerInfo *, RelOptInfo *, Path *, Path *, List *, List *, List *, List *, JoinType, JoinPathExtraData *);
734:	static void try_partial_nestloop_path(PlannerInfo *, RelOptInfo *, Path *, Path *, List *, JoinType, JoinPathExtraData *);

File joinrels.c:
1184:	_Bool have_dangerous_phv(PlannerInfo *, Relids, Relids);
951:	_Bool have_join_order_restriction(PlannerInfo *, RelOptInfo *, RelOptInfo *);
1212:	_Bool is_dummy_rel(RelOptInfo *);
71:	void join_search_one_level(PlannerInfo *, int);
686:	RelOptInfo *make_join_rel(PlannerInfo *, RelOptInfo *, RelOptInfo *);
1261:	void mark_dummy_rel(RelOptInfo *);
1560:	static SpecialJoinInfo *build_child_join_sjinfo(PlannerInfo *, SpecialJoinInfo *, Relids, Relids);
1601:	static void compute_partition_bounds(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, SpecialJoinInfo *, List **, List **);
1692:	static void get_matching_part_pairs(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, List **, List **);
1064:	static _Bool has_join_restriction(PlannerInfo *, RelOptInfo *);
1120:	static _Bool has_legal_joinclause(PlannerInfo *, RelOptInfo *);
364:	static _Bool join_is_legal(PlannerInfo *, RelOptInfo *, RelOptInfo *, Relids, SpecialJoinInfo **, _Bool *);
297:	static void make_rels_by_clause_joins(PlannerInfo *, RelOptInfo *, List *, ListCell *);
331:	static void make_rels_by_clauseless_joins(PlannerInfo *, RelOptInfo *, List *);
776:	static void populate_joinrel_with_paths(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, SpecialJoinInfo *, List *);
1304:	static _Bool restriction_is_constant_false(List *, RelOptInfo *, _Bool);
1358:	static void try_partitionwise_join(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, SpecialJoinInfo *, List *);

File jrand48.c:
23:	long jrand48(unsigned short *);

File jrand48_r.c:
22:	int __jrand48_r(unsigned short *, struct drand48_data *, long *);

File json.c:
353:	char *JsonEncodeDateTime(char *, Datum, Oid, const int *);
663:	Datum array_to_json(FunctionCallInfo);
679:	Datum array_to_json_pretty(FunctionCallInfo);
1279:	void escape_json(StringInfo, const char *);
834:	Datum json_agg_finalfn(FunctionCallInfo);
758:	Datum json_agg_transfn(FunctionCallInfo);
1057:	Datum json_build_array(FunctionCallInfo);
1093:	Datum json_build_array_noargs(FunctionCallInfo);
991:	Datum json_build_object(FunctionCallInfo);
1048:	Datum json_build_object_noargs(FunctionCallInfo);
76:	Datum json_in(FunctionCallInfo);
1105:	Datum json_object(FunctionCallInfo);
950:	Datum json_object_agg_finalfn(FunctionCallInfo);
859:	Datum json_object_agg_transfn(FunctionCallInfo);
1196:	Datum json_object_two_arg(FunctionCallInfo);
94:	Datum json_out(FunctionCallInfo);
120:	Datum json_recv(FunctionCallInfo);
106:	Datum json_send(FunctionCallInfo);
1333:	Datum json_typeof(FunctionCallInfo);
696:	Datum row_to_json(FunctionCallInfo);
712:	Datum row_to_json_pretty(FunctionCallInfo);
729:	Datum to_json(FunctionCallInfo);
636:	static void add_json(Datum, _Bool, StringInfo, Oid, _Bool);
474:	static void array_dim_to_json(StringInfo, int, int, int *, Datum *, _Bool *, int *, JsonTypeCategory, Oid, _Bool);
516:	static void array_to_json_internal(Datum, StringInfo, _Bool);
973:	static text *catenate_stringinfo_string(StringInfo, const char *);
563:	static void composite_to_json(Datum, StringInfo, _Bool);
246:	static void datum_to_json(Datum, _Bool, StringInfo, JsonTypeCategory, Oid, _Bool);
144:	static void json_categorize_type(Oid, JsonTypeCategory *, Oid *);

File jsonapi.c:
115:	_Bool IsValidJsonNumber(const char *, int);
219:	JsonParseErrorType json_count_array_elements(JsonLexContext *, int *);
1058:	char *json_errdetail(JsonParseErrorType, JsonLexContext *);
526:	JsonParseErrorType json_lex(JsonLexContext *);
155:	JsonLexContext *makeJsonLexContextCstringLen(char *, int, int, _Bool);
179:	JsonParseErrorType pg_parse_json(JsonLexContext *, JsonSemAction *);
1126:	static char *extract_token(JsonLexContext *);
916:	static JsonParseErrorType json_lex_number(JsonLexContext *, char *, _Bool *, int *);
680:	static JsonParseErrorType json_lex_string(JsonLexContext *);
93:	static JsonParseErrorType lex_expect(JsonParseContext, JsonLexContext *, JsonTokenType);
81:	static JsonTokenType lex_peek(JsonLexContext *);
471:	static JsonParseErrorType parse_array(JsonLexContext *, JsonSemAction *);
434:	static JsonParseErrorType parse_array_element(JsonLexContext *, JsonSemAction *);
370:	static JsonParseErrorType parse_object(JsonLexContext *, JsonSemAction *);
317:	static JsonParseErrorType parse_object_field(JsonLexContext *, JsonSemAction *);
273:	static JsonParseErrorType parse_scalar(JsonLexContext *, JsonSemAction *);
1016:	static JsonParseErrorType report_parse_error(JsonParseContext, JsonLexContext *);

File jsonb.c:
1895:	_Bool JsonbExtractScalar(JsonbContainer *, JsonbValue *);
460:	char *JsonbToCString(StringInfo, JsonbContainer *, int);
469:	char *JsonbToCStringIndent(StringInfo, JsonbContainer *, int);
191:	const char *JsonbTypeName(JsonbValue *);
1627:	Datum jsonb_agg_finalfn(FunctionCallInfo);
1509:	Datum jsonb_agg_transfn(FunctionCallInfo);
1965:	Datum jsonb_bool(FunctionCallInfo);
1226:	Datum jsonb_build_array(FunctionCallInfo);
1257:	Datum jsonb_build_array_noargs(FunctionCallInfo);
1160:	Datum jsonb_build_object(FunctionCallInfo);
1210:	Datum jsonb_build_object_noargs(FunctionCallInfo);
2054:	Datum jsonb_float4(FunctionCallInfo);
2072:	Datum jsonb_float8(FunctionCallInfo);
97:	Datum jsonb_in(FunctionCallInfo);
2000:	Datum jsonb_int2(FunctionCallInfo);
2018:	Datum jsonb_int4(FunctionCallInfo);
2036:	Datum jsonb_int8(FunctionCallInfo);
1979:	Datum jsonb_numeric(FunctionCallInfo);
1278:	Datum jsonb_object(FunctionCallInfo);
1858:	Datum jsonb_object_agg_finalfn(FunctionCallInfo);
1662:	Datum jsonb_object_agg_transfn(FunctionCallInfo);
1380:	Datum jsonb_object_two_arg(FunctionCallInfo);
132:	Datum jsonb_out(FunctionCallInfo);
113:	Datum jsonb_recv(FunctionCallInfo);
148:	Datum jsonb_send(FunctionCallInfo);
240:	Datum jsonb_typeof(FunctionCallInfo);
1133:	Datum to_jsonb(FunctionCallInfo);
170:	static const char *JsonbContainerTypeName(JsonbContainer *);
478:	static char *JsonbToCStringWorker(StringInfo, JsonbContainer *, int, _Bool);
602:	static void add_indent(StringInfo, _Bool, int);
1106:	static void add_jsonb(Datum, _Bool, JsonbInState *, Oid, _Bool);
954:	static void array_dim_to_jsonb(JsonbInState *, int, int, int *, Datum *, _Bool *, int *, JsonbTypeCategory, Oid);
986:	static void array_to_jsonb_internal(Datum, JsonbInState *);
1935:	static void cannotCastJsonbValue(enum jbvType, const char *);
282:	static size_t checkStringLen(size_t);
1477:	static JsonbParseState *clone_parse_state(JsonbParseState *);
1034:	static void composite_to_jsonb(Datum, JsonbInState *);
731:	static void datum_to_jsonb(Datum, _Bool, JsonbInState *, JsonbTypeCategory, Oid, _Bool);
623:	static void jsonb_categorize_type(Oid, JsonbTypeCategory *, Oid *);
256:	static Datum jsonb_from_cstring(char *, int);
319:	static void jsonb_in_array_end(void *);
311:	static void jsonb_in_array_start(void *);
303:	static void jsonb_in_object_end(void *);
327:	static void jsonb_in_object_field_start(void *, char *, _Bool);
295:	static void jsonb_in_object_start(void *);
371:	static void jsonb_in_scalar(void *, char *, JsonTokenType);
341:	static void jsonb_put_escaped_value(StringInfo, JsonbValue *);

File jsonb_gin.c:
203:	Datum gin_compare_jsonb(FunctionCallInfo);
931:	Datum gin_consistent_jsonb(FunctionCallInfo);
1222:	Datum gin_consistent_jsonb_path(FunctionCallInfo);
229:	Datum gin_extract_jsonb(FunctionCallInfo);
1092:	Datum gin_extract_jsonb_path(FunctionCallInfo);
848:	Datum gin_extract_jsonb_query(FunctionCallInfo);
1182:	Datum gin_extract_jsonb_query_path(FunctionCallInfo);
1015:	Datum gin_triconsistent_jsonb(FunctionCallInfo);
1274:	Datum gin_triconsistent_jsonb_path(FunctionCallInfo);
172:	static int add_gin_entry(GinEntries *, Datum);
719:	static void emit_jsp_gin_entries(JsonPathGinNode *, GinEntries *);
799:	static GinTernaryValue execute_jsp_gin_node(JsonPathGinNode *, void *, _Bool);
583:	static JsonPathGinNode *extract_jsp_bool_expr(JsonPathGinContext *, JsonPathGinPath, JsonPathItem *, _Bool);
564:	static JsonPathGinNode *extract_jsp_path_expr(JsonPathGinContext *, JsonPathGinPath, JsonPathItem *, JsonbValue *);
504:	static List *extract_jsp_path_expr_nodes(JsonPathGinContext *, JsonPathGinPath, JsonPathItem *, JsonbValue *);
748:	static Datum *extract_jsp_query(JsonPath *, StrategyNumber, _Bool, int32 *, Pointer **);
163:	static void init_gin_entries(GinEntries *, int);
278:	static _Bool jsonb_ops__add_path_item(JsonPathGinPath *, JsonPathItem *);
408:	static List *jsonb_ops__extract_nodes(JsonPathGinContext *, JsonPathGinPath, JsonbValue *, List *);
323:	static _Bool jsonb_path_ops__add_path_item(JsonPathGinPath *, JsonPathItem *);
478:	static List *jsonb_path_ops__extract_nodes(JsonPathGinContext *, JsonPathGinPath, JsonbValue *, List *);
353:	static JsonPathGinNode *make_jsp_entry_node(Datum);
364:	static JsonPathGinNode *make_jsp_entry_node_scalar(JsonbValue *, _Bool);
370:	static JsonPathGinNode *make_jsp_expr_node(JsonPathGinNodeType, int);
382:	static JsonPathGinNode *make_jsp_expr_node_args(JsonPathGinNodeType, List *);
395:	static JsonPathGinNode *make_jsp_expr_node_binary(JsonPathGinNodeType, JsonPathGinNode *, JsonPathGinNode *);
1366:	static Datum make_scalar_key(const JsonbValue *, _Bool);
1328:	static Datum make_text_key(char, const char *, int);

File jsonb_op.c:
239:	Datum jsonb_cmp(FunctionCallInfo);
133:	Datum jsonb_contained(FunctionCallInfo);
115:	Datum jsonb_contains(FunctionCallInfo);
225:	Datum jsonb_eq(FunctionCallInfo);
22:	Datum jsonb_exists(FunctionCallInfo);
81:	Datum jsonb_exists_all(FunctionCallInfo);
47:	Datum jsonb_exists_any(FunctionCallInfo);
211:	Datum jsonb_ge(FunctionCallInfo);
183:	Datum jsonb_gt(FunctionCallInfo);
256:	Datum jsonb_hash(FunctionCallInfo);
298:	Datum jsonb_hash_extended(FunctionCallInfo);
197:	Datum jsonb_le(FunctionCallInfo);
169:	Datum jsonb_lt(FunctionCallInfo);
152:	Datum jsonb_ne(FunctionCallInfo);

File jsonb_util.c:
1057:	_Bool JsonbDeepContains(JsonbIterator **, JsonbIterator **);
1311:	void JsonbHashScalarValue(const JsonbValue *, uint32 *);
1354:	void JsonbHashScalarValueExtended(const JsonbValue *, uint64 *, uint64);
812:	JsonbIterator *JsonbIteratorInit(JsonbContainer *);
848:	JsonbIteratorToken JsonbIteratorNext(JsonbIterator **, JsonbValue *, _Bool);
72:	void JsonbToJsonbValue(Jsonb *, JsonbValue *);
92:	Jsonb *JsonbValueToJsonb(JsonbValue *);
191:	int compareJsonbContainers(JsonbContainer *, JsonbContainer *);
344:	JsonbValue *findJsonbValueFromContainer(JsonbContainer *, uint32, JsonbValue *);
468:	JsonbValue *getIthJsonbValueFromContainer(JsonbContainer *, uint32);
159:	uint32 getJsonbLength(const JsonbContainer *, int);
134:	uint32 getJsonbOffset(const JsonbContainer *, int);
398:	JsonbValue *getKeyJsonValueFromContainer(JsonbContainer *, const char *, int, JsonbValue *);
566:	JsonbValue *pushJsonbValue(JsonbParseState **, JsonbIteratorToken, JsonbValue *);
783:	static void appendElement(JsonbParseState *, JsonbValue *);
741:	static void appendKey(JsonbParseState *, JsonbValue *);
1508:	static void appendToBuffer(StringInfo, const char *, int);
770:	static void appendValue(JsonbParseState *, JsonbValue *);
1428:	static int compareJsonbScalarValue(JsonbValue *, JsonbValue *);
1610:	static void convertJsonbArray(StringInfo, JEntry *, JsonbValue *, int);
1694:	static void convertJsonbObject(StringInfo, JEntry *, JsonbValue *, int);
1810:	static void convertJsonbScalar(StringInfo, JEntry *, JsonbValue *);
1585:	static void convertJsonbValue(StringInfo, JEntry *, JsonbValue *, int);
1543:	static Jsonb *convertToJsonb(JsonbValue *);
1499:	static void copyToBuffer(StringInfo, int, const char *, int);
1396:	static _Bool equalsJsonbScalarValue(JsonbValue *, JsonbValue *);
505:	static void fillJsonbValue(JsonbContainer *, int, char *, uint32, JsonbValue *);
1036:	static JsonbIterator *freeAndGetParent(JsonbIterator *);
994:	static JsonbIterator *iteratorFromContainer(JsonbContainer *, JsonbIterator *);
1914:	static int lengthCompareJsonbPair(const void *, const void *, void *);
1894:	static int lengthCompareJsonbString(const char *, int, const char *, int);
1875:	static int lengthCompareJsonbStringValue(const void *, const void *);
1522:	static short padBufferToInt(StringInfo);
640:	static JsonbValue *pushJsonbValueScalar(JsonbParseState **, JsonbIteratorToken, JsonbValue *);
729:	static JsonbParseState *pushState(JsonbParseState **);
1473:	static int reserveFromBuffer(StringInfo, int);
1938:	static void uniqueifyJsonbObject(JsonbValue *);

File jsonbsubs.c:
405:	Datum jsonb_subscript_handler(FunctionCallInfo);
356:	static void jsonb_exec_setup(const SubscriptingRef *, SubscriptingRefState *, SubscriptExecSteps *);
264:	static void jsonb_subscript_assign(ExprState *, ExprEvalStep *, ExprContext *);
178:	static _Bool jsonb_subscript_check_subscripts(ExprState *, ExprEvalStep *, ExprContext *);
238:	static void jsonb_subscript_fetch(ExprState *, ExprEvalStep *, ExprContext *);
326:	static void jsonb_subscript_fetch_old(ExprState *, ExprEvalStep *, ExprContext *);
46:	static void jsonb_subscript_transform(SubscriptingRef *, List *, ParseState *, _Bool, _Bool);

File jsonfuncs.c:
5439:	void iterate_json_values(text *, uint32, void *, JsonIterateStringValuesAction);
5371:	void iterate_jsonb_values(Jsonb *, uint32, void *, JsonIterateStringValuesAction);
885:	Datum json_array_element(FunctionCallInfo);
928:	Datum json_array_element_text(FunctionCallInfo);
2318:	Datum json_array_elements(FunctionCallInfo);
2324:	Datum json_array_elements_text(FunctionCallInfo);
1798:	Datum json_array_length(FunctionCallInfo);
1892:	Datum json_each(FunctionCallInfo);
1904:	Datum json_each_text(FunctionCallInfo);
617:	void json_ereport_error(JsonParseErrorType, JsonLexContext *);
972:	Datum json_extract_path(FunctionCallInfo);
978:	Datum json_extract_path_text(FunctionCallInfo);
809:	Datum json_object_field(FunctionCallInfo);
847:	Datum json_object_field_text(FunctionCallInfo);
699:	Datum json_object_keys(FunctionCallInfo);
2516:	Datum json_populate_record(FunctionCallInfo);
3746:	Datum json_populate_recordset(FunctionCallInfo);
4217:	Datum json_strip_nulls(FunctionCallInfo);
2523:	Datum json_to_record(FunctionCallInfo);
3753:	Datum json_to_recordset(FunctionCallInfo);
900:	Datum jsonb_array_element(FunctionCallInfo);
943:	Datum jsonb_array_element_text(FunctionCallInfo);
2200:	Datum jsonb_array_elements(FunctionCallInfo);
2206:	Datum jsonb_array_elements_text(FunctionCallInfo);
1826:	Datum jsonb_array_length(FunctionCallInfo);
4326:	Datum jsonb_concat(FunctionCallInfo);
4367:	Datum jsonb_delete(FunctionCallInfo);
4420:	Datum jsonb_delete_array(FunctionCallInfo);
4508:	Datum jsonb_delete_idx(FunctionCallInfo);
4689:	Datum jsonb_delete_path(FunctionCallInfo);
1898:	Datum jsonb_each(FunctionCallInfo);
1910:	Datum jsonb_each_text(FunctionCallInfo);
1433:	Datum jsonb_extract_path(FunctionCallInfo);
1439:	Datum jsonb_extract_path_text(FunctionCallInfo);
1477:	Datum jsonb_get_element(Jsonb *, Datum *, int, _Bool *, _Bool);
4733:	Datum jsonb_insert(FunctionCallInfo);
825:	Datum jsonb_object_field(FunctionCallInfo);
863:	Datum jsonb_object_field_text(FunctionCallInfo);
544:	Datum jsonb_object_keys(FunctionCallInfo);
2502:	Datum jsonb_populate_record(FunctionCallInfo);
3732:	Datum jsonb_populate_recordset(FunctionCallInfo);
4310:	Datum jsonb_pretty(FunctionCallInfo);
4572:	Datum jsonb_set(FunctionCallInfo);
1625:	Datum jsonb_set_element(Jsonb *, Datum *, int, JsonbValue *);
4622:	Datum jsonb_set_lax(FunctionCallInfo);
4252:	Datum jsonb_strip_nulls(FunctionCallInfo);
2509:	Datum jsonb_to_record(FunctionCallInfo);
3739:	Datum jsonb_to_recordset(FunctionCallInfo);
517:	JsonLexContext *makeJsonLexContext(text *, _Bool);
5303:	uint32 parse_jsonb_index_flags(Jsonb *);
501:	void pg_parse_json_or_ereport(JsonLexContext *, JsonSemAction *);
5555:	text *transform_json_string_values(text *, void *, JsonTransformStringValuesAction);
5508:	Jsonb *transform_jsonb_string_values(Jsonb *, void *, JsonTransformStringValuesAction);
4783:	static JsonbValue *IteratorConcat(JsonbIterator **, JsonbIterator **, JsonbParseState **);
3275:	static _Bool JsObjectGetField(JsObject *, char *, JsValue *);
2888:	static void JsValueToJsObject(JsValue *, JsObject *);
1751:	static text *JsonbValueAsText(JsonbValue *);
1872:	static void alen_array_element_start(void *, _Bool);
1848:	static void alen_object_start(void *);
1860:	static void alen_scalar(void *, char *, JsonTokenType);
3259:	static RecordIOData *allocate_record_info(MemoryContext, int);
2164:	static void each_array_start(void *);
2118:	static void each_object_field_end(void *, char *, _Bool);
2098:	static void each_object_field_start(void *, char *, _Bool);
2176:	static void each_scalar(void *, char *, JsonTokenType);
2034:	static Datum each_worker(FunctionCallInfo, _Bool);
1916:	static Datum each_worker_jsonb(FunctionCallInfo, const char *, _Bool);
2416:	static void elements_array_element_end(void *, _Bool);
2396:	static void elements_array_element_start(void *, _Bool);
2460:	static void elements_object_start(void *);
2473:	static void elements_scalar(void *, char *, JsonTokenType);
2330:	static Datum elements_worker(FunctionCallInfo, const char *, _Bool);
2212:	static Datum elements_worker_jsonb(FunctionCallInfo, const char *, _Bool);
1350:	static void get_array_element_end(void *, _Bool);
1304:	static void get_array_element_start(void *, _Bool);
1288:	static void get_array_end(void *);
1250:	static void get_array_start(void *);
3584:	static HTAB *get_json_object_as_hash(char *, int, const char *);
1445:	static Datum get_jsonb_path_all(FunctionCallInfo, _Bool);
1140:	static void get_object_end(void *);
1201:	static void get_object_field_end(void *, char *, _Bool);
1156:	static void get_object_field_start(void *, char *, _Bool);
1123:	static void get_object_start(void *);
987:	static Datum get_path_all(FunctionCallInfo, _Bool);
3416:	static void get_record_type_from_argument(FunctionCallInfo, const char *, PopulateRecordCache *);
3442:	static void get_record_type_from_query(FunctionCallInfo, const char *, PopulateRecordCache *);
1392:	static void get_scalar(void *, char *, JsonTokenType);
1067:	static text *get_worker(text *, char **, int *, int, _Bool);
3692:	static void hash_array_start(void *);
3643:	static void hash_object_field_end(void *, char *, _Bool);
3619:	static void hash_object_field_start(void *, char *, _Bool);
3703:	static void hash_scalar(void *, char *, JsonTokenType);
5489:	static void iterate_values_object_field_start(void *, char *, _Bool);
5463:	static void iterate_values_scalar(void *, char *, JsonTokenType);
776:	static void okeys_array_start(void *);
755:	static void okeys_object_field_start(void *, char *, _Bool);
789:	static void okeys_scalar(void *, char *, JsonTokenType);
2841:	static Datum populate_array(ArrayIOData *, const char *, MemoryContext, JsValue *);
2649:	static void populate_array_array_end(void *);
2574:	static void populate_array_assign_ndims(PopulateArrayContext *, int);
2593:	static void populate_array_check_dimension(PopulateArrayContext *, int);
2770:	static void populate_array_dim_jsonb(PopulateArrayContext *, JsonbValue *, int);
2615:	static void populate_array_element(PopulateArrayContext *, int, JsValue *);
2680:	static void populate_array_element_end(void *, _Bool);
2664:	static void populate_array_element_start(void *, _Bool);
2741:	static void populate_array_json(PopulateArrayContext *, char *, int);
2636:	static void populate_array_object_start(void *);
2531:	static void populate_array_report_expected_array(PopulateArrayContext *, int);
2719:	static void populate_array_scalar(void *, char *, JsonTokenType);
2955:	static Datum populate_composite(CompositeIOData *, Oid, const char *, MemoryContext, HeapTupleHeader, JsValue *, _Bool);
3080:	static Datum populate_domain(DomainIOData *, Oid, const char *, MemoryContext, JsValue *, _Bool);
3303:	static HeapTupleHeader populate_record(TupleDesc, RecordIOData **, HeapTupleHeader, MemoryContext, JsObject *);
3194:	static Datum populate_record_field(ColumnIOData *, Oid, int32, const char *, MemoryContext, Datum, JsValue *, _Bool *);
3479:	static Datum populate_record_worker(FunctionCallInfo, const char *, _Bool, _Bool);
4014:	static void populate_recordset_array_element_start(void *, _Bool);
4027:	static void populate_recordset_array_start(void *);
3993:	static void populate_recordset_object_end(void *);
4069:	static void populate_recordset_object_field_end(void *, char *, _Bool);
4048:	static void populate_recordset_object_field_start(void *, char *, _Bool);
3965:	static void populate_recordset_object_start(void *);
3760:	static void populate_recordset_record(PopulateRecordsetState *, JsObject *);
4033:	static void populate_recordset_scalar(void *, char *, JsonTokenType);
3797:	static Datum populate_recordset_worker(FunctionCallInfo, const char *, _Bool, _Bool);
2999:	static Datum populate_scalar(ScalarIOData *, Oid, int32, JsValue *);
3107:	static void prepare_column_cache(ColumnIOData *, Oid, int32, MemoryContext, _Bool);
1648:	static void push_null_elements(JsonbParseState **, int);
1667:	static void push_path(JsonbParseState **, int, Datum *, _Bool *, int, JsonbValue *);
645:	static int report_json_context(JsonLexContext *);
4911:	static JsonbValue *setPath(JsonbIterator **, Datum *, _Bool *, int, JsonbParseState **, int, JsonbValue *, int);
5132:	static void setPathArray(JsonbIterator **, Datum *, _Bool *, int, JsonbParseState **, int, JsonbValue *, uint32, int);
4993:	static void setPathObject(JsonbIterator **, Datum *, _Bool *, int, JsonbParseState **, int, JsonbValue *, uint32, int);
4187:	static void sn_array_element_start(void *, _Bool);
4151:	static void sn_array_end(void *);
4143:	static void sn_array_start(void *);
4135:	static void sn_object_end(void *);
4159:	static void sn_object_field_start(void *, char *, _Bool);
4127:	static void sn_object_start(void *);
4196:	static void sn_scalar(void *, char *, JsonTokenType);
5636:	static void transform_string_values_array_element_start(void *, _Bool);
5612:	static void transform_string_values_array_end(void *);
5604:	static void transform_string_values_array_start(void *);
5596:	static void transform_string_values_object_end(void *);
5620:	static void transform_string_values_object_field_start(void *, char *, _Bool);
5588:	static void transform_string_values_object_start(void *);
5645:	static void transform_string_values_scalar(void *, char *, JsonTokenType);
2931:	static void update_cached_tupdesc(CompositeIOData *, MemoryContext);

File jsonpath.c:
93:	Datum jsonpath_in(FunctionCallInfo);
129:	Datum jsonpath_out(FunctionCallInfo);
110:	Datum jsonpath_recv(FunctionCallInfo);
142:	Datum jsonpath_send(FunctionCallInfo);
923:	void jspGetArg(JsonPathItem *, JsonPathItem *);
1062:	_Bool jspGetArraySubscript(JsonPathItem *, JsonPathItem *, JsonPathItem *, int);
1034:	_Bool jspGetBool(JsonPathItem *);
992:	void jspGetLeftArg(JsonPathItem *, JsonPathItem *);
937:	_Bool jspGetNext(JsonPathItem *, JsonPathItem *);
1042:	Numeric jspGetNumeric(JsonPathItem *);
1013:	void jspGetRightArg(JsonPathItem *, JsonPathItem *);
1050:	char *jspGetString(JsonPathItem *, int32 *);
833:	void jspInit(JsonPathItem *, JsonPath *);
843:	void jspInitByBuffer(JsonPathItem *, char *, int32);
718:	const char *jspOperationName(JsonPathItemType);
439:	static void alignStringInfoInt(StringInfo);
229:	static int flattenJsonPathParseItem(StringInfo, JsonPathParseItem *, int, _Bool);
168:	static Datum jsonPathFromCstring(char *, int);
203:	static char *jsonPathToCstring(StringInfo, JsonPath *, int);
777:	static int operationPriority(JsonPathItemType);
476:	static void printJsonPathItem(StringInfo, JsonPathItem *, _Bool, _Bool);
462:	static int32 reserveSpaceForItemPointer(StringInfo);

File jsonpath_exec.c:
298:	Datum jsonb_path_exists(FunctionCallInfo);
315:	Datum jsonb_path_exists_opr(FunctionCallInfo);
304:	Datum jsonb_path_exists_tz(FunctionCallInfo);
366:	Datum jsonb_path_match(FunctionCallInfo);
383:	Datum jsonb_path_match_opr(FunctionCallInfo);
372:	Datum jsonb_path_match_tz(FunctionCallInfo);
441:	Datum jsonb_path_query(FunctionCallInfo);
472:	Datum jsonb_path_query_array(FunctionCallInfo);
478:	Datum jsonb_path_query_array_tz(FunctionCallInfo);
506:	Datum jsonb_path_query_first(FunctionCallInfo);
512:	Datum jsonb_path_query_first_tz(FunctionCallInfo);
447:	Datum jsonb_path_query_tz(FunctionCallInfo);
2437:	static void JsonValueListAppend(JsonValueList *, JsonbValue *);
2469:	static List *JsonValueListGetList(JsonValueList *);
2463:	static JsonbValue *JsonValueListHead(JsonValueList *);
2478:	static void JsonValueListInitIterator(const JsonValueList *, JsonValueListIterator *);
2457:	static _Bool JsonValueListIsEmpty(JsonValueList *);
2451:	static int JsonValueListLength(const JsonValueList *);
2504:	static JsonbValue *JsonValueListNext(const JsonValueList *, JsonValueListIterator *);
2156:	static int JsonbArraySize(JsonbValue *);
2525:	static JsonbValue *JsonbInitBinary(JsonbValue *, Jsonb *);
2538:	static int JsonbType(JsonbValue *);
2050:	static JsonPathExecResult appendBoolResult(JsonPathExecContext *, JsonPathItem *, JsonValueList *, JsonPathBool);
2184:	static int binaryCompareStrings(const char *, int, const char *, int);
2602:	static Datum castTimeToTimeTz(Datum, _Bool);
2590:	static void checkTimezoneIsUsedForCast(_Bool, const char *, const char *);
2614:	static int cmpDateToTimestamp(DateADT, Timestamp, _Bool);
2623:	static int cmpDateToTimestampTz(DateADT, TimestampTz, _Bool);
2634:	static int cmpTimestampToTimestampTz(Timestamp, TimestampTz, _Bool);
2647:	static int compareDatetime(Datum, Oid, Datum, Oid, _Bool, _Bool *);
2272:	static JsonPathBool compareItems(int32, JsonbValue *, JsonbValue *, _Bool);
2368:	static int compareNumeric(Numeric, Numeric);
2205:	static int compareStrings(const char *, int, const char *, int);
2376:	static JsonbValue *copyJsonbValue(JsonbValue *);
1380:	static JsonPathExecResult executeAnyItem(JsonPathExecContext *, JsonPathItem *, JsonbContainer *, JsonValueList *, uint32, uint32, uint32, _Bool, _Bool);
1551:	static JsonPathExecResult executeBinaryArithmExpr(JsonPathExecContext *, JsonPathItem *, JsonbValue *, BinaryArithmFunc, JsonValueList *);
1226:	static JsonPathBool executeBoolItem(JsonPathExecContext *, JsonPathItem *, JsonbValue *, _Bool);
2173:	static JsonPathBool executeComparison(JsonPathItem *, JsonbValue *, JsonbValue *, void *);
1779:	static JsonPathExecResult executeDateTimeMethod(JsonPathExecContext *, JsonPathItem *, JsonbValue *, JsonValueList *);
599:	static JsonPathExecResult executeItem(JsonPathExecContext *, JsonPathItem *, JsonbValue *, JsonValueList *);
1174:	static JsonPathExecResult executeItemOptUnwrapResult(JsonPathExecContext *, JsonPathItem *, JsonbValue *, _Bool, JsonValueList *);
1209:	static JsonPathExecResult executeItemOptUnwrapResultNoThrow(JsonPathExecContext *, JsonPathItem *, JsonbValue *, _Bool, JsonValueList *);
611:	static JsonPathExecResult executeItemOptUnwrapTarget(JsonPathExecContext *, JsonPathItem *, JsonbValue *, JsonValueList *, _Bool);
1123:	static JsonPathExecResult executeItemUnwrapTargetArray(JsonPathExecContext *, JsonPathItem *, JsonbValue *, JsonValueList *, _Bool);
539:	static JsonPathExecResult executeJsonPath(JsonPath *, Jsonb *, Jsonb *, _Bool, JsonValueList *, _Bool);
1940:	static JsonPathExecResult executeKeyValueMethod(JsonPathExecContext *, JsonPathItem *, JsonbValue *, JsonValueList *);
1713:	static JsonPathBool executeLikeRegex(JsonPathItem *, JsonbValue *, JsonbValue *, void *);
1359:	static JsonPathBool executeNestedBoolItem(JsonPathExecContext *, JsonPathItem *, JsonbValue *);
1143:	static JsonPathExecResult executeNextItem(JsonPathExecContext *, JsonPathItem *, JsonPathItem *, JsonbValue *, JsonValueList *, _Bool);
1743:	static JsonPathExecResult executeNumericItemMethod(JsonPathExecContext *, JsonPathItem *, JsonbValue *, _Bool, PGFunction, JsonValueList *);
1471:	static JsonPathBool executePredicate(JsonPathExecContext *, JsonPathItem *, JsonPathItem *, JsonPathItem *, JsonbValue *, _Bool, JsonPathPredicateCallback, void *);
1689:	static JsonPathBool executeStartsWith(JsonPathItem *, JsonbValue *, JsonbValue *, void *);
1622:	static JsonPathExecResult executeUnaryArithmExpr(JsonPathExecContext *, JsonPathItem *, JsonbValue *, PGFunction, JsonValueList *);
2390:	static JsonPathExecResult getArrayIndex(JsonPathExecContext *, JsonPathItem *, JsonbValue *, int32 *);
2078:	static void getJsonPathItem(JsonPathExecContext *, JsonPathItem *, JsonbValue *);
2111:	static void getJsonPathVariable(JsonPathExecContext *, JsonPathItem *, Jsonb *, JsonbValue *);
2562:	static JsonbValue *getScalar(JsonbValue *, enum jbvType);
272:	static Datum jsonb_path_exists_internal(FunctionCallInfo, _Bool);
327:	static Datum jsonb_path_match_internal(FunctionCallInfo, _Bool);
458:	static Datum jsonb_path_query_array_internal(FunctionCallInfo, _Bool);
489:	static Datum jsonb_path_query_first_internal(FunctionCallInfo, _Bool);
395:	static Datum jsonb_path_query_internal(FunctionCallInfo, _Bool);
2425:	static JsonBaseObjectInfo setBaseObject(JsonPathExecContext *, JsonbValue *, int32);
2573:	static JsonbValue *wrapItemsInArray(const JsonValueList *);

File jsonpath_gram.c:
1300:	int jsonpath_yyparse(JsonPathParseResult **);
1279:	static void yydestruct(const char *, int, YYSTYPE *, JsonPathParseResult **);

File jsonpath_gram.y:
550:	int jspConvertRegexFlags(uint32);
482:	static JsonPathParseItem *makeAny(int, int);
456:	static JsonPathParseItem *makeIndexArray(List *);
394:	static JsonPathParseItem *makeItemBinary(JsonPathItemType, JsonPathParseItem *, JsonPathParseItem *);
384:	static JsonPathParseItem *makeItemBool(_Bool);
358:	static JsonPathParseItem *makeItemKey(JsonPathString *);
493:	static JsonPathParseItem *makeItemLikeRegex(JsonPathParseItem *, JsonPathString *, JsonPathString *);
429:	static JsonPathParseItem *makeItemList(List *);
369:	static JsonPathParseItem *makeItemNumeric(JsonPathString *);
327:	static JsonPathParseItem *makeItemString(JsonPathString *);
314:	static JsonPathParseItem *makeItemType(JsonPathItemType);
405:	static JsonPathParseItem *makeItemUnary(JsonPathItemType, JsonPathParseItem *);
346:	static JsonPathParseItem *makeItemVariable(JsonPathString *);

File jsonpath_scan.c:
3520:	YY_BUFFER_STATE jsonpath_yy_create_buffer(FILE *, int);
3548:	void jsonpath_yy_delete_buffer(YY_BUFFER_STATE);
3595:	void jsonpath_yy_flush_buffer(YY_BUFFER_STATE);
3722:	YY_BUFFER_STATE jsonpath_yy_scan_buffer(char *, yy_size_t);
3772:	YY_BUFFER_STATE jsonpath_yy_scan_bytes(const char *, int);
3759:	YY_BUFFER_STATE jsonpath_yy_scan_string(const char *);
3475:	void jsonpath_yy_switch_to_buffer(YY_BUFFER_STATE);
3899:	int jsonpath_yyget_debug(void);
3843:	FILE *jsonpath_yyget_in(void);
3859:	int jsonpath_yyget_leng(void);
3834:	int jsonpath_yyget_lineno(void);
3851:	FILE *jsonpath_yyget_out(void);
3868:	char *jsonpath_yyget_text(void);
2653:	int jsonpath_yylex(YYSTYPE *);
3938:	int jsonpath_yylex_destroy(void);
3654:	void jsonpath_yypop_buffer_state(void);
3624:	void jsonpath_yypush_buffer_state(YY_BUFFER_STATE);
3458:	void jsonpath_yyrestart(FILE *);
3904:	void jsonpath_yyset_debug(int);
3889:	void jsonpath_yyset_in(FILE *);
3877:	void jsonpath_yyset_lineno(int);
3894:	void jsonpath_yyset_out(FILE *);
3567:	static void jsonpath_yy_init_buffer(YY_BUFFER_STATE, FILE *);
3506:	static void jsonpath_yy_load_buffer_state(void);
3673:	static void jsonpath_yyensure_buffer_stack(void);
3806:	static void yy_fatal_error(const char *);
3203:	static int yy_get_next_buffer(void);
3341:	static yy_state_type yy_get_previous_state(void);
3909:	static int yy_init_globals(void);
3361:	static yy_state_type yy_try_NUL_trans(yy_state_type);

File jsonpath_scan.l:
604:	void *jsonpath_yyalloc(yy_size_t);
279:	void jsonpath_yyerror(JsonPathParseResult **, const char *);
619:	void jsonpath_yyfree(void *);
610:	void *jsonpath_yyrealloc(void *, yy_size_t);
461:	JsonPathParseResult *parsejsonpath(const char *, int);
512:	static void addUnicode(int, int *);
491:	static void addUnicodeChar(int);
451:	static void addchar(_Bool, char);
442:	static void addstring(_Bool, char *, int);
337:	static enum yytokentype checkKeyword(void);
41:	static void fprintf_to_ereport(const char *, const char *);
477:	static int hexval(char);
410:	static void jsonpath_scanner_finish(void);
382:	static void jsonpath_scanner_init(const char *, int);
590:	static void parseHexChar(char *);
553:	static void parseUnicode(char *, int);
421:	static void resizeString(_Bool, int);

File key_call.c:
140:	int __GI_key_decryptsession(char *, des_block *);
187:	int __GI_key_decryptsession_pk(char *, netobj *, des_block *);
117:	int __GI_key_encryptsession(char *, des_block *);
162:	int __GI_key_encryptsession_pk(char *, netobj *, des_block *);
212:	int __GI_key_gendes(des_block *);
266:	int __GI_key_get_conv(char *, des_block *);
93:	int __GI_key_secretkey_is_set(void);
247:	int __GI_key_setnet(struct key_netstarg *);
70:	int __GI_key_setsecret(char *);
555:	void __rpc_thread_key_cleanup(void);
388:	static CLIENT *getkeyserv_handle(int);

File key_prot.c:
65:	bool_t __GI_xdr_cryptkeyarg(XDR *, cryptkeyarg *);
78:	bool_t __GI_xdr_cryptkeyarg2(XDR *, cryptkeyarg2 *);
91:	bool_t __GI_xdr_cryptkeyres(XDR *, cryptkeyres *);
124:	bool_t __GI_xdr_getcredres(XDR *, getcredres *);
142:	bool_t __GI_xdr_key_netstarg(XDR *, key_netstarg *);
155:	bool_t __GI_xdr_key_netstres(XDR *, key_netstres *);
45:	bool_t __GI_xdr_keybuf(XDR *, char *);
35:	bool_t __GI_xdr_keystatus(XDR *, keystatus *);
55:	bool_t __GI_xdr_netnamestr(XDR *, netnamestr *);
109:	bool_t __GI_xdr_unixcred(XDR *, unixcred *);

File knapsack.c:
54:	Bitmapset *DiscreteKnapsack(int, int, int *, double *);

File kwlist_d.h:
946:	static int ScanKeywords_hash_func(const void *, size_t);

File kwlookup.c:
38:	int ScanKeywordLookup(const char *, const ScanKeywordList *);

File l64a.c:
35:	char *l64a(long);

File latch.c:
883:	int AddWaitEventToSet(WaitEventSet *, uint32, pgsocket, Latch *, void *);
705:	WaitEventSet *CreateWaitEventSet(MemoryContext, int);
445:	void DisownLatch(Latch *);
819:	void FreeWaitEventSet(WaitEventSet *);
2044:	int GetNumRegisteredWaitEvents(WaitEventSet *);
353:	void InitLatch(Latch *);
389:	void InitSharedLatch(Latch *);
207:	void InitializeLatchSupport(void);
305:	void InitializeLatchWaitSet(void);
969:	void ModifyWaitEvent(WaitEventSet *, int, uint32, Latch *);
422:	void OwnLatch(Latch *);
681:	void ResetLatch(Latch *);
588:	void SetLatch(Latch *);
323:	void ShutdownLatchSupport(void);
1327:	int WaitEventSetWait(WaitEventSet *, long, WaitEvent *, int, uint32);
473:	int WaitLatch(Latch *, int, long, uint32);
521:	int WaitLatchOrSocket(Latch *, int, pgsocket, long, uint32);
1044:	static void WaitEventAdjustEpoll(WaitEventSet *, WaitEvent *, int);
1462:	static int WaitEventSetWaitBlock(WaitEventSet *, int, WaitEvent *, int);
2110:	static void drain(void);

File launcher.c:
797:	void ApplyLauncherMain(Datum);
702:	void ApplyLauncherRegister(void);
731:	void ApplyLauncherShmemInit(void);
683:	Size ApplyLauncherShmemSize(void);
780:	void ApplyLauncherWakeupAtCommit(void);
761:	void AtEOXact_ApplyLauncher(_Bool);
913:	_Bool IsLogicalLauncher(void);
659:	int logicalrep_sync_worker_count(Oid);
564:	void logicalrep_worker_attach(int);
215:	LogicalRepWorker *logicalrep_worker_find(Oid, Oid, _Bool);
266:	void logicalrep_worker_launch(Oid, Oid, const char *, Oid, Oid);
436:	void logicalrep_worker_stop(Oid, Oid);
533:	void logicalrep_worker_wakeup(Oid, Oid);
553:	void logicalrep_worker_wakeup_ptr(LogicalRepWorker *);
243:	List *logicalrep_workers_find(Oid, _Bool);
922:	Datum pg_stat_get_subscription(FunctionCallInfo);
787:	static void ApplyLauncherWakeup(void);
157:	static void WaitForReplicationWorkerAttach(LogicalRepWorker *, uint16, BackgroundWorkerHandle *);
88:	static List *get_subscription_list(void);
632:	static void logicalrep_launcher_onexit(int, Datum);
614:	static void logicalrep_worker_cleanup(LogicalRepWorker *);
600:	static void logicalrep_worker_detach(void);
643:	static void logicalrep_worker_onexit(int, Datum);

File lc-ctype.c:
32:	void _nl_postload_ctype(void);

File lc-time-cleanup.c:
23:	void _nl_cleanup_time(struct __locale_data *);

File lchmod.c:
25:	int lchmod(const char *, mode_t);

File lckpwdf.c:
84:	int __lckpwdf(void);
146:	int __ulckpwdf(void);
173:	static void noop_handler(int);

File lcong48.c:
23:	void lcong48(unsigned short *);

File lcong48_r.c:
25:	int __lcong48_r(unsigned short *, struct drand48_data *);

File levenshtein.c:
73:	int varstr_levenshtein(const char *, int, const char *, int, int, int, int, _Bool);
68:	int varstr_levenshtein_less_equal(const char *, int, const char *, int, int, int, int, int, _Bool);

File libc-cleanup.c:
23:	void __libc_cleanup_routine(struct __pthread_cleanup_frame *);

File libc_pthread_init.c:
41:	int *__libc_pthread_init(unsigned long *, void (*)(void), const struct pthread_functions *);

File libpthread-compat.c:
26:	static void __libpthread_version_placeholder(void);

File like.c:
326:	Datum bytealike(FunctionCallInfo);
347:	Datum byteanlike(FunctionCallInfo);
430:	Datum like_escape(FunctionCallInfo);
449:	Datum like_escape_bytea(FunctionCallInfo);
372:	Datum nameiclike(FunctionCallInfo);
387:	Datum nameicnlike(FunctionCallInfo);
242:	Datum namelike(FunctionCallInfo);
263:	Datum namenlike(FunctionCallInfo);
402:	Datum texticlike(FunctionCallInfo);
414:	Datum texticnlike(FunctionCallInfo);
284:	Datum textlike(FunctionCallInfo);
305:	Datum textnlike(FunctionCallInfo);
151:	static int GenericMatchText(const char *, int, const char *, int, Oid);
172:	static int Generic_Text_IC_like(text *, text *, Oid);
93:	static char SB_lower_char(unsigned char, pg_locale_t, _Bool);
57:	static int wchareq(const char *, const char *);

File like_match.c:
80:	static int MB_MatchText(const char *, int, const char *, int, pg_locale_t, _Bool);
249:	static text *MB_do_like_escape(text *, text *);
80:	static int SB_IMatchText(const char *, int, const char *, int, pg_locale_t, _Bool);
80:	static int SB_MatchText(const char *, int, const char *, int, pg_locale_t, _Bool);
249:	static text *SB_do_like_escape(text *, text *);
80:	static int UTF8_MatchText(const char *, int, const char *, int, pg_locale_t, _Bool);

File like_support.c:
896:	Datum iclikejoinsel(FunctionCallInfo);
805:	Datum iclikesel(FunctionCallInfo);
932:	Datum icnlikejoinsel(FunctionCallInfo);
841:	Datum icnlikesel(FunctionCallInfo);
869:	Datum icregexeqjoinsel(FunctionCallInfo);
777:	Datum icregexeqsel(FunctionCallInfo);
914:	Datum icregexnejoinsel(FunctionCallInfo);
823:	Datum icregexnesel(FunctionCallInfo);
878:	Datum likejoinsel(FunctionCallInfo);
786:	Datum likesel(FunctionCallInfo);
923:	Datum nlikejoinsel(FunctionCallInfo);
832:	Datum nlikesel(FunctionCallInfo);
887:	Datum prefixjoinsel(FunctionCallInfo);
795:	Datum prefixsel(FunctionCallInfo);
860:	Datum regexeqjoinsel(FunctionCallInfo);
768:	Datum regexeqsel(FunctionCallInfo);
905:	Datum regexnejoinsel(FunctionCallInfo);
814:	Datum regexnesel(FunctionCallInfo);
124:	Datum texticlike_support(FunctionCallInfo);
140:	Datum texticregexeq_support(FunctionCallInfo);
116:	Datum textlike_support(FunctionCallInfo);
132:	Datum textregexeq_support(FunctionCallInfo);
1500:	static _Bool byte_increment(unsigned char *, int);
967:	static Pattern_Prefix_Status like_fixed_prefix(Const *, _Bool, Oid, Const **, Selectivity *);
149:	static Node *like_regex_support(Node *, Pattern_Type);
1298:	static Selectivity like_selectivity(const char *, int, _Bool);
1550:	static Const *make_greater_string(const Const *, FmgrInfo *, Oid);
234:	static List *match_pattern_prefix(Node *, Node *, Pattern_Type, Oid, Oid, Oid);
1476:	static int pattern_char_isalpha(char, _Bool, pg_locale_t, _Bool);
1143:	static Pattern_Prefix_Status pattern_fixed_prefix(Const *, Pattern_Type, Oid, Const **, Selectivity *);
850:	static double patternjoinsel(FunctionCallInfo, Pattern_Type, _Bool);
735:	static double patternsel(FunctionCallInfo, Pattern_Type, _Bool);
461:	static double patternsel_common(PlannerInfo *, Oid, Oid, List *, int, Oid, Pattern_Type, _Bool);
1207:	static Selectivity prefix_selectivity(PlannerInfo *, VariableStatData *, Oid, Oid, Oid, Oid, Const *);
1075:	static Pattern_Prefix_Status regex_fixed_prefix(Const *, _Bool, Oid, Const **, Selectivity *);
1430:	static Selectivity regex_selectivity(const char *, int, _Bool, int);
1335:	static Selectivity regex_selectivity_sub(const char *, int, _Bool);
1764:	static Const *string_to_bytea_const(const char *, size_t);
1721:	static Const *string_to_const(const char *, Oid);
1701:	static Datum string_to_datum(const char *, Oid);

File link-canary.c:
29:	_Bool pg_link_canary_is_frontend(void);

File list.c:
336:	List *lappend(List *, void *);
354:	List *lappend_int(List *, int);
372:	List *lappend_oid(List *, Oid);
468:	List *lcons(void *, List *);
486:	List *lcons_int(int, List *);
504:	List *lcons_oid(Oid, List *);
1261:	List *list_append_unique(List *, void *);
1286:	List *list_append_unique_int(List *, int);
1298:	List *list_append_unique_oid(List *, Oid);
1274:	List *list_append_unique_ptr(List *, void *);
530:	List *list_concat(List *, const List *);
567:	List *list_concat_copy(const List *, const List *);
1318:	List *list_concat_unique(List *, const List *);
1361:	List *list_concat_unique_int(List *, const List *);
1382:	List *list_concat_unique_oid(List *, const List *);
1340:	List *list_concat_unique_ptr(List *, const List *);
1484:	List *list_copy(const List *);
1529:	List *list_copy_deep(const List *);
1503:	List *list_copy_tail(const List *, int);
1406:	void list_deduplicate_oid(List *);
792:	List *list_delete(List *, void *);
782:	List *list_delete_cell(List *, ListCell *);
875:	List *list_delete_first(List *);
915:	List *list_delete_first_n(List *, int);
830:	List *list_delete_int(List *, int);
892:	List *list_delete_last(List *);
711:	List *list_delete_nth_cell(List *, int);
849:	List *list_delete_oid(List *, Oid);
811:	List *list_delete_ptr(List *, void *);
1157:	List *list_difference(const List *, const List *);
1208:	List *list_difference_int(const List *, const List *);
1233:	List *list_difference_oid(const List *, const List *);
1183:	List *list_difference_ptr(const List *, const List *);
1457:	void list_free(List *);
1471:	void list_free_deep(List *);
415:	List *list_insert_nth(List *, int, void *);
429:	List *list_insert_nth_int(List *, int, int);
443:	List *list_insert_nth_oid(List *, int, Oid);
1579:	int list_int_cmp(const ListCell *, const ListCell *);
1099:	List *list_intersection(const List *, const List *);
1125:	List *list_intersection_int(const List *, const List *);
233:	List *list_make1_impl(NodeTag, ListCell);
243:	List *list_make2_impl(NodeTag, ListCell, ListCell);
254:	List *list_make3_impl(NodeTag, ListCell, ListCell, ListCell);
267:	List *list_make4_impl(NodeTag, ListCell, ListCell, ListCell, ListCell);
281:	List *list_make5_impl(NodeTag, ListCell, ListCell, ListCell, ListCell, ListCell);
628:	_Bool list_member(const List *, const void *);
669:	_Bool list_member_int(const List *, int);
689:	_Bool list_member_oid(const List *, Oid);
649:	_Bool list_member_ptr(const List *, const void *);
1595:	int list_oid_cmp(const ListCell *, const ListCell *);
1562:	void list_sort(List *, list_sort_comparator);
600:	List *list_truncate(List *, int);
996:	List *list_union(const List *, const List *);
1043:	List *list_union_int(const List *, const List *);
1066:	List *list_union_oid(const List *, const List *);
1020:	List *list_union_ptr(const List *, const List *);
152:	static void enlarge_list(List *, int);
394:	static ListCell *insert_new_cell(List *, int);
1431:	static void list_free_private(List *, _Bool);
302:	static void new_head_cell(List *);
88:	static List *new_list(NodeTag, int);
320:	static void new_tail_cell(List *);

File llabs.c:
26:	long long llabs(long long);

File lldiv.c:
24:	lldiv_t lldiv(long long, long long);

File lll_timedlock_wait.c:
28:	int __lll_clocklock_wait(int *, int, clockid_t, const struct timespec *, int);

File lmgr.c:
303:	_Bool CheckRelationLockedByMe(Relation, LOCKMODE, _Bool);
505:	_Bool ConditionalLockPage(Relation, BlockNumber, LOCKMODE);
248:	_Bool ConditionalLockRelation(Relation, LOCKMODE);
421:	_Bool ConditionalLockRelationForExtension(Relation, LOCKMODE);
152:	_Bool ConditionalLockRelationOid(Oid, LOCKMODE);
561:	_Bool ConditionalLockTuple(Relation, ItemPointer, LOCKMODE);
713:	_Bool ConditionalXactLockTableWait(TransactionId);
1101:	void DescribeLockTag(StringInfo, const LOCKTAG *);
1191:	const char *GetLockNameFromTagType(uint16);
470:	void LockDatabaseFrozenIds(LOCKMODE);
977:	void LockDatabaseObject(Oid, Oid, uint16, LOCKMODE);
346:	_Bool LockHasWaitersRelation(Relation, LOCKMODE);
486:	void LockPage(Relation, BlockNumber, LOCKMODE);
217:	void LockRelation(Relation, LOCKMODE);
403:	void LockRelationForExtension(Relation, LOCKMODE);
370:	void LockRelationIdForSession(LockRelId *, LOCKMODE);
109:	void LockRelationOid(Oid, LOCKMODE);
1018:	void LockSharedObject(Oid, Oid, uint16, LOCKMODE);
1060:	void LockSharedObjectForSession(Oid, Oid, uint16, LOCKMODE);
541:	void LockTuple(Relation, ItemPointer, LOCKMODE);
438:	int RelationExtensionLockWaiterCount(Relation);
72:	void RelationInitLockInfo(Relation);
755:	uint32 SpeculativeInsertionLockAcquire(TransactionId);
781:	void SpeculativeInsertionLockRelease(TransactionId);
797:	void SpeculativeInsertionWait(TransactionId, uint32);
998:	void UnlockDatabaseObject(Oid, Oid, uint16, LOCKMODE);
521:	void UnlockPage(Relation, BlockNumber, LOCKMODE);
283:	void UnlockRelation(Relation, LOCKMODE);
453:	void UnlockRelationForExtension(Relation, LOCKMODE);
185:	void UnlockRelationId(LockRelId *, LOCKMODE);
383:	void UnlockRelationIdForSession(LockRelId *, LOCKMODE);
200:	void UnlockRelationOid(Oid, LOCKMODE);
1039:	void UnlockSharedObject(Oid, Oid, uint16, LOCKMODE);
1078:	void UnlockSharedObjectForSession(Oid, Oid, uint16, LOCKMODE);
578:	void UnlockTuple(Relation, ItemPointer, LOCKMODE);
958:	void WaitForLockers(LOCKTAG, LOCKMODE, _Bool);
880:	void WaitForLockersMultiple(List *, LOCKMODE, _Bool);
616:	void XactLockTableDelete(TransactionId);
599:	void XactLockTableInsert(TransactionId);
640:	void XactLockTableWait(TransactionId, Relation, ItemPointer, XLTW_Oper);
90:	static void SetLocktagRelationOid(LOCKTAG *, Oid);
815:	static void XactLockTableWaitErrorCb(void *);

File loadarchive.c:
502:	void _nl_archive_subfreeres(void);
133:	struct __locale_data *_nl_load_locale_from_archive(int, const char **);

File loadlocale.c:
68:	struct __locale_data *_nl_intern_locale_data(int, const void *, size_t);
166:	void _nl_load_locale(struct loaded_l10nfile *, int);
286:	void _nl_unload_locale(struct __locale_data *);

File loadmsgcat.c:
752:	void _nl_load_domain(struct loaded_l10nfile *, struct binding *);
1288:	void _nl_unload_domain(struct loaded_domain *);

File localbuf.c:
577:	void AtEOXact_LocalBuffers(_Bool);
588:	void AtProcExit_LocalBuffers(void);
373:	void DropRelFileNodeAllLocalBuffers(RelFileNode);
326:	void DropRelFileNodeLocalBuffers(RelFileNode, ForkNumber, BlockNumber);
109:	BufferDesc *LocalBufferAlloc(SMgrRelation, ForkNumber, BlockNumber, _Bool *);
286:	void MarkLocalBufferDirty(Buffer);
64:	PrefetchBufferResult PrefetchLocalBuffer(SMgrRelation, ForkNumber, BlockNumber);
548:	static void CheckForLocalBufferLeaks(void);
493:	static Block GetLocalBufferStorage(void);
416:	static void InitLocalBuffers(void);

File localealias.c:
149:	const char *_nl_expand_alias(const char *);
404:	static int alias_compare(const struct alias_map *, const struct alias_map *);
210:	static size_t read_alias_file(const char *, int);

File localeconv.c:
24:	struct lconv *__localeconv(void);

File localename.c:
23:	const char *__current_locale_name(int);

File localtime.c:
52:	struct tm *__GI_localtime(const time_t *);
28:	struct tm *__localtime_r(const time_t *, struct tm *);
1873:	const char *pg_get_timezone_name(pg_tz *);
1849:	_Bool pg_get_timezone_offset(const pg_tz *, long *);
1387:	struct pg_tm *pg_gmtime(const pg_time_t *);
1755:	_Bool pg_interpret_timezone_abbrev(const char *, const pg_time_t *, long *, int *, const pg_tz *);
1342:	struct pg_tm *pg_localtime(const pg_time_t *, const pg_tz *);
1608:	int pg_next_dst_boundary(const pg_time_t *, long *, int *, pg_time_t *, long *, int *, const pg_tz *);
1888:	_Bool pg_tz_acceptable(pg_tz *);
584:	int tzload(const char *, char *, struct state *, _Bool);
934:	_Bool tzparse(const char *, struct state *, _Bool);
116:	static int32 detzcode(const char * const);
142:	static int64 detzcode64(const char * const);
168:	static _Bool differ_by_repeat(const pg_time_t, const pg_time_t);
678:	static const char *getnum(const char *, int * const, const int, const int);
749:	static const char *getoffset(const char *, int32 * const);
661:	static const char *getqzname(const char *, const int);
776:	static const char *getrule(const char *, struct rule * const);
708:	static const char *getsecs(const char *, int32 * const);
640:	static const char *getzname(const char *);
1243:	static void gmtload(struct state * const);
1355:	static struct pg_tm *gmtsub(const pg_time_t *, int32, struct pg_tm *);
1537:	static _Bool increment_overflow(int *, int);
1555:	static _Bool increment_overflow_time(pg_time_t *, int32);
106:	static void init_ttinfo(struct ttinfo *, int32, _Bool, int);
1572:	static int64 leapcorr(const struct state *, pg_time_t);
1404:	static int leaps_thru_end_of(const int);
1398:	static int leaps_thru_end_of_nonneg(int);
1257:	static struct pg_tm *localsub(const struct state *, const pg_time_t *, struct pg_tm * const);
1412:	static struct pg_tm *timesub(const pg_time_t *, int32, const struct state *, struct pg_tm *);
837:	static int32 transtime(const int, const struct rule * const, const int32);
600:	static _Bool typesequiv(const struct state *, int, int);
209:	static int tzloadbody(const char *, char *, struct state *, _Bool, union local_storage *);

File lock.c:
1756:	void AbortStrongLockAcquire(void);
3320:	void AtPrepare_Locks(void);
582:	_Bool DoLockModesConflict(LOCKMODE, LOCKMODE);
3837:	BlockedProcsData *GetBlockerStatusData(int);
2913:	VirtualTransactionId *GetLockConflicts(const LOCKTAG *, LOCKMODE, int *);
3645:	LockData *GetLockStatusData(void);
498:	LockMethod GetLockTagsMethodTable(const LOCKTAG *);
4099:	const char *GetLockmodeName(LOCKMETHODID, LOCKMODE);
486:	LockMethod GetLocksMethodTable(const LOCK *);
4017:	xl_standby_lock *GetRunningTransactionLocks(int *);
1785:	void GrantAwaitedLock(void);
1554:	void GrantLock(LOCK *, PROCLOCK *, LOCKMODE);
404:	void InitLocks(void);
746:	LockAcquireResult LockAcquire(const LOCKTAG *, LOCKMODE, _Bool, _Bool);
770:	LockAcquireResult LockAcquireExtended(const LOCKTAG *, LOCKMODE, _Bool, _Bool, _Bool, LOCALLOCK **);
1419:	_Bool LockCheckConflicts(LockMethod, LOCKMODE, LOCK *, PROCLOCK *);
633:	_Bool LockHasWaiters(const LOCKTAG *, LOCKMODE, _Bool);
597:	_Bool LockHeldByMe(const LOCKTAG *, LOCKMODE);
2578:	void LockReassignCurrentOwner(LOCALLOCK **, int);
1974:	_Bool LockRelease(const LOCKTAG *, LOCKMODE, _Bool);
2179:	void LockReleaseAll(LOCKMETHODID, _Bool);
2483:	void LockReleaseCurrentOwner(LOCALLOCK **, int);
2453:	void LockReleaseSession(LOCKMETHODID);
3608:	Size LockShmemSize(void);
516:	uint32 LockTagHashCode(const LOCKTAG *);
4709:	int LockWaiterCount(const LOCKTAG *);
1798:	void MarkLockClear(LOCALLOCK *);
3416:	void PostPrepare_Locks(TransactionId);
1917:	void RemoveFromWaitQueue(PGPROC *, uint32);
4598:	_Bool VirtualXactLock(VirtualTransactionId, _Bool);
4498:	void VirtualXactLockTableCleanup(void);
4475:	void VirtualXactLockTableInsert(VirtualTransactionId);
4451:	void lock_twophase_postabort(TransactionId, uint16, void *, uint32);
4425:	void lock_twophase_postcommit(TransactionId, uint16, void *, uint32);
4212:	void lock_twophase_recover(TransactionId, uint16, void *, uint32);
4393:	void lock_twophase_standby_recover(TransactionId, uint16, void *, uint32);
1720:	static void BeginStrongLockAcquire(LOCALLOCK *, uint32);
1351:	static void CheckAndSetLockHeld(LOCALLOCK *, _Bool);
3232:	static void CheckForSessionAndXactLocks(void);
1634:	static void CleanUpLock(LOCK *, PROCLOCK *, LockMethod, uint32, _Bool);
2809:	static PROCLOCK *FastPathGetRelationLockEntry(LOCALLOCK *);
2654:	static _Bool FastPathGrantRelationLock(Oid, LOCKMODE);
2721:	static _Bool FastPathTransferRelationLocks(LockMethod, const LOCKTAG *, uint32);
2691:	static _Bool FastPathUnGrantRelationLock(Oid, LOCKMODE);
1746:	static void FinishStrongLockAcquire(void);
3917:	static void GetSingleProcBlockerStatusData(PGPROC *, BlockedProcsData *);
1688:	static void GrantLockLocal(LOCALLOCK *, ResourceOwner);
2608:	static void LockReassignOwner(LOCALLOCK *, ResourceOwner);
3128:	static void LockRefindAndRelease(LockMethod, PGPROC *, LOCKTAG *, LOCKMODE, _Bool);
564:	static uint32 ProcLockHashCode(const PROCLOCKTAG *, uint32);
2518:	static void ReleaseLockIfHeld(LOCALLOCK *, _Bool);
1366:	static void RemoveLocalLock(LOCALLOCK *);
1169:	static PROCLOCK *SetupLockInTable(LockMethod, PGPROC *, const LOCKTAG *, uint32, LOCKMODE);
1577:	static _Bool UnGrantLock(LOCK *, LOCKMODE, PROCLOCK *, LockMethod);
1813:	static void WaitOnLock(LOCALLOCK *, ResourceOwner);
4547:	static _Bool XactLockForVirtualXact(VirtualTransactionId, TransactionId, _Bool);
533:	static uint32 proclock_hash(const void *, Size);

File lockcmds.c:
42:	void LockTableCommand(LockStmt *);
278:	static AclResult LockTableAclCheck(Oid, LOCKMODE, Oid);
117:	static void LockTableRecurse(Oid, LOCKMODE, _Bool);
250:	static void LockViewRecurse(Oid, LOCKMODE, _Bool, List *);
177:	static _Bool LockViewRecurse_walker(Node *, LockViewRecurse_context *);
72:	static void RangeVarCallbackForLockTable(const RangeVar *, Oid, Oid, void *);

File lockf.c:
26:	int lockf(int, int, off_t);

File lockf64.c:
24:	int __lockf64(int, int, off64_t);

File lockfuncs.c:
872:	Datum pg_advisory_lock_int4(FunctionCallInfo);
690:	Datum pg_advisory_lock_int8(FunctionCallInfo);
907:	Datum pg_advisory_lock_shared_int4(FunctionCallInfo);
723:	Datum pg_advisory_lock_shared_int8(FunctionCallInfo);
1064:	Datum pg_advisory_unlock_all(FunctionCallInfo);
1026:	Datum pg_advisory_unlock_int4(FunctionCallInfo);
836:	Datum pg_advisory_unlock_int8(FunctionCallInfo);
1046:	Datum pg_advisory_unlock_shared_int4(FunctionCallInfo);
855:	Datum pg_advisory_unlock_shared_int8(FunctionCallInfo);
890:	Datum pg_advisory_xact_lock_int4(FunctionCallInfo);
707:	Datum pg_advisory_xact_lock_int8(FunctionCallInfo);
925:	Datum pg_advisory_xact_lock_shared_int4(FunctionCallInfo);
740:	Datum pg_advisory_xact_lock_shared_int8(FunctionCallInfo);
446:	Datum pg_blocking_pids(FunctionCallInfo);
601:	Datum pg_isolation_test_session_is_blocked(FunctionCallInfo);
92:	Datum pg_lock_status(FunctionCallInfo);
556:	Datum pg_safe_snapshot_blocking_pids(FunctionCallInfo);
944:	Datum pg_try_advisory_lock_int4(FunctionCallInfo);
758:	Datum pg_try_advisory_lock_int8(FunctionCallInfo);
985:	Datum pg_try_advisory_lock_shared_int4(FunctionCallInfo);
797:	Datum pg_try_advisory_lock_shared_int8(FunctionCallInfo);
965:	Datum pg_try_advisory_xact_lock_int4(FunctionCallInfo);
778:	Datum pg_try_advisory_xact_lock_int8(FunctionCallInfo);
1006:	Datum pg_try_advisory_xact_lock_shared_int4(FunctionCallInfo);
817:	Datum pg_try_advisory_xact_lock_shared_int8(FunctionCallInfo);
74:	static Datum VXIDGetDatum(BackendId, LocalTransactionId);

File logical.c:
103:	void CheckLogicalDecodingRequirements(void);
476:	LogicalDecodingContext *CreateDecodingContext(XLogRecPtr, List *, _Bool, XLogReaderRoutine *, LogicalOutputPluginWriterPrepareWrite, LogicalOutputPluginWriterWrite, LogicalOutputPluginWriterUpdateProgress);
318:	LogicalDecodingContext *CreateInitDecodingContext(const char *, List *, _Bool, XLogRecPtr, XLogReaderRoutine *, LogicalOutputPluginWriterPrepareWrite, LogicalOutputPluginWriterWrite, LogicalOutputPluginWriterUpdateProgress);
571:	void DecodingContextFindStartpoint(LogicalDecodingContext *);
562:	_Bool DecodingContextReady(LogicalDecodingContext *);
614:	void FreeDecodingContext(LogicalDecodingContext *);
1703:	void LogicalConfirmReceivedLocation(XLogRecPtr);
1629:	void LogicalIncreaseRestartDecodingForSlot(XLogRecPtr, XLogRecPtr);
1572:	void LogicalIncreaseXminForSlot(XLogRecPtr, TransactionId);
629:	void OutputPluginPrepareWrite(struct LogicalDecodingContext *, _Bool);
655:	void OutputPluginUpdateProgress(struct LogicalDecodingContext *);
642:	void OutputPluginWrite(struct LogicalDecodingContext *, _Bool);
1790:	void ResetLogicalStreamingState(void);
1800:	void UpdateDecodingStats(LogicalDecodingContext *);
1134:	_Bool filter_by_origin_cb_wrapper(LogicalDecodingContext *, RepOriginId);
1102:	_Bool filter_prepare_cb_wrapper(LogicalDecodingContext *, TransactionId, const char *);
668:	static void LoadOutputPlugin(OutputPluginCallbacks *, const char *);
146:	static LogicalDecodingContext *StartupDecodingContext(List *, XLogRecPtr, TransactionId, _Bool, _Bool, XLogReaderRoutine *, LogicalOutputPluginWriterPrepareWrite, LogicalOutputPluginWriterWrite, LogicalOutputPluginWriterUpdateProgress);
770:	static void begin_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *);
840:	static void begin_prepare_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *);
1021:	static void change_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, Relation, ReorderBufferChange *);
801:	static void commit_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr);
929:	static void commit_prepared_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr);
1165:	static void message_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr, _Bool, const char *, Size, const char *);
690:	static void output_plugin_error_callback(void *);
884:	static void prepare_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr);
974:	static void rollback_prepared_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr, TimestampTz);
737:	static void shutdown_cb_wrapper(LogicalDecodingContext *);
709:	static void startup_cb_wrapper(LogicalDecodingContext *, OutputPluginOptions *, _Bool);
1300:	static void stream_abort_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr);
1427:	static void stream_change_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, Relation, ReorderBufferChange *);
1386:	static void stream_commit_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr);
1476:	static void stream_message_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr, _Bool, const char *, Size, const char *);
1341:	static void stream_prepare_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr);
1202:	static void stream_start_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr);
1251:	static void stream_stop_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr);
1517:	static void stream_truncate_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, int, Relation *, ReorderBufferChange *);
1060:	static void truncate_cb_wrapper(ReorderBuffer *, ReorderBufferTXN *, int, Relation *, ReorderBufferChange *);

File logicalfuncs.c:
400:	Datum pg_logical_emit_message_bytea(FunctionCallInfo);
413:	Datum pg_logical_emit_message_text(FunctionCallInfo);
381:	Datum pg_logical_slot_get_binary_changes(FunctionCallInfo);
363:	Datum pg_logical_slot_get_changes(FunctionCallInfo);
390:	Datum pg_logical_slot_peek_binary_changes(FunctionCallInfo);
372:	Datum pg_logical_slot_peek_changes(FunctionCallInfo);
55:	static void LogicalOutputPrepareWrite(LogicalDecodingContext *, XLogRecPtr, TransactionId, _Bool);
65:	static void LogicalOutputWrite(LogicalDecodingContext *, XLogRecPtr, TransactionId, _Bool);
99:	static void check_permissions(void);
111:	static Datum pg_logical_slot_get_changes_guts(FunctionCallInfo, _Bool, _Bool);

File logicalmsgdesc.c:
19:	void logicalmsg_desc(StringInfo, XLogReaderState *);
46:	const char *logicalmsg_identify(uint8);

File logtape.c:
1137:	size_t LogicalTapeBackspace(LogicalTapeSet *, int, size_t);
1034:	void LogicalTapeFreeze(LogicalTapeSet *, int, TapeShare *);
977:	size_t LogicalTapeRead(LogicalTapeSet *, int, void *, size_t);
863:	void LogicalTapeRewindForRead(LogicalTapeSet *, int, size_t);
951:	void LogicalTapeRewindForWrite(LogicalTapeSet *, int);
1211:	void LogicalTapeSeek(LogicalTapeSet *, int, long, int);
1272:	long LogicalTapeSetBlocks(LogicalTapeSet *);
737:	void LogicalTapeSetClose(LogicalTapeSet *);
685:	LogicalTapeSet *LogicalTapeSetCreate(int, _Bool, TapeShare *, SharedFileSet *, int);
1109:	void LogicalTapeSetExtend(LogicalTapeSet *, int);
764:	void LogicalTapeSetForgetFreeSpace(LogicalTapeSet *);
1245:	void LogicalTapeTell(LogicalTapeSet *, int, long *, int *);
775:	void LogicalTapeWrite(LogicalTapeSet *, int, void *, size_t);
356:	static unsigned long left_offset(unsigned long);
542:	static void ltsConcatWorkerTapes(LogicalTapeSet *, TapeShare *, SharedFileSet *);
377:	static long ltsGetBlock(LogicalTapeSet *, LogicalTape *);
390:	static long ltsGetFreeBlock(LogicalTapeSet *);
447:	static long ltsGetPreallocBlock(LogicalTapeSet *, LogicalTape *);
652:	static void ltsInitReadBuffer(LogicalTapeSet *, LogicalTape *);
626:	static void ltsInitTape(LogicalTape *);
284:	static void ltsReadBlock(LogicalTapeSet *, long, void *);
307:	static _Bool ltsReadFillBuffer(LogicalTapeSet *, LogicalTape *);
485:	static void ltsReleaseBlock(LogicalTapeSet *, long);
240:	static void ltsWriteBlock(LogicalTapeSet *, long, void *);
368:	static unsigned long parent_offset(unsigned long);
362:	static unsigned long right_offset(unsigned long);
346:	static void swap_nodes(long *, unsigned long, unsigned long);

File lowlevellock.c:
43:	void __lll_lock_wait(int *, int);
26:	void __lll_lock_wait_private(int *);

File lrand48.c:
23:	long lrand48(void);

File lrand48_r.c:
22:	int __GI_lrand48_r(struct drand48_data *, long *);

File lsearch.c:
44:	void *__GI_lfind(const void *, const void *, size_t *, size_t, __compar_fn_t);
25:	void *lsearch(const void *, void *, size_t *, size_t, __compar_fn_t);

File lsyscache.c:
747:	_Bool comparison_ops_are_compatible(Oid, Oid);
696:	_Bool equality_ops_are_compatible(Oid, Oid);
3304:	void free_attstatsslot(AttStatsSlot *);
1780:	char func_parallel(Oid);
1742:	_Bool func_strict(Oid);
1761:	char func_volatile(Oid);
2478:	Oid getBaseType(Oid);
2495:	Oid getBaseTypeAndTypmod(Oid, int32 *);
3087:	const struct SubscriptRoutines *getSubscriptingRoutines(Oid, Oid *);
2897:	void getTypeBinaryInputInfo(Oid, Oid *, Oid *);
2930:	void getTypeBinaryOutputInfo(Oid, Oid *, _Bool *);
2260:	Oid getTypeIOParam(HeapTuple);
2831:	void getTypeInputInfo(Oid, Oid *, Oid *);
2864:	void getTypeOutputInfo(Oid, Oid *, _Bool *);
2744:	Oid get_array_type(Oid);
3115:	int32 get_attavgwidth(Oid, AttrNumber);
913:	char get_attgenerated(Oid, AttrNumber);
825:	char *get_attname(Oid, AttrNumber, _Bool);
856:	AttrNumber get_attnum(Oid, const char *);
995:	Datum get_attoptions(Oid, int16);
3187:	_Bool get_attstatsslot(AttStatsSlot *, HeapTuple, int, Oid, int);
883:	int get_attstattarget(Oid, AttrNumber);
938:	Oid get_atttype(Oid, AttrNumber);
968:	void get_atttypetypmodcoll(Oid, AttrNumber, Oid *, int32 *, Oid *);
2789:	Oid get_base_element_type(Oid);
1032:	Oid get_cast_oid(Oid, Oid, _Bool);
1079:	_Bool get_collation_isdeterministic(Oid);
1060:	char *get_collation_name(Oid);
1490:	Oid get_commutator(Oid);
408:	_Bool get_compatible_hash_operators(Oid, Oid *, Oid *);
1138:	Oid get_constraint_index(Oid);
1106:	char *get_constraint_name(Oid);
2716:	Oid get_element_type(Oid);
265:	Oid get_equality_op_for_ordering_op(Oid, _Bool *);
1818:	_Bool get_func_leakproof(Oid);
1589:	char *get_func_name(Oid);
1613:	Oid get_func_namespace(Oid);
1655:	int get_func_nargs(Oid);
1799:	char get_func_prokind(Oid);
1723:	_Bool get_func_retset(Oid);
1636:	Oid get_func_rettype(Oid);
1677:	Oid get_func_signature(Oid, Oid **, int *);
1839:	RegProcedure get_func_support(Oid);
1704:	Oid get_func_variadictype(Oid);
3472:	Oid get_index_column_opclass(Oid, int);
3565:	_Bool get_index_isclustered(Oid);
3519:	_Bool get_index_isreplident(Oid);
3542:	_Bool get_index_isvalid(Oid);
1164:	char *get_language_name(Oid, _Bool);
364:	List *get_mergejoin_opfamilies(Oid);
3443:	Oid get_multirange_range(Oid);
3326:	char *get_namespace_name(Oid);
3350:	char *get_namespace_name_or_temp(Oid);
1514:	Oid get_negator(Oid);
599:	List *get_op_btree_interpretation(Oid);
508:	_Bool get_op_hash_functions(Oid, RegProcedure *, RegProcedure *);
134:	void get_op_opfamily_properties(Oid, Oid, _Bool, int *, Oid *, Oid *);
106:	Oid get_op_opfamily_sortfamily(Oid, Oid);
81:	int get_op_opfamily_strategy(Oid, Oid);
1314:	Oid get_op_rettype(Oid);
1193:	Oid get_opclass_family(Oid);
1215:	Oid get_opclass_input_type(Oid);
1238:	_Bool get_opclass_opfamily_and_input_type(Oid, Oid *, Oid *);
1266:	RegProcedure get_opcode(Oid);
164:	Oid get_opfamily_member(Oid, Oid, Oid, int16);
794:	Oid get_opfamily_proc(Oid, Oid, Oid, int16);
1291:	char *get_opname(Oid);
1562:	RegProcedure get_oprjoin(Oid);
1538:	RegProcedure get_oprrest(Oid);
303:	Oid get_ordering_op_for_equality_op(Oid, _Bool);
205:	_Bool get_ordering_op_properties(Oid, Oid *, Oid *, int16 *);
2768:	Oid get_promoted_array_type(Oid);
3393:	Oid get_range_collation(Oid);
3418:	Oid get_range_multirange(Oid);
3367:	Oid get_range_subtype(Oid);
1909:	char *get_rel_name(Oid);
1933:	Oid get_rel_namespace(Oid);
2059:	char get_rel_persistence(Oid);
2008:	_Bool get_rel_relispartition(Oid);
1984:	char get_rel_relkind(Oid);
2035:	Oid get_rel_tablespace(Oid);
1960:	Oid get_rel_type_id(Oid);
1866:	Oid get_relname_relid(const char *, Oid);
2079:	Oid get_transform_fromsql(Oid, Oid, List *);
2100:	Oid get_transform_tosql(Oid, Oid, List *);
2688:	Oid get_typ_typrelid(Oid);
2535:	int32 get_typavgwidth(Oid, int32);
2179:	_Bool get_typbyval(Oid);
3013:	Oid get_typcollation(Oid);
2405:	Node *get_typdefault(Oid);
2667:	void get_type_category_preferred(Oid, char *, _Bool *);
2282:	void get_type_io_data(Oid, IOFuncSelector, int16 *, _Bool *, char *, char *, Oid *, Oid *);
2130:	_Bool get_typisdefined(Oid);
2154:	int16 get_typlen(Oid);
2208:	void get_typlenbyval(Oid, int16 *, _Bool *);
2228:	void get_typlenbyvalalign(Oid, int16 *, _Bool *, char *);
2963:	Oid get_typmodin(Oid);
2376:	char get_typstorage(Oid);
3054:	RegProcedure get_typsubscript(Oid, Oid *);
2586:	char get_typtype(Oid);
1418:	_Bool op_hashjoinable(Oid, Oid);
64:	_Bool op_in_opfamily(Oid, Oid);
1339:	void op_input_types(Oid, Oid *, Oid *);
1367:	_Bool op_mergejoinable(Oid, Oid);
1458:	_Bool op_strict(Oid);
1474:	char op_volatile(Oid);
3038:	_Bool type_is_collatable(Oid);
2635:	_Bool type_is_enum(Oid);
2655:	_Bool type_is_multirange(Oid);
2645:	_Bool type_is_range(Oid);
2612:	_Bool type_is_rowtype(Oid);

File lwlock.c:
465:	void CreateLWLocks(void);
804:	const char *GetLWLockIdentifier(uint32, uint16);
594:	LWLockPadded *GetNamedLWLockTranche(const char *);
578:	void InitLWLockAccess(void);
1203:	_Bool LWLockAcquire(LWLock *, LWLockMode);
1431:	_Bool LWLockAcquireOrWait(LWLock *, LWLockMode);
1941:	_Bool LWLockAnyHeldByMe(LWLock *, int, size_t);
1374:	_Bool LWLockConditionalAcquire(LWLock *, LWLockMode);
1923:	_Bool LWLockHeldByMe(LWLock *);
1967:	_Bool LWLockHeldByMeInMode(LWLock *, LWLockMode);
740:	void LWLockInitialize(LWLock *, int);
624:	int LWLockNewTrancheId(void);
648:	void LWLockRegisterTranche(int, const char *);
1807:	void LWLockRelease(LWLock *);
1906:	void LWLockReleaseAll(void);
1880:	void LWLockReleaseClearVar(LWLock *, uint64 *, uint64);
432:	Size LWLockShmemSize(void);
1753:	void LWLockUpdateVar(LWLock *, uint64 *, uint64);
1618:	_Bool LWLockWaitForVar(LWLock *, uint64 *, uint64, uint64 *);
700:	void RequestNamedLWLockTranche(const char *, int);
776:	static const char *GetLWTrancheName(uint16);
511:	static void InitializeLWLocks(void);
821:	static _Bool LWLockAttemptLock(LWLock *, LWLockMode);
1558:	static _Bool LWLockConflictsWithVar(LWLock *, uint64 *, uint64, uint64 *, _Bool *);
1108:	static void LWLockDequeueSelf(LWLock *);
1064:	static void LWLockQueueSelf(LWLock *, LWLockMode);
767:	static void LWLockReportWaitEnd(void);
758:	static void LWLockReportWaitStart(LWLock *);
892:	static void LWLockWaitListLock(LWLock *);
944:	static void LWLockWaitListUnlock(LWLock *);
957:	static void LWLockWakeup(LWLock *);
417:	static int NumLWLocksForNamedTranches(void);

File mac.c:
267:	Datum hashmacaddr(FunctionCallInfo);
275:	Datum hashmacaddrextended(FunctionCallInfo);
303:	Datum macaddr_and(FunctionCallInfo);
197:	Datum macaddr_cmp(FunctionCallInfo);
228:	Datum macaddr_eq(FunctionCallInfo);
237:	Datum macaddr_ge(FunctionCallInfo);
246:	Datum macaddr_gt(FunctionCallInfo);
56:	Datum macaddr_in(FunctionCallInfo);
219:	Datum macaddr_le(FunctionCallInfo);
210:	Datum macaddr_lt(FunctionCallInfo);
255:	Datum macaddr_ne(FunctionCallInfo);
287:	Datum macaddr_not(FunctionCallInfo);
320:	Datum macaddr_or(FunctionCallInfo);
121:	Datum macaddr_out(FunctionCallInfo);
140:	Datum macaddr_recv(FunctionCallInfo);
161:	Datum macaddr_send(FunctionCallInfo);
363:	Datum macaddr_sortsupport(FunctionCallInfo);
341:	Datum macaddr_trunc(FunctionCallInfo);
431:	static _Bool macaddr_abbrev_abort(int, SortSupport);
499:	static Datum macaddr_abbrev_convert(Datum, SortSupport);
414:	static int macaddr_cmp_abbrev(Datum, Datum, SortSupport);
182:	static int macaddr_cmp_internal(macaddr *, macaddr *);
400:	static int macaddr_fast_cmp(Datum, Datum, SortSupport);

File mac8.c:
403:	Datum hashmacaddr8(FunctionCallInfo);
411:	Datum hashmacaddr8extended(FunctionCallInfo);
442:	Datum macaddr8_and(FunctionCallInfo);
333:	Datum macaddr8_cmp(FunctionCallInfo);
364:	Datum macaddr8_eq(FunctionCallInfo);
373:	Datum macaddr8_ge(FunctionCallInfo);
382:	Datum macaddr8_gt(FunctionCallInfo);
104:	Datum macaddr8_in(FunctionCallInfo);
355:	Datum macaddr8_le(FunctionCallInfo);
346:	Datum macaddr8_lt(FunctionCallInfo);
391:	Datum macaddr8_ne(FunctionCallInfo);
423:	Datum macaddr8_not(FunctionCallInfo);
462:	Datum macaddr8_or(FunctionCallInfo);
242:	Datum macaddr8_out(FunctionCallInfo);
262:	Datum macaddr8_recv(FunctionCallInfo);
295:	Datum macaddr8_send(FunctionCallInfo);
508:	Datum macaddr8_set7bit(FunctionCallInfo);
485:	Datum macaddr8_trunc(FunctionCallInfo);
553:	Datum macaddr8tomacaddr(FunctionCallInfo);
532:	Datum macaddrtomacaddr8(FunctionCallInfo);
61:	static unsigned char hex2_to_uchar(const unsigned char *, const unsigned char *);
318:	static int32 macaddr8_cmp_internal(macaddr8 *, macaddr8 *);

File main.c:
59:	int main(int, char **);
367:	static void check_root(const char *);
307:	static void help(const char *);
288:	static void init_locale(const char *, int, const char *);
227:	static void startup_hacks(const char *);

File makedev.c:
28:	unsigned int __gnu_dev_major(__dev_t);
34:	__dev_t __gnu_dev_makedev(unsigned int, unsigned int);
31:	unsigned int __gnu_dev_minor(__dev_t);

File makefuncs.c:
271:	TargetEntry *flatCopyTargetEntry(TargetEntry *);
30:	A_Expr *makeA_Expr(A_Expr_Kind, List *, Node *, Node *, int);
387:	Alias *makeAlias(const char *, List *);
357:	Node *makeBoolConst(_Bool, _Bool);
369:	Expr *makeBoolExpr(BoolExprType, List *, int);
490:	ColumnDef *makeColumnDef(const char *, Oid, int32, Oid);
299:	Const *makeConst(Oid, int32, Oid, int, Datum, _Bool, _Bool);
546:	DefElem *makeDefElem(char *, Node *, int);
564:	DefElem *makeDefElemExtended(char *, char *, Node *, DefElemAction, int);
285:	FromExpr *makeFromExpr(List *, Node *);
585:	FuncCall *makeFuncCall(List *, List *, CoercionForm, int);
519:	FuncExpr *makeFuncExpr(Oid, Oid, List *, Oid, Oid, CoercionForm);
794:	GroupingSet *makeGroupingSet(GroupingSetKind, List *, int);
743:	IndexInfo *makeIndexInfo(int, int, Oid, List *, List *, _Bool, _Bool, _Bool);
337:	Const *makeNullConst(Oid, int32, Oid);
422:	RangeVar *makeRangeVar(char *, char *, int);
402:	RelabelType *makeRelabelType(Expr *, Oid, int32, Oid, CoercionForm);
48:	A_Expr *makeSimpleA_Expr(A_Expr_Kind, char *, Node *, Node *, int);
238:	TargetEntry *makeTargetEntry(Expr *, AttrNumber, char *, _Bool);
444:	TypeName *makeTypeName(char *);
456:	TypeName *makeTypeNameFromNameList(List *);
472:	TypeName *makeTypeNameFromOid(Oid, int32);
809:	VacuumRelation *makeVacuumRelation(RangeVar *, Oid, List *);
66:	Var *makeVar(Index, AttrNumber, Oid, int32, Oid, Index);
103:	Var *makeVarFromTargetEntry(Index, TargetEntry *);
133:	Var *makeWholeRowVar(RangeTblEntry *, Index, Index, _Bool);
689:	Node *make_and_qual(Node *, Node *);
636:	Expr *make_andclause(List *);
708:	Expr *make_ands_explicit(List *);
719:	List *make_ands_implicit(Expr *);
668:	Expr *make_notclause(Expr *);
610:	Expr *make_opclause(Oid, Oid, _Bool, Expr *, Expr *, Oid, Oid);
652:	Expr *make_orclause(List *);

File malloc.c:
3086:	void __GI___libc_free(void *);
3022:	void *__GI___libc_malloc(size_t);
5134:	int __GI___libc_mallopt(int, int);
3258:	void *__GI___libc_memalign(size_t, size_t);
3130:	void *__GI___libc_realloc(void *, size_t);
3365:	void *__libc_calloc(size_t, size_t);
4936:	struct mallinfo __libc_mallinfo(void);
3343:	void *__libc_pvalloc(size_t);
3332:	void *__libc_valloc(size_t);
5380:	int __malloc_info(FILE *, int);
4964:	void __malloc_stats(void);
4811:	int __malloc_trim(size_t);
4863:	size_t __malloc_usable_size(void *);
5353:	int __posix_memalign(void **, size_t, size_t);
289:	static void __malloc_assert(const char *, const char *, unsigned int, const char *);
4154:	static void _int_free(mstate, mchunkptr, int);
3512:	static void *_int_malloc(mstate, size_t);
4656:	static void *_int_memalign(mstate, size_t, size_t);
4538:	static void *_int_realloc(mstate, mchunkptr, size_t, size_t);
4877:	static void int_mallinfo(mstate, struct mallinfo *);
4440:	static void malloc_consolidate(mstate);
5345:	static void malloc_printerr(const char *);
2844:	static mchunkptr mremap_chunk(mchunkptr, size_t);
2808:	static void munmap_chunk(mchunkptr);
2254:	static void *sysmalloc(size_t, mstate);
2741:	static int systrim(size_t, mstate, mstate);
2972:	static void tcache_init(void);
1451:	static void unlink_chunk(mchunkptr, mstate);

File matview.c:
434:	DestReceiver *CreateTransientRelDestReceiver(Oid);
138:	ObjectAddress ExecRefreshMatView(RefreshMatViewStmt *, const char *, ParamListInfo, QueryCompletion *);
919:	_Bool MatViewIncrementalMaintenanceIsEnabled(void);
84:	void SetMatViewPopulatedState(Relation, _Bool);
931:	static void CloseMatViewIncrementalMaintenance(void);
925:	static void OpenMatViewIncrementalMaintenance(void);
865:	static _Bool is_usable_unique_index(Relation);
540:	static char *make_temptable_name_n(char *, int);
855:	static void refresh_by_heap_swap(Oid, Oid, char);
583:	static void refresh_by_match_merge(Oid, Oid, Oid, int);
375:	static uint64 refresh_matview_datafill(DestReceiver *, Query *, const char *);
523:	static void transientrel_destroy(DestReceiver *);
478:	static _Bool transientrel_receive(TupleTableSlot *, DestReceiver *);
506:	static void transientrel_shutdown(DestReceiver *);
452:	static void transientrel_startup(DestReceiver *, int, TupleDesc);

File mb_cur_max.c:
29:	size_t __ctype_get_mb_cur_max(void);

File mblen.c:
33:	int mblen(const char *, size_t);

File mbrlen.c:
27:	size_t __GI___mbrlen(const char *, size_t, mbstate_t *);

File mbrtoc16.c:
37:	size_t mbrtoc16(char16_t *, const char *, size_t, mbstate_t *);

File mbrtoc32.c:
27:	size_t mbrtoc32(char32_t *, const char *, size_t, mbstate_t *);

File mbrtowc.c:
36:	size_t __GI___mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);

File mbsinit.c:
34:	int __mbsinit(const mbstate_t *);

File mbsnrtowcs.c:
41:	size_t __mbsnrtowcs(wchar_t *, const char **, size_t, size_t, mbstate_t *);

File mbsnrtowcs_chk.c:
23:	size_t __mbsnrtowcs_chk(wchar_t *, const char **, size_t, size_t, mbstate_t *, size_t);

File mbsrtowcs.c:
27:	size_t __mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

File mbsrtowcs_chk.c:
23:	size_t __mbsrtowcs_chk(wchar_t *, const char **, size_t, mbstate_t *, size_t);

File mbsrtowcs_l.c:
40:	size_t __mbsrtowcs_l(wchar_t *, const char **, size_t, mbstate_t *, locale_t);

File mbstowcs.c:
27:	size_t mbstowcs(wchar_t *, const char *, size_t);

File mbstowcs_chk.c:
24:	size_t __mbstowcs_chk(wchar_t *, const char *, size_t, size_t);

File mbtowc.c:
34:	int mbtowc(wchar_t *, const char *, size_t);

File mbutils.c:
1210:	int GetDatabaseEncoding(void);
1216:	const char *GetDatabaseEncodingName(void);
1257:	int GetMessageEncoding(void);
281:	void InitializeClientEncoding(void);
1234:	Datum PG_char_to_encoding(FunctionCallInfo);
1242:	Datum PG_encoding_to_char(FunctionCallInfo);
110:	int PrepareClientEncoding(int);
208:	int SetClientEncoding(int);
1104:	void SetDatabaseEncoding(int);
1114:	void SetMessageEncoding(int);
1618:	void check_encoding_conversion_args(int, int, int, int, int);
1222:	Datum getdatabaseencoding(FunctionCallInfo);
615:	Datum length_in_encoding(FunctionCallInfo);
676:	char *pg_any_to_server(const char *, int, int);
1228:	Datum pg_client_encoding(FunctionCallInfo);
660:	char *pg_client_to_server(const char *, int);
553:	Datum pg_convert(FunctionCallInfo);
526:	Datum pg_convert_from(FunctionCallInfo);
501:	Datum pg_convert_to(FunctionCallInfo);
1472:	mbcharacter_incrementer pg_database_encoding_character_incrementer(void);
1495:	int pg_database_encoding_max_length(void);
356:	unsigned char *pg_do_encoding_conversion(unsigned char *, int, int, int);
469:	int pg_do_encoding_conversion_buf(Oid, int, int, unsigned char *, int, unsigned char *, int, _Bool);
973:	int pg_dsplen(const char *);
644:	Datum pg_encoding_max_length_sql(FunctionCallInfo);
936:	int pg_encoding_mb2wchar_with_len(int, const char *, pg_wchar *, int);
1036:	int pg_encoding_mbcliplen(int, const char *, int, int);
958:	int pg_encoding_wchar2mb_with_len(int, const pg_wchar *, char *, int);
336:	int pg_get_client_encoding(void);
345:	const char *pg_get_client_encoding_name(void);
922:	int pg_mb2wchar(const char *, pg_wchar *);
929:	int pg_mb2wchar_with_len(const char *, pg_wchar *, int);
1068:	int pg_mbcharcliplen(const char *, int, int);
1026:	int pg_mbcliplen(const char *, int, int);
966:	int pg_mblen(const char *);
980:	int pg_mbstrlen(const char *);
1000:	int pg_mbstrlen_with_len(const char *, int);
749:	char *pg_server_to_any(const char *, int, int);
738:	char *pg_server_to_client(const char *, int);
864:	void pg_unicode_to_server(pg_wchar, unsigned char *);
1515:	_Bool pg_verify_mbstr(int, const char *, int, _Bool);
1546:	int pg_verify_mbstr_len(int, const char *, int, _Bool);
1505:	_Bool pg_verifymbstr(const char *, int, _Bool);
944:	int pg_wchar2mb(const pg_wchar *, char *);
951:	int pg_wchar2mb_with_len(const pg_wchar *, char *, int);
1647:	void report_invalid_encoding(int, const char *, int);
1679:	void report_untranslatable_char(int, int, const char *, int);
1093:	static int cliplen(const char *, int, int);
783:	static char *perform_default_encoding_conversion(const char *, int, _Bool);
1386:	static _Bool pg_eucjp_increment(unsigned char *, int);
1274:	static _Bool pg_generic_charinc(unsigned char *, int);
1308:	static _Bool pg_utf8_increment(unsigned char *, int);

File mcheck.c:
373:	int __GI_mcheck(void (*)(enum mcheck_status));
118:	void __GI_mcheck_check_all(void);
404:	int mcheck_pedantic(void (*)(enum mcheck_status));
413:	enum mcheck_status mprobe(void *);
177:	static void freehook(void *, const void *);
338:	static void mabort(enum mcheck_status);
201:	static void *mallochook(size_t, const void *);
234:	static void *memalignhook(size_t, size_t, const void *);
273:	static void *reallochook(void *, size_t, const void *);

File mcount.c:
59:	void __mcount_internal(u_long, u_long);

File mcv.c:
2131:	Selectivity mcv_clause_selectivity_or(PlannerInfo *, StatisticExtInfo *, MCVList *, Node *, _Bool **, Selectivity *, Selectivity *, Selectivity *, Selectivity *);
2054:	Selectivity mcv_clauselist_selectivity(PlannerInfo *, StatisticExtInfo *, List *, int, JoinType, SpecialJoinInfo *, RelOptInfo *, Selectivity *, Selectivity *);
2012:	Selectivity mcv_combine_selectivities(Selectivity, Selectivity, Selectivity, Selectivity);
1475:	Datum pg_mcv_list_in(FunctionCallInfo);
1501:	Datum pg_mcv_list_out(FunctionCallInfo);
1510:	Datum pg_mcv_list_recv(FunctionCallInfo);
1526:	Datum pg_mcv_list_send(FunctionCallInfo);
1341:	Datum pg_stats_ext_mcvlist_items(FunctionCallInfo);
184:	MCVList *statext_mcv_build(StatsBuildData *, double, int);
999:	MCVList *statext_mcv_deserialize(bytea *);
562:	MCVList *statext_mcv_load(Oid);
624:	bytea *statext_mcv_serialize(MCVList *, VacAttrStats **);
494:	static SortItem **build_column_frequencies(SortItem *, int, MultiSortSupport, int *);
428:	static SortItem *build_distinct_groups(int, SortItem *, MultiSortSupport, int *);
351:	static MultiSortSupport build_mss(StatsBuildData *);
407:	static int compare_sort_item_count(const void *, const void *, void *);
383:	static int count_distinct_groups(int, SortItem *, MultiSortSupport);
152:	static double get_mincount_for_mcv_list(int, double);
1602:	static _Bool *mcv_get_match_bitmap(PlannerInfo *, List *, Bitmapset *, List *, MCVList *, _Bool);
1538:	static int mcv_match_expression(Node *, Bitmapset *, List *, Oid *);
469:	static int sort_item_compare(const void *, const void *, void *);

File mcxt.c:
434:	Size GetMemoryChunkSpace(void *);
1024:	void HandleLogMemoryContextInterrupt(void);
863:	void *MemoryContextAlloc(MemoryContext, Size);
979:	void *MemoryContextAllocExtended(MemoryContext, Size, int);
1224:	void *MemoryContextAllocHuge(MemoryContext, Size);
906:	void *MemoryContextAllocZero(MemoryContext, Size);
944:	void *MemoryContextAllocZeroAligned(MemoryContext, Size);
418:	void MemoryContextAllowInCriticalSection(MemoryContext, _Bool);
758:	_Bool MemoryContextContains(MemoryContext, void *);
815:	void MemoryContextCreate(MemoryContext, NodeTag, const MemoryContextMethods *, MemoryContext, const char *);
218:	void MemoryContextDelete(MemoryContext);
263:	void MemoryContextDeleteChildren(MemoryContext);
446:	MemoryContext MemoryContextGetParent(MemoryContext);
99:	void MemoryContextInit(void);
458:	_Bool MemoryContextIsEmpty(MemoryContext);
477:	Size MemoryContextMemAllocated(MemoryContext, _Bool);
292:	void MemoryContextRegisterResetCallback(MemoryContext, MemoryContextCallback *);
143:	void MemoryContextReset(MemoryContext);
195:	void MemoryContextResetChildren(MemoryContext);
162:	void MemoryContextResetOnly(MemoryContext);
336:	void MemoryContextSetIdentifier(MemoryContext, const char *);
361:	void MemoryContextSetParent(MemoryContext, MemoryContext);
505:	void MemoryContextStats(MemoryContext);
520:	void MemoryContextStatsDetail(MemoryContext, int, _Bool);
1292:	char *MemoryContextStrdup(MemoryContext, const char *);
1041:	void ProcessLogMemoryContextInterrupt(void);
1068:	void *palloc(Size);
1099:	void *palloc0(Size);
1132:	void *palloc_extended(Size, int);
1333:	char *pchomp(const char *);
1175:	void pfree(void *);
1316:	char *pnstrdup(const char *, Size);
1305:	char *pstrdup(const char *);
1188:	void *repalloc(void *, Size);
1258:	void *repalloc_huge(void *, Size);
309:	static void MemoryContextCallResetCallbacks(MemoryContext);
564:	static void MemoryContextStatsInternal(MemoryContext, int, _Bool, int, MemoryContextCounters *, _Bool);
655:	static void MemoryContextStatsPrint(MemoryContext, void *, const char *, _Bool);

File mcxtfuncs.c:
120:	Datum pg_get_backend_memory_contexts(FunctionCallInfo);
175:	Datum pg_log_backend_memory_contexts(FunctionCallInfo);
36:	static void PutMemoryContextsStatsTupleStore(Tuplestorestate *, TupleDesc, MemoryContext, const char *, int);

File md.c:
1050:	void DropRelationFiles(RelFileNode *, int, _Bool);
1032:	void ForgetDatabaseSyncRequests(Oid);
533:	void mdclose(SMgrRelation, ForkNumber);
178:	void mdcreate(SMgrRelation, ForkNumber, _Bool);
161:	_Bool mdexists(SMgrRelation, ForkNumber);
414:	void mdextend(SMgrRelation, ForkNumber, BlockNumber, char *, _Bool);
1400:	_Bool mdfiletagmatches(const FileTag *, const FileTag *);
922:	void mdimmedsync(SMgrRelation, ForkNumber);
148:	void mdinit(void);
763:	BlockNumber mdnblocks(SMgrRelation, ForkNumber);
522:	void mdopen(SMgrRelation);
556:	_Bool mdprefetch(SMgrRelation, ForkNumber, BlockNumber);
633:	void mdread(SMgrRelation, ForkNumber, BlockNumber, char *);
1334:	int mdsyncfiletag(const FileTag *, char *);
820:	void mdtruncate(SMgrRelation, ForkNumber, BlockNumber);
277:	void mdunlink(RelFileNodeBackend, ForkNumber, _Bool);
1381:	int mdunlinkfiletag(const FileTag *, char *);
698:	void mdwrite(SMgrRelation, ForkNumber, BlockNumber, char *, _Bool);
584:	void mdwriteback(SMgrRelation, ForkNumber, BlockNumber, BlockNumber);
1082:	static void _fdvec_resize(SMgrRelation, ForkNumber, int);
1188:	static MdfdVec *_mdfd_getseg(SMgrRelation, ForkNumber, BlockNumber, _Bool, int);
1143:	static MdfdVec *_mdfd_openseg(SMgrRelation, ForkNumber, BlockNumber, int);
1120:	static char *_mdfd_segpath(SMgrRelation, ForkNumber, BlockNumber);
1313:	static BlockNumber _mdnblocks(SMgrRelation, ForkNumber, MdfdVec *);
293:	static int do_truncate(const char *);
479:	static MdfdVec *mdopenfork(SMgrRelation, ForkNumber, int);
314:	static void mdunlinkfork(RelFileNodeBackend, ForkNumber, _Bool);
975:	static void register_dirty_segment(SMgrRelation, ForkNumber, MdfdVec *);
1018:	static void register_forget_request(RelFileNodeBackend, ForkNumber, BlockNumber);
1001:	static void register_unlink_segment(RelFileNodeBackend, ForkNumber, BlockNumber);

File md5.c:
435:	void pg_md5_final(pg_md5_ctx *, uint8 *);
385:	void pg_md5_init(pg_md5_ctx *);
403:	void pg_md5_update(pg_md5_ctx *, const uint8 *, size_t);
158:	static void md5_calc(const uint8 *, pg_md5_ctx *);
313:	static void md5_pad(pg_md5_ctx *);
351:	static void md5_result(uint8 *, pg_md5_ctx *);

File md5_common.c:
93:	_Bool pg_md5_binary(const void *, size_t, void *);
124:	_Bool pg_md5_encrypt(const char *, const char *, size_t, char *);
70:	_Bool pg_md5_hash(const void *, size_t, char *);
28:	static void bytesToHex(uint8 *, char *);

File memccpy.c:
31:	void *__memccpy(void *, const void *, int, size_t);

File memfrob.c:
21:	void *memfrob(void *, size_t);

File memmem.c:
53:	void *__GI___memmem(const void *, size_t, const void *, size_t);

File memstream.c:
64:	FILE *__GI___open_memstream(char **, size_t *);
127:	static void _IO_mem_finish(FILE *, int);
109:	static int _IO_mem_sync(FILE *);

File message.c:
45:	XLogRecPtr LogLogicalMessage(const char *, const char *, size_t, _Bool);
80:	void logicalmsg_redo(XLogReaderState *);

File misc.c:
174:	Datum current_database(FunctionCallInfo);
191:	Datum current_query(FunctionCallInfo);
723:	Datum parse_ident(FunctionCallInfo);
617:	Datum pg_collation_for(FunctionCallInfo);
663:	Datum pg_column_is_updatable(FunctionCallInfo);
862:	Datum pg_current_logfile(FunctionCallInfo);
952:	Datum pg_current_logfile_1arg(FunctionCallInfo);
526:	Datum pg_get_catalog_foreign_keys(FunctionCallInfo);
439:	Datum pg_get_keywords(FunctionCallInfo);
961:	Datum pg_get_replica_identity_index(FunctionCallInfo);
157:	Datum pg_num_nonnulls(FunctionCallInfo);
141:	Datum pg_num_nulls(FunctionCallInfo);
646:	Datum pg_relation_is_updatable(FunctionCallInfo);
391:	Datum pg_sleep(FunctionCallInfo);
203:	Datum pg_tablespace_databases(FunctionCallInfo);
307:	Datum pg_tablespace_location(FunctionCallInfo);
606:	Datum pg_typeof(FunctionCallInfo);
55:	static _Bool count_nulls(FunctionCallInfo, int32 *, int32 *);
708:	static _Bool is_ident_cont(unsigned char);
690:	static _Bool is_ident_start(unsigned char);

File miscinit.c:
1336:	void AddToDataDirLockFile(int, const char *);
417:	void ChangeToDataDir(void);
1280:	void CreateDataDirLockFile(_Bool);
1289:	void CreateSocketLockFile(const char *, _Bool, const char *);
536:	Oid GetAuthenticatedUserId(void);
231:	const char *GetBackendTypeDesc(BackendType);
842:	Oid GetCurrentRoleId(void);
488:	Oid GetOuterUserId(void);
511:	Oid GetSessionUserId(void);
477:	Oid GetUserId(void);
637:	void GetUserIdAndContext(Oid *, _Bool *);
588:	void GetUserIdAndSecContext(Oid *, int *);
898:	char *GetUserNameFromId(Oid, _Bool);
606:	_Bool InLocalUserIdChange(void);
624:	_Bool InNoForceRLSOperation(void);
615:	_Bool InSecurityRestrictedOperation(void);
93:	void InitPostmasterChild(void);
164:	void InitStandaloneProcess(const char *);
682:	void InitializeSessionUserId(const char *, Oid);
785:	void InitializeSessionUserIdStandalone(void);
1463:	_Bool RecheckDataDirLockFile(void);
863:	void SetCurrentRoleId(Oid, _Bool);
396:	void SetDataDir(const char *);
290:	void SetDatabasePath(const char *);
817:	void SetSessionAuthorization(Oid, _Bool);
644:	void SetUserIdAndContext(Oid, _Bool);
595:	void SetUserIdAndSecContext(Oid, int);
216:	void SwitchBackToLocalLatch(void);
196:	void SwitchToSharedLatch(void);
1307:	void TouchSocketLockFiles(void);
1535:	void ValidatePgVersion(const char *);
303:	void checkDataDir(void);
664:	_Bool has_rolreplication(Oid);
1688:	void pg_bindtextdomain(const char *);
1677:	void process_session_preload_libraries(void);
1664:	void process_shared_preload_libraries(void);
975:	static void CreateLockFile(const char *, _Bool, const char *, _Bool, const char *);
496:	static void SetOuterUserId(Oid);
519:	static void SetSessionUserId(Oid, _Bool);
940:	static void UnlinkLockFiles(int, Datum);
1612:	static void load_libraries(const char *, const char *, _Bool);

File mkdtemp.c:
27:	char *mkdtemp(char *);

File mkostemp.c:
31:	int mkostemp(char *, int);

File mkostemps.c:
32:	int mkostemps(char *, int, int);

File mkstemp.c:
31:	int mkstemp(char *);

File mkstemps.c:
32:	int mkstemps(char *, int);

File mktemp.c:
25:	char *__mktemp(char *);

File mktime.c:
524:	time_t __GI_mktime(struct tm *);
321:	time_t __mktime_internal(struct tm *, struct tm *(*)(const time_t *, struct tm *), mktime_offset_t *);
270:	static struct tm *ranged_convert(struct tm *(*)(const time_t *, struct tm *), long_int *, struct tm *);

File mntent.c:
46:	struct mntent *getmntent(FILE *);
34:	static void *allocate(void *);
40:	static void deallocate(void *, void *);

File mntent_r.c:
58:	int __GI___endmntent(FILE *);
185:	struct mntent *__GI___getmntent_r(FILE *, struct mntent *, char *, int);
303:	char *__GI___hasmntopt(const struct mntent *, const char *);
37:	FILE *__GI___setmntent(const char *, const char *);
276:	int __addmntent(FILE *, const struct mntent *);
73:	static char *decode_name(char *);
117:	static _Bool get_mnt_entry(FILE *, struct mntent *, char *, int);

File mod_1.c:
40:	mp_limb_t __mpn_mod_1(mp_srcptr, mp_size_t, mp_limb_t);

File morecore.c:
45:	void *__GI___default_morecore(ptrdiff_t);

File mrand48.c:
23:	long mrand48(void);

File mrand48_r.c:
22:	int mrand48_r(struct drand48_data *, long *);

File msort.c:
165:	void __GI___qsort_r(void *, size_t, size_t, __compar_d_fn_t, void *);
306:	void __GI_qsort(void *, size_t, size_t, __compar_fn_t);
40:	static void msort_with_tmp(const struct msort_param *, void *, size_t);

File mtrace.c:
72:	void __GI_tr_break(void);
305:	void mtrace(void);
354:	void muntrace(void);
290:	static void release_libc_mem(void);
160:	static void tr_freehook(void *, const void *);
186:	static void *tr_mallochook(size_t, const void *);
257:	static void *tr_memalignhook(size_t, size_t, const void *);
213:	static void *tr_reallochook(void *, size_t, const void *);
78:	static void tr_where(const void *, Dl_info *);

File mtx_destroy.c:
23:	void mtx_destroy(mtx_t *);

File mtx_init.c:
24:	int mtx_init(mtx_t *, int);

File mtx_lock.c:
22:	int mtx_lock(mtx_t *);

File mtx_timedlock.c:
22:	int mtx_timedlock(mtx_t * restrict, const struct timespec * restrict);

File mtx_trylock.c:
22:	int mtx_trylock(mtx_t *);

File mtx_unlock.c:
22:	int mtx_unlock(mtx_t *);

File mul.c:
45:	mp_limb_t __mpn_mul(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);

File mul_n.c:
95:	void __mpn_impn_mul_n(mp_ptr, mp_srcptr, mp_srcptr, mp_size_t, mp_ptr);
52:	void __mpn_impn_mul_n_basecase(mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);
248:	void __mpn_impn_sqr_n(mp_ptr, mp_srcptr, mp_size_t, mp_ptr);
205:	void __mpn_impn_sqr_n_basecase(mp_ptr, mp_srcptr, mp_size_t);
329:	void __mpn_mul_n(mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

File multirangetypes.c:
1596:	Datum elem_contained_by_multirange(FunctionCallInfo);
2724:	Datum hash_multirange(FunctionCallInfo);
2795:	Datum hash_multirange_extended(FunctionCallInfo);
842:	MultirangeType *make_empty_multirange(Oid, TypeCacheEntry *);
640:	MultirangeType *make_multirange(Oid, TypeCacheEntry *, int32, RangeType **);
2472:	Datum multirange_adjacent_multirange(FunctionCallInfo);
2457:	Datum multirange_adjacent_range(FunctionCallInfo);
2327:	Datum multirange_after_multirange(FunctionCallInfo);
2315:	Datum multirange_after_range(FunctionCallInfo);
2290:	Datum multirange_before_multirange(FunctionCallInfo);
2362:	_Bool multirange_before_multirange_internal(TypeCacheEntry *, const MultirangeType *, const MultirangeType *);
2278:	Datum multirange_before_range(FunctionCallInfo);
2513:	Datum multirange_cmp(FunctionCallInfo);
1053:	Datum multirange_constructor0(FunctionCallInfo);
1017:	Datum multirange_constructor1(FunctionCallInfo);
935:	Datum multirange_constructor2(FunctionCallInfo);
2189:	Datum multirange_contained_by_multirange(FunctionCallInfo);
1696:	Datum multirange_contained_by_range(FunctionCallInfo);
1583:	Datum multirange_contains_elem(FunctionCallInfo);
1645:	_Bool multirange_contains_elem_internal(TypeCacheEntry *, const MultirangeType *, Datum);
2176:	Datum multirange_contains_multirange(FunctionCallInfo);
2204:	_Bool multirange_contains_multirange_internal(TypeCacheEntry *, const MultirangeType *, const MultirangeType *);
1659:	Datum multirange_contains_range(FunctionCallInfo);
1739:	_Bool multirange_contains_range_internal(TypeCacheEntry *, const MultirangeType *, const RangeType *);
820:	void multirange_deserialize(TypeCacheEntry *, const MultirangeType *, int32 *, RangeType ***);
1494:	Datum multirange_empty(FunctionCallInfo);
1839:	Datum multirange_eq(FunctionCallInfo);
1802:	_Bool multirange_eq_internal(TypeCacheEntry *, const MultirangeType *, const MultirangeType *);
2594:	Datum multirange_ge(FunctionCallInfo);
738:	void multirange_get_bounds(TypeCacheEntry *, const MultirangeType *, uint32, RangeBound *, RangeBound *);
689:	RangeType *multirange_get_range(TypeCacheEntry *, const MultirangeType *, int);
542:	TypeCacheEntry *multirange_get_typcache(FunctionCallInfo, Oid);
796:	RangeType *multirange_get_union_range(TypeCacheEntry *, const MultirangeType *);
2602:	Datum multirange_gt(FunctionCallInfo);
117:	Datum multirange_in(FunctionCallInfo);
1226:	Datum multirange_intersect(FunctionCallInfo);
1401:	Datum multirange_intersect_agg_transfn(FunctionCallInfo);
1256:	MultirangeType *multirange_intersect_internal(Oid, TypeCacheEntry *, int32, RangeType **, int32, RangeType **);
2586:	Datum multirange_le(FunctionCallInfo);
1445:	Datum multirange_lower(FunctionCallInfo);
1503:	Datum multirange_lower_inc(FunctionCallInfo);
1541:	Datum multirange_lower_inf(FunctionCallInfo);
2578:	Datum multirange_lt(FunctionCallInfo);
1108:	Datum multirange_minus(FunctionCallInfo);
1138:	MultirangeType *multirange_minus_internal(Oid, TypeCacheEntry *, int32, RangeType **, int32, RangeType **);
1861:	Datum multirange_ne(FunctionCallInfo);
1852:	_Bool multirange_ne_internal(TypeCacheEntry *, const MultirangeType *, const MultirangeType *);
293:	Datum multirange_out(FunctionCallInfo);
1898:	Datum multirange_overlaps_multirange(FunctionCallInfo);
1953:	_Bool multirange_overlaps_multirange_internal(TypeCacheEntry *, const MultirangeType *, const MultirangeType *);
1886:	Datum multirange_overlaps_range(FunctionCallInfo);
2071:	Datum multirange_overleft_multirange(FunctionCallInfo);
2046:	Datum multirange_overleft_range(FunctionCallInfo);
2153:	Datum multirange_overright_multirange(FunctionCallInfo);
2129:	Datum multirange_overright_range(FunctionCallInfo);
331:	Datum multirange_recv(FunctionCallInfo);
371:	Datum multirange_send(FunctionCallInfo);
1076:	Datum multirange_union(FunctionCallInfo);
2650:	Datum multirange_unnest(FunctionCallInfo);
1468:	Datum multirange_upper(FunctionCallInfo);
1522:	Datum multirange_upper_inc(FunctionCallInfo);
1560:	Datum multirange_upper_inf(FunctionCallInfo);
2445:	Datum range_adjacent_multirange(FunctionCallInfo);
2409:	_Bool range_adjacent_multirange_internal(TypeCacheEntry *, const RangeType *, const MultirangeType *);
2303:	Datum range_after_multirange(FunctionCallInfo);
2384:	_Bool range_after_multirange_internal(TypeCacheEntry *, const RangeType *, const MultirangeType *);
1367:	Datum range_agg_finalfn(FunctionCallInfo);
1336:	Datum range_agg_transfn(FunctionCallInfo);
2266:	Datum range_before_multirange(FunctionCallInfo);
2340:	_Bool range_before_multirange_internal(TypeCacheEntry *, const RangeType *, const MultirangeType *);
1684:	Datum range_contained_by_multirange(FunctionCallInfo);
1671:	Datum range_contains_multirange(FunctionCallInfo);
1767:	_Bool range_contains_multirange_internal(TypeCacheEntry *, const RangeType *, const MultirangeType *);
2613:	Datum range_merge_from_multirange(FunctionCallInfo);
1874:	Datum range_overlaps_multirange(FunctionCallInfo);
1931:	_Bool range_overlaps_multirange_internal(TypeCacheEntry *, const RangeType *, const MultirangeType *);
2034:	Datum range_overleft_multirange(FunctionCallInfo);
2011:	_Bool range_overleft_multirange_internal(TypeCacheEntry *, const RangeType *, const MultirangeType *);
2117:	Datum range_overright_multirange(FunctionCallInfo);
2096:	_Bool range_overright_multirange_internal(TypeCacheEntry *, const RangeType *, const MultirangeType *);
410:	static MultirangeIOData *get_multirange_io_data(FunctionCallInfo, Oid, IOFuncSelector);
892:	static _Bool multirange_bsearch_match(TypeCacheEntry *, const MultirangeType *, void *, multirange_bsearch_comparison);
471:	static int32 multirange_canonicalize(TypeCacheEntry *, int32, RangeType **);
1612:	static int multirange_elem_bsearch_comparison(TypeCacheEntry *, RangeBound *, RangeBound *, void *, _Bool *);
667:	static uint32 multirange_get_bounds_offset(const MultirangeType *, int32);
1712:	static int multirange_range_contains_bsearch_comparison(TypeCacheEntry *, RangeBound *, RangeBound *, void *, _Bool *);
1914:	static int multirange_range_overlaps_bsearch_comparison(TypeCacheEntry *, RangeBound *, RangeBound *, void *, _Bool *);
563:	static Size multirange_size_estimate(TypeCacheEntry *, int32, RangeType **);
872:	static _Bool range_bounds_contains(TypeCacheEntry *, RangeBound *, RangeBound *, RangeBound *, RangeBound *);
852:	static _Bool range_bounds_overlaps(TypeCacheEntry *, RangeBound *, RangeBound *, RangeBound *, RangeBound *);
590:	static void write_multirange_data(MultirangeType *, TypeCacheEntry *, int32, RangeType **);

File multirangetypes_selfuncs.c:
139:	Datum multirangesel(FunctionCallInfo);
457:	static double calc_hist_selectivity(TypeCacheEntry *, VariableStatData *, const MultirangeType *, Oid);
1132:	static double calc_hist_selectivity_contained(TypeCacheEntry *, const RangeBound *, RangeBound *, const RangeBound *, int, Datum *, int);
1253:	static double calc_hist_selectivity_contains(TypeCacheEntry *, const RangeBound *, const RangeBound *, const RangeBound *, int, Datum *, int);
708:	static double calc_hist_selectivity_scalar(TypeCacheEntry *, const RangeBound *, const RangeBound *, int, _Bool);
967:	static double calc_length_hist_frac(Datum *, int, double, double, _Bool);
292:	static double calc_multirangesel(TypeCacheEntry *, VariableStatData *, const MultirangeType *, Oid);
80:	static double default_multirange_selectivity(Oid);
919:	static float8 get_distance(TypeCacheEntry *, const RangeBound *, const RangeBound *);
874:	static double get_len_position(double, double, double);
795:	static float8 get_position(TypeCacheEntry *, const RangeBound *, const RangeBound *, const RangeBound *);
769:	static int length_hist_bsearch(Datum *, int, double, _Bool);
740:	static int rbound_bsearch(TypeCacheEntry *, const RangeBound *, const RangeBound *, int, _Bool);

File multixact.c:
1687:	void AtEOXact_MultiXact(void);
1716:	void AtPrepare_MultiXact(void);
1895:	void BootStrapMultiXact(void);
2156:	void CheckPointMultiXact(void);
1224:	int GetMultiXactIdMembers(MultiXactId, MultiXactMember **, _Bool, _Bool);
2507:	MultiXactId GetOldestMultiXactId(void);
2363:	void MultiXactAdvanceNextMXact(MultiXactId, MultiXactOffset);
2388:	void MultiXactAdvanceOldest(MultiXactId, Oid);
2134:	void MultiXactGetCheckptMulti(_Bool, MultiXactId *, MultiXactOffset *, MultiXactId *, Oid *);
386:	MultiXactId MultiXactIdCreate(TransactionId, MultiXactStatus, TransactionId, MultiXactStatus);
767:	MultiXactId MultiXactIdCreateFromMembers(int, MultiXactMember *);
439:	MultiXactId MultiXactIdExpand(MultiXactId, TransactionId, MultiXactStatus);
551:	_Bool MultiXactIdIsRunning(MultiXactId, _Bool);
3160:	_Bool MultiXactIdPrecedes(MultiXactId, MultiXactId);
3174:	_Bool MultiXactIdPrecedesOrEquals(MultiXactId, MultiXactId);
625:	void MultiXactIdSetOldestMember(void);
2829:	int MultiXactMemberFreezeThreshold(void);
2180:	void MultiXactSetNextMXact(MultiXactId, MultiXactOffset);
1845:	void MultiXactShmemInit(void);
1828:	Size MultiXactShmemSize(void);
1730:	void PostPrepare_MultiXact(TransactionId);
743:	void ReadMultiXactIdRange(MultiXactId *, MultiXactId *);
723:	MultiXactId ReadNextMultiXactId(void);
2214:	void SetMultiXactIdLimit(MultiXactId, Oid, _Bool);
2009:	void StartupMultiXact(void);
2032:	void TrimMultiXact(void);
2945:	void TruncateMultiXact(MultiXactId, Oid);
3237:	void multixact_redo(XLogReaderState *);
1816:	void multixact_twophase_postabort(TransactionId, uint16, void *, uint32);
1801:	void multixact_twophase_postcommit(TransactionId, uint16, void *, uint32);
1780:	void multixact_twophase_recover(TransactionId, uint16, void *, uint32);
3425:	int multixactmemberssyncfiletag(const FileTag *, char *);
3416:	int multixactoffsetssyncfiletag(const FileTag *, char *);
1656:	char *mxid_to_string(MultiXactId, int, MultiXactMember *);
3348:	Datum pg_get_multixact_members(FunctionCallInfo);
2435:	static void ExtendMultiXactMember(MultiXactOffset, int);
2405:	static void ExtendMultiXactOffset(MultiXactId);
957:	static MultiXactId GetNewMultiXactId(int, MultiXactOffset *);
1976:	static void MaybeExtendOffsetSlru(void);
682:	static void MultiXactIdSetOldestVisible(void);
3140:	static _Bool MultiXactMemberPagePrecedes(int, int);
3120:	static _Bool MultiXactOffsetPagePrecedes(int, int);
3186:	static _Bool MultiXactOffsetPrecedes(MultiXactOffset, MultiXactOffset);
2687:	static _Bool MultiXactOffsetWouldWrap(MultiXactOffset, MultiXactOffset, uint32);
2892:	static void PerformMembersTruncation(MultiXactOffset, MultiXactOffset);
2920:	static void PerformOffsetsTruncation(MultiXactId, MultiXactId);
2773:	static _Bool ReadMultiXactCounts(uint32 *, MultiXactOffset *);
863:	static void RecordNewMultiXact(MultiXactId, MultiXactOffset, int, MultiXactMember *);
2560:	static _Bool SetOffsetVacuumLimit(_Bool);
2869:	static _Bool SlruScanDirCbFindEarliest(SlruCtl, char *, int, void *);
3212:	static void WriteMTruncateXlogRec(Oid, MultiXactId, MultiXactId, MultiXactOffset, MultiXactOffset);
3198:	static void WriteMZeroPageXlogRec(int, uint8);
1948:	static int ZeroMultiXactMemberPage(int, _Bool);
1932:	static int ZeroMultiXactOffsetPage(int, _Bool);
2735:	static _Bool find_multixact_start(MultiXactId, MultiXactOffset *);
1540:	static int mXactCacheGetById(MultiXactId, MultiXactMember **);
1498:	static MultiXactId mXactCacheGetBySet(int, MultiXactMember *);
1586:	static void mXactCachePut(MultiXactId, int, MultiXactMember *);
1468:	static int mxactMemberComparator(const void *, const void *);
1633:	static char *mxstatus_to_string(MultiXactStatus);

File mvdistinct.c:
339:	Datum pg_ndistinct_in(FunctionCallInfo);
355:	Datum pg_ndistinct_out(FunctionCallInfo);
392:	Datum pg_ndistinct_recv(FunctionCallInfo);
408:	Datum pg_ndistinct_send(FunctionCallInfo);
89:	MVNDistinct *statext_ndistinct_build(double, StatsBuildData *);
250:	MVNDistinct *statext_ndistinct_deserialize(bytea *);
149:	MVNDistinct *statext_ndistinct_load(Oid);
179:	bytea *statext_ndistinct_serialize(MVNDistinct *);
521:	static double estimate_ndistinct(double, int, int, int);
692:	static void generate_combinations(CombinationGenerator *);
657:	static void generate_combinations_recurse(CombinationGenerator *, int, int, int *);
642:	static void generator_free(CombinationGenerator *);
589:	static CombinationGenerator *generator_init(int, int);
627:	static int *generator_next(CombinationGenerator *);
550:	static int n_choose_k(int, int);
425:	static double ndistinct_for_combination(double, StatsBuildData *, int, int *);
575:	static int num_combinations(int);

File mxactdesc.c:
50:	void multixact_desc(StringInfo, XLogReaderState *);
84:	const char *multixact_identify(uint8);
20:	static void out_member(StringInfo, MultiXactMember *);

File name.c:
202:	Datum btnamecmp(FunctionCallInfo);
211:	Datum btnamesortsupport(FunctionCallInfo);
279:	Datum current_schema(FunctionCallInfo);
294:	Datum current_schemas(FunctionCallInfo);
263:	Datum current_user(FunctionCallInfo);
337:	Datum nameconcatoid(FunctionCallInfo);
148:	Datum nameeq(FunctionCallInfo);
193:	Datum namege(FunctionCallInfo);
184:	Datum namegt(FunctionCallInfo);
48:	Datum namein(FunctionCallInfo);
175:	Datum namele(FunctionCallInfo);
166:	Datum namelt(FunctionCallInfo);
157:	Datum namene(FunctionCallInfo);
71:	Datum nameout(FunctionCallInfo);
82:	Datum namerecv(FunctionCallInfo);
106:	Datum namesend(FunctionCallInfo);
247:	int namestrcmp(Name, const char *);
233:	void namestrcpy(Name, const char *);
269:	Datum session_user(FunctionCallInfo);
135:	static int namecmp(Name, Name, Oid);

File namespace.c:
4178:	void AtEOSubXact_Namespace(_Bool, SubTransactionId, SubTransactionId);
4110:	void AtEOXact_Namespace(_Bool, _Bool);
3013:	void CheckSetNamespace(Oid, Oid);
2060:	Oid CollationGetCollid(const char *);
2094:	_Bool CollationIsVisible(Oid);
2145:	Oid ConversionGetConid(const char *);
2177:	_Bool ConversionIsVisible(Oid);
3443:	OverrideSearchPath *CopyOverrideSearchPath(OverrideSearchPath *);
2855:	void DeconstructQualifiedName(List *, char **, char **);
3756:	Oid FindDefaultConversionProc(int32, int32);
951:	FuncCandidateList FuncnameGetCandidates(List *, int, List *, _Bool, _Bool, _Bool, _Bool);
1459:	_Bool FunctionIsVisible(Oid);
3406:	OverrideSearchPath *GetOverrideSearchPath(MemoryContext);
3320:	int GetTempNamespaceBackendId(Oid);
3359:	void GetTempNamespaceState(Oid *, Oid *);
3345:	Oid GetTempToastNamespace(void);
4372:	void InitializeSearchPath(void);
2982:	Oid LookupCreationNamespace(const char *);
2939:	Oid LookupExplicitNamespace(const char *, _Bool);
2909:	Oid LookupNamespaceNoError(const char *);
3182:	char *NameListToQuotedString(List *);
3148:	char *NameListToString(List *);
1879:	_Bool OpclassIsVisible(Oid);
1846:	Oid OpclassnameGetOpcid(Oid, const char *);
1793:	_Bool OperatorIsVisible(Oid);
1632:	FuncCandidateList OpernameGetCandidates(List *, char, _Bool);
1529:	Oid OpernameGetOprid(List *, Oid, Oid);
1962:	_Bool OpfamilyIsVisible(Oid);
1929:	Oid OpfamilynameGetOpfid(Oid, const char *);
3465:	_Bool OverrideSearchPathMatchesCurrent(OverrideSearchPath *);
3603:	void PopOverrideSearchPath(void);
3536:	void PushOverrideSearchPath(OverrideSearchPath *);
3041:	Oid QualifiedNameGetCreationNamespace(List *, char **);
643:	void RangeVarAdjustRelationPersistence(RangeVar *, Oid);
536:	Oid RangeVarGetAndCheckCreationNamespace(RangeVar *, LOCKMODE, Oid *);
451:	Oid RangeVarGetCreationNamespace(const RangeVar *);
238:	Oid RangeVarGetRelidExtended(const RangeVar *, LOCKMODE, uint32, RangeVarGetRelidCallback, void *);
710:	_Bool RelationIsVisible(Oid);
682:	Oid RelnameGetRelid(const char *);
4309:	void ResetTempTableNamespace(void);
3375:	void SetTempNamespaceState(Oid, Oid);
2281:	_Bool StatisticsObjIsVisible(Oid);
2783:	_Bool TSConfigIsVisible(Oid);
2530:	_Bool TSDictionaryIsVisible(Oid);
2404:	_Bool TSParserIsVisible(Oid);
2657:	_Bool TSTemplateIsVisible(Oid);
818:	_Bool TypeIsVisible(Oid);
773:	Oid TypenameGetTypid(const char *);
786:	Oid TypenameGetTypidExtended(const char *, _Bool);
4356:	void assign_search_path(const char *, void *);
3283:	TempNamespaceStatus checkTempNamespaceStatus(Oid);
4322:	_Bool check_search_path(char **, void **, GucSource);
4431:	List *fetch_search_path(_Bool);
4471:	int fetch_search_path_array(Oid *, int);
3647:	Oid get_collation_oid(List *, _Bool);
3701:	Oid get_conversion_oid(List *, _Bool);
3089:	Oid get_namespace_oid(const char *, _Bool);
2224:	Oid get_statistics_object_oid(List *, _Bool);
2725:	Oid get_ts_config_oid(List *, _Bool);
2472:	Oid get_ts_dict_oid(List *, _Bool);
2346:	Oid get_ts_parser_oid(List *, _Bool);
2599:	Oid get_ts_template_oid(List *, _Bool);
3241:	_Bool isAnyTempNamespace(Oid);
3264:	_Bool isOtherTempNamespace(Oid);
3203:	_Bool isTempNamespace(Oid);
3227:	_Bool isTempOrTempToastNamespace(Oid);
3215:	_Bool isTempToastNamespace(Oid);
3108:	RangeVar *makeRangeVarFromNameList(List *);
4574:	Datum pg_collation_is_visible(FunctionCallInfo);
4585:	Datum pg_conversion_is_visible(FunctionCallInfo);
4530:	Datum pg_function_is_visible(FunctionCallInfo);
4657:	Datum pg_is_other_temp_schema(FunctionCallInfo);
4651:	Datum pg_my_temp_schema(FunctionCallInfo);
4552:	Datum pg_opclass_is_visible(FunctionCallInfo);
4541:	Datum pg_operator_is_visible(FunctionCallInfo);
4563:	Datum pg_opfamily_is_visible(FunctionCallInfo);
4596:	Datum pg_statistics_obj_is_visible(FunctionCallInfo);
4508:	Datum pg_table_is_visible(FunctionCallInfo);
4640:	Datum pg_ts_config_is_visible(FunctionCallInfo);
4618:	Datum pg_ts_dict_is_visible(FunctionCallInfo);
4607:	Datum pg_ts_parser_is_visible(FunctionCallInfo);
4629:	Datum pg_ts_template_is_visible(FunctionCallInfo);
4519:	Datum pg_type_is_visible(FunctionCallInfo);
3961:	static void AccessTempTableNamespace(_Bool);
3989:	static void InitTempTableNamespace(void);
1348:	static _Bool MatchNamedCall(HeapTuple, int, List *, _Bool, int, int **);
4413:	static void NamespaceCallback(Datum, int, uint32);
4263:	static void RemoveTempRelations(Oid);
4289:	static void RemoveTempRelationsCallback(int, Datum);
2009:	static Oid lookup_collation(const char *, Oid, int32);
3783:	static void recomputeNamespacePath(void);

File nanosleep.c:
24:	int __GI___nanosleep(const struct timespec *, struct timespec *);

File nbtcompare.c:
73:	Datum btboolcmp(FunctionCallInfo);
328:	Datum btcharcmp(FunctionCallInfo);
211:	Datum btint24cmp(FunctionCallInfo);
239:	Datum btint28cmp(FunctionCallInfo);
82:	Datum btint2cmp(FunctionCallInfo);
100:	Datum btint2sortsupport(FunctionCallInfo);
225:	Datum btint42cmp(FunctionCallInfo);
183:	Datum btint48cmp(FunctionCallInfo);
109:	Datum btint4cmp(FunctionCallInfo);
137:	Datum btint4sortsupport(FunctionCallInfo);
253:	Datum btint82cmp(FunctionCallInfo);
197:	Datum btint84cmp(FunctionCallInfo);
146:	Datum btint8cmp(FunctionCallInfo);
174:	Datum btint8sortsupport(FunctionCallInfo);
267:	Datum btoidcmp(FunctionCallInfo);
295:	Datum btoidsortsupport(FunctionCallInfo);
304:	Datum btoidvectorcmp(FunctionCallInfo);
91:	static int btint2fastcmp(Datum, Datum, SortSupport);
123:	static int btint4fastcmp(Datum, Datum, SortSupport);
160:	static int btint8fastcmp(Datum, Datum, SortSupport);
281:	static int btoidfastcmp(Datum, Datum, SortSupport);

File nbtdedup.c:
305:	_Bool _bt_bottomupdel_pass(Relation, Buffer, Relation, Size);
551:	Size _bt_dedup_finish_pending(Page, BTDedupState);
57:	void _bt_dedup_pass(Relation, Buffer, Relation, IndexTuple, Size, _Bool);
480:	_Bool _bt_dedup_save_htid(BTDedupState, IndexTuple);
429:	void _bt_dedup_start_pending(BTDedupState, IndexTuple, OffsetNumber);
857:	IndexTuple _bt_form_posting(IndexTuple, ItemPointer, int);
1015:	IndexTuple _bt_swap_posting(IndexTuple, IndexTuple, int);
917:	void _bt_update_posting(BTVacuumPosting);
641:	static void _bt_bottomupdel_finish_pending(Page, BTDedupState, TM_IndexDeleteOp *);
775:	static _Bool _bt_do_singleval(Relation, Page, BTDedupState, OffsetNumber, IndexTuple);
815:	static void _bt_singleval_fillfactor(Page, BTDedupState, Size);

File nbtdesc.c:
20:	void btree_desc(StringInfo, XLogReaderState *);
124:	const char *btree_identify(uint8);

File nbtinsert.c:
99:	_Bool _bt_doinsert(Relation, IndexTuple, IndexUniqueCheck, _Bool, Relation);
2232:	void _bt_finish_split(Relation, Buffer, BTStack);
2309:	Buffer _bt_getstackbuf(Relation, BTStack, BlockNumber);
2998:	static int _bt_blk_cmp(const void *, const void *);
405:	static TransactionId _bt_check_unique(Relation, BTInsertState, Relation, IndexUniqueCheck, _Bool *, uint32 *);
2925:	static BlockNumber *_bt_deadblocks(Page, OffsetNumber *, int, IndexTuple, int *);
2672:	static void _bt_delete_or_dedup_one_page(Relation, Relation, BTInsertState, _Bool, _Bool, _Bool, _Bool);
815:	static OffsetNumber _bt_findinsertloc(Relation, BTInsertState, _Bool, _Bool, BTStack, Relation);
2096:	static void _bt_insert_parent(Relation, Buffer, Buffer, BTStack, _Bool, _Bool);
1103:	static void _bt_insertonpg(Relation, BTScanInsert, Buffer, Buffer, BTStack, IndexTuple, Size, OffsetNumber, int, _Bool);
2433:	static Buffer _bt_newroot(Relation, Buffer, Buffer);
2619:	static _Bool _bt_pgaddtup(Page, Size, IndexTuple, OffsetNumber, _Bool);
314:	static BTStack _bt_search_insert(Relation, BTInsertState);
2801:	static void _bt_simpledel_pass(Relation, Buffer, Relation, OffsetNumber *, int, IndexTuple, OffsetNumber, OffsetNumber);
1464:	static Buffer _bt_split(Relation, BTScanInsert, Buffer, Buffer, OffsetNumber, Size, IndexTuple, IndexTuple, IndexTuple, uint16);
1027:	static void _bt_stepright(Relation, BTInsertState, BTStack);

File nbtpage.c:
794:	void _bt_checkpage(Relation, Buffer);
1105:	_Bool _bt_conditionallockbuf(Relation, Buffer);
1529:	void _bt_delitems_delete_check(Relation, Buffer, Relation, TM_IndexDeleteOp *);
1167:	void _bt_delitems_vacuum(Relation, Buffer, OffsetNumber *, int, BTVacuumPosting *, int);
871:	Buffer _bt_getbuf(Relation, BlockNumber, int);
343:	Buffer _bt_getroot(Relation, int);
672:	int _bt_getrootheight(Relation);
577:	Buffer _bt_gettrueroot(Relation);
69:	void _bt_initmetapage(Page, BlockNumber, uint32, _Bool);
1051:	void _bt_lockbuf(Relation, Buffer, int);
736:	void _bt_metaversion(Relation, _Bool *, _Bool *);
1816:	void _bt_pagedel(Relation, Buffer, BTVacState *);
1142:	void _bt_pageinit(Page, Size);
2956:	void _bt_pendingfsm_finalize(Relation, BTVacState *);
2915:	void _bt_pendingfsm_init(Relation, BTVacState *, _Bool);
1015:	Buffer _bt_relandgetbuf(Relation, Buffer, BlockNumber, int);
1035:	void _bt_relbuf(Relation, Buffer);
234:	void _bt_set_cleanup_info(Relation, BlockNumber);
1082:	void _bt_unlockbuf(Relation, Buffer);
1122:	void _bt_upgradelockbufcleanup(Relation, Buffer);
109:	void _bt_upgrademetapage(Page);
181:	_Bool _bt_vacuum_needs_cleanup(Relation);
1475:	static int _bt_delitems_cmp(const void *, const void *);
1297:	static void _bt_delitems_delete(Relation, Buffer, TransactionId, OffsetNumber *, int, BTVacuumPosting *, int);
1416:	static char *_bt_delitems_update(BTVacuumPosting *, int, OffsetNumber *, Size *, _Bool);
144:	static BTMetaPageData *_bt_getmeta(Relation, Buffer);
1709:	static _Bool _bt_leftsib_splitflag(Relation, BlockNumber, BlockNumber);
2776:	static _Bool _bt_lock_subtree_parent(Relation, BlockNumber, BTStack, Buffer *, OffsetNumber *, BlockNumber *, BlockNumber *);
828:	static void _bt_log_reuse_page(Relation, BlockNumber, FullTransactionId);
2087:	static _Bool _bt_mark_page_halfdead(Relation, Buffer, BTStack);
3021:	static void _bt_pendingfsm_add(BTVacState *, BlockNumber, FullTransactionId);
1766:	static _Bool _bt_rightsib_halfdeadflag(Relation, BlockNumber);
2303:	static _Bool _bt_unlink_halfdead_page(Relation, Buffer, BlockNumber, _Bool *, BTVacState *);

File nbtree.c:
756:	void _bt_parallel_advance_array_keys(IndexScanDesc);
715:	void _bt_parallel_done(IndexScanDesc);
692:	void _bt_parallel_release(IndexScanDesc, BlockNumber);
634:	_Bool _bt_parallel_seize(IndexScanDesc, BlockNumber *);
342:	IndexScanDesc btbeginscan(Relation, int, int);
150:	void btbuildempty(Relation);
784:	IndexBulkDeleteResult *btbulkdelete(IndexVacuumInfo *, IndexBulkDeleteResult *, IndexBulkDeleteCallback, void *);
1443:	_Bool btcanreturn(Relation, int);
447:	void btendscan(IndexScanDesc);
569:	Size btestimateparallelscan(void);
284:	int64 btgetbitmap(IndexScanDesc, TIDBitmap *);
210:	_Bool btgettuple(IndexScanDesc, ScanDirection);
95:	Datum bthandler(FunctionCallInfo);
578:	void btinitparallelscan(void *);
186:	_Bool btinsert(Relation, Datum *, _Bool *, ItemPointer, Relation, IndexUniqueCheck, _Bool, IndexInfo *);
483:	void btmarkpos(IndexScanDesc);
593:	void btparallelrescan(IndexScanDesc);
388:	void btrescan(IndexScanDesc, ScanKey, int, ScanKey, int);
513:	void btrestrpos(IndexScanDesc);
814:	IndexBulkDeleteResult *btvacuumcleanup(IndexVacuumInfo *, IndexBulkDeleteResult *);
1394:	static BTVacuumPosting btreevacuumposting(BTVacState *, IndexTuple, OffsetNumber, int *);
1034:	static void btvacuumpage(BTVacState *, BlockNumber);
902:	static void btvacuumscan(IndexVacuumInfo *, IndexBulkDeleteResult *, IndexBulkDeleteCallback, void *, BTCycleId);

File nbtsearch.c:
447:	OffsetNumber _bt_binsrch_insert(Relation, BTInsertState);
661:	int32 _bt_compare(Relation, BTScanInsert, Page, OffsetNumber);
865:	_Bool _bt_first(IndexScanDesc, ScanDirection);
2312:	Buffer _bt_get_endpoint(Relation, uint32, _Bool, Snapshot);
241:	Buffer _bt_moveright(Relation, BTScanInsert, Buffer, _Bool, BTStack, int, Snapshot);
1471:	_Bool _bt_next(IndexScanDesc, ScanDirection);
101:	BTStack _bt_search(Relation, BTScanInsert, Buffer *, int, Snapshot);
343:	static OffsetNumber _bt_binsrch(Relation, BTScanInsert, Buffer);
575:	static int _bt_binsrch_posting(BTScanInsert, Page, OffsetNumber);
65:	static void _bt_drop_lock_and_maybe_pin(IndexScanDesc, BTScanPos);
2396:	static _Bool _bt_endpoint(IndexScanDesc, ScanDirection);
2486:	static void _bt_initialize_more_data(BTScanOpaque, ScanDirection);
2163:	static _Bool _bt_parallel_readpage(IndexScanDesc, BlockNumber, ScanDirection);
1985:	static _Bool _bt_readnextpage(IndexScanDesc, BlockNumber, ScanDirection);
1526:	static _Bool _bt_readpage(IndexScanDesc, ScanDirection, OffsetNumber);
1782:	static void _bt_saveitem(BTScanOpaque, int, OffsetNumber, IndexTuple);
1850:	static void _bt_savepostingitem(BTScanOpaque, int, OffsetNumber, ItemPointer, int);
1812:	static int _bt_setuppostingitems(BTScanOpaque, int, OffsetNumber, ItemPointer, IndexTuple);
1878:	static _Bool _bt_steppage(IndexScanDesc, ScanDirection);
2193:	static Buffer _bt_walk_left(Relation, Buffer, Snapshot);

File nbtsort.c:
1790:	void _bt_parallel_build_main(dsm_segment *, shm_toc *);
298:	IndexBuildResult *btbuild(Relation, Relation, IndexInfo *);
1448:	static void _bt_begin_parallel(BTBuildState *, _Bool, int);
611:	static Page _bt_blnewpage(uint32);
638:	static void _bt_blwritepage(BTWriteState *, Page, BlockNumber);
582:	static void _bt_build_callback(Relation, ItemPointer, Datum *, _Bool *, _Bool, void *);
831:	static void _bt_buildadd(BTWriteState *, BTPageState *, IndexTuple, Size);
1658:	static void _bt_end_parallel(BTLeader *);
1738:	static void _bt_leader_participate_as_worker(BTBuildState *);
538:	static void _bt_leafbuild(BTSpool *, BTSpool *);
1178:	static void _bt_load(BTWriteState *, BTSpool *, BTSpool *);
693:	static BTPageState *_bt_pagestate(BTWriteState *, uint32);
1684:	static Size _bt_parallel_estimate_shared(Relation, Snapshot);
1704:	static double _bt_parallel_heapscan(BTBuildState *, _Bool *);
1911:	static void _bt_parallel_scan_and_sort(BTSpool *, BTSpool *, BTShared *, Sharedsort *, Sharedsort *, int, _Bool);
730:	static void _bt_slideleft(Page);
1072:	static void _bt_sort_dedup_finish_pending(BTWriteState *, BTPageState *, BTDedupState);
761:	static void _bt_sortaddtup(Page, Size, IndexTuple, OffsetNumber, _Bool);
527:	static void _bt_spool(BTSpool *, ItemPointer, Datum *, _Bool *);
517:	static void _bt_spooldestroy(BTSpool *);
367:	static double _bt_spools_heapscan(Relation, Relation, BTBuildState *, IndexInfo *);
1106:	static void _bt_uppershutdown(BTWriteState *, BTPageState *);

File nbtsplitloc.c:
130:	OffsetNumber _bt_findsplitloc(Relation, Page, OffsetNumber, Size, IndexTuple, _Bool *);
755:	static _Bool _bt_adjacenthtid(ItemPointer, ItemPointer);
636:	static _Bool _bt_afternewitemoff(FindSplitData *, OffsetNumber, int, _Bool *);
794:	static OffsetNumber _bt_bestsplitloc(FindSplitData *, int, _Bool *, FindSplitStrat);
882:	static int _bt_defaultinterval(FindSplitData *);
567:	static void _bt_deltasortsplits(FindSplitData *, double, _Bool);
1058:	static void _bt_interval_edges(FindSplitData *, SplitPoint **, SplitPoint **);
450:	static void _bt_recsplitloc(FindSplitData *, OffsetNumber, _Bool, int, Size);
1181:	static IndexTuple _bt_split_firstright(FindSplitData *, SplitPoint *);
1165:	static IndexTuple _bt_split_lastleft(FindSplitData *, SplitPoint *);
1137:	static int _bt_split_penalty(FindSplitData *, SplitPoint *);
595:	static int _bt_splitcmp(const void *, const void *);
940:	static int _bt_strategy(FindSplitData *, SplitPoint *, SplitPoint *, FindSplitStrat *);

File nbtutils.c:
2076:	void BTreeShmemInit(void);
2063:	Size BTreeShmemSize(void);
544:	_Bool _bt_advance_array_keys(IndexScanDesc, ScanDirection);
2692:	_Bool _bt_allequalimage(Relation, _Bool);
2466:	_Bool _bt_check_natts(Relation, _Bool, Page, OffsetNumber);
2634:	void _bt_check_third_page(Relation, Relation, _Bool, Page, IndexTuple);
1355:	_Bool _bt_checkkeys(IndexScanDesc, IndexTuple, int, ScanDirection, _Bool *);
2026:	void _bt_end_vacuum(Relation);
2054:	void _bt_end_vacuum_callback(int, Datum);
175:	void _bt_freestack(BTStack);
2419:	int _bt_keep_natts_fast(Relation, IndexTuple, IndexTuple);
1718:	void _bt_killitems(IndexScanDesc);
603:	void _bt_mark_array_keys(IndexScanDesc);
90:	BTScanInsert _bt_mkscankey(Relation, IndexTuple);
203:	void _bt_preprocess_array_keys(IndexScanDesc);
742:	void _bt_preprocess_keys(IndexScanDesc);
622:	void _bt_restore_array_keys(IndexScanDesc);
518:	void _bt_start_array_keys(IndexScanDesc, ScanDirection);
1969:	BTCycleId _bt_start_vacuum(Relation);
2200:	IndexTuple _bt_truncate(Relation, IndexTuple, IndexTuple, BTScanInsert);
1935:	BTCycleId _bt_vacuum_cycleid(Relation);
2152:	char *btbuildphasename(int64);
2104:	bytea *btoptions(Datum, _Bool);
2129:	_Bool btproperty(Oid, int, IndexAMProperty, const char *, _Bool *, _Bool *);
1522:	static _Bool _bt_check_rowcompare(ScanKey, IndexTuple, int, TupleDesc, ScanDirection, _Bool *);
496:	static int _bt_compare_array_elements(const void *, const void *, void *);
1032:	static _Bool _bt_compare_scankey_args(IndexScanDesc, ScanKey, ScanKey, ScanKey, _Bool *);
375:	static Datum _bt_find_extreme_element(IndexScanDesc, ScanKey, StrategyNumber, Datum *, int);
1196:	static _Bool _bt_fix_scankey_strategy(ScanKey, int16 *);
2345:	static int _bt_keep_natts(Relation, IndexTuple, IndexTuple, BTScanInsert);
1298:	static void _bt_mark_scankey_required(ScanKey);
442:	static int _bt_sort_array_elements(IndexScanDesc, ScanKey, _Bool, Datum *, int);

File nbtvalidate.c:
293:	void btadjustmembers(Oid, Oid, List *, List *);
41:	_Bool btvalidate(Oid);

File nbtxlog.c:
1090:	void btree_mask(char *, BlockNumber);
1013:	void btree_redo(XLogReaderState *);
1080:	void btree_xlog_cleanup(void);
1072:	void btree_xlog_startup(void);
141:	static void _bt_clear_incomplete_split(XLogReaderState *, uint8);
84:	static void _bt_restore_meta(XLogReaderState *, uint8);
38:	static void _bt_restore_page(Page, char *, int);
466:	static void btree_xlog_dedup(XLogReaderState *);
653:	static void btree_xlog_delete(XLogReaderState *);
162:	static void btree_xlog_insert(_Bool, _Bool, _Bool, XLogReaderState *);
713:	static void btree_xlog_mark_page_halfdead(uint8, XLogReaderState *);
937:	static void btree_xlog_newroot(XLogReaderState *);
1003:	static void btree_xlog_reuse_page(XLogReaderState *);
253:	static void btree_xlog_split(_Bool, XLogReaderState *);
798:	static void btree_xlog_unlink_page(uint8, XLogReaderState *);
559:	static void btree_xlog_updates(Page, OffsetNumber *, xl_btree_update *, int);
600:	static void btree_xlog_vacuum(XLogReaderState *);

File netname.c:
126:	int __GI_getnetname(char *);
61:	int __GI_host2netname(char *, const char *, const char *);
192:	int __GI_netname2host(const char *, char *, const int);
145:	int __GI_netname2user(const char *, uid_t *, gid_t *, int *, gid_t *);
32:	int __GI_user2netname(char *, const uid_t, const char *);

File network.c:
1584:	int bitncmp(const unsigned char *, const unsigned char *, int);
1618:	int bitncommon(const unsigned char *, const unsigned char *, int);
1255:	Datum cidr_abbrev(FunctionCallInfo);
130:	Datum cidr_in(FunctionCallInfo);
174:	Datum cidr_out(FunctionCallInfo);
259:	Datum cidr_recv(FunctionCallInfo);
301:	Datum cidr_send(FunctionCallInfo);
349:	Datum cidr_set_masklen(FunctionCallInfo);
369:	inet *cidr_set_masklen_internal(const inet *, int);
2118:	void clean_ipv6_addr(int, char *);
1517:	double convert_network_to_scalar(Datum, Oid, _Bool *);
895:	Datum hashinet(FunctionCallInfo);
905:	Datum hashinetextended(FunctionCallInfo);
1237:	Datum inet_abbrev(FunctionCallInfo);
1731:	Datum inet_client_addr(FunctionCallInfo);
1770:	Datum inet_client_port(FunctionCallInfo);
122:	Datum inet_in(FunctionCallInfo);
1491:	Datum inet_merge(FunctionCallInfo);
166:	Datum inet_out(FunctionCallInfo);
251:	Datum inet_recv(FunctionCallInfo);
1479:	Datum inet_same_family(FunctionCallInfo);
293:	Datum inet_send(FunctionCallInfo);
1807:	Datum inet_server_addr(FunctionCallInfo);
1846:	Datum inet_server_port(FunctionCallInfo);
325:	Datum inet_set_masklen(FunctionCallInfo);
310:	Datum inet_to_cidr(FunctionCallInfo);
1905:	Datum inetand(FunctionCallInfo);
2041:	Datum inetmi(FunctionCallInfo);
2031:	Datum inetmi_int8(FunctionCallInfo);
1880:	Datum inetnot(FunctionCallInfo);
1937:	Datum inetor(FunctionCallInfo);
2021:	Datum inetpl(FunctionCallInfo);
1300:	Datum network_broadcast(FunctionCallInfo);
426:	Datum network_cmp(FunctionCallInfo);
829:	Datum network_eq(FunctionCallInfo);
1281:	Datum network_family(FunctionCallInfo);
838:	Datum network_ge(FunctionCallInfo);
847:	Datum network_gt(FunctionCallInfo);
1188:	Datum network_host(FunctionCallInfo);
1431:	Datum network_hostmask(FunctionCallInfo);
880:	Datum network_larger(FunctionCallInfo);
820:	Datum network_le(FunctionCallInfo);
811:	Datum network_lt(FunctionCallInfo);
1273:	Datum network_masklen(FunctionCallInfo);
856:	Datum network_ne(FunctionCallInfo);
1389:	Datum network_netmask(FunctionCallInfo);
1345:	Datum network_network(FunctionCallInfo);
978:	Datum network_overlap(FunctionCallInfo);
1705:	Datum network_scan_first(Datum);
1719:	Datum network_scan_last(Datum);
1214:	Datum network_show(FunctionCallInfo);
868:	Datum network_smaller(FunctionCallInfo);
438:	Datum network_sortsupport(FunctionCallInfo);
918:	Datum network_sub(FunctionCallInfo);
933:	Datum network_subeq(FunctionCallInfo);
996:	Datum network_subset_support(FunctionCallInfo);
948:	Datum network_sup(FunctionCallInfo);
963:	Datum network_supeq(FunctionCallInfo);
1656:	static _Bool addressOK(unsigned char *, int, int);
1969:	static inet *internal_inetpl(inet *, int64);
1043:	static List *match_network_function(Node *, Node *, int, Oid, Oid);
1091:	static List *match_network_subset(Node *, Node *, _Bool, Oid);
503:	static _Bool network_abbrev_abort(int, SortSupport);
640:	static Datum network_abbrev_convert(Datum, SortSupport);
486:	static int network_cmp_abbrev(Datum, Datum, SortSupport);
406:	static int32 network_cmp_internal(inet *, inet *);
474:	static int network_fast_cmp(Datum, Datum, SortSupport);
76:	static inet *network_in(char *, _Bool);
142:	static char *network_out(inet *, _Bool);
193:	static inet *network_recv(StringInfo, _Bool);
271:	static bytea *network_send(inet *, _Bool);

File network_gist.c:
541:	Datum inet_gist_compress(FunctionCallInfo);
114:	Datum inet_gist_consistent(FunctionCallInfo);
589:	Datum inet_gist_fetch(FunctionCallInfo);
619:	Datum inet_gist_penalty(FunctionCallInfo);
662:	Datum inet_gist_picksplit(FunctionCallInfo);
796:	Datum inet_gist_same(FunctionCallInfo);
504:	Datum inet_gist_union(FunctionCallInfo);
471:	static GistInetKey *build_inet_union_key(int, int, int, unsigned char *);
344:	static void calc_inet_union_params(GISTENTRY *, int, int, int *, int *, int *, int *);
406:	static void calc_inet_union_params_indexed(GISTENTRY *, OffsetNumber *, int, int *, int *, int *, int *);

File network_selfuncs.c:
196:	Datum networkjoinsel(FunctionCallInfo);
79:	Datum networksel(FunctionCallInfo);
742:	static Selectivity inet_hist_inclusion_join_sel(Datum *, int, Datum *, int, int);
939:	static int inet_hist_match_divider(inet *, inet *, int);
604:	static Selectivity inet_hist_value_sel(Datum *, int, Datum, int);
879:	static int inet_inclusion_cmp(inet *, inet *, int);
905:	static int inet_masklen_inclusion_cmp(inet *, inet *, int);
705:	static Selectivity inet_mcv_hist_sel(Datum *, float4 *, int, Datum *, int, int);
673:	static Selectivity inet_mcv_join_sel(Datum *, float4 *, int, Datum *, float4 *, int, Oid);
836:	static int inet_opr_codenum(Oid);
793:	static Selectivity inet_semi_join_sel(Datum, _Bool, Datum *, int, _Bool, Datum *, int, double, FmgrInfo *, int);
539:	static Selectivity mcv_population(float4 *, int);
263:	static Selectivity networkjoinsel_inner(Oid, VariableStatData *, VariableStatData *);
390:	static Selectivity networkjoinsel_semi(Oid, VariableStatData *, VariableStatData *);

File network_spgist.c:
67:	Datum inet_spg_choose(FunctionCallInfo);
50:	Datum inet_spg_config(FunctionCallInfo);
238:	Datum inet_spg_inner_consistent(FunctionCallInfo);
322:	Datum inet_spg_leaf_consistent(FunctionCallInfo);
164:	Datum inet_spg_picksplit(FunctionCallInfo);
373:	static int inet_spg_consistent_bitmap(const inet *, int, ScanKey, _Bool);
349:	static int inet_spg_node_number(const inet *, int);

File newlocale.c:
43:	locale_t __newlocale(int, const char *, locale_t);

File ngettext.c:
55:	char *__ngettext(const char *, const char *, unsigned long);

File nl_langinfo.c:
29:	char *__GI_nl_langinfo(nl_item);

File nl_langinfo_l.c:
30:	char *__GI___nl_langinfo_l(nl_item, locale_t);

File noblock.c:
49:	_Bool pg_set_block(pgsocket);
25:	_Bool pg_set_noblock(pgsocket);

File nodeAgg.c:
4590:	int AggCheckCallContext(FunctionCallInfo, MemoryContext *);
4634:	Aggref *AggGetAggref(FunctionCallInfo);
4668:	MemoryContext AggGetTempMemoryContext(FunctionCallInfo);
4733:	void AggRegisterCallback(FunctionCallInfo, ExprContextCallbackFunction, Datum);
4694:	_Bool AggStateIsShared(FunctionCallInfo);
4762:	void ExecAggEstimate(AggState *, ParallelContext *);
4783:	void ExecAggInitializeDSM(AggState *, ParallelContext *);
4808:	void ExecAggInitializeWorker(AggState *, ParallelWorkerContext *);
4821:	void ExecAggRetrieveInstrumentation(AggState *);
4373:	void ExecEndAgg(AggState *);
3243:	AggState *ExecInitAgg(Agg *, EState *, int);
4443:	void ExecReScanAgg(AggState *);
1694:	Size hash_agg_entry_size(int, Size, Size);
1798:	void hash_agg_set_limits(double, double, int, Size *, uint64 *, int *);
2158:	static TupleTableSlot *ExecAgg(PlanState *);
4357:	static Datum GetAggInitVal(Datum, Oid);
838:	static void advance_aggregates(AggState *);
726:	static void advance_transition_function(AggState *, AggStatePerTrans, AggStatePerGroup);
2540:	static void agg_fill_hash_table(AggState *);
2594:	static _Bool agg_refill_hash_table(AggState *);
2194:	static TupleTableSlot *agg_retrieve_direct(AggState *);
2746:	static TupleTableSlot *agg_retrieve_hash_table(AggState *);
2771:	static TupleTableSlot *agg_retrieve_hash_table_in_memory(AggState *);
1504:	static void build_hash_table(AggState *, int, long);
1469:	static void build_hash_tables(AggState *);
4049:	static void build_pertrans_for_aggref(AggStatePerTrans, AggState *, EState *, Aggref *, Oid, Oid, Oid, Oid, Datum, _Bool, Oid *, int);
567:	static TupleTableSlot *fetch_input_tuple(AggState *);
1056:	static void finalize_aggregate(AggState *, AggStatePerAgg, AggStatePerGroup, Datum *, _Bool *);
1309:	static void finalize_aggregates(AggState *, AggStatePerAgg, AggStatePerGroup);
1159:	static void finalize_partialaggregate(AggState *, AggStatePerAgg, AggStatePerGroup, Datum *, _Bool *);
1398:	static void find_cols(AggState *, Bitmapset **, Bitmapset **);
1421:	static _Bool find_cols_walker(Node *, FindColsContext *);
1564:	static void find_hash_columns(AggState *);
1856:	static void hash_agg_check_limits(AggState *);
1882:	static void hash_agg_enter_spill_mode(AggState *);
1917:	static void hash_agg_update_metrics(AggState *, _Bool, int);
1966:	static long hash_choose_num_buckets(double, long, Size);
1991:	static int hash_choose_num_partitions(double, double, int, int *);
3053:	static HashAggBatch *hashagg_batch_new(LogicalTapeSet *, int, int, int64, double, int);
3073:	static MinimalTuple hashagg_batch_read(HashAggBatch *, uint32 *);
3123:	static void hashagg_finish_initial_spills(AggState *);
1741:	static void hashagg_recompile_expressions(AggState *, _Bool, _Bool);
3199:	static void hashagg_reset_spill_state(AggState *);
3157:	static void hashagg_spill_finish(AggState *, HashAggSpill *, int);
2955:	static void hashagg_spill_init(HashAggSpill *, HashTapeInfo *, int, double, double);
2986:	static Size hashagg_spill_tuple(AggState *, HashAggSpill *, TupleTableSlot *, uint32);
2912:	static void hashagg_tapeinfo_assign(HashTapeInfo *, int *, int);
2891:	static void hashagg_tapeinfo_init(AggState *);
2935:	static void hashagg_tapeinfo_release(HashTapeInfo *, int);
598:	static void initialize_aggregate(AggState *, AggStatePerTrans, AggStatePerGroup);
685:	static void initialize_aggregates(AggState *, AggStatePerGroup *, int);
2045:	static void initialize_hash_entry(AggState *, TupleHashTable, TupleHashEntry);
497:	static void initialize_phase(AggState *, int);
2095:	static void lookup_hash_entries(AggState *);
1219:	static void prepare_hash_slot(AggStatePerHash, TupleTableSlot *, TupleTableSlot *);
1264:	static void prepare_projection_slot(AggState *, TupleTableSlot *, int);
962:	static void process_ordered_aggregate_multi(AggState *, AggStatePerTrans, AggStatePerGroup);
870:	static void process_ordered_aggregate_single(AggState *, AggStatePerTrans, AggStatePerGroup);
1372:	static TupleTableSlot *project_aggregates(AggState *);
475:	static void select_current_set(AggState *, int, _Bool);

File nodeAppend.c:
495:	void ExecAppendEstimate(AppendState *, ParallelContext *);
514:	void ExecAppendInitializeDSM(AppendState *, ParallelContext *);
551:	void ExecAppendInitializeWorker(AppendState *, ParallelWorkerContext *);
535:	void ExecAppendReInitializeDSM(AppendState *, ParallelContext *);
1108:	void ExecAsyncAppendResponse(AsyncRequest *);
395:	void ExecEndAppend(AppendState *);
109:	AppendState *ExecInitAppend(Append *, EState *, int);
415:	void ExecReScanAppend(AppendState *);
297:	static TupleTableSlot *ExecAppend(PlanState *);
867:	static void ExecAppendAsyncBegin(AppendState *);
1021:	static void ExecAppendAsyncEventWait(AppendState *);
918:	static _Bool ExecAppendAsyncGetNext(AppendState *, TupleTableSlot **);
967:	static _Bool ExecAppendAsyncRequest(AppendState *, TupleTableSlot **);
628:	static _Bool choose_next_subplan_for_leader(AppendState *);
709:	static _Bool choose_next_subplan_for_worker(AppendState *);
565:	static _Bool choose_next_subplan_locally(AppendState *);
1154:	static void classify_matching_subplans(AppendState *);
833:	static void mark_invalid_subplans_as_finished(AppendState *);

File nodeBitmapAnd.c:
178:	void ExecEndBitmapAnd(BitmapAndState *);
55:	BitmapAndState *ExecInitBitmapAnd(BitmapAnd *, EState *, int);
201:	void ExecReScanBitmapAnd(BitmapAndState *);
110:	Node *MultiExecBitmapAnd(BitmapAndState *);
42:	static TupleTableSlot *ExecBitmapAnd(PlanState *);

File nodeBitmapHeapscan.c:
856:	void ExecBitmapHeapEstimate(BitmapHeapScanState *, ParallelContext *);
876:	void ExecBitmapHeapInitializeDSM(BitmapHeapScanState *, ParallelContext *);
941:	void ExecBitmapHeapInitializeWorker(BitmapHeapScanState *, ParallelWorkerContext *);
912:	void ExecBitmapHeapReInitializeDSM(BitmapHeapScanState *, ParallelContext *);
649:	void ExecEndBitmapHeapScan(BitmapHeapScanState *);
706:	BitmapHeapScanState *ExecInitBitmapHeapScan(BitmapHeapScan *, EState *, int);
602:	void ExecReScanBitmapHeapScan(BitmapHeapScanState *);
360:	static void BitmapAdjustPrefetchIterator(BitmapHeapScanState *, TBMIterateResult *);
425:	static void BitmapAdjustPrefetchTarget(BitmapHeapScanState *);
348:	static void BitmapDoneInitializingSharedState(ParallelBitmapHeapState *);
72:	static TupleTableSlot *BitmapHeapNext(BitmapHeapScanState *);
569:	static _Bool BitmapHeapRecheck(BitmapHeapScanState *, TupleTableSlot *);
464:	static void BitmapPrefetch(BitmapHeapScanState *, TableScanDesc);
823:	static _Bool BitmapShouldInitializeSharedState(ParallelBitmapHeapState *);
588:	static TupleTableSlot *ExecBitmapHeapScan(PlanState *);

File nodeBitmapIndexscan.c:
176:	void ExecEndBitmapIndexScan(BitmapIndexScanState *);
211:	BitmapIndexScanState *ExecInitBitmapIndexScan(BitmapIndexScan *, EState *, int);
132:	void ExecReScanBitmapIndexScan(BitmapIndexScanState *);
50:	Node *MultiExecBitmapIndexScan(BitmapIndexScanState *);
39:	static TupleTableSlot *ExecBitmapIndexScan(PlanState *);

File nodeBitmapOr.c:
196:	void ExecEndBitmapOr(BitmapOrState *);
56:	BitmapOrState *ExecInitBitmapOr(BitmapOr *, EState *, int);
219:	void ExecReScanBitmapOr(BitmapOrState *);
111:	Node *MultiExecBitmapOr(BitmapOrState *);
43:	static TupleTableSlot *ExecBitmapOr(PlanState *);

File nodeCtescan.c:
288:	void ExecEndCteScan(CteScanState *);
175:	CteScanState *ExecInitCteScan(CteScan *, EState *, int);
319:	void ExecReScanCteScan(CteScanState *);
31:	static TupleTableSlot *CteScanNext(CteScanState *);
145:	static _Bool CteScanRecheck(CteScanState *, TupleTableSlot *);
160:	static TupleTableSlot *ExecCteScan(PlanState *);

File nodeCustom.c:
140:	void ExecCustomMarkPos(CustomScanState *);
151:	void ExecCustomRestrPos(CustomScanState *);
162:	void ExecCustomScanEstimate(CustomScanState *, ParallelContext *);
175:	void ExecCustomScanInitializeDSM(CustomScanState *, ParallelContext *);
206:	void ExecCustomScanInitializeWorker(CustomScanState *, ParallelWorkerContext *);
191:	void ExecCustomScanReInitializeDSM(CustomScanState *, ParallelContext *);
119:	void ExecEndCustomScan(CustomScanState *);
29:	CustomScanState *ExecInitCustomScan(CustomScan *, EState *, int);
133:	void ExecReScanCustomScan(CustomScanState *);
222:	void ExecShutdownCustomScan(CustomScanState *);
108:	static TupleTableSlot *ExecCustomScan(PlanState *);

File nodeForeignscan.c:
481:	void ExecAsyncForeignScanConfigureWait(AsyncRequest *);
497:	void ExecAsyncForeignScanNotify(AsyncRequest *);
465:	void ExecAsyncForeignScanRequest(AsyncRequest *);
298:	void ExecEndForeignScan(ForeignScanState *);
365:	void ExecForeignScanEstimate(ForeignScanState *, ParallelContext *);
384:	void ExecForeignScanInitializeDSM(ForeignScanState *, ParallelContext *);
427:	void ExecForeignScanInitializeWorker(ForeignScanState *, ParallelWorkerContext *);
406:	void ExecForeignScanReInitializeDSM(ForeignScanState *, ParallelContext *);
143:	ForeignScanState *ExecInitForeignScan(ForeignScan *, EState *, int);
332:	void ExecReScanForeignScan(ForeignScanState *);
450:	void ExecShutdownForeignScan(ForeignScanState *);
119:	static TupleTableSlot *ExecForeignScan(PlanState *);
42:	static TupleTableSlot *ForeignNext(ForeignScanState *);
79:	static _Bool ForeignRecheck(ForeignScanState *, TupleTableSlot *);

File nodeFuncs.c:
582:	Node *applyRelabelType(Node *, Oid, int32, Oid, CoercionForm, int, _Bool);
1729:	_Bool check_functions_in_node(Node *, check_function_callback, void *);
767:	Oid exprCollation(const Node *);
982:	Oid exprInputCollation(const Node *);
503:	_Bool exprIsLengthCoercion(const Node *, int32 *);
1258:	int exprLocation(const Node *);
1030:	void exprSetCollation(Node *, Oid);
1194:	void exprSetInputCollation(Node *, Oid);
41:	Oid exprType(const Node *);
267:	int32 exprTypmod(const Node *);
709:	_Bool expression_returns_set(Node *);
2606:	Node *expression_tree_mutator(Node *, Node *(*)(), void *);
1912:	_Bool expression_tree_walker(Node *, _Bool (*)(), void *);
1660:	void fix_opfuncids(Node *);
4001:	_Bool planstate_tree_walker(PlanState *, _Bool (*)(), void *);
3492:	Node *query_or_expression_tree_mutator(Node *, Node *(*)(), void *, int);
3469:	_Bool query_or_expression_tree_walker(Node *, _Bool (*)(), void *, int);
3308:	Query *query_tree_mutator(Query *, Node *(*)(), void *, int);
2363:	_Bool query_tree_walker(Query *, _Bool (*)(), void *, int);
2483:	_Bool range_table_entry_walker(RangeTblEntry *, _Bool (*)(), void *, int);
3397:	List *range_table_mutator(List *, Node *(*)(), void *, int);
2462:	_Bool range_table_walker(List *, _Bool (*)(), void *, int);
3523:	_Bool raw_expression_tree_walker(Node *, _Bool (*)(), void *);
635:	Node *relabel_to_typmod(Node *, int32);
1691:	void set_opfuncid(OpExpr *);
1702:	void set_sa_opfuncid(ScalarArrayOpExpr *);
651:	Node *strip_implicit_coercions(Node *);
715:	static _Bool expression_returns_set_walker(Node *, void *);
1667:	static _Bool fix_opfuncids_walker(Node *, void *);
1639:	static int leftmostLoc(int, int);
4104:	static _Bool planstate_walk_members(PlanState **, int, _Bool (*)(), void *);
4082:	static _Bool planstate_walk_subplans(List *, _Bool (*)(), void *);

File nodeFunctionscan.c:
522:	void ExecEndFunctionScan(FunctionScanState *);
280:	FunctionScanState *ExecInitFunctionScan(FunctionScan *, EState *, int);
563:	void ExecReScanFunctionScan(FunctionScanState *);
266:	static TupleTableSlot *ExecFunctionScan(PlanState *);
60:	static TupleTableSlot *FunctionNext(FunctionScanState *);
250:	static _Bool FunctionRecheck(FunctionScanState *, TupleTableSlot *);

File nodeGather.c:
249:	void ExecEndGather(GatherState *);
58:	GatherState *ExecInitGather(Gather *, EState *, int);
443:	void ExecReScanGather(GatherState *);
419:	void ExecShutdownGather(GatherState *);
142:	static TupleTableSlot *ExecGather(PlanState *);
401:	static void ExecShutdownGatherWorkers(GatherState *);
264:	static TupleTableSlot *gather_getnext(GatherState *);
312:	static MinimalTuple gather_readnext(GatherState *);

File nodeGatherMerge.c:
289:	void ExecEndGatherMerge(GatherMergeState *);
72:	GatherMergeState *ExecInitGatherMerge(GatherMerge *, EState *, int);
342:	void ExecReScanGatherMerge(GatherMergeState *);
305:	void ExecShutdownGatherMerge(GatherMergeState *);
188:	static TupleTableSlot *ExecGatherMerge(PlanState *);
324:	static void ExecShutdownGatherMergeWorkers(GatherMergeState *);
527:	static void gather_merge_clear_tuples(GatherMergeState *);
548:	static TupleTableSlot *gather_merge_getnext(GatherMergeState *);
444:	static void gather_merge_init(GatherMergeState *);
637:	static _Bool gather_merge_readnext(GatherMergeState *, int, _Bool);
396:	static void gather_merge_setup(GatherMergeState *);
715:	static MinimalTuple gm_readnext_tuple(GatherMergeState *, int, _Bool, _Bool *);
753:	static int32 heap_compare_slots(Datum, Datum, void *);
598:	static void load_tuple_array(GatherMergeState *, int);

File nodeGroup.c:
227:	void ExecEndGroup(GroupState *);
162:	GroupState *ExecInitGroup(Group *, EState *, int);
241:	void ExecReScanGroup(GroupState *);
37:	static TupleTableSlot *ExecGroup(PlanState *);

File nodeHash.c:
668:	void ExecChooseHashTableSize(double, int, _Bool, _Bool, int, size_t *, int *, int *, int *);
407:	void ExecEndHash(HashState *);
2711:	void ExecHashAccumInstrumentation(HashInstrumentation *, HashJoinTable);
2594:	void ExecHashEstimate(HashState *, ParallelContext *);
1922:	void ExecHashGetBucketAndBatch(HashJoinTable, uint32, int *, int *);
1814:	_Bool ExecHashGetHashValue(HashJoinTable, ExprContext *, List *, _Bool, _Bool, uint32 *);
2389:	int ExecHashGetSkewBucket(HashJoinTable, uint32);
2613:	void ExecHashInitializeDSM(HashState *, ParallelContext *);
2638:	void ExecHashInitializeWorker(HashState *, ParallelWorkerContext *);
2680:	void ExecHashRetrieveInstrumentation(HashState *);
431:	HashJoinTable ExecHashTableCreate(HashState *, List *, List *, _Bool);
876:	void ExecHashTableDestroy(HashJoinTable);
3196:	void ExecHashTableDetach(HashJoinTable);
3139:	void ExecHashTableDetachBatch(HashJoinTable);
1616:	void ExecHashTableInsert(HashJoinTable, TupleTableSlot *, uint32);
2161:	void ExecHashTableReset(HashJoinTable);
2190:	void ExecHashTableResetMatchFlags(HashJoinTable);
354:	HashState *ExecInitHash(Hash *, EState *, int);
3119:	void ExecParallelHashTableAlloc(HashJoinTable, int);
1705:	void ExecParallelHashTableInsert(HashJoinTable, TupleTableSlot *, uint32);
1770:	void ExecParallelHashTableInsertCurrentBatch(HashJoinTable, TupleTableSlot *, uint32);
3281:	void ExecParallelHashTableSetCurrentBatch(HashJoinTable, int);
2015:	_Bool ExecParallelScanHashBucket(HashJoinState *, ExprContext *);
2066:	void ExecPrepHashTableForUnmatched(HashJoinState *);
2216:	void ExecReScanHash(HashState *);
1954:	_Bool ExecScanHashBucket(HashJoinState *, ExprContext *);
2090:	_Bool ExecScanHashTableForUnmatched(HashJoinState *, ExprContext *);
2664:	void ExecShutdownHash(HashState *);
106:	Node *MultiExecHash(HashState *);
3426:	int get_hash_mem(void);
3404:	size_t get_hash_memory_limit(void);
92:	static TupleTableSlot *ExecHash(PlanState *);
2236:	static void ExecHashBuildSkewHash(HashJoinTable, Hash *, int);
909:	static void ExecHashIncreaseNumBatches(HashJoinTable);
1454:	static void ExecHashIncreaseNumBuckets(HashJoinTable);
2481:	static void ExecHashRemoveNextSkewBucket(HashJoinTable);
2435:	static void ExecHashSkewTableInsert(HashJoinTable, TupleTableSlot *, uint32, int);
3035:	static void ExecParallelHashCloseBatchAccessors(HashJoinTable);
3056:	static void ExecParallelHashEnsureBatchAccessors(HashJoinTable);
3233:	static HashJoinTuple ExecParallelHashFirstTuple(HashJoinTable, int);
1080:	static void ExecParallelHashIncreaseNumBatches(HashJoinTable);
1517:	static void ExecParallelHashIncreaseNumBuckets(HashJoinTable);
2958:	static void ExecParallelHashJoinSetUpBatches(HashJoinTable, int);
1424:	static void ExecParallelHashMergeCounters(HashJoinTable);
3249:	static HashJoinTuple ExecParallelHashNextTuple(HashJoinTable, HashJoinTuple);
3302:	static HashMemoryChunk ExecParallelHashPopChunkQueue(HashJoinTable, dsa_pointer *);
3263:	static void ExecParallelHashPushTuple(dsa_pointer_atomic *, HashJoinTuple, dsa_pointer);
1297:	static void ExecParallelHashRepartitionFirst(HashJoinTable);
1364:	static void ExecParallelHashRepartitionRest(HashJoinTable);
2810:	static HashJoinTuple ExecParallelHashTupleAlloc(HashJoinTable, size_t, dsa_pointer *);
3343:	static _Bool ExecParallelHashTuplePrealloc(HashJoinTable, int, size_t);
215:	static void MultiExecParallelHash(HashState *);
139:	static void MultiExecPrivateHash(HashState *);
2730:	static void *dense_alloc(HashJoinTable, Size);

File nodeHashjoin.c:
765:	void ExecEndHashJoin(HashJoinState *);
1437:	void ExecHashJoinEstimate(HashJoinState *, ParallelContext *);
1444:	void ExecHashJoinInitializeDSM(HashJoinState *, ParallelContext *);
1535:	void ExecHashJoinInitializeWorker(HashJoinState *, ParallelWorkerContext *);
1502:	void ExecHashJoinReInitializeDSM(HashJoinState *, ParallelContext *);
1218:	void ExecHashJoinSaveTuple(MinimalTuple, uint32, BufFile **);
617:	HashJoinState *ExecInitHashJoin(HashJoin *, EState *, int);
1291:	void ExecReScanHashJoin(HashJoinState *);
1376:	void ExecShutdownHashJoin(HashJoinState *);
585:	static TupleTableSlot *ExecHashJoin(PlanState *);
1242:	static TupleTableSlot *ExecHashJoinGetSavedTuple(HashJoinState *, BufFile *, uint32 *, TupleTableSlot *);
165:	static TupleTableSlot *ExecHashJoinImpl(PlanState *, _Bool);
947:	static _Bool ExecHashJoinNewBatch(HashJoinState *);
808:	static TupleTableSlot *ExecHashJoinOuterGetTuple(PlanState *, HashJoinState *, uint32 *);
601:	static TupleTableSlot *ExecParallelHashJoin(PlanState *);
1087:	static _Bool ExecParallelHashJoinNewBatch(HashJoinState *);
882:	static TupleTableSlot *ExecParallelHashJoinOuterGetTuple(PlanState *, HashJoinState *, uint32 *);
1391:	static void ExecParallelHashJoinPartitionOuter(HashJoinState *);

File nodeIncrementalSort.c:
1076:	void ExecEndIncrementalSort(IncrementalSortState *);
1184:	void ExecIncrementalSortEstimate(IncrementalSortState *, ParallelContext *);
1205:	void ExecIncrementalSortInitializeDSM(IncrementalSortState *, ParallelContext *);
1230:	void ExecIncrementalSortInitializeWorker(IncrementalSortState *, ParallelWorkerContext *);
1244:	void ExecIncrementalSortRetrieveInstrumentation(IncrementalSortState *);
975:	IncrementalSortState *ExecInitIncrementalSort(IncrementalSort *, EState *, int);
1111:	void ExecReScanIncrementalSort(IncrementalSortState *);
496:	static TupleTableSlot *ExecIncrementalSort(PlanState *);
128:	static void instrumentSortedGroup(IncrementalSortGroupInfo *, Tuplesortstate *);
213:	static _Bool isCurrentGroup(IncrementalSortState *, TupleTableSlot *, TupleTableSlot *);
165:	static void preparePresortedCols(IncrementalSortState *);
287:	static void switchToPresortedPrefixMode(PlanState *);

File nodeIndexonlyscan.c:
367:	void ExecEndIndexOnlyScan(IndexOnlyScanState *);
418:	void ExecIndexOnlyMarkPos(IndexOnlyScanState *);
455:	void ExecIndexOnlyRestrPos(IndexOnlyScanState *);
644:	void ExecIndexOnlyScanEstimate(IndexOnlyScanState *, ParallelContext *);
662:	void ExecIndexOnlyScanInitializeDSM(IndexOnlyScanState *, ParallelContext *);
713:	void ExecIndexOnlyScanInitializeWorker(IndexOnlyScanState *, ParallelWorkerContext *);
700:	void ExecIndexOnlyScanReInitializeDSM(IndexOnlyScanState *, ParallelContext *);
491:	IndexOnlyScanState *ExecInitIndexOnlyScan(IndexOnlyScan *, EState *, int);
332:	void ExecReScanIndexOnlyScan(IndexOnlyScanState *);
305:	static TupleTableSlot *ExecIndexOnlyScan(PlanState *);
60:	static TupleTableSlot *IndexOnlyNext(IndexOnlyScanState *);
294:	static _Bool IndexOnlyRecheck(IndexOnlyScanState *, TupleTableSlot *);
269:	static void StoreIndexTuple(TupleTableSlot *, IndexTuple, TupleDesc);

File nodeIndexscan.c:
787:	void ExecEndIndexScan(IndexScanState *);
742:	_Bool ExecIndexAdvanceArrayKeys(IndexArrayKeyInfo *, int);
1153:	void ExecIndexBuildScanKeys(PlanState *, Relation, List *, _Bool, ScanKey *, int *, IndexRuntimeKeyInfo **, int *, IndexArrayKeyInfo **, int *);
663:	_Bool ExecIndexEvalArrayKeys(ExprContext *, IndexArrayKeyInfo *, int);
601:	void ExecIndexEvalRuntimeKeys(ExprContext *, IndexRuntimeKeyInfo *, int);
831:	void ExecIndexMarkPos(IndexScanState *);
868:	void ExecIndexRestrPos(IndexScanState *);
1659:	void ExecIndexScanEstimate(IndexScanState *, ParallelContext *);
1677:	void ExecIndexScanInitializeDSM(IndexScanState *, ParallelContext *);
1726:	void ExecIndexScanInitializeWorker(IndexScanState *, ParallelWorkerContext *);
1713:	void ExecIndexScanReInitializeDSM(IndexScanState *, ParallelContext *);
904:	IndexScanState *ExecInitIndexScan(IndexScan *, EState *, int);
554:	void ExecReScanIndexScan(IndexScanState *);
363:	static void EvalOrderByExpressions(IndexScanState *, ExprContext *);
522:	static TupleTableSlot *ExecIndexScan(PlanState *);
81:	static TupleTableSlot *IndexNext(IndexScanState *);
171:	static TupleTableSlot *IndexNextWithReorder(IndexScanState *);
389:	static _Bool IndexRecheck(IndexScanState *, TupleTableSlot *);
408:	static int cmp_orderbyvals(const Datum *, const _Bool *, const Datum *, const _Bool *, IndexScanState *);
444:	static int reorderqueue_cmp(const pairingheap_node *, const pairingheap_node *, void *);
495:	static HeapTuple reorderqueue_pop(IndexScanState *);
461:	static void reorderqueue_push(IndexScanState *, TupleTableSlot *, Datum *, _Bool *);

File nodeLimit.c:
535:	void ExecEndLimit(LimitState *);
448:	LimitState *ExecInitLimit(Limit *, EState *, int);
543:	void ExecReScanLimit(LimitState *);
41:	static TupleTableSlot *ExecLimit(PlanState *);
432:	static int64 compute_tuples_needed(LimitState *);
354:	static void recompute_limits(LimitState *);

File nodeLockRows.c:
386:	void ExecEndLockRows(LockRowsState *);
292:	LockRowsState *ExecInitLockRows(LockRows *, EState *, int);
395:	void ExecReScanLockRows(LockRowsState *);
38:	static TupleTableSlot *ExecLockRows(PlanState *);

File nodeMaterial.c:
240:	void ExecEndMaterial(MaterialState *);
164:	MaterialState *ExecInitMaterial(Material *, EState *, int);
267:	void ExecMaterialMarkPos(MaterialState *);
295:	void ExecMaterialRestrPos(MaterialState *);
318:	void ExecReScanMaterial(MaterialState *);
39:	static TupleTableSlot *ExecMaterial(PlanState *);

File nodeMemoize.c:
1035:	void ExecEndMemoize(MemoizeState *);
1135:	double ExecEstimateCacheEntryOverheadBytes(double);
910:	MemoizeState *ExecInitMemoize(Memoize *, EState *, int);
1153:	void ExecMemoizeEstimate(MemoizeState *, ParallelContext *);
1174:	void ExecMemoizeInitializeDSM(MemoizeState *, ParallelContext *);
1199:	void ExecMemoizeInitializeWorker(MemoizeState *, ParallelWorkerContext *);
1212:	void ExecMemoizeRetrieveInstrumentation(MemoizeState *);
1103:	void ExecReScanMemoize(MemoizeState *);
668:	static TupleTableSlot *ExecMemoize(PlanState *);
216:	static _Bool MemoizeHash_equal(struct memoize_hash *, const MemoizeKey *, const MemoizeKey *);
158:	static uint32 MemoizeHash_hash(struct memoize_hash *, const MemoizeKey *);
265:	static void build_hash_table(MemoizeState *, uint32);
499:	static MemoizeEntry *cache_lookup(MemoizeState *, _Bool *);
375:	static void cache_purge_all(MemoizeState *);
411:	static _Bool cache_reduce_memory(MemoizeState *, MemoizeKey *);
596:	static _Bool cache_store_tuple(MemoizeState *, TupleTableSlot *);
317:	static void entry_purge_tuples(MemoizeState *, MemoizeEntry *);
282:	static void prepare_probe_slot(MemoizeState *, MemoizeKey *);
347:	static void remove_cache_entry(MemoizeState *, MemoizeEntry *);

File nodeMergeAppend.c:
332:	void ExecEndMergeAppend(MergeAppendState *);
65:	MergeAppendState *ExecInitMergeAppend(MergeAppend *, EState *, int);
352:	void ExecReScanMergeAppend(MergeAppendState *);
212:	static TupleTableSlot *ExecMergeAppend(PlanState *);
285:	static int32 heap_compare_slots(Datum, Datum, void *);

File nodeMergejoin.c:
1632:	void ExecEndMergeJoin(MergeJoinState *);
1436:	MergeJoinState *ExecInitMergeJoin(MergeJoin *, EState *, int);
1659:	void ExecReScanMergeJoin(MergeJoinState *);
600:	static TupleTableSlot *ExecMergeJoin(PlanState *);
392:	static int MJCompare(MergeJoinState *);
342:	static MJEvalResult MJEvalInnerValues(MergeJoinState *, TupleTableSlot *);
295:	static MJEvalResult MJEvalOuterValues(MergeJoinState *);
176:	static MergeJoinClause MJExamineQuals(List *, Oid *, Oid *, int *, _Bool *, PlanState *);
484:	static TupleTableSlot *MJFillInner(MergeJoinState *);
453:	static TupleTableSlot *MJFillOuter(MergeJoinState *);
520:	static _Bool check_constant_qual(List *, _Bool *);

File nodeModifyTable.c:
354:	void ExecComputeStoredGenerated(ResultRelInfo *, EState *, TupleTableSlot *, CmdType);
3289:	void ExecEndModifyTable(ModifyTableState *);
616:	TupleTableSlot *ExecGetUpdateNewTuple(ResultRelInfo *, TupleTableSlot *, TupleTableSlot *);
2819:	ModifyTableState *ExecInitModifyTable(ModifyTable *, EState *, int);
264:	void ExecInitStoredGenerated(ResultRelInfo *, EState *, CmdType);
2770:	ResultRelInfo *ExecLookupResultRelByOid(ModifyTableState *, Oid, _Bool, _Bool);
3354:	void ExecReScanModifyTable(ModifyTableState *);
1099:	static void ExecBatchInsert(ModifyTableState *, ResultRelInfo *, TupleTableSlot **, TupleTableSlot **, int, EState *, _Bool);
103:	static void ExecCheckPlanOutput(Relation, List *);
238:	static void ExecCheckTIDVisible(EState *, ResultRelInfo *, ItemPointer, TupleTableSlot *);
204:	static void ExecCheckTupleVisible(EState *, Relation, TupleTableSlot *);
1553:	static _Bool ExecCrossPartitionUpdate(ModifyTableState *, ResultRelInfo *, ItemPointer, HeapTuple, TupleTableSlot *, TupleTableSlot *, EPQState *, _Bool, TupleTableSlot **, TupleTableSlot **);
1170:	static TupleTableSlot *ExecDelete(ModifyTableState *, ResultRelInfo *, ItemPointer, HeapTuple, TupleTableSlot *, EPQState *, EState *, _Bool, _Bool, _Bool, _Bool *, TupleTableSlot **);
572:	static TupleTableSlot *ExecGetInsertNewTuple(ResultRelInfo *, TupleTableSlot *);
444:	static void ExecInitInsertProjection(ModifyTableState *, ResultRelInfo *);
514:	static void ExecInitUpdateProjection(ModifyTableState *, ResultRelInfo *);
654:	static TupleTableSlot *ExecInsert(ModifyTableState *, ResultRelInfo *, TupleTableSlot *, TupleTableSlot *, EState *, _Bool);
2476:	static TupleTableSlot *ExecModifyTable(PlanState *);
2111:	static _Bool ExecOnConflictUpdate(ModifyTableState *, ResultRelInfo *, ItemPointer, TupleTableSlot *, TupleTableSlot *, EState *, _Bool, TupleTableSlot **);
1509:	static void ExecPendingInserts(EState *);
2416:	static TupleTableSlot *ExecPrepareTupleRouting(ModifyTableState *, EState *, PartitionTupleRouting *, ResultRelInfo *, TupleTableSlot *, ResultRelInfo **);
172:	static TupleTableSlot *ExecProcessReturning(ResultRelInfo *, TupleTableSlot *, TupleTableSlot *);
2387:	static void ExecSetupTransitionCaptureState(ModifyTableState *, EState *);
1724:	static TupleTableSlot *ExecUpdate(ModifyTableState *, ResultRelInfo *, ItemPointer, HeapTuple, TupleTableSlot *, TupleTableSlot *, EPQState *, EState *, _Bool);
2353:	static void fireASTriggers(ModifyTableState *);
2324:	static void fireBSTriggers(ModifyTableState *);

File nodeNamedtuplestorescan.c:
165:	void ExecEndNamedTuplestoreScan(NamedTuplestoreScanState *);
83:	NamedTuplestoreScanState *ExecInitNamedTuplestoreScan(NamedTuplestoreScan *, EState *, int);
187:	void ExecReScanNamedTuplestoreScan(NamedTuplestoreScanState *);
68:	static TupleTableSlot *ExecNamedTuplestoreScan(PlanState *);
32:	static TupleTableSlot *NamedTuplestoreScanNext(NamedTuplestoreScanState *);
53:	static _Bool NamedTuplestoreScanRecheck(NamedTuplestoreScanState *, TupleTableSlot *);

File nodeNestloop.c:
362:	void ExecEndNestLoop(NestLoopState *);
263:	NestLoopState *ExecInitNestLoop(NestLoop *, EState *, int);
392:	void ExecReScanNestLoop(NestLoopState *);
61:	static TupleTableSlot *ExecNestLoop(PlanState *);

File nodeProjectSet.c:
321:	void ExecEndProjectSet(ProjectSetState *);
220:	ProjectSetState *ExecInitProjectSet(ProjectSet *, EState *, int);
340:	void ExecReScanProjectSet(ProjectSetState *);
132:	static TupleTableSlot *ExecProjectSRF(ProjectSetState *, _Bool);
43:	static TupleTableSlot *ExecProjectSet(PlanState *);

File nodeRecursiveunion.c:
272:	void ExecEndRecursiveUnion(RecursiveUnionState *);
167:	RecursiveUnionState *ExecInitRecursiveUnion(RecursiveUnion *, EState *, int);
298:	void ExecReScanRecursiveUnion(RecursiveUnionState *);
75:	static TupleTableSlot *ExecRecursiveUnion(PlanState *);
32:	static void build_hash_table(RecursiveUnionState *);

File nodeResult.c:
241:	void ExecEndResult(ResultState *);
181:	ResultState *ExecInitResult(Result *, EState *, int);
260:	void ExecReScanResult(ResultState *);
147:	void ExecResultMarkPos(ResultState *);
162:	void ExecResultRestrPos(ResultState *);
68:	static TupleTableSlot *ExecResult(PlanState *);

File nodeSamplescan.c:
182:	void ExecEndSampleScan(SampleScanState *);
96:	SampleScanState *ExecInitSampleScan(SampleScan *, EState *, int);
217:	void ExecReScanSampleScan(SampleScanState *);
82:	static TupleTableSlot *ExecSampleScan(PlanState *);
45:	static TupleTableSlot *SampleNext(SampleScanState *);
63:	static _Bool SampleRecheck(SampleScanState *, TupleTableSlot *);
335:	static TupleTableSlot *tablesample_getnext(SampleScanState *);
233:	static void tablesample_init(SampleScanState *);

File nodeSeqscan.c:
184:	void ExecEndSeqScan(SeqScanState *);
123:	SeqScanState *ExecInitSeqScan(SeqScan *, EState *, int);
224:	void ExecReScanSeqScan(SeqScanState *);
250:	void ExecSeqScanEstimate(SeqScanState *, ParallelContext *);
268:	void ExecSeqScanInitializeDSM(SeqScanState *, ParallelContext *);
306:	void ExecSeqScanInitializeWorker(SeqScanState *, ParallelWorkerContext *);
290:	void ExecSeqScanReInitializeDSM(SeqScanState *, ParallelContext *);
108:	static TupleTableSlot *ExecSeqScan(PlanState *);
50:	static TupleTableSlot *SeqNext(SeqScanState *);
89:	static _Bool SeqRecheck(SeqScanState *, TupleTableSlot *);

File nodeSetOp.c:
583:	void ExecEndSetOp(SetOpState *);
481:	SetOpState *ExecInitSetOp(SetOp *, EState *, int);
598:	void ExecReScanSetOp(SetOpState *);
190:	static TupleTableSlot *ExecSetOp(PlanState *);
89:	static void advance_counts(SetOpStatePerGroup, int);
120:	static void build_hash_table(SetOpState *);
102:	static int fetch_tuple_flag(SetOpState *, TupleTableSlot *);
80:	static void initialize_counts(SetOpStatePerGroup);
150:	static void set_output_count(SetOpState *, SetOpStatePerGroup);
339:	static void setop_fill_hash_table(SetOpState *);
227:	static TupleTableSlot *setop_retrieve_direct(SetOpState *);
425:	static TupleTableSlot *setop_retrieve_hash_table(SetOpState *);

File nodeSort.c:
235:	void ExecEndSort(SortState *);
167:	SortState *ExecInitSort(Sort *, EState *, int);
303:	void ExecReScanSort(SortState *);
357:	void ExecSortEstimate(SortState *, ParallelContext *);
378:	void ExecSortInitializeDSM(SortState *, ParallelContext *);
403:	void ExecSortInitializeWorker(SortState *, ParallelWorkerContext *);
270:	void ExecSortMarkPos(SortState *);
288:	void ExecSortRestrPos(SortState *);
417:	void ExecSortRetrieveInstrumentation(SortState *);
40:	static TupleTableSlot *ExecSort(PlanState *);

File nodeSubplan.c:
823:	SubPlanState *ExecInitSubPlan(SubPlan *, PlanState *);
1291:	void ExecReScanSetParamPlan(SubPlanState *, PlanState *);
1092:	void ExecSetParamPlan(SubPlanState *, ExprContext *);
1268:	void ExecSetParamPlanMulti(const Bitmapset *, ExprContext *);
62:	Datum ExecSubPlan(SubPlanState *, ExprContext *, _Bool *);
101:	static Datum ExecHashSubPlan(SubPlanState *, ExprContext *, _Bool *);
223:	static Datum ExecScanSubPlan(SubPlanState *, ExprContext *, _Bool *);
504:	static void buildSubPlanHash(SubPlanState *, ExprContext *);
675:	static _Bool execTuplesUnequal(TupleTableSlot *, TupleTableSlot *, int, AttrNumber *, FmgrInfo *, const Oid *, MemoryContext);
744:	static _Bool findPartialMatch(TupleHashTable, TupleTableSlot *, FmgrInfo *);
779:	static _Bool slotAllNulls(TupleTableSlot *);
799:	static _Bool slotNoNulls(TupleTableSlot *);

File nodeSubqueryscan.c:
168:	void ExecEndSubqueryScan(SubqueryScanState *);
97:	SubqueryScanState *ExecInitSubqueryScan(SubqueryScan *, EState *, int);
195:	void ExecReScanSubqueryScan(SubqueryScanState *);
83:	static TupleTableSlot *ExecSubqueryScan(PlanState *);
46:	static TupleTableSlot *SubqueryNext(SubqueryScanState *);
67:	static _Bool SubqueryRecheck(SubqueryScanState *, TupleTableSlot *);

File nodeTableFuncscan.c:
214:	void ExecEndTableFuncScan(TableFuncScanState *);
110:	TableFuncScanState *ExecInitTableFuncScan(TableFuncScan *, EState *, int);
243:	void ExecReScanTableFuncScan(TableFuncScanState *);
96:	static TupleTableSlot *ExecTableFuncScan(PlanState *);
53:	static TupleTableSlot *TableFuncNext(TableFuncScanState *);
80:	static _Bool TableFuncRecheck(TableFuncScanState *, TupleTableSlot *);
274:	static void tfuncFetchRows(TableFuncScanState *, ExprContext *);
345:	static void tfuncInitialize(TableFuncScanState *, ExprContext *, Datum);
434:	static void tfuncLoadRows(TableFuncScanState *, ExprContext *);

File nodeTidrangescan.c:
323:	void ExecEndTidRangeScan(TidRangeScanState *);
355:	TidRangeScanState *ExecInitTidRangeScan(TidRangeScan *, EState *, int);
304:	void ExecReScanTidRangeScan(TidRangeScanState *);
290:	static TupleTableSlot *ExecTidRangeScan(PlanState *);
53:	static TidOpExpr *MakeTidOpExpr(OpExpr *, TidRangeScanState *);
102:	static void TidExprListCreate(TidRangeScanState *);
133:	static _Bool TidRangeEval(TidRangeScanState *);
216:	static TupleTableSlot *TidRangeNext(TidRangeScanState *);
269:	static _Bool TidRangeRecheck(TidRangeScanState *, TupleTableSlot *);

File nodeTidscan.c:
468:	void ExecEndTidScan(TidScanState *);
498:	TidScanState *ExecInitTidScan(TidScan *, EState *, int);
445:	void ExecReScanTidScan(TidScanState *);
431:	static TupleTableSlot *ExecTidScan(PlanState *);
66:	static void TidExprListCreate(TidScanState *);
130:	static void TidListEval(TidScanState *);
310:	static TupleTableSlot *TidNext(TidScanState *);
401:	static _Bool TidRecheck(TidScanState *, TupleTableSlot *);
281:	static int itemptr_comparator(const void *, const void *);

File nodeUnique.c:
169:	void ExecEndUnique(UniqueState *);
115:	UniqueState *ExecInitUnique(Unique *, EState *, int);
181:	void ExecReScanUnique(UniqueState *);
47:	static TupleTableSlot *ExecUnique(PlanState *);

File nodeValuesscan.c:
329:	void ExecEndValuesScan(ValuesScanState *);
211:	ValuesScanState *ExecInitValuesScan(ValuesScan *, EState *, int);
353:	void ExecReScanValuesScan(ValuesScanState *);
197:	static TupleTableSlot *ExecValuesScan(PlanState *);
48:	static TupleTableSlot *ValuesNext(ValuesScanState *);
181:	static _Bool ValuesRecheck(ValuesScanState *, TupleTableSlot *);

File nodeWindowAgg.c:
2534:	void ExecEndWindowAgg(WindowAggState *);
2250:	WindowAggState *ExecInitWindowAgg(WindowAgg *, EState *, int);
2578:	void ExecReScanWindowAgg(WindowAggState *);
3051:	int64 WinGetCurrentPosition(WindowObject);
3459:	Datum WinGetFuncArgCurrent(WindowObject, int, _Bool *);
3264:	Datum WinGetFuncArgInFrame(WindowObject, int, int, int, _Bool, _Bool *, _Bool *);
3176:	Datum WinGetFuncArgInPartition(WindowObject, int, int, int, _Bool, _Bool *, _Bool *);
3036:	void *WinGetPartitionLocalMemory(WindowObject, Size);
3066:	int64 WinGetPartitionRowCount(WindowObject);
3119:	_Bool WinRowsArePeers(WindowObject, int64, int64);
3084:	void WinSetMarkPosition(WindowObject, int64);
2024:	static TupleTableSlot *ExecWindowAgg(PlanState *);
2891:	static Datum GetAggInitVal(Datum, Oid);
242:	static void advance_windowaggregate(WindowAggState *, WindowStatePerFunc, WindowStatePerAgg);
418:	static _Bool advance_windowaggregate_base(WindowAggState *, WindowStatePerFunc, WindowStatePerAgg);
2913:	static _Bool are_peers(WindowAggState *, TupleTableSlot *, TupleTableSlot *);
1080:	static void begin_partition(WindowAggState *);
663:	static void eval_windowaggregates(WindowAggState *);
1033:	static void eval_windowfunction(WindowAggState *, WindowStatePerFunc, Datum *, _Bool *);
580:	static void finalize_windowaggregate(WindowAggState *, WindowStatePerFunc, WindowStatePerAgg, Datum *, _Bool *);
2618:	static WindowStatePerAggData *initialize_peragg(WindowAggState *, WindowFunc *, WindowStatePerAgg);
207:	static void initialize_windowaggregate(WindowAggState *, WindowStatePerFunc, WindowStatePerAgg);
1313:	static void release_partition(WindowAggState *);
1363:	static int row_is_in_frame(WindowAggState *, int64, TupleTableSlot *);
1240:	static void spool_tuples(WindowAggState *, int64);
1463:	static void update_frameheadpos(WindowAggState *);
1713:	static void update_frametailpos(WindowAggState *);
1963:	static void update_grouptailpos(WindowAggState *);
2936:	static _Bool window_gettupleslot(WindowObject, int64, TupleTableSlot *);

File nodeWorktablescan.c:
191:	void ExecEndWorkTableScan(WorkTableScanState *);
130:	WorkTableScanState *ExecInitWorkTableScan(WorkTableScan *, EState *, int);
213:	void ExecReScanWorkTableScan(WorkTableScanState *);
81:	static TupleTableSlot *ExecWorkTableScan(PlanState *);
30:	static TupleTableSlot *WorkTableScanNext(WorkTableScanState *);
66:	static _Bool WorkTableScanRecheck(WorkTableScanState *, TupleTableSlot *);

File noophooks.c:
23:	void __cyg_profile_func_enter(void *, void *);

File nptl-init.c:
391:	size_t __pthread_get_minstack(const pthread_attr_t *);
243:	void __pthread_initialize_minimal_internal(void);
130:	static void __nptl_set_robust(struct pthread *);
142:	static void sigcancel_handler(int, siginfo_t *, void *);
193:	static void sighandler_setxid(int, siginfo_t *, void *);

File nptlfreeres.c:
26:	void __libpthread_freeres(void);

File nrand48.c:
23:	long nrand48(unsigned short *);

File nrand48_r.c:
22:	int __nrand48_r(unsigned short *, struct drand48_data *, long *);

File nsap_addr.c:
35:	u_int inet_nsap_addr(const char *, u_char *, int);
66:	char *inet_nsap_ntoa(int, const u_char *, char *);

File nscd_getai.c:
43:	int __nscd_getai(const char *, struct nscd_ai_result **, int *);

File nscd_getgr_r.c:
56:	int __nscd_getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
47:	int __nscd_getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
72:	static void gr_map_free(void);
84:	static int nscd_getgr_r(const char *, size_t, request_type, struct group *, char *, size_t, struct group **);

File nscd_gethst_r.c:
97:	uint32_t __nscd_get_nl_timestamp(void);
63:	int __nscd_gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, struct hostent **, int *);
49:	int __nscd_gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
39:	int __nscd_gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);
85:	static void hst_map_free(void);
134:	static int nscd_gethst_r(const char *, size_t, request_type, struct hostent *, char *, size_t, struct hostent **, int *);

File nscd_getpw_r.c:
44:	int __nscd_getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
55:	int __nscd_getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
83:	static int nscd_getpw_r(const char *, size_t, request_type, struct passwd *, char *, size_t, struct passwd **);
71:	static void pw_map_free(void);

File nscd_getserv_r.c:
39:	int __nscd_getservbyname_r(const char *, const char *, struct servent *, char *, size_t, struct servent **);
49:	int __nscd_getservbyport_r(int, const char *, struct servent *, char *, size_t, struct servent **);
78:	static int nscd_getserv_r(const char *, size_t, const char *, request_type, struct servent *, char *, size_t, struct servent **);
66:	static void serv_map_free(void);

File nscd_helper.c:
450:	struct datahead *__nscd_cache_search(request_type, const char *, size_t, const struct mapped_database *, size_t);
400:	struct mapped_database *__nscd_get_map_ref(request_type, const char *, volatile struct locked_map_ptr *, int *);
257:	struct mapped_database *__nscd_get_mapping(request_type, const char *, struct mapped_database **);
534:	int __nscd_open_socket(const char *, size_t, request_type, void *, size_t);
246:	void __nscd_unmap(struct mapped_database *);
85:	ssize_t __readall(int, void *, size_t);
111:	ssize_t __readvall(int, const struct iovec *, int);
167:	static int open_socket(request_type, const char *, size_t);
51:	static int wait_on_socket(int, long);

File nscd_initgroups.c:
36:	int __nscd_getgrouplist(const char *, gid_t, long *, gid_t **, long);

File nscd_netgroup.c:
166:	int __nscd_innetgr(const char *, const char *, const char *, const char *);
47:	int __nscd_setnetgrent(const char *, struct __netgrent *);
35:	static void pw_map_free(void);

File nss_files/files-XXX.c:
119:	enum nss_status _nss_files_endetherent(void);
119:	enum nss_status _nss_files_endgrent(void);
119:	enum nss_status _nss_files_endhostent(void);
119:	enum nss_status _nss_files_endnetent(void);
119:	enum nss_status _nss_files_endprotoent(void);
119:	enum nss_status _nss_files_endpwent(void);
119:	enum nss_status _nss_files_endrpcent(void);
119:	enum nss_status _nss_files_endservent(void);
119:	enum nss_status _nss_files_endsgent(void);
119:	enum nss_status _nss_files_endspent(void);
217:	enum nss_status _nss_files_getetherent_r(struct etherent *, char *, size_t, int *);
217:	enum nss_status _nss_files_getgrent_r(struct group *, char *, size_t, int *);
217:	enum nss_status _nss_files_gethostent_r(struct hostent *, char *, size_t, int *, int *);
217:	enum nss_status _nss_files_getnetent_r(struct netent *, char *, size_t, int *, int *);
217:	enum nss_status _nss_files_getprotoent_r(struct protoent *, char *, size_t, int *);
217:	enum nss_status _nss_files_getpwent_r(struct passwd *, char *, size_t, int *);
217:	enum nss_status _nss_files_getrpcent_r(struct rpcent *, char *, size_t, int *);
217:	enum nss_status _nss_files_getservent_r(struct servent *, char *, size_t, int *);
217:	enum nss_status _nss_files_getsgent_r(struct sgrp *, char *, size_t, int *);
217:	enum nss_status _nss_files_getspent_r(struct spwd *, char *, size_t, int *);
91:	enum nss_status _nss_files_setetherent(int);
91:	enum nss_status _nss_files_setgrent(int);
91:	enum nss_status _nss_files_sethostent(int);
91:	enum nss_status _nss_files_setnetent(int);
91:	enum nss_status _nss_files_setprotoent(int);
91:	enum nss_status _nss_files_setpwent(int);
91:	enum nss_status _nss_files_setrpcent(int);
91:	enum nss_status _nss_files_setservent(int);
91:	enum nss_status _nss_files_setsgent(int);
91:	enum nss_status _nss_files_setspent(int);
133:	static enum nss_status internal_getent(FILE *, struct protoent *, char *, size_t, int *);

File nss_files/files-alias.c:
92:	enum nss_status _nss_files_endaliasent(void);
394:	enum nss_status _nss_files_getaliasbyname_r(const char *, struct aliasent *, char *, size_t, int *);
365:	enum nss_status _nss_files_getaliasent_r(struct aliasent *, char *, size_t, int *);
64:	enum nss_status _nss_files_setaliasent(void);
105:	static enum nss_status get_next_alias(FILE *, const char *, struct aliasent *, char *, size_t, int *);

File nss_files/files-ethers.c:
27:	int __GI__nss_files_parse_etherent(char *, struct etherent *, struct parser_data *, size_t, int *);
53:	enum nss_status _nss_files_gethostton_r(const char *, struct etherent *, char *, size_t, int *);
59:	enum nss_status _nss_files_getntohost_r(const struct ether_addr *, struct etherent *, char *, size_t, int *);

File nss_files/files-grp.c:
39:	enum nss_status _nss_files_getgrgid_r(gid_t, struct group *, char *, size_t, int *);
32:	enum nss_status _nss_files_getgrnam_r(const char *, struct group *, char *, size_t, int *);

File nss_files/files-hosts.c:
103:	enum nss_status _nss_files_gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, int *, int *);
369:	enum nss_status _nss_files_gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, int *, int *);
324:	enum nss_status _nss_files_gethostbyname3_r(const char *, int, struct hostent *, char *, size_t, int *, int *, int32_t *, char **);
378:	enum nss_status _nss_files_gethostbyname4_r(const char *, struct gaih_addrtuple **, char *, size_t, int *, int *, int32_t *);
360:	enum nss_status _nss_files_gethostbyname_r(const char *, struct hostent *, char *, size_t, int *, int *);
118:	static enum nss_status gethostbyname3_multi(FILE *, const char *, int, struct hostent *, char *, size_t, int *, int *);

File nss_files/files-init.c:
43:	void _nss_files_init(void (*)(size_t, struct traced_file *));

File nss_files/files-initgroups.c:
30:	enum nss_status _nss_files_initgroups_dyn(const char *, gid_t, long *, long *, gid_t **, long, int *);

File nss_files/files-key.c:
83:	enum nss_status _nss_files_getpublickey(const char *, char *, int *);
89:	enum nss_status _nss_files_getsecretkey(const char *, char *, char *, int *);
31:	static enum nss_status search(const char *, char *, int *, int);

File nss_files/files-netgrp.c:
157:	enum nss_status __GI__nss_files_endnetgrent(struct __netgrent *);
188:	enum nss_status __GI__nss_netgroup_parseline(char **, struct __netgrent *, char *, size_t, int *);
285:	enum nss_status _nss_files_getnetgrent_r(struct __netgrent *, char *, size_t, int *);
56:	enum nss_status _nss_files_setnetgrent(const char *, struct __netgrent *);

File nss_files/files-network.c:
33:	int __GI__nss_files_parse_netent(char *, struct netent *, struct parser_data *, size_t, int *);
82:	enum nss_status _nss_files_getnetbyaddr_r(uint32_t, int, struct netent *, char *, size_t, int *, int *);
78:	enum nss_status _nss_files_getnetbyname_r(const char *, struct netent *, char *, size_t, int *, int *);

File nss_files/files-proto.c:
30:	int __GI__nss_files_parse_protoent(char *, struct protoent *, struct parser_data *, size_t, int *);
38:	enum nss_status _nss_files_getprotobyname_r(const char *, struct protoent *, char *, size_t, int *);
42:	enum nss_status _nss_files_getprotobynumber_r(int, struct protoent *, char *, size_t, int *);

File nss_files/files-pwd.c:
32:	enum nss_status _nss_files_getpwnam_r(const char *, struct passwd *, char *, size_t, int *);
39:	enum nss_status _nss_files_getpwuid_r(uid_t, struct passwd *, char *, size_t, int *);

File nss_files/files-rpc.c:
30:	int __GI__nss_files_parse_rpcent(char *, struct rpcent *, struct parser_data *, size_t, int *);
38:	enum nss_status _nss_files_getrpcbyname_r(const char *, struct rpcent *, char *, size_t, int *);
42:	enum nss_status _nss_files_getrpcbynumber_r(int, struct rpcent *, char *, size_t, int *);

File nss_files/files-service.c:
32:	int __GI__nss_files_parse_servent(char *, struct servent *, struct parser_data *, size_t, int *);
41:	enum nss_status _nss_files_getservbyname_r(const char *, const char *, struct servent *, char *, size_t, int *);
55:	enum nss_status _nss_files_getservbyport_r(int, const char *, struct servent *, char *, size_t, int *);

File nss_files/files-sgrp.c:
32:	enum nss_status _nss_files_getsgnam_r(const char *, struct sgrp *, char *, size_t, int *);

File nss_files/files-spwd.c:
32:	enum nss_status _nss_files_getspnam_r(const char *, struct spwd *, char *, size_t, int *);

File nss_hash.c:
32:	uint32_t __GI___nss_hash(const void *, size_t);

File nsswitch.c:
118:	int __GI___nss_database_lookup2(const char *, const char *, const char *, service_user **);
195:	int __GI___nss_lookup(service_user **, const char *, const char *, void **);
412:	void *__GI___nss_lookup_function(service_user *, const char *);
222:	int __GI___nss_next2(service_user **, const char *, const char *, void **, int, int);
264:	int __nss_configure_lookup(const char *, const char *);
850:	void __nss_disable_nscd(void (*)(size_t, struct traced_file *));
898:	static void free_defconfig(void);
912:	static void free_mem(void);
318:	static int known_compare(const void *, const void *);
328:	static int nss_load_library(service_user *);
618:	static service_user *nss_parse_service_list(const char *);

File numeric.c:
4451:	Datum float4_numeric(FunctionCallInfo);
4358:	Datum float8_numeric(FunctionCallInfo);
1552:	Datum generate_series_numeric(FunctionCallInfo);
1558:	Datum generate_series_step_numeric(FunctionCallInfo);
2552:	Datum hash_numeric(FunctionCallInfo);
2632:	Datum hash_numeric_extended(FunctionCallInfo);
2417:	Datum in_range_numeric_numeric(FunctionCallInfo);
5352:	Datum int2_accum(FunctionCallInfo);
5811:	Datum int2_accum_inv(FunctionCallInfo);
6494:	Datum int2_avg_accum(FunctionCallInfo);
6581:	Datum int2_avg_accum_inv(FunctionCallInfo);
4309:	Datum int2_numeric(FunctionCallInfo);
6345:	Datum int2_sum(FunctionCallInfo);
6664:	Datum int2int4_sum(FunctionCallInfo);
5375:	Datum int4_accum(FunctionCallInfo);
5836:	Datum int4_accum_inv(FunctionCallInfo);
6522:	Datum int4_avg_accum(FunctionCallInfo);
6609:	Datum int4_avg_accum_inv(FunctionCallInfo);
6550:	Datum int4_avg_combine(FunctionCallInfo);
4181:	Datum int4_numeric(FunctionCallInfo);
6394:	Datum int4_sum(FunctionCallInfo);
4096:	Numeric int64_div_fast_to_numeric(int64, int);
4075:	Numeric int64_to_numeric(int64);
5398:	Datum int8_accum(FunctionCallInfo);
5861:	Datum int8_accum_inv(FunctionCallInfo);
6637:	Datum int8_avg(FunctionCallInfo);
5618:	Datum int8_avg_accum(FunctionCallInfo);
5882:	Datum int8_avg_accum_inv(FunctionCallInfo);
5645:	Datum int8_avg_combine(FunctionCallInfo);
5762:	Datum int8_avg_deserialize(FunctionCallInfo);
5705:	Datum int8_avg_serialize(FunctionCallInfo);
4269:	Datum int8_numeric(FunctionCallInfo);
6446:	Datum int8_sum(FunctionCallInfo);
1105:	Datum numeric(FunctionCallInfo);
1250:	Datum numeric_abs(FunctionCallInfo);
4783:	Datum numeric_accum(FunctionCallInfo);
5233:	Datum numeric_accum_inv(FunctionCallInfo);
2703:	Datum numeric_add(FunctionCallInfo);
2722:	Numeric numeric_add_opt_error(Numeric, Numeric, _Bool *);
5965:	Datum numeric_avg(FunctionCallInfo);
4875:	Datum numeric_avg_accum(FunctionCallInfo);
4895:	Datum numeric_avg_combine(FunctionCallInfo);
5030:	Datum numeric_avg_deserialize(FunctionCallInfo);
4967:	Datum numeric_avg_serialize(FunctionCallInfo);
1496:	Datum numeric_ceil(FunctionCallInfo);
2254:	Datum numeric_cmp(FunctionCallInfo);
4803:	Datum numeric_combine(FunctionCallInfo);
5164:	Datum numeric_deserialize(FunctionCallInfo);
2979:	Datum numeric_div(FunctionCallInfo);
2999:	Numeric numeric_div_opt_error(Numeric, Numeric, _Bool *);
3114:	Datum numeric_div_trunc(FunctionCallInfo);
2270:	Datum numeric_eq(FunctionCallInfo);
3590:	Datum numeric_exp(FunctionCallInfo);
3479:	Datum numeric_fac(FunctionCallInfo);
4485:	Datum numeric_float4(FunctionCallInfo);
4392:	Datum numeric_float8(FunctionCallInfo);
4425:	Datum numeric_float8_no_overflow(FunctionCallInfo);
1524:	Datum numeric_floor(FunctionCallInfo);
3376:	Datum numeric_gcd(FunctionCallInfo);
2315:	Datum numeric_ge(FunctionCallInfo);
2300:	Datum numeric_gt(FunctionCallInfo);
613:	Datum numeric_in(FunctionCallInfo);
3292:	Datum numeric_inc(FunctionCallInfo);
4318:	Datum numeric_int2(FunctionCallInfo);
4239:	Datum numeric_int4(FunctionCallInfo);
4189:	int32 numeric_int4_opt_error(Numeric, _Bool *);
4278:	Datum numeric_int8(FunctionCallInfo);
777:	_Bool numeric_is_inf(Numeric);
766:	_Bool numeric_is_nan(Numeric);
3347:	Datum numeric_larger(FunctionCallInfo);
3419:	Datum numeric_lcm(FunctionCallInfo);
2345:	Datum numeric_le(FunctionCallInfo);
3657:	Datum numeric_ln(FunctionCallInfo);
3706:	Datum numeric_log(FunctionCallInfo);
2330:	Datum numeric_lt(FunctionCallInfo);
812:	int32 numeric_maximum_size(int32);
4029:	Datum numeric_min_scale(FunctionCallInfo);
3203:	Datum numeric_mod(FunctionCallInfo);
3223:	Numeric numeric_mod_opt_error(Numeric, Numeric, _Bool *);
2858:	Datum numeric_mul(FunctionCallInfo);
2878:	Numeric numeric_mul_opt_error(Numeric, Numeric, _Bool *);
2285:	Datum numeric_ne(FunctionCallInfo);
885:	char *numeric_normalize(Numeric);
731:	Datum numeric_out(FunctionCallInfo);
851:	char *numeric_out_sci(Numeric, int);
4513:	Datum numeric_pg_lsn(FunctionCallInfo);
5935:	Datum numeric_poly_avg(FunctionCallInfo);
5418:	Datum numeric_poly_combine(FunctionCallInfo);
5554:	Datum numeric_poly_deserialize(FunctionCallInfo);
5483:	Datum numeric_poly_serialize(FunctionCallInfo);
6304:	Datum numeric_poly_stddev_pop(FunctionCallInfo);
6262:	Datum numeric_poly_stddev_samp(FunctionCallInfo);
5907:	Datum numeric_poly_sum(FunctionCallInfo);
6283:	Datum numeric_poly_var_pop(FunctionCallInfo);
6241:	Datum numeric_poly_var_samp(FunctionCallInfo);
3777:	Datum numeric_power(FunctionCallInfo);
937:	Datum numeric_recv(FunctionCallInfo);
1400:	Datum numeric_round(FunctionCallInfo);
3964:	Datum numeric_scale(FunctionCallInfo);
1022:	Datum numeric_send(FunctionCallInfo);
5091:	Datum numeric_serialize(FunctionCallInfo);
1367:	Datum numeric_sign(FunctionCallInfo);
3325:	Datum numeric_smaller(FunctionCallInfo);
1860:	Datum numeric_sortsupport(FunctionCallInfo);
3531:	Datum numeric_sqrt(FunctionCallInfo);
6178:	Datum numeric_stddev_pop(FunctionCallInfo);
6144:	Datum numeric_stddev_samp(FunctionCallInfo);
2780:	Datum numeric_sub(FunctionCallInfo);
2800:	Numeric numeric_sub_opt_error(Numeric, Numeric, _Bool *);
6000:	Datum numeric_sum(FunctionCallInfo);
1055:	Datum numeric_support(FunctionCallInfo);
4049:	Datum numeric_trim_scale(FunctionCallInfo);
1449:	Datum numeric_trunc(FunctionCallInfo);
1277:	Datum numeric_uminus(FunctionCallInfo);
1319:	Datum numeric_uplus(FunctionCallInfo);
6161:	Datum numeric_var_pop(FunctionCallInfo);
6127:	Datum numeric_var_samp(FunctionCallInfo);
1181:	Datum numerictypmodin(FunctionCallInfo);
1226:	Datum numerictypmodout(FunctionCallInfo);
1695:	Datum width_bucket_numeric(FunctionCallInfo);
11019:	static void accum_sum_add(NumericSumAccum *, const NumericVar *);
11067:	static void accum_sum_carry(NumericSumAccum *);
11297:	static void accum_sum_combine(NumericSumAccum *, NumericSumAccum *);
11280:	static void accum_sum_copy(NumericSumAccum *, NumericSumAccum *);
11229:	static void accum_sum_final(NumericSumAccum *, NumericVar *);
11140:	static void accum_sum_rescale(NumericSumAccum *, const NumericVar *);
11003:	static void accum_sum_reset(NumericSumAccum *);
10627:	static void add_abs(const NumericVar *, const NumericVar *, NumericVar *);
7967:	static void add_var(const NumericVar *, const NumericVar *, NumericVar *);
6790:	static void alloc_var(NumericVar *, int);
7450:	static void apply_typmod(NumericVar *, int32);
7527:	static void apply_typmod_special(Numeric, int32);
9172:	static void ceil_var(const NumericVar *, NumericVar *);
10549:	static int cmp_abs(const NumericVar *, const NumericVar *);
10563:	static int cmp_abs_common(const NumericDigit *, int, int, const NumericDigit *, int, int);
2360:	static int cmp_numerics(Numeric, Numeric);
7909:	static int cmp_var(const NumericVar *, const NumericVar *);
7924:	static int cmp_var_common(const NumericDigit *, int, int, int, const NumericDigit *, int, int, int);
1783:	static void compute_bucket(Numeric, Numeric, Numeric, const NumericVar *, _Bool, NumericVar *);
9102:	static void div_mod_var(const NumericVar *, const NumericVar *, NumericVar *, NumericVar *);
8413:	static void div_var(const NumericVar *, const NumericVar *, NumericVar *, int, _Bool);
8698:	static void div_var_fast(const NumericVar *, const NumericVar *, NumericVar *, int, _Bool);
5320:	static void do_int128_accum(Int128AggState *, int128);
5333:	static void do_int128_discard(Int128AggState *, int128);
4620:	static void do_numeric_accum(NumericAggState *, Numeric);
4690:	static _Bool do_numeric_discard(NumericAggState *, Numeric);
7309:	static Numeric duplicate_numeric(Numeric);
9905:	static int estimate_ln_dweight(const NumericVar *);
9769:	static void exp_var(const NumericVar *, NumericVar *, int);
9196:	static void floor_var(const NumericVar *, NumericVar *);
6806:	static void free_var(NumericVar *);
9219:	static void gcd_var(const NumericVar *, const NumericVar *, NumericVar *);
3978:	static int get_min_scale(NumericVar *);
7082:	static char *get_str_from_var(const NumericVar *);
7235:	static char *get_str_from_var_sci(const NumericVar *, int);
7039:	static void init_var_from_num(Numeric, NumericVar *);
7831:	static void int128_to_numericvar(int128, NumericVar *);
7640:	static void int64_to_numericvar(int64, NumericVar *);
9987:	static void ln_var(const NumericVar *, NumericVar *, int);
10107:	static void log_var(const NumericVar *, const NumericVar *, NumericVar *);
5282:	static Int128AggState *makeInt128AggState(FunctionCallInfo, _Bool);
5306:	static Int128AggState *makeInt128AggStateCurrentContext(_Bool);
4580:	static NumericAggState *makeNumericAggState(FunctionCallInfo, _Bool);
4605:	static NumericAggState *makeNumericAggStateCurrentContext(_Bool);
7437:	static Numeric make_result(const NumericVar *);
7328:	static Numeric make_result_opt_error(const NumericVar *, _Bool *);
9073:	static void mod_var(const NumericVar *, const NumericVar *, NumericVar *);
8205:	static void mul_var(const NumericVar *, const NumericVar *, NumericVar *, int);
1963:	static _Bool numeric_abbrev_abort(int, SortSupport);
1901:	static Datum numeric_abbrev_convert(Datum, SortSupport);
2120:	static Datum numeric_abbrev_convert_var(const NumericVar *, NumericSortSupport *);
2058:	static int numeric_cmp_abbrev(Datum, Datum, SortSupport);
2036:	static int numeric_fast_cmp(Datum, Datum, SortSupport);
788:	static _Bool numeric_is_integral(Numeric);
6196:	static Numeric numeric_poly_stddev_internal(Int128AggState *, _Bool, _Bool, _Bool *);
1335:	static int numeric_sign_internal(Numeric);
6043:	static Numeric numeric_stddev_internal(NumericAggState *, _Bool, _Bool, _Bool *);
7877:	static double numericvar_to_double_no_overflow(const NumericVar *);
7760:	static _Bool numericvar_to_int128(const NumericVar *, int128 *);
4252:	static _Bool numericvar_to_int32(const NumericVar *, int32 *);
7565:	static _Bool numericvar_to_int64(const NumericVar *, int64 *);
7687:	static _Bool numericvar_to_uint64(const NumericVar *, uint64 *);
10508:	static void power_ten_int(int, NumericVar *);
10167:	static void power_var(const NumericVar *, const NumericVar *, NumericVar *);
10331:	static void power_var_int(const NumericVar *, int, NumericVar *, int);
10794:	static void round_var(NumericVar *, int);
9004:	static int select_div_scale(const NumericVar *, const NumericVar *);
7008:	static void set_var_from_num(Numeric, NumericVar *);
6846:	static const char *set_var_from_str(const char *, const char *, NumericVar *);
7056:	static void set_var_from_var(const NumericVar *, NumericVar *);
9289:	static void sqrt_var(const NumericVar *, NumericVar *, int);
10962:	static void strip_var(NumericVar *);
10712:	static void sub_abs(const NumericVar *, const NumericVar *, NumericVar *);
8084:	static void sub_var(const NumericVar *, const NumericVar *, NumericVar *);
10900:	static void trunc_var(NumericVar *, int);
6822:	static void zero_var(NumericVar *);

File numutils.c:
102:	int32 pg_atoi(const char *, int, int);
338:	int pg_itoa(int16, char *);
523:	int pg_lltoa(int64, char *);
416:	int pg_ltoa(int32, char *);
187:	int16 pg_strtoint16(const char *);
263:	int32 pg_strtoint32(const char *);
621:	uint64 pg_strtouint64(const char *, char **, int);
436:	int pg_ulltoa_n(uint64, char *);
351:	int pg_ultoa_n(uint32, char *);
603:	char *pg_ultostr(char *, uint32);
563:	char *pg_ultostr_zeropad(char *, uint32, int32);
45:	static int decimalLength32(const uint32);
64:	static int decimalLength64(const uint64);

File objectaccess.c:
137:	void RunFunctionExecuteHook(Oid);
113:	_Bool RunNamespaceSearchHook(Oid, _Bool);
52:	void RunObjectDropHook(Oid, Oid, int, int);
90:	void RunObjectPostAlterHook(Oid, Oid, int, Oid, _Bool);
30:	void RunObjectPostCreateHook(Oid, Oid, int, _Bool);
74:	void RunObjectTruncateHook(Oid);

File objectaddress.c:
2366:	void check_object_ownership(Oid, ObjectType, ObjectAddress, Node *, Relation);
2858:	char *getObjectDescription(const ObjectAddress *, _Bool);
3958:	char *getObjectDescriptionOids(Oid, Oid);
4641:	char *getObjectIdentity(const ObjectAddress *, _Bool);
4656:	char *getObjectIdentityParts(const ObjectAddress *, List **, List **, _Bool);
4324:	char *getObjectTypeDescription(const ObjectAddress *, _Bool);
2810:	HeapTuple get_catalog_object_by_oid(Relation, AttrNumber, Oid);
929:	ObjectAddress get_object_address(ObjectType, Node *, Relation *, LOCKMODE, _Bool);
1224:	ObjectAddress get_object_address_rv(ObjectType, RangeVar *, List *, Relation *, LOCKMODE, _Bool);
2713:	AttrNumber get_object_attnum_acl(Oid);
2689:	AttrNumber get_object_attnum_name(Oid);
2697:	AttrNumber get_object_attnum_namespace(Oid);
2681:	AttrNumber get_object_attnum_oid(Oid);
2705:	AttrNumber get_object_attnum_owner(Oid);
2673:	int get_object_catcache_name(Oid);
2665:	int get_object_catcache_oid(Oid);
2649:	const char *get_object_class_descr(Oid);
2746:	_Bool get_object_namensp_unique(Oid);
2590:	Oid get_object_namespace(const ObjectAddress *);
2657:	Oid get_object_oid_index(Oid);
2728:	ObjectType get_object_type(Oid, Oid);
5937:	ObjectType get_relkind_objtype(char);
2758:	_Bool is_objectclass_supported(Oid);
4092:	Datum pg_describe_object(FunctionCallInfo);
2085:	Datum pg_get_object_address(FunctionCallInfo);
4120:	Datum pg_identify_object(FunctionCallInfo);
4250:	Datum pg_identify_object_as_address(FunctionCallInfo);
2629:	int read_objtype_from_string(const char *);
5882:	ArrayType *strlist_to_textarray(List *);
4567:	static void getConstraintTypeDescription(StringInfo, Oid, _Bool);
4050:	static void getOpFamilyDescription(StringInfo, Oid, _Bool);
5804:	static void getOpFamilyIdentity(StringInfo, Oid, List **, _Bool);
4604:	static void getProcedureTypeDescription(StringInfo, Oid, _Bool);
3975:	static void getRelationDescription(StringInfo, Oid, _Bool);
5848:	static void getRelationIdentity(StringInfo, Oid, List **, _Bool);
4504:	static void getRelationTypeDescription(StringInfo, Oid, int32, _Bool);
1544:	static ObjectAddress get_object_address_attrdef(ObjectType, List *, Relation *, LOCKMODE, _Bool);
1493:	static ObjectAddress get_object_address_attribute(ObjectType, List *, Relation *, LOCKMODE, _Bool);
1942:	static ObjectAddress get_object_address_defacl(List *, _Bool);
1669:	static ObjectAddress get_object_address_opcf(ObjectType, List *, _Bool);
1707:	static ObjectAddress get_object_address_opf_member(ObjectType, List *, _Bool);
1890:	static ObjectAddress get_object_address_publication_rel(List *, Relation *, _Bool);
1414:	static ObjectAddress get_object_address_relobject(ObjectType, List *, Relation *, _Bool);
1630:	static ObjectAddress get_object_address_type(ObjectType, TypeName *, _Bool);
1246:	static ObjectAddress get_object_address_unqualified(ObjectType, Value *, _Bool);
1819:	static ObjectAddress get_object_address_usermapping(List *, _Bool);
2775:	static const ObjectPropertyType *get_object_property_data(Oid);
1332:	static ObjectAddress get_relation_by_qualified_name(ObjectType, List *, Relation *, LOCKMODE, _Bool);
2058:	static List *textarray_to_strvaluelist(ArrayType *);

File obprintf.c:
186:	int __obstack_printf(struct obstack *, const char *, ...);
179:	int __obstack_vprintf(struct obstack *, const char *, struct __va_list_tag *);
120:	int __obstack_vprintf_internal(struct obstack *, const char *, struct __va_list_tag *, unsigned int);
40:	static int _IO_obstack_overflow(FILE *, int);
63:	static size_t _IO_obstack_xsputn(FILE *, const void *, size_t);

File obprintf_chk.c:
25:	int __obstack_printf_chk(struct obstack *, int, const char *, ...);

File obstack.c:
245:	void __GI__obstack_newchunk(struct obstack *, int);
322:	int _obstack_allocated_p(struct obstack *, void *);
144:	int _obstack_begin(struct obstack *, int, int, void *(*)(long), void (*)(void *));
191:	int _obstack_begin_1(struct obstack *, int, int, void *(*)(void *, long), void (*)(void *, void *), void *);
381:	int _obstack_memory_used(struct obstack *);
345:	void obstack_free(struct obstack *, void *);
408:	static void print_and_abort(void);

File offtime.c:
29:	int __offtime(time_t, long, struct tm *);

File oid.c:
167:	oidvector *buildoidvector(const Oid *, int);
336:	int oid_cmp(const void *, const void *);
354:	Datum oideq(FunctionCallInfo);
390:	Datum oidge(FunctionCallInfo);
399:	Datum oidgt(FunctionCallInfo);
117:	Datum oidin(FunctionCallInfo);
408:	Datum oidlarger(FunctionCallInfo);
381:	Datum oidle(FunctionCallInfo);
372:	Datum oidlt(FunctionCallInfo);
363:	Datum oidne(FunctionCallInfo);
127:	Datum oidout(FunctionCallInfo);
314:	Oid oidparse(Node *);
140:	Datum oidrecv(FunctionCallInfo);
151:	Datum oidsend(FunctionCallInfo);
417:	Datum oidsmaller(FunctionCallInfo);
426:	Datum oidvectoreq(FunctionCallInfo);
458:	Datum oidvectorge(FunctionCallInfo);
466:	Datum oidvectorgt(FunctionCallInfo);
194:	Datum oidvectorin(FunctionCallInfo);
450:	Datum oidvectorle(FunctionCallInfo);
442:	Datum oidvectorlt(FunctionCallInfo);
434:	Datum oidvectorne(FunctionCallInfo);
231:	Datum oidvectorout(FunctionCallInfo);
257:	Datum oidvectorrecv(FunctionCallInfo);
305:	Datum oidvectorsend(FunctionCallInfo);
35:	static Oid oidin_subr(const char *, char **);

File old_pthread_cond_broadcast.c:
28:	int __pthread_cond_broadcast_2_0(pthread_cond_2_0_t *);

File old_pthread_cond_destroy.c:
26:	int __pthread_cond_destroy_2_0(pthread_cond_2_0_t *);

File old_pthread_cond_init.c:
26:	int __pthread_cond_init_2_0(pthread_cond_2_0_t *, const pthread_condattr_t *);

File old_pthread_cond_signal.c:
28:	int __pthread_cond_signal_2_0(pthread_cond_2_0_t *);

File old_pthread_cond_timedwait.c:
28:	int __pthread_cond_timedwait_2_0(pthread_cond_2_0_t *, pthread_mutex_t *, const struct timespec *);

File old_pthread_cond_wait.c:
28:	int __pthread_cond_wait_2_0(pthread_cond_2_0_t *, pthread_mutex_t *);

File oldfmemopen.c:
202:	FILE *__old_fmemopen(void *, size_t, const char *);
187:	static int fmemopen_close(void *);
94:	static ssize_t fmemopen_read(void *, char *, size_t);
152:	static int fmemopen_seek(void *, off64_t *, int);
118:	static ssize_t fmemopen_write(void *, const char *, size_t);

File on_exit.c:
25:	int __on_exit(void (*)(int, void *), void *);

File opclasscmds.c:
817:	Oid AlterOpFamily(AlterOpFamilyStmt *);
333:	ObjectAddress DefineOpClass(CreateOpClassStmt *);
772:	ObjectAddress DefineOpFamily(CreateOpFamilyStmt *);
1708:	void IsThereOpClassInNamespace(const char *, Oid, Oid);
1731:	void IsThereOpFamilyInNamespace(const char *, Oid, Oid);
220:	Oid get_opclass_oid(Oid, List *, _Bool);
139:	Oid get_opfamily_oid(Oid, List *, _Bool);
881:	static void AlterOpFamilyAdd(AlterOpFamilyStmt *, Oid, Oid, int, int, int, List *);
1030:	static void AlterOpFamilyDrop(AlterOpFamilyStmt *, Oid, Oid, int, int, List *);
243:	static ObjectAddress CreateOpFamily(CreateOpFamilyStmt *, const char *, Oid, Oid);
162:	static HeapTuple OpClassCacheLookup(Oid, List *, _Bool);
81:	static HeapTuple OpFamilyCacheLookup(Oid, List *, _Bool);
1392:	static void addFamilyMember(List **, OpFamilyMember *);
1137:	static void assignOperTypes(OpFamilyMember *, Oid, Oid);
1203:	static void assignProcTypes(OpFamilyMember *, Oid, Oid, int);
1628:	static void dropOperators(List *, Oid, Oid, List *);
1668:	static void dropProcedures(List *, Oid, Oid, List *);
1108:	static void processTypesSpec(List *, Oid *, Oid *);
1429:	static void storeOperators(List *, Oid, Oid, List *, _Bool);
1536:	static void storeProcedures(List *, Oid, Oid, List *, _Bool);

File open64_2.c:
23:	int __open64_2(const char *, int);

File open_2.c:
23:	int __open_2(const char *, int);

File open_catalog.c:
39:	int __GI___open_catalog(const char *, const char *, const char *, __nl_catd);

File openat64_2.c:
23:	int __openat64_2(int, const char *, int);

File openat_2.c:
23:	int __openat_2(int, const char *, int);

File openchild.c:
52:	int _openchild(const char *, FILE **, FILE **);

File operatorcmds.c:
409:	ObjectAddress AlterOperator(AlterOperatorStmt *);
65:	ObjectAddress DefineOperator(List *, List *);
364:	void RemoveOperatorById(Oid);
308:	static Oid ValidateJoinEstimator(List *);
273:	static Oid ValidateRestrictionEstimator(List *);

File oracle_compat.c:
921:	Datum ascii(FunctionCallInfo);
338:	Datum btrim(FunctionCallInfo);
358:	Datum btrim1(FunctionCallInfo);
640:	Datum bytealtrim(FunctionCallInfo);
667:	Datum byteartrim(FunctionCallInfo);
613:	Datum byteatrim(FunctionCallInfo);
1002:	Datum chr(FunctionCallInfo);
111:	Datum initcap(FunctionCallInfo);
46:	Datum lower(FunctionCallInfo);
144:	Datum lpad(FunctionCallInfo);
694:	Datum ltrim(FunctionCallInfo);
714:	Datum ltrim1(FunctionCallInfo);
1110:	Datum repeat(FunctionCallInfo);
242:	Datum rpad(FunctionCallInfo);
742:	Datum rtrim(FunctionCallInfo);
762:	Datum rtrim1(FunctionCallInfo);
793:	Datum translate(FunctionCallInfo);
77:	Datum upper(FunctionCallInfo);
530:	static bytea *dobyteatrim(bytea *, bytea *, _Bool, _Bool);
374:	static text *dotrim(const char *, int, const char *, int, _Bool, _Bool);

File orclauses.c:
76:	void extract_restriction_or_clauses(PlannerInfo *);
260:	static void consider_new_or_clause(PlannerInfo *, RelOptInfo *, Expr *, RestrictInfo *);
162:	static Expr *extract_or_clause(RestrictInfo *, RelOptInfo *);
132:	static _Bool is_safe_restriction_clause_for(RestrictInfo *, RelOptInfo *);

File orderedsetaggs.c:
1273:	Datum hypothetical_cume_dist_final(FunctionCallInfo);
1290:	Datum hypothetical_dense_rank_final(FunctionCallInfo);
1253:	Datum hypothetical_percent_rank_final(FunctionCallInfo);
1239:	Datum hypothetical_rank_final(FunctionCallInfo);
1029:	Datum mode_final(FunctionCallInfo);
354:	Datum ordered_set_transition(FunctionCallInfo);
379:	Datum ordered_set_transition_multi(FunctionCallInfo);
606:	Datum percentile_cont_float8_final(FunctionCallInfo);
1000:	Datum percentile_cont_float8_multi_final(FunctionCallInfo);
615:	Datum percentile_cont_interval_final(FunctionCallInfo);
1015:	Datum percentile_cont_interval_multi_final(FunctionCallInfo);
423:	Datum percentile_disc_final(FunctionCallInfo);
724:	Datum percentile_disc_multi_final(FunctionCallInfo);
498:	static Datum float8_lerp(Datum, Datum, double);
1137:	static void hypothetical_check_argtypes(FunctionCallInfo, int, TupleDesc);
1166:	static int64 hypothetical_rank_common(FunctionCallInfo, int, int64 *);
507:	static Datum interval_lerp(Datum, Datum, double);
335:	static void ordered_set_shutdown(Datum);
115:	static OSAPerGroupState *ordered_set_startup(FunctionCallInfo, _Bool);
639:	static int pct_info_cmp(const void *, const void *);
521:	static Datum percentile_cont_final_common(FunctionCallInfo, Oid, LerpFunc);
842:	static Datum percentile_cont_multi_final_common(FunctionCallInfo, Oid, int16, _Bool, char, LerpFunc);
655:	static struct pct_info *setup_pct_info(int, Datum *, _Bool *, int64, _Bool);

File origin.c:
557:	void CheckPointReplicationOrigin(void);
510:	void ReplicationOriginShmemInit(void);
490:	Size ReplicationOriginShmemSize(void);
683:	void StartupReplicationOrigin(void);
1418:	Datum pg_replication_origin_advance(FunctionCallInfo);
1235:	Datum pg_replication_origin_create(FunctionCallInfo);
1272:	Datum pg_replication_origin_drop(FunctionCallInfo);
1291:	Datum pg_replication_origin_oid(FunctionCallInfo);
1453:	Datum pg_replication_origin_progress(FunctionCallInfo);
1351:	Datum pg_replication_origin_session_is_setup(FunctionCallInfo);
1367:	Datum pg_replication_origin_session_progress(FunctionCallInfo);
1334:	Datum pg_replication_origin_session_reset(FunctionCallInfo);
1312:	Datum pg_replication_origin_session_setup(FunctionCallInfo);
1406:	Datum pg_replication_origin_xact_reset(FunctionCallInfo);
1388:	Datum pg_replication_origin_xact_setup(FunctionCallInfo);
1478:	Datum pg_show_replication_origin_status(FunctionCallInfo);
872:	void replorigin_advance(RepOriginId, XLogRecPtr, XLogRecPtr, _Bool, _Bool);
209:	RepOriginId replorigin_by_name(const char *, _Bool);
449:	_Bool replorigin_by_oid(RepOriginId, _Bool, char **);
240:	RepOriginId replorigin_create(const char *);
414:	void replorigin_drop_by_name(const char *, _Bool, _Bool);
995:	XLogRecPtr replorigin_get_progress(RepOriginId, _Bool);
811:	void replorigin_redo(XLogReaderState *);
1185:	void replorigin_session_advance(XLogRecPtr, XLogRecPtr);
1203:	XLogRecPtr replorigin_session_get_progress(_Bool);
1156:	void replorigin_session_reset(void);
1068:	void replorigin_session_setup(RepOriginId);
1036:	static void ReplicationOriginExitCleanup(int, Datum);
183:	static void replorigin_check_prerequisites(_Bool, _Bool);
329:	static void replorigin_drop_guts(Relation, RepOriginId, _Bool);

File outfuncs.c:
4561:	char *bmsToString(const Bitmapset *);
4546:	char *nodeToString(const void *);
243:	void outBitmapset(StringInfo, const Bitmapset *);
259:	void outDatum(StringInfo, Datum, int, _Bool);
3832:	void outNode(StringInfo, const void *);
153:	void outToken(StringInfo, const char *);
3492:	static void _outAConst(StringInfo, const A_Const *);
3344:	static void _outAExpr(StringInfo, const A_Expr *);
3527:	static void _outA_ArrayExpr(StringInfo, const A_ArrayExpr *);
3508:	static void _outA_Indices(StringInfo, const A_Indices *);
3518:	static void _outA_Indirection(StringInfo, const A_Indirection *);
3502:	static void _outA_Star(StringInfo, const A_Star *);
785:	static void _outAgg(StringInfo, const Agg *);
2065:	static void _outAggPath(StringInfo, const AggPath *);
1167:	static void _outAggref(StringInfo, const Aggref *);
1057:	static void _outAlias(StringInfo, const Alias *);
2800:	static void _outAlterStatsStmt(StringInfo, const AlterStatsStmt *);
1387:	static void _outAlternativeSubPlan(StringInfo, const AlternativeSubPlan *);
428:	static void _outAppend(StringInfo, const Append *);
1911:	static void _outAppendPath(StringInfo, const AppendPath *);
2615:	static void _outAppendRelInfo(StringInfo, const AppendRelInfo *);
1443:	static void _outArrayCoerceExpr(StringInfo, const ArrayCoerceExpr *);
1511:	static void _outArrayExpr(StringInfo, const ArrayExpr *);
474:	static void _outBitmapAnd(StringInfo, const BitmapAnd *);
1834:	static void _outBitmapAndPath(StringInfo, const BitmapAndPath *);
1824:	static void _outBitmapHeapPath(StringInfo, const BitmapHeapPath *);
596:	static void _outBitmapHeapScan(StringInfo, const BitmapHeapScan *);
583:	static void _outBitmapIndexScan(StringInfo, const BitmapIndexScan *);
484:	static void _outBitmapOr(StringInfo, const BitmapOr *);
1845:	static void _outBitmapOrPath(StringInfo, const BitmapOrPath *);
1324:	static void _outBoolExpr(StringInfo, const BoolExpr *);
1611:	static void _outBooleanTest(StringInfo, const BooleanTest *);
3189:	static void _outCTECycleClause(StringInfo, const CTECycleClause *);
3178:	static void _outCTESearchClause(StringInfo, const CTESearchClause *);
1478:	static void _outCaseExpr(StringInfo, const CaseExpr *);
1501:	static void _outCaseTestExpr(StringInfo, const CaseTestExpr *);
1491:	static void _outCaseWhen(StringInfo, const CaseWhen *);
1549:	static void _outCoalesceExpr(StringInfo, const CoalesceExpr *);
1621:	static void _outCoerceToDomain(StringInfo, const CoerceToDomain *);
1634:	static void _outCoerceToDomainValue(StringInfo, const CoerceToDomainValue *);
1431:	static void _outCoerceViaIO(StringInfo, const CoerceViaIO *);
2997:	static void _outCollateClause(StringInfo, const CollateClause *);
1468:	static void _outCollateExpr(StringInfo, const CollateExpr *);
2947:	static void _outColumnDef(StringInfo, const ColumnDef *);
3460:	static void _outColumnRef(StringInfo, const ColumnRef *);
3206:	static void _outCommonTableExpr(StringInfo, const CommonTableExpr *);
1134:	static void _outConst(StringInfo, const Const *);
3647:	static void _outConstraint(StringInfo, const Constraint *);
1457:	static void _outConvertRowtypeExpr(StringInfo, const ConvertRowtypeExpr *);
2732:	static void _outCreateForeignTableStmt(StringInfo, const CreateForeignTableStmt *);
2786:	static void _outCreateStatsStmt(StringInfo, const CreateStatsStmt *);
2724:	static void _outCreateStmt(StringInfo, const CreateStmt *);
2707:	static void _outCreateStmtInfo(StringInfo, const CreateStmt *);
667:	static void _outCteScan(StringInfo, const CteScan *);
1656:	static void _outCurrentOfExpr(StringInfo, const CurrentOfExpr *);
1897:	static void _outCustomPath(StringInfo, const CustomPath *);
716:	static void _outCustomScan(StringInfo, const CustomScan *);
2819:	static void _outDeclareCursorStmt(StringInfo, const DeclareCursorStmt *);
2894:	static void _outDefElem(StringInfo, const DefElem *);
1280:	static void _outDistinctExpr(StringInfo, const DistinctExpr *);
2459:	static void _outEquivalenceClass(StringInfo, const EquivalenceClass *);
2486:	static void _outEquivalenceMember(StringInfo, const EquivalenceMember *);
2683:	static void _outExtensibleNode(StringInfo, const ExtensibleNode *);
1395:	static void _outFieldSelect(StringInfo, const FieldSelect *);
1407:	static void _outFieldStore(StringInfo, const FieldStore *);
3767:	static void _outForeignKeyCacheInfo(StringInfo, const ForeignKeyCacheInfo *);
2421:	static void _outForeignKeyOptInfo(StringInfo, const ForeignKeyOptInfo *);
1886:	static void _outForeignPath(StringInfo, const ForeignPath *);
698:	static void _outForeignScan(StringInfo, const ForeignScan *);
1723:	static void _outFromExpr(StringInfo, const FromExpr *);
2876:	static void _outFuncCall(StringInfo, const FuncCall *);
1238:	static void _outFuncExpr(StringInfo, const FuncExpr *);
636:	static void _outFunctionScan(StringInfo, const FunctionScan *);
495:	static void _outGather(StringInfo, const Gather *);
509:	static void _outGatherMerge(StringInfo, const GatherMerge *);
2216:	static void _outGatherMergePath(StringInfo, const GatherMergePath *);
1983:	static void _outGatherPath(StringInfo, const GatherPath *);
831:	static void _outGroup(StringInfo, const Group *);
2042:	static void _outGroupPath(StringInfo, const GroupPath *);
1934:	static void _outGroupResultPath(StringInfo, const GroupResultPath *);
1193:	static void _outGroupingFunc(StringInfo, const GroupingFunc *);
3126:	static void _outGroupingSet(StringInfo, const GroupingSet *);
2094:	static void _outGroupingSetData(StringInfo, const GroupingSetData *);
2103:	static void _outGroupingSetsPath(StringInfo, const GroupingSetsPath *);
912:	static void _outHash(StringInfo, const Hash *);
772:	static void _outHashJoin(StringInfo, const HashJoin *);
2249:	static void _outHashPath(StringInfo, const HashPath *);
2743:	static void _outImportForeignSchemaStmt(StringInfo, const ImportForeignSchemaStmt *);
889:	static void _outIncrementalSort(StringInfo, const IncrementalSort *);
2032:	static void _outIncrementalSortPath(StringInfo, const IncrementalSortPath *);
2574:	static void _outIndexClause(StringInfo, const IndexClause *);
3007:	static void _outIndexElem(StringInfo, const IndexElem *);
568:	static void _outIndexOnlyScan(StringInfo, const IndexOnlyScan *);
2396:	static void _outIndexOptInfo(StringInfo, const IndexOptInfo *);
1808:	static void _outIndexPath(StringInfo, const IndexPath *);
552:	static void _outIndexScan(StringInfo, const IndexScan *);
2756:	static void _outIndexStmt(StringInfo, const IndexStmt *);
1675:	static void _outInferenceElem(StringInfo, const InferenceElem *);
1103:	static void _outIntoClause(StringInfo, const IntoClause *);
734:	static void _outJoin(StringInfo, const Join *);
1707:	static void _outJoinExpr(StringInfo, const JoinExpr *);
1788:	static void _outJoinPathInfo(StringInfo, const JoinPath *);
362:	static void _outJoinPlanInfo(StringInfo, const Join *);
955:	static void _outLimit(StringInfo, const Limit *);
2203:	static void _outLimitPath(StringInfo, const LimitPath *);
200:	static void _outList(StringInfo, const List *);
944:	static void _outLockRows(StringInfo, const LockRows *);
2169:	static void _outLockRowsPath(StringInfo, const LockRowsPath *);
2916:	static void _outLockingClause(StringInfo, const LockingClause *);
844:	static void _outMaterial(StringInfo, const Material *);
1944:	static void _outMaterialPath(StringInfo, const MaterialPath *);
852:	static void _outMemoize(StringInfo, const Memoize *);
1954:	static void _outMemoizePath(StringInfo, const MemoizePath *);
442:	static void _outMergeAppend(StringInfo, const MergeAppend *);
1923:	static void _outMergeAppendPath(StringInfo, const MergeAppendPath *);
752:	static void _outMergeJoin(StringInfo, const MergeJoin *);
2235:	static void _outMergePath(StringInfo, const MergePath *);
2654:	static void _outMinMaxAggInfo(StringInfo, const MinMaxAggInfo *);
2117:	static void _outMinMaxAggPath(StringInfo, const MinMaxAggPath *);
1560:	static void _outMinMaxExpr(StringInfo, const MinMaxExpr *);
399:	static void _outModifyTable(StringInfo, const ModifyTable *);
2181:	static void _outModifyTablePath(StringInfo, const ModifyTablePath *);
3547:	static void _outMultiAssignRef(StringInfo, const MultiAssignRef *);
1254:	static void _outNamedArgExpr(StringInfo, const NamedArgExpr *);
678:	static void _outNamedTuplestoreScan(StringInfo, const NamedTuplestoreScan *);
742:	static void _outNestLoop(StringInfo, const NestLoop *);
971:	static void _outNestLoopParam(StringInfo, const NestLoopParam *);
2227:	static void _outNestPath(StringInfo, const NestPath *);
1666:	static void _outNextValueExpr(StringInfo, const NextValueExpr *);
2810:	static void _outNotifyStmt(StringInfo, const NotifyStmt *);
1295:	static void _outNullIfExpr(StringInfo, const NullIfExpr *);
1600:	static void _outNullTest(StringInfo, const NullTest *);
1732:	static void _outOnConflictExpr(StringInfo, const OnConflictExpr *);
1265:	static void _outOpExpr(StringInfo, const OpExpr *);
2864:	static void _outPLAssignStmt(StringInfo, const PLAssignStmt *);
1154:	static void _outParam(StringInfo, const Param *);
2530:	static void _outParamPathInfo(StringInfo, const ParamPathInfo *);
3469:	static void _outParamRef(StringInfo, const ParamRef *);
3803:	static void _outPartitionBoundSpec(StringInfo, const PartitionBoundSpec *);
3781:	static void _outPartitionElem(StringInfo, const PartitionElem *);
995:	static void _outPartitionPruneInfo(StringInfo, const PartitionPruneInfo *);
1032:	static void _outPartitionPruneStepCombine(StringInfo, const PartitionPruneStepCombine *);
1020:	static void _outPartitionPruneStepOp(StringInfo, const PartitionPruneStepOp *);
3818:	static void _outPartitionRangeDatum(StringInfo, const PartitionRangeDatum *);
3793:	static void _outPartitionSpec(StringInfo, const PartitionSpec *);
1004:	static void _outPartitionedRelPruneInfo(StringInfo, const PartitionedRelPruneInfo *);
1800:	static void _outPath(StringInfo, const Path *);
1763:	static void _outPathInfo(StringInfo, const Path *);
2499:	static void _outPathKey(StringInfo, const PathKey *);
2510:	static void _outPathTarget(StringInfo, const PathTarget *);
2641:	static void _outPlaceHolderInfo(StringInfo, const PlaceHolderInfo *);
2586:	static void _outPlaceHolderVar(StringInfo, const PlaceHolderVar *);
373:	static void _outPlan(StringInfo, const Plan *);
328:	static void _outPlanInfo(StringInfo, const Plan *);
1042:	static void _outPlanInvalItem(StringInfo, const PlanInvalItem *);
980:	static void _outPlanRowMark(StringInfo, const PlanRowMark *);
296:	static void _outPlannedStmt(StringInfo, const PlannedStmt *);
2261:	static void _outPlannerGlobal(StringInfo, const PlannerGlobal *);
2286:	static void _outPlannerInfo(StringInfo, const PlannerInfo *);
2668:	static void _outPlannerParamItem(StringInfo, const PlannerParamItem *);
391:	static void _outProjectSet(StringInfo, const ProjectSet *);
2006:	static void _outProjectSetPath(StringInfo, const ProjectSetPath *);
1995:	static void _outProjectionPath(StringInfo, const ProjectionPath *);
3031:	static void _outQuery(StringInfo, const Query *);
3594:	static void _outRangeFunction(StringInfo, const RangeFunction *);
3584:	static void _outRangeSubselect(StringInfo, const RangeSubselect *);
3619:	static void _outRangeTableFunc(StringInfo, const RangeTableFunc *);
3633:	static void _outRangeTableFuncCol(StringInfo, const RangeTableFuncCol *);
3607:	static void _outRangeTableSample(StringInfo, const RangeTableSample *);
3241:	static void _outRangeTblEntry(StringInfo, const RangeTblEntry *);
3320:	static void _outRangeTblFunction(StringInfo, const RangeTblFunction *);
1699:	static void _outRangeTblRef(StringInfo, const RangeTblRef *);
1066:	static void _outRangeVar(StringInfo, const RangeVar *);
3482:	static void _outRawStmt(StringInfo, const RawStmt *);
459:	static void _outRecursiveUnion(StringInfo, const RecursiveUnion *);
2155:	static void _outRecursiveUnionPath(StringInfo, const RecursiveUnionPath *);
2342:	static void _outRelOptInfo(StringInfo, const RelOptInfo *);
1418:	static void _outRelabelType(StringInfo, const RelabelType *);
3536:	static void _outResTarget(StringInfo, const ResTarget *);
2540:	static void _outRestrictInfo(StringInfo, const RestrictInfo *);
381:	static void _outResult(StringInfo, const Result *);
2856:	static void _outReturnStmt(StringInfo, const ReturnStmt *);
2081:	static void _outRollupData(StringInfo, const RollupData *);
1536:	static void _outRowCompareExpr(StringInfo, const RowCompareExpr *);
1524:	static void _outRowExpr(StringInfo, const RowExpr *);
2630:	static void _outRowIdentityVarInfo(StringInfo, const RowIdentityVarInfo *);
3157:	static void _outRowMarkClause(StringInfo, const RowMarkClause *);
1573:	static void _outSQLValueFunction(StringInfo, const SQLValueFunction *);
542:	static void _outSampleScan(StringInfo, const SampleScan *);
1310:	static void _outScalarArrayOpExpr(StringInfo, const ScalarArrayOpExpr *);
526:	static void _outScan(StringInfo, const Scan *);
351:	static void _outScanInfo(StringInfo, const Scan *);
2829:	static void _outSelectStmt(StringInfo, const SelectStmt *);
534:	static void _outSeqScan(StringInfo, const SeqScan *);
926:	static void _outSetOp(StringInfo, const SetOp *);
2139:	static void _outSetOpPath(StringInfo, const SetOpPath *);
3226:	static void _outSetOperationStmt(StringInfo, const SetOperationStmt *);
1645:	static void _outSetToDefault(StringInfo, const SetToDefault *);
881:	static void _outSort(StringInfo, const Sort *);
3557:	static void _outSortBy(StringInfo, const SortBy *);
3114:	static void _outSortGroupClause(StringInfo, const SortGroupClause *);
869:	static void _outSortInfo(StringInfo, const Sort *);
2024:	static void _outSortPath(StringInfo, const SortPath *);
2016:	static void _outSortPathInfo(StringInfo, const SortPath *);
2597:	static void _outSpecialJoinInfo(StringInfo, const SpecialJoinInfo *);
2447:	static void _outStatisticExtInfo(StringInfo, const StatisticExtInfo *);
3022:	static void _outStatsElem(StringInfo, const StatsElem *);
1351:	static void _outSubLink(StringInfo, const SubLink *);
1364:	static void _outSubPlan(StringInfo, const SubPlan *);
626:	static void _outSubqueryScan(StringInfo, const SubqueryScan *);
1876:	static void _outSubqueryScanPath(StringInfo, const SubqueryScanPath *);
1222:	static void _outSubscriptingRef(StringInfo, const SubscriptingRef *);
1083:	static void _outTableFunc(StringInfo, const TableFunc *);
647:	static void _outTableFuncScan(StringInfo, const TableFuncScan *);
2906:	static void _outTableLikeClause(StringInfo, const TableLikeClause *);
3334:	static void _outTableSampleClause(StringInfo, const TableSampleClause *);
1685:	static void _outTargetEntry(StringInfo, const TargetEntry *);
1856:	static void _outTidPath(StringInfo, const TidPath *);
1866:	static void _outTidRangePath(StringInfo, const TidRangePath *);
616:	static void _outTidRangeScan(StringInfo, const TidRangeScan *);
606:	static void _outTidScan(StringInfo, const TidScan *);
2937:	static void _outTriggerTransition(StringInfo, const TriggerTransition *);
2987:	static void _outTypeCast(StringInfo, const TypeCast *);
2972:	static void _outTypeName(StringInfo, const TypeName *);
899:	static void _outUnique(StringInfo, const Unique *);
1970:	static void _outUniquePath(StringInfo, const UniquePath *);
2054:	static void _outUpperUniquePath(StringInfo, const UpperUniquePath *);
3419:	static void _outValue(StringInfo, const Value *);
657:	static void _outValuesScan(StringInfo, const ValuesScan *);
1118:	static void _outVar(StringInfo, const Var *);
805:	static void _outWindowAgg(StringInfo, const WindowAgg *);
2128:	static void _outWindowAggPath(StringInfo, const WindowAggPath *);
3136:	static void _outWindowClause(StringInfo, const WindowClause *);
3569:	static void _outWindowDef(StringInfo, const WindowDef *);
1205:	static void _outWindowFunc(StringInfo, const WindowFunc *);
3102:	static void _outWithCheckOption(StringInfo, const WithCheckOption *);
3168:	static void _outWithClause(StringInfo, const WithClause *);
688:	static void _outWorkTableScan(StringInfo, const WorkTableScan *);
1584:	static void _outXmlExpr(StringInfo, const XmlExpr *);
2926:	static void _outXmlSerialize(StringInfo, const XmlSerialize *);
189:	static void outChar(StringInfo, char);

File pairingheap.c:
112:	void pairingheap_add(pairingheap *, pairingheap_node *);
42:	pairingheap *pairingheap_allocate(pairingheap_comparator, void *);
130:	pairingheap_node *pairingheap_first(pairingheap *);
63:	void pairingheap_free(pairingheap *);
170:	void pairingheap_remove(pairingheap *, pairingheap_node *);
145:	pairingheap_node *pairingheap_remove_first(pairingheap *);
79:	static pairingheap_node *merge(pairingheap *, pairingheap_node *, pairingheap_node *);
234:	static pairingheap_node *merge_children(pairingheap *, pairingheap_node *);

File parallel.c:
1215:	void AtEOSubXact_Parallel(_Bool, SubTransactionId);
1234:	void AtEOXact_Parallel(_Bool);
164:	ParallelContext *CreateParallelContext(const char *, const char *, int);
916:	void DestroyParallelContext(ParallelContext *);
1003:	void HandleParallelMessageInterrupt(void);
1014:	void HandleParallelMessages(void);
202:	void InitializeParallelDSM(ParallelContext *);
539:	void LaunchParallelWorkers(ParallelContext *);
990:	_Bool ParallelContextActive(void);
1251:	void ParallelWorkerMain(Datum);
1518:	void ParallelWorkerReportLastRecEnd(XLogRecPtr);
475:	void ReinitializeParallelDSM(ParallelContext *);
525:	void ReinitializeParallelWorkers(ParallelContext *, int);
659:	void WaitForParallelWorkersToAttach(ParallelContext *);
762:	void WaitForParallelWorkersToFinish(ParallelContext *);
1103:	static void HandleParallelMessage(ParallelContext *, int, StringInfo);
1562:	static parallel_worker_main_type LookupParallelWorkerFunction(const char *, const char *);
1536:	static void ParallelWorkerShutdown(int, Datum);
876:	static void WaitForParallelWorkersToExit(ParallelContext *);

File paramassign.c:
584:	int assign_special_exec_param(PlannerInfo *);
557:	Param *generate_new_exec_param(PlannerInfo *, Oid, int32, Oid);
508:	List *identify_current_nestloop_params(PlannerInfo *, Relids);
428:	void process_subquery_nestloop_params(PlannerInfo *, List *);
364:	Param *replace_nestloop_param_placeholdervar(PlannerInfo *, PlaceHolderVar *);
315:	Param *replace_nestloop_param_var(PlannerInfo *, Var *);
223:	Param *replace_outer_agg(PlannerInfo *, Aggref *);
269:	Param *replace_outer_grouping(PlannerInfo *, GroupingFunc *);
196:	Param *replace_outer_placeholdervar(PlannerInfo *, PlaceHolderVar *);
119:	Param *replace_outer_var(PlannerInfo *, Var *);
148:	static int assign_param_for_placeholdervar(PlannerInfo *, PlaceHolderVar *);
66:	static int assign_param_for_var(PlannerInfo *, Var *);

File params.c:
335:	char *BuildParamLogString(ParamListInfo, char **, int);
167:	Size EstimateParamListSpace(ParamListInfo);
407:	void ParamsErrorCallback(void *);
292:	ParamListInfo RestoreParamList(char **);
229:	void SerializeParamList(ParamListInfo, char **);
78:	ParamListInfo copyParamList(ParamListInfo);
44:	ParamListInfo makeParamList(int);
131:	static Node *paramlist_param_ref(ParseState *, ParamRef *);
120:	static void paramlist_parser_setup(ParseState *, void *);

File parse_agg.c:
2022:	void build_aggregate_combinefn_expr(Oid, Oid, Oid, Expr **);
2074:	void build_aggregate_deserialfn_expr(Oid, Expr **);
2098:	void build_aggregate_finalfn_expr(Oid *, int, Oid, Oid, Oid, Oid, Expr **);
2051:	void build_aggregate_serialfn_expr(Oid, Expr **);
1961:	void build_aggregate_transfn_expr(Oid *, int, int, _Bool, Oid, Oid, Oid, Oid, Expr **, Expr **);
1777:	List *expand_grouping_sets(List *, _Bool, int);
1880:	int get_aggregate_argtypes(Aggref *, Oid *);
1052:	void parseCheckAggregates(ParseState *, Query *);
1906:	Oid resolve_aggregate_transtype(Oid, Oid, Oid *, int);
102:	void transformAggregateCall(ParseState *, Aggref *, List *, List *, _Bool);
247:	Node *transformGroupingFunc(ParseState *, GroupingFunc *);
802:	void transformWindowFuncCall(ParseState *, WindowFunc *, WindowDef *);
617:	static int check_agg_arguments(ParseState *, List *, List *, Expr *);
698:	static _Bool check_agg_arguments_walker(Node *, check_agg_arguments_context *);
286:	static void check_agglevels_and_constraints(ParseState *, Node *);
1249:	static void check_ungrouped_columns(Node *, ParseState *, Query *, List *, List *, _Bool, List **);
1269:	static _Bool check_ungrouped_columns_walker(Node *, check_ungrouped_columns_context *);
1733:	static int cmp_list_len_asc(const ListCell *, const ListCell *);
1743:	static int cmp_list_len_contents_asc(const ListCell *, const ListCell *);
1631:	static List *expand_groupingset_node(GroupingSet *);
1457:	static void finalize_grouping_exprs(Node *, ParseState *, Query *, List *, _Bool, _Bool);
1476:	static _Bool finalize_grouping_exprs_walker(Node *, check_ungrouped_columns_context *);
2138:	static Node *make_agg_arg(Oid, Oid);

File parse_clause.c:
3265:	List *addTargetToSortList(ParseState *, TargetEntry *, List *, List *, SortBy *);
3463:	Index assignSortGroupRef(TargetEntry *, List *);
177:	int setTargetTable(ParseState *, RangeVar *, _Bool, _Bool, AclMode);
3504:	_Bool targetIsInSortList(TargetEntry *, Oid, List *);
2858:	List *transformDistinctClause(ParseState *, List **, List *, _Bool);
2942:	List *transformDistinctOnClause(ParseState *, List *, List **, List *);
113:	void transformFromClause(ParseState *, List *);
2505:	List *transformGroupClause(ParseState *, List *, List **, List **, List *, ParseExprKind, _Bool);
1753:	Node *transformLimitClause(ParseState *, Node *, ParseExprKind, const char *, LimitOption);
3170:	void transformOnConflictArbiter(ParseState *, OnConflictClause *, List **, Node **, Oid *);
2605:	List *transformSortClause(ParseState *, List *, List **, ParseExprKind, _Bool);
1726:	Node *transformWhereClause(ParseState *, Node *, ParseExprKind, const char *);
2638:	List *transformWindowDefinitions(ParseState *, List *, List **);
3408:	static List *addTargetToGroupList(ParseState *, TargetEntry *, List *, List *, int);
1579:	static Node *buildMergedJoinVar(ParseState *, JoinType, Var *, Var *);
1557:	static Var *buildVarFromNSColumn(ParseNamespaceColumn *);
1797:	static void checkExprIsVarFree(ParseState *, Node *, const char *);
1822:	static void checkTargetlistEntrySQL92(ParseState *, TargetEntry *, ParseExprKind);
252:	static int extractRemainingColumns(ParseNamespaceColumn *, List *, List **, List **, List **, ParseNamespaceColumn *);
1878:	static TargetEntry *findTargetlistEntrySQL92(ParseState *, Node *, List **, ParseExprKind);
2045:	static TargetEntry *findTargetlistEntrySQL99(ParseState *, Node *, List **, ParseExprKind);
3531:	static WindowClause *findWindowClause(List *, const char *);
2131:	static Node *flatten_grouping_sets(Node *, _Bool, _Bool *);
1010:	static ParseNamespaceItem *getNSItemForSpecialRelationTypes(ParseState *, RangeVar *);
3049:	static int get_matching_location(int, List *, List *);
3074:	static List *resolve_unique_index_expr(ParseState *, InferClause *, Relation);
1687:	static void setNamespaceColumnVisibility(List *, _Bool);
1704:	static void setNamespaceLateralState(List *, _Bool, _Bool);
3558:	static Node *transformFrameOffset(ParseState *, int, Oid, Oid, Oid *, Node *);
1053:	static Node *transformFromClauseItem(ParseState *, Node *, ParseNamespaceItem **, List **);
2240:	static Index transformGroupClauseExpr(List **, Bitmapset *, ParseState *, Node *, List **, List *, ParseExprKind, _Bool, _Bool);
2348:	static List *transformGroupClauseList(List **, ParseState *, List *, List **, List *, ParseExprKind, _Bool, _Bool);
2401:	static Node *transformGroupingSet(List **, ParseState *, GroupingSet *, List **, List *, ParseExprKind, _Bool, _Bool);
362:	static Node *transformJoinOnClause(ParseState *, JoinExpr *, List *);
303:	static Node *transformJoinUsingClause(ParseState *, List *, List *);
466:	static ParseNamespaceItem *transformRangeFunction(ParseState *, RangeFunction *);
402:	static ParseNamespaceItem *transformRangeSubselect(ParseState *, RangeSubselect *);
689:	static ParseNamespaceItem *transformRangeTableFunc(ParseState *, RangeTableFunc *);
907:	static TableSampleClause *transformRangeTableSample(ParseState *, RangeTableSample *);
392:	static ParseNamespaceItem *transformTableEntry(ParseState *, RangeVar *);

File parse_coerce.c:
2995:	_Bool IsBinaryCoercible(Oid, Oid);
2960:	_Bool IsPreferredType(TYPCATEGORY, Oid);
2941:	TYPCATEGORY TypeCategory(Oid);
556:	_Bool can_coerce_type(int, const Oid *, const Oid *, CoercionContext);
1702:	_Bool check_generic_type_consistency(const Oid *, const Oid *, int);
2917:	char *check_valid_internal_signature(Oid, const Oid *, int);
2840:	char *check_valid_polymorphic_signature(Oid, const Oid *, int);
1161:	Node *coerce_to_boolean(ParseState *, Node *, const char *);
1537:	Node *coerce_to_common_type(ParseState *, Node *, Oid, const char *);
676:	Node *coerce_to_domain(Node *, Oid, int32, Oid, CoercionContext, CoercionForm, int, _Bool);
1257:	Node *coerce_to_specific_type(ParseState *, Node *, Oid, const char *);
1208:	Node *coerce_to_specific_type_typmod(ParseState *, Node *, Oid, int32, const char *);
78:	Node *coerce_to_target_type(ParseState *, Node *, Oid, Oid, int32, CoercionContext, CoercionForm, int);
157:	Node *coerce_type(ParseState *, Node *, Oid, Oid, int32, CoercionContext, CoercionForm, int);
2096:	Oid enforce_generic_type_consistency(const Oid *, Oid *, int, Oid, _Bool);
3097:	CoercionPathType find_coercion_pathway(Oid, Oid, CoercionContext, Oid *);
3260:	CoercionPathType find_typmod_coercion_function(Oid, Oid *);
1277:	int parser_coercion_errposition(ParseState *, int, Node *);
1307:	Oid select_common_type(ParseState *, List *, const char *, Node **);
1609:	int32 select_common_typmod(ParseState *, List *, Oid);
1571:	_Bool verify_common_type(Oid, List *);
839:	static Node *build_coercion_expression(Node *, CoercionPathType, Oid, Oid, int32, CoercionContext, CoercionForm, int);
1012:	static Node *coerce_record_to_complex(ParseState *, Node *, Oid, CoercionContext, CoercionForm, int);
753:	static Node *coerce_type_typmod(Node *, Oid, int32, CoercionContext, CoercionForm, int, _Bool);
811:	static void hide_coercion_node(Node *);
3310:	static _Bool is_complex_array(Oid);
1443:	static Oid select_common_type_from_oids(int, const Oid *, _Bool);
3324:	static _Bool typeIsOfTypedTable(Oid, Oid);
1591:	static _Bool verify_common_type_from_oids(Oid, int, const Oid *);

File parse_collate.c:
177:	void assign_expr_collations(ParseState *, Node *);
155:	void assign_list_collations(ParseState *, List *);
101:	void assign_query_collations(ParseState *, Query *);
208:	Oid select_common_collation(ParseState *, List *, _Bool);
880:	static void assign_aggregate_collations(Aggref *, assign_collations_context *);
255:	static _Bool assign_collations_walker(Node *, assign_collations_context *);
954:	static void assign_hypothetical_collations(Aggref *, assign_collations_context *);
918:	static void assign_ordered_set_collations(Aggref *, assign_collations_context *);
126:	static _Bool assign_query_collations_walker(Node *, ParseState *);
779:	static void merge_collation_state(Oid, CollateStrength, int, Oid, int, assign_collations_context *);

File parse_cte.c:
569:	void analyzeCTETargetList(ParseState *, CommonTableExpr *, List *);
109:	List *transformWithClause(ParseState *, WithClause *);
796:	static void TopologicalSort(ParseState *, CteItem *, int);
241:	static void analyzeCTE(ParseState *, CommonTableExpr *);
848:	static void checkWellFormedRecursion(CteState *);
947:	static _Bool checkWellFormedRecursionWalker(Node *, CteState *);
1127:	static void checkWellFormedSelectStmt(SelectStmt *, CteState *);
646:	static void makeDependencyGraph(CteState *);
668:	static _Bool makeDependencyGraphWalker(Node *, CteState *);

File parse_enr.c:
26:	EphemeralNamedRelationMetadata get_visible_ENR(ParseState *, const char *);
20:	_Bool name_matches_visible_ENR(ParseState *, const char *);

File parse_expr.c:
3019:	const char *ParseExprKindName(ParseExprKind);
94:	Node *transformExpr(ParseState *, Node *, ParseExprKind);
852:	static _Bool exprIsNullConstant(Node *);
2962:	static Expr *make_distinct_op(ParseState *, List *, Node *, Node *, int);
2995:	static Node *make_nulltest_from_distinct(ParseState *, A_Expr *, Node *);
2716:	static Node *make_row_comparison_op(ParseState *, List *, List *, List *, int);
2918:	static Node *make_row_distinct_op(ParseState *, List *, RowExpr *, RowExpr *, int);
1225:	static Node *transformAExprBetween(ParseState *, A_Expr *);
974:	static Node *transformAExprDistinct(ParseState *, A_Expr *);
1067:	static Node *transformAExprIn(ParseState *, A_Expr *);
1025:	static Node *transformAExprNullIf(ParseState *, A_Expr *);
865:	static Node *transformAExprOp(ParseState *, A_Expr *);
960:	static Node *transformAExprOpAll(ParseState *, A_Expr *);
946:	static Node *transformAExprOpAny(ParseState *, A_Expr *);
1929:	static Node *transformArrayExpr(ParseState *, A_ArrayExpr *, Oid, Oid, int32);
1319:	static Node *transformBoolExpr(ParseState *, BoolExpr *);
2433:	static Node *transformBooleanTest(ParseState *, BooleanTest *);
1548:	static Node *transformCaseExpr(ParseState *, CaseExpr *);
2120:	static Node *transformCoalesceExpr(ParseState *, CoalesceExpr *);
2676:	static Node *transformCollateClause(ParseState *, CollateClause *);
444:	static Node *transformColumnRef(ParseState *, ColumnRef *);
2473:	static Node *transformCurrentOfExpr(ParseState *, CurrentOfExpr *);
112:	static Node *transformExprRecurse(ParseState *, Node *);
1355:	static Node *transformFuncCall(ParseState *, FuncCall *);
372:	static Node *transformIndirection(ParseState *, A_Indirection *);
2169:	static Node *transformMinMaxExpr(ParseState *, MinMaxExpr *);
1400:	static Node *transformMultiAssignRef(ParseState *, MultiAssignRef *);
828:	static Node *transformParamRef(ParseState *, ParamRef *);
2082:	static Node *transformRowExpr(ParseState *, RowExpr *, _Bool);
2208:	static Node *transformSQLValueFunction(ParseState *, SQLValueFunction *);
1688:	static Node *transformSubLink(ParseState *, SubLink *);
2592:	static Node *transformTypeCast(ParseState *, TypeCast *);
2525:	static Node *transformWholeRowRef(ParseState *, ParseNamespaceItem *, int, int);
2261:	static Node *transformXmlExpr(ParseState *, XmlExpr *);
2390:	static Node *transformXmlSerialize(ParseState *, XmlSerialize *);
326:	static void unknown_attribute(ParseState *, Node *, const char *, int);

File parse_func.c:
2145:	Oid LookupFuncName(List *, int, const Oid *, _Bool);
2207:	Oid LookupFuncWithArgs(ObjectType, ObjectWithArgs *, _Bool);
90:	Node *ParseFuncOrColumn(ParseState *, List *, List *, Node *, FuncCall *, _Bool, int);
2512:	void check_srf_call_placement(ParseState *, Node *, int);
1393:	FuncDetailCode func_get_detail(List *, List *, List *, int, Oid *, _Bool, _Bool, _Bool, Oid *, Oid *, _Bool *, int *, Oid *, Oid **, List **);
921:	int func_match_argtypes(int, Oid *, FuncCandidateList, FuncCandidateList *);
1006:	FuncCandidateList func_select_candidate(int, Oid *, FuncCandidateList);
2031:	const char *func_signature_string(List *, int, List *, const Oid *);
1994:	const char *funcname_signature_string(const char *, int, List *, const Oid *);
1826:	void make_fn_arguments(ParseState *, List *, Oid *, Oid *);
1882:	static Oid FuncNameAsType(List *);
2050:	static Oid LookupFuncNameInternal(ObjectType, List *, int, const Oid *, _Bool, _Bool, FuncLookupError *);
1913:	static Node *ParseComplexProjection(ParseState *, const char *, Node *, int);
1742:	static void unify_hypothetical_args(ParseState *, List *, int, Oid *, Oid *);

File parse_node.c:
161:	void cancel_parser_errposition_callback(ParseCallbackState *);
77:	void free_parsestate(ParseState *);
352:	Const *make_const(ParseState *, Value *, int);
44:	ParseState *make_parsestate(ParseState *);
111:	int parser_errposition(ParseState *, int);
145:	void setup_parser_errposition_callback(ParseCallbackState *, ParseState *, int);
248:	SubscriptingRef *transformContainerSubscripts(ParseState *, Node *, Oid, int32, List *, _Bool);
194:	void transformContainerType(Oid *, int32 *);
175:	static void pcb_error_callback(void *);

File parse_oper.c:
101:	Oid LookupOperName(ParseState *, List *, Oid, Oid, _Bool, int);
145:	Oid LookupOperWithArgs(ObjectWithArgs *, _Bool);
462:	Operator compatible_oper(ParseState *, List *, Oid, Oid, _Bool, int);
499:	Oid compatible_oper_opid(List *, Oid, Oid, _Bool);
192:	void get_sort_group_operators(Oid, _Bool, _Bool, _Bool, Oid *, Oid *, Oid *, _Bool *);
530:	Operator left_oper(ParseState *, List *, Oid, _Bool, int);
672:	Expr *make_op(ParseState *, List *, Node *, Node *, Node *, int);
783:	Expr *make_scalar_array_op(ParseState *, List *, _Bool, Node *, Node *, int);
382:	Operator oper(ParseState *, List *, Oid, Oid, _Bool, int);
257:	Oid oprfuncid(Operator);
250:	Oid oprid(Operator);
1049:	static void InvalidateOprCacheCallBack(Datum, int, uint32);
274:	static Oid binary_oper_exact(List *, Oid, Oid);
994:	static Oid find_oper_cache_entry(OprCacheKey *);
1033:	static void make_oper_cache_entry(OprCacheKey *, Oid);
950:	static _Bool make_oper_cache_key(ParseState *, OprCacheKey *, List *, Oid, Oid, int);
634:	static void op_error(ParseState *, List *, char, Oid, Oid, FuncDetailCode, int);
614:	static const char *op_signature_string(List *, char, Oid, Oid);
324:	static FuncDetailCode oper_select_candidate(int, Oid *, FuncCandidateList, Oid *);

File parse_param.c:
272:	void check_variable_parameters(ParseState *, Query *);
67:	void parse_fixed_parameters(ParseState *, Oid *, int);
83:	void parse_variable_parameters(ParseState *, Oid **, int *);
334:	_Bool query_contains_extern_params(Query *);
290:	static _Bool check_parameter_resolution_walker(Node *, ParseState *);
99:	static Node *fixed_paramref_hook(ParseState *, ParamRef *);
342:	static _Bool query_contains_extern_params_walker(Node *, void *);
190:	static Node *variable_coerce_param_hook(ParseState *, Param *, Oid, int32, int);
131:	static Node *variable_paramref_hook(ParseState *, ParamRef *);

File parse_relation.c:
537:	CommonTableExpr *GetCTEForRTE(ParseState *, RangeTblEntry *, int);
490:	ParseNamespaceItem *GetNSItemByRangeTablePosn(ParseState *, int, int);
517:	RangeTblEntry *GetRTEByRangeTablePosn(ParseState *, int, int);
2585:	void addNSItemToQuery(ParseState *, ParseNamespaceItem *, _Bool, _Bool, _Bool);
1402:	ParseNamespaceItem *addRangeTableEntry(ParseState *, RangeVar *, Alias *, _Bool, _Bool);
2274:	ParseNamespaceItem *addRangeTableEntryForCTE(ParseState *, CommonTableExpr *, Index, RangeVar *, _Bool);
2432:	ParseNamespaceItem *addRangeTableEntryForENR(ParseState *, RangeVar *, _Bool);
1668:	ParseNamespaceItem *addRangeTableEntryForFunction(ParseState *, List *, List *, List *, RangeFunction *, _Bool, _Bool);
2170:	ParseNamespaceItem *addRangeTableEntryForJoin(ParseState *, List *, ParseNamespaceColumn *, JoinType, int, List *, List *, List *, Alias *, Alias *, _Bool);
1502:	ParseNamespaceItem *addRangeTableEntryForRelation(ParseState *, Relation, int, Alias *, _Bool, _Bool);
1572:	ParseNamespaceItem *addRangeTableEntryForSubquery(ParseState *, Query *, Alias *, _Bool, _Bool);
1991:	ParseNamespaceItem *addRangeTableEntryForTableFunc(ParseState *, TableFunc *, Alias *, _Bool, _Bool);
2081:	ParseNamespaceItem *addRangeTableEntryForValues(ParseState *, List *, List *, List *, List *, Alias *, _Bool, _Bool);
3427:	int attnameAttNum(Relation, const char *, _Bool);
3477:	const NameData *attnumAttName(Relation, int);
3519:	Oid attnumCollationId(Relation, int);
3499:	Oid attnumTypeId(Relation, int);
414:	void checkNameSpaceConflicts(ParseState *, List *, List *);
857:	Node *colNameToVar(ParseState *, const char *, _Bool, int);
3599:	void errorMissingColumn(ParseState *, const char *, const char *, int);
3538:	void errorMissingRTE(ParseState *, RangeVar *);
3142:	List *expandNSItemAttrs(ParseState *, ParseNamespaceItem *, int, int);
3083:	List *expandNSItemVars(ParseNamespaceItem *, int, int, List **);
2625:	void expandRTE(RangeTblEntry *, int, int, int, _Bool, List **, List **);
3403:	RowMarkClause *get_parse_rowmark(Query *, Index);
3239:	_Bool get_rte_attribute_is_dropped(RangeTblEntry *, AttrNumber);
3201:	char *get_rte_attribute_name(RangeTblEntry *, AttrNumber);
3383:	TargetEntry *get_tle_by_resno(List *, AttrNumber);
2541:	_Bool isLockedRefname(ParseState *, const char *);
3671:	_Bool isQueryUsingTempRelation(Query *);
1087:	void markVarForSelectPriv(ParseState *, Var *);
1350:	Relation parserOpenTable(ParseState *, const RangeVar *, int);
109:	ParseNamespaceItem *refnameNamespaceItem(ParseState *, const char *, const char *, int, int *);
668:	Node *scanNSItemForColumn(ParseState *, ParseNamespaceItem *, int, const char *, int);
262:	CommonTableExpr *scanNameSpaceForCTE(ParseState *, const char *, Index *);
315:	_Bool scanNameSpaceForENR(ParseState *, const char *);
1287:	static ParseNamespaceItem *buildNSItemFromLists(RangeTblEntry *, Index, List *, List *, List *);
1230:	static ParseNamespaceItem *buildNSItemFromTupleDesc(RangeTblEntry *, Index, TupleDesc);
1114:	static void buildRelationAliases(TupleDesc, Alias *, Alias *);
463:	static void check_lateral_ref_ok(ParseState *, ParseNamespaceItem *, int);
1191:	static char *chooseScalarFunctionAlias(Node *, char *, Alias *, int);
2977:	static void expandRelation(Oid, Alias *, int, int, int, _Bool, List **, List **);
3002:	static void expandTupleDesc(TupleDesc, Alias *, int, int, int, int, int, _Bool, List **, List **);
293:	static _Bool isFutureCTE(ParseState *, const char *);
3677:	static _Bool isQueryUsingTempRelation_walker(Node *, void *);
1007:	static void markRTEForSelectPriv(ParseState *, int, AttrNumber);
180:	static ParseNamespaceItem *scanNameSpaceForRefname(ParseState *, const char *, int);
220:	static ParseNamespaceItem *scanNameSpaceForRelid(ParseState *, Oid, int);
774:	static int scanRTEForColumn(ParseState *, RangeTblEntry *, Alias *, const char *, int, int, FuzzyAttrMatchState *);
932:	static FuzzyAttrMatchState *searchRangeTableForCol(ParseState *, const char *, const char *, int);
336:	static RangeTblEntry *searchRangeTableForRel(ParseState *, RangeVar *);
3458:	static int specialAttNum(const char *);
567:	static void updateFuzzyAttrMatchState(int, FuzzyAttrMatchState *, RangeTblEntry *, const char *, const char *, int);

File parse_target.c:
1689:	char *FigureColname(Node *);
1708:	char *FigureIndexColname(Node *);
1011:	List *checkInsertTargets(ParseState *, List *, List **);
1509:	TupleDesc expandRecordVariable(ParseState *, Var *, int);
320:	void markTargetListOrigins(ParseState *, List *);
290:	void resolveTargetListUnknowns(ParseState *, List *);
454:	Expr *transformAssignedExpr(ParseState *, Expr *, ParseExprKind, const char *, int, List *, int);
685:	Node *transformAssignmentIndirection(ParseState *, Node *, const char *, _Bool, Oid, int32, Oid, List *, ListCell *, Node *, CoercionContext, int);
222:	List *transformExpressionList(ParseState *, List *, ParseExprKind, _Bool);
77:	TargetEntry *transformTargetEntry(ParseState *, Node *, Node *, ParseExprKind, char *, _Bool);
123:	List *transformTargetList(ParseState *, List *, ParseExprKind);
621:	void updateTargetListEntry(ParseState *, TargetEntry *, char *, int, List *, int);
1289:	static List *ExpandAllTables(ParseState *, int);
1116:	static List *ExpandColumnRefStar(ParseState *, ColumnRef *, _Bool);
1340:	static List *ExpandIndirectionStar(ParseState *, A_Indirection *, _Bool, ParseExprKind);
1414:	static List *ExpandRowReference(ParseState *, Node *, _Bool);
1367:	static List *ExpandSingleTable(ParseState *, ParseNamespaceItem *, int, int, _Bool);
1728:	static int FigureColnameInternal(Node *, char **);
345:	static void markTargetListOrigin(ParseState *, TargetEntry *, Var *, int);
903:	static Node *transformAssignmentSubscripts(ParseState *, Node *, const char *, Oid, int32, Oid, List *, _Bool, List *, ListCell *, Node *, CoercionContext, int);

File parse_type.c:
538:	Oid GetColumnDefCollation(ParseState *, ColumnDef *, Oid);
513:	Oid LookupCollation(ParseState *, List *, int);
38:	Type LookupTypeName(ParseState *, const TypeName *, int32 *, _Bool);
73:	Type LookupTypeNameExtended(ParseState *, const TypeName *, int32 *, _Bool, _Bool);
232:	Oid LookupTypeNameOid(ParseState *, const TypeName *, _Bool);
490:	char *TypeNameListToString(List *);
476:	char *TypeNameToString(const TypeName *);
778:	void parseTypeString(const char *, Oid *, int32 *, _Bool);
652:	Datum stringTypeDatum(Type, char *, int32);
607:	_Bool typeByVal(Type);
597:	int16 typeLen(Type);
687:	Oid typeOrDomainTypeRelid(Oid);
731:	TypeName *typeStringToTypeName(const char *);
638:	Oid typeTypeCollation(Type);
588:	Oid typeTypeId(Type);
617:	char *typeTypeName(Type);
628:	Oid typeTypeRelid(Type);
576:	Type typeidType(Oid);
666:	Oid typeidTypeRelid(Oid);
264:	Type typenameType(ParseState *, const TypeName *, int32 *);
291:	Oid typenameTypeId(ParseState *, const TypeName *);
310:	void typenameTypeIdAndMod(ParseState *, const TypeName *, Oid *, int32 *);
437:	static void appendTypeNameToBuffer(const TypeName *, StringInfo);
717:	static void pts_error_callback(void *);
332:	static int32 typenameTypeMod(ParseState *, const TypeName *, Type);

File parse_utilcmd.c:
1197:	List *expandTableLikeClause(RangeVar *, TableLikeClause *);
1522:	IndexStmt *generateClonedIndexStmt(RangeVar *, Relation, const AttrMap *, Oid *);
3296:	AlterTableStmt *transformAlterTableStmt(Oid, AlterTableStmt *, const char *, List **, List **);
3826:	List *transformCreateSchemaStmt(CreateSchemaStmt *);
165:	List *transformCreateStmt(CreateStmt *, const char *);
2816:	IndexStmt *transformIndexStmt(Oid, IndexStmt *, const char *);
4004:	PartitionBoundSpec *transformPartitionBound(ParseState *, Relation, PartitionBoundSpec *);
2986:	void transformRuleStmt(RuleStmt *, const char *, List **, Node **);
2911:	CreateStatsStmt *transformStatsStmt(Oid, CreateStatsStmt *, const char *);
1880:	static CreateStatsStmt *generateClonedExtStatsStmt(RangeVar *, Oid, Oid);
369:	static void generateSerialExtraStmts(CreateStmtContext *, ColumnDef *, Oid, List *, _Bool, _Bool, char **, char **);
1999:	static List *get_collation(Oid, Oid);
2033:	static List *get_opclass(Oid, Oid);
3931:	static void setSchemaName(char *, char **);
2716:	static void transformCheckConstraints(CreateStmtContext *, _Bool);
531:	static void transformColumnDefinition(CreateStmtContext *, ColumnDef *);
3773:	static void transformColumnType(CreateStmtContext *, ColumnDef *);
3658:	static void transformConstraintAttrs(CreateStmtContext *, List *);
2701:	static void transformExtendedStatistics(CreateStmtContext *);
2745:	static void transformFKConstraints(CreateStmtContext *, _Bool, _Bool);
2167:	static IndexStmt *transformIndexConstraint(Constraint *, CreateStmtContext *);
2065:	static void transformIndexConstraints(CreateStmtContext *);
1459:	static void transformOfType(CreateStmtContext *, TypeName *);
4314:	static Const *transformPartitionBoundValue(ParseState *, Node *, const char *, Oid, int32, Oid);
3951:	static void transformPartitionCmd(CreateStmtContext *, PartitionCmd *);
4158:	static List *transformPartitionRangeBounds(ParseState *, List *, Relation);
877:	static void transformTableConstraint(CreateStmtContext *, Constraint *);
960:	static void transformTableLikeClause(CreateStmtContext *, TableLikeClause *);
4275:	static void validateInfiniteBounds(ParseState *, List *);

File parser.c:
111:	int base_yylex(YYSTYPE *, int *, core_yyscan_t);
42:	List *raw_parser(const char *, RawParseMode);
326:	static _Bool check_uescapechar(unsigned char);
316:	static void check_unicode_value(pg_wchar);
302:	static unsigned int hexval(unsigned char);
346:	static char *str_udeescape(const char *, char, int, core_yyscan_t);

File partbounds.c:
3156:	void check_default_partition_contents(Relation, Relation, PartitionBoundSpec *);
2797:	void check_new_partition_bound(char *, Relation, PartitionBoundSpec *, ParseState *);
4631:	uint64 compute_partition_hash_value(int, FmgrInfo *, Oid *, Datum *, _Bool *);
3319:	int get_hash_partition_greatest_modulus(PartitionBoundInfo);
249:	List *get_qual_from_partbound(Relation, Relation, PartitionBoundSpec *);
907:	PartitionBoundInfo partition_bounds_copy(PartitionBoundInfo, PartitionKey);
304:	PartitionBoundInfo partition_bounds_create(PartitionBoundSpec **, int, PartitionKey, int **);
801:	_Bool partition_bounds_equal(int, int16 *, _Bool *, PartitionBoundInfo, PartitionBoundInfo);
1006:	PartitionBoundInfo partition_bounds_merge(int, FmgrInfo *, Oid *, RelOptInfo *, RelOptInfo *, JoinType, List **, List **);
3643:	int partition_hash_bsearch(PartitionBoundInfo, int, int);
3512:	int partition_list_bsearch(FmgrInfo *, Oid *, PartitionBoundInfo, Datum, _Bool *);
3600:	int partition_range_datum_bsearch(FmgrInfo *, Oid *, PartitionBoundInfo, int, Datum *, _Bool *);
3461:	int32 partition_rbound_datum_cmp(FmgrInfo *, Oid *, Datum *, PartitionRangeDatumKind *, Datum *, int);
2738:	_Bool partitions_are_ordered(PartitionBoundInfo, int);
4680:	Datum satisfies_hash_partition(FunctionCallInfo);
2663:	static void add_merged_range_bounds(int, FmgrInfo *, Oid *, PartitionRangeBound *, PartitionRangeBound *, int, List **, List **, List **);
2409:	static PartitionBoundInfo build_merged_partition_bounds(char, List *, List *, List *, int, int);
2550:	static _Bool compare_range_partitions(int, FmgrInfo *, Oid *, PartitionRangeBound *, PartitionRangeBound *, PartitionRangeBound *, PartitionRangeBound *, int *, int *);
357:	static PartitionBoundInfo create_hash_bounds(PartitionBoundSpec **, int, PartitionKey, int **);
440:	static PartitionBoundInfo create_list_bounds(PartitionBoundSpec **, int, PartitionKey, int **);
598:	static PartitionBoundInfo create_range_bounds(PartitionBoundSpec **, int, PartitionKey, int **);
2276:	static void fix_merged_indexes(PartitionMap *, PartitionMap *, int, List *);
1723:	static void free_partition_map(PartitionMap *);
2330:	static void generate_matching_part_pairs(RelOptInfo *, RelOptInfo *, PartitionMap *, PartitionMap *, int, List **, List **);
2599:	static void get_merged_range_bounds(int, FmgrInfo *, Oid *, JoinType, PartitionRangeBound *, PartitionRangeBound *, PartitionRangeBound *, PartitionRangeBound *, int, int, PartitionRangeBound *, PartitionRangeBound *);
3737:	static Oid get_partition_operator(PartitionKey, int, StrategyNumber, _Bool *);
3887:	static List *get_qual_for_hash(Relation, PartitionBoundSpec *);
3970:	static List *get_qual_for_list(Relation, PartitionBoundSpec *);
4179:	static List *get_qual_for_range(Relation, PartitionBoundSpec *, _Bool);
4541:	static void get_range_key_properties(PartitionKey, int, PartitionRangeDatum *, PartitionRangeDatum *, ListCell **, Expr **, Const **, Const **);
4585:	static List *get_range_nulltest(PartitionKey);
2469:	static int get_range_partition(RelOptInfo *, PartitionBoundInfo, int *, PartitionRangeBound *, PartitionRangeBound *);
2490:	static int get_range_partition_internal(PartitionBoundInfo, int *, PartitionRangeBound *, PartitionRangeBound *);
1702:	static void init_partition_map(RelOptInfo *, PartitionMap *);
1734:	static _Bool is_dummy_partition(RelOptInfo *, int);
3333:	static PartitionRangeBound *make_one_partition_rbound(PartitionKey, int, List *, _Bool);
3773:	static Expr *make_partition_op_expr(PartitionKey, int, uint16, Expr *, Expr *);
2148:	static void merge_default_partitions(PartitionMap *, PartitionMap *, _Bool, _Bool, int, int, JoinType, int *, int *);
1089:	static PartitionBoundInfo merge_list_bounds(FmgrInfo *, Oid *, RelOptInfo *, RelOptInfo *, JoinType, List **, List **);
1753:	static int merge_matching_partitions(PartitionMap *, PartitionMap *, int, int, int *);
2038:	static void merge_null_partitions(PartitionMap *, PartitionMap *, _Bool, _Bool, int, int, JoinType, int *, int *);
2258:	static int merge_partition_with_dummy(PartitionMap *, int, int *);
1397:	static PartitionBoundInfo merge_range_bounds(int, FmgrInfo *, Oid *, RelOptInfo *, RelOptInfo *, JoinType, List **, List **);
3492:	static int32 partition_hbound_cmp(int, int, int, int);
3558:	static int partition_range_bsearch(int, FmgrInfo *, Oid *, PartitionBoundInfo, PartitionRangeBound *, int32 *);
3393:	static int32 partition_rbound_cmp(int, FmgrInfo *, Oid *, Datum *, PartitionRangeDatumKind *, _Bool, PartitionRangeBound *);
1953:	static int process_inner_partition(PartitionMap *, PartitionMap *, _Bool, _Bool, int, int, JoinType, int *, int *);
1871:	static int process_outer_partition(PartitionMap *, PartitionMap *, _Bool, _Bool, int, int, JoinType, int *, int *);
3683:	static int32 qsort_partition_hbound_cmp(const void *, const void *);
3698:	static int32 qsort_partition_list_value_cmp(const void *, const void *, void *);
3715:	static int32 qsort_partition_rbound_cmp(const void *, const void *, void *);

File partcache.c:
54:	PartitionKey RelationGetPartitionKey(Relation);
276:	List *RelationGetPartitionQual(Relation);
298:	Expr *get_partition_qual_relid(Oid);
81:	static void RelationBuildPartitionKey(Relation);
336:	static List *generate_partition_qual(Relation);

File partdesc.c:
377:	PartitionDirectory CreatePartitionDirectory(MemoryContext, _Bool);
438:	void DestroyPartitionDirectory(PartitionDirectory);
410:	PartitionDesc PartitionDirectoryLookup(PartitionDirectory, Relation);
72:	PartitionDesc RelationGetPartitionDesc(Relation, _Bool);
455:	Oid get_default_oid_from_partdesc(PartitionDesc);
135:	static PartitionDesc RelationBuildPartitionDesc(Relation, _Bool);

File partition.c:
313:	Oid get_default_partition_oid(Oid);
133:	List *get_partition_ancestors(Oid);
54:	Oid get_partition_parent(Oid, _Bool);
368:	List *get_proposed_default_constraint(List *);
253:	_Bool has_partition_attrs(Relation, Bitmapset *, _Bool *);
175:	Oid index_get_partition(Relation, Oid);
221:	List *map_partition_varattnos(List *, int, Relation, Relation);
338:	void update_default_partition_oid(Oid, Oid);
152:	static void get_partition_ancestors_worker(Relation, Oid, List **);
86:	static Oid get_partition_parent_worker(Relation, Oid, _Bool *);

File partitionfuncs.c:
215:	Datum pg_partition_ancestors(FunctionCallInfo);
178:	Datum pg_partition_root(FunctionCallInfo);
65:	Datum pg_partition_tree(FunctionCallInfo);
35:	static _Bool check_rel_can_be_partition(Oid);

File partprune.c:
819:	Bitmapset *get_matching_partitions(PartitionPruneContext *, List *);
222:	PartitionPruneInfo *make_partition_pruneinfo(PlannerInfo *, RelOptInfo *, List *, List *);
753:	Bitmapset *prune_append_rel_partitions(RelOptInfo *);
394:	static List *add_part_relids(List *, Bitmapset *);
717:	static void gen_partprune_steps(RelOptInfo *, List *, PartClauseTarget, GeneratePruningStepsContext *);
963:	static List *gen_partprune_steps_internal(GeneratePruningStepsContext *, List *);
1348:	static PartitionPruneStep *gen_prune_step_combine(GeneratePruningStepsContext *, List *, PartitionPruneCombineOp);
1315:	static PartitionPruneStep *gen_prune_step_op(GeneratePruningStepsContext *, StrategyNumber, _Bool, List *, List *, Bitmapset *);
1385:	static List *gen_prune_steps_from_opexps(GeneratePruningStepsContext *, List **, Bitmapset *);
2584:	static PruneStepResult *get_matching_hash_bounds(PartitionPruneContext *, StrategyNumber, Datum *, int, FmgrInfo *, Bitmapset *);
2661:	static PruneStepResult *get_matching_list_bounds(PartitionPruneContext *, StrategyNumber, Datum, int, FmgrInfo *, Bitmapset *);
2872:	static PruneStepResult *get_matching_range_bounds(PartitionPruneContext *, StrategyNumber, Datum *, int, FmgrInfo *, Bitmapset *);
3301:	static Bitmapset *get_partkey_exec_paramids(List *);
2373:	static List *get_steps_using_prefix(GeneratePruningStepsContext *, StrategyNumber, _Bool, Expr *, Oid, int, Bitmapset *, List *);
2425:	static List *get_steps_using_prefix_recurse(GeneratePruningStepsContext *, StrategyNumber, _Bool, Expr *, Oid, int, Bitmapset *, List *, ListCell *, List *, List *);
440:	static List *make_partitionedrel_pruneinfo(PlannerInfo *, RelOptInfo *, List *, Bitmapset *, int *, Bitmapset **);
3592:	static PartClauseMatchStatus match_boolean_partition_clause(Oid, Expr *, Expr *, Expr **);
1795:	static PartClauseMatchStatus match_clause_to_partition_key(GeneratePruningStepsContext *, Expr *, Expr *, int, _Bool *, PartClauseInfo **, List **);
3663:	static void partkey_datum_from_expr(PartitionPruneContext *, Expr *, int, Datum *, _Bool *);
3337:	static PruneStepResult *perform_pruning_base_step(PartitionPruneContext *, PartitionPruneStepOp *);
3485:	static PruneStepResult *perform_pruning_combine_step(PartitionPruneContext *, PartitionPruneStepCombine *, PruneStepResult **);
3267:	static Bitmapset *pull_exec_paramids(Expr *);
3277:	static _Bool pull_exec_paramids_walker(Node *, Bitmapset **);

File path.c:
254:	void canonicalize_path(char *);
185:	void cleanup_path(char *);
103:	char *first_dir_separator(const char *);
120:	char *first_path_var_separator(const char *);
776:	void get_doc_path(const char *, char *);
713:	void get_etc_path(const char *, char *);
807:	_Bool get_home_path(char *);
785:	void get_html_path(const char *, char *);
722:	void get_include_path(const char *, char *);
740:	void get_includeserver_path(const char *, char *);
749:	void get_lib_path(const char *, char *);
767:	void get_locale_path(const char *, char *);
794:	void get_man_path(const char *, char *);
854:	void get_parent_directory(char *);
731:	void get_pkginclude_path(const char *, char *);
758:	void get_pkglib_path(const char *, char *);
453:	const char *get_progname(const char *);
704:	void get_share_path(const char *, char *);
87:	_Bool has_drive_prefix(const char *);
218:	void join_path_components(char *, const char *, const char *);
138:	char *last_dir_separator(const char *);
608:	char *make_absolute_path(const char *);
166:	void make_native_path(char *);
376:	_Bool path_contains_parent_reference(const char *);
438:	_Bool path_is_prefix_of_path(const char *, const char *);
405:	_Bool path_is_relative_and_below_cwd(const char *);
491:	static int dir_strcmp(const char *, const char *);
539:	static void make_relative_path(char *, const char *, const char *, const char *);
868:	static void trim_directory(char *);
899:	static void trim_trailing_separator(char *);

File pathkeys.c:
782:	List *build_expression_pathkey(PlannerInfo *, Expr *, Relids, Oid, Relids, _Bool);
523:	List *build_index_pathkeys(PlannerInfo *, IndexOptInfo *, ScanDirection);
1082:	List *build_join_pathkeys(PlannerInfo *, RelOptInfo *, JoinType, List *);
699:	List *build_partition_pathkeys(PlannerInfo *, RelOptInfo *, ScanDirection, _Bool *);
285:	PathKeysComparison compare_pathkeys(List *, List *);
838:	List *convert_subquery_pathkeys(PlannerInfo *, RelOptInfo *, List *, List *);
1262:	List *find_mergeclauses_for_outer_pathkeys(PlannerInfo *, List *, List *);
449:	Path *get_cheapest_fractional_path_for_pathkeys(List *, List *, Relids, double);
482:	Path *get_cheapest_parallel_safe_total_inner(List *);
404:	Path *get_cheapest_path_for_pathkeys(List *, List *, Relids, CostSelector, _Bool);
1910:	_Bool has_useful_pathkeys(PlannerInfo *, RelOptInfo *);
1179:	void initialize_mergeclause_eclasses(PlannerInfo *, RestrictInfo *);
54:	PathKey *make_canonical_pathkey(PlannerInfo *, EquivalenceClass *, Oid, int, _Bool);
1547:	List *make_inner_pathkeys_for_merge(PlannerInfo *, List *, List *);
1125:	List *make_pathkeys_for_sortclauses(PlannerInfo *, List *, List *);
324:	_Bool pathkeys_contained_in(List *, List *);
343:	_Bool pathkeys_count_contained_in(List *, List *, int *);
1375:	List *select_outer_pathkeys_for_merge(PlannerInfo *, List *, RelOptInfo *);
1650:	List *trim_mergeclauses_for_inner_pathkeys(PlannerInfo *, List *, List *);
1870:	List *truncate_useless_pathkeys(PlannerInfo *, RelOptInfo *, List *);
1228:	void update_mergeclause_eclasses(PlannerInfo *, RestrictInfo *);
1039:	static Var *find_var_for_subquery_tle(RelOptInfo *, TargetEntry *);
177:	static PathKey *make_pathkey_from_sortinfo(PlannerInfo *, Expr *, Relids, Oid, Oid, Oid, _Bool, _Bool, Index, Relids, _Bool);
236:	static PathKey *make_pathkey_from_sortop(PlannerInfo *, Expr *, Relids, Oid, _Bool, Index, _Bool);
664:	static _Bool matches_boolean_partition_clause(RestrictInfo *, RelOptInfo *, int);
629:	static _Bool partkey_is_bool_constant_for_query(RelOptInfo *, int);
135:	static _Bool pathkey_is_redundant(PathKey *, List *);
1745:	static int pathkeys_useful_for_merging(PlannerInfo *, RelOptInfo *, List *);
1849:	static int pathkeys_useful_for_ordering(PlannerInfo *, List *);
1812:	static _Bool right_merge_direction(PlannerInfo *, PathKey *);

File pathnode.c:
749:	void add_partial_path(RelOptInfo *, Path *);
867:	_Bool add_partial_path_precheck(RelOptInfo *, Cost, List *);
422:	void add_path(RelOptInfo *, Path *);
644:	_Bool add_path_precheck(RelOptInfo *, Cost, Cost, List *, Relids);
3777:	void adjust_limit_rows_costs(double *, Cost *, Cost *, int64, int64);
2735:	Path *apply_projection_to_path(PlannerInfo *, RelOptInfo *, Path *, PathTarget *);
2341:	Relids calc_nestloop_required_outer(Relids, Relids, Relids, Relids);
2374:	Relids calc_non_nestloop_required_outer(Path *, Path *);
117:	int compare_fractional_path_costs(Path *, Path *, double);
71:	int compare_path_costs(Path *, Path *, CostSelector);
3097:	AggPath *create_agg_path(PlannerInfo *, RelOptInfo *, Path *, PathTarget *, AggStrategy, AggSplit, List *, List *, const AggClauseCosts *, double);
1244:	AppendPath *create_append_path(PlannerInfo *, RelOptInfo *, List *, List *, List *, Relids, int, _Bool, double);
1079:	BitmapAndPath *create_bitmap_and_path(PlannerInfo *, RelOptInfo *, List *);
1046:	BitmapHeapPath *create_bitmap_heap_path(PlannerInfo *, RelOptInfo *, Path *, Relids, double, int);
1131:	BitmapOrPath *create_bitmap_or_path(PlannerInfo *, RelOptInfo *, List *);
2097:	Path *create_ctescan_path(PlannerInfo *, RelOptInfo *, Relids);
2251:	ForeignPath *create_foreign_join_path(PlannerInfo *, RelOptInfo *, PathTarget *, double, Cost, Cost, List *, Relids, Path *, List *);
2301:	ForeignPath *create_foreign_upper_path(PlannerInfo *, RelOptInfo *, PathTarget *, double, Cost, Cost, List *, Path *, List *);
2207:	ForeignPath *create_foreignscan_path(PlannerInfo *, RelOptInfo *, PathTarget *, double, Cost, Cost, List *, Relids, Path *, List *);
2019:	Path *create_functionscan_path(PlannerInfo *, RelOptInfo *, List *, Relids);
1861:	GatherMergePath *create_gather_merge_path(PlannerInfo *, RelOptInfo *, Path *, PathTarget *, List *, Relids, double *);
1952:	GatherPath *create_gather_path(PlannerInfo *, RelOptInfo *, Path *, PathTarget *, Relids, double *);
2986:	GroupPath *create_group_path(PlannerInfo *, RelOptInfo *, Path *, List *, List *, double);
1504:	GroupResultPath *create_group_result_path(PlannerInfo *, RelOptInfo *, PathTarget *, List *);
3164:	GroupingSetsPath *create_groupingsets_path(PlannerInfo *, RelOptInfo *, Path *, List *, AggStrategy, List *, const AggClauseCosts *, double);
2561:	HashPath *create_hashjoin_path(PlannerInfo *, RelOptInfo *, JoinType, JoinCostWorkspace *, JoinPathExtraData *, Path *, Path *, _Bool, List *, Relids, List *);
2893:	IncrementalSortPath *create_incremental_sort_path(PlannerInfo *, RelOptInfo *, Path *, List *, int, double);
997:	IndexPath *create_index_path(PlannerInfo *, IndexOptInfo *, List *, List *, List *, List *, ScanDirection, _Bool, Relids, double, _Bool);
3722:	LimitPath *create_limit_path(PlannerInfo *, RelOptInfo *, Path *, Node *, Node *, LimitOption, int64, int64);
3565:	LockRowsPath *create_lockrows_path(PlannerInfo *, RelOptInfo *, Path *, List *, int);
1552:	MaterialPath *create_material_path(RelOptInfo *, Path *);
1584:	MemoizePath *create_memoize_path(PlannerInfo *, RelOptInfo *, Path *, List *, List *, _Bool, _Bool, double);
1404:	MergeAppendPath *create_merge_append_path(PlannerInfo *, RelOptInfo *, List *, List *, Relids);
2495:	MergePath *create_mergejoin_path(PlannerInfo *, RelOptInfo *, JoinType, JoinCostWorkspace *, JoinPathExtraData *, Path *, Path *, List *, List *, Relids, List *, List *, List *);
3325:	MinMaxAggPath *create_minmaxagg_path(PlannerInfo *, RelOptInfo *, PathTarget *, List *, List *);
3625:	ModifyTablePath *create_modifytable_path(PlannerInfo *, RelOptInfo *, Path *, CmdType, _Bool, Index, Index, _Bool, List *, List *, List *, List *, List *, OnConflictExpr *, int);
2122:	Path *create_namedtuplestorescan_path(PlannerInfo *, RelOptInfo *, Relids);
2407:	NestPath *create_nestloop_path(PlannerInfo *, RelOptInfo *, JoinType, JoinCostWorkspace *, JoinPathExtraData *, Path *, Path *, List *, List *, Relids);
2627:	ProjectionPath *create_projection_path(PlannerInfo *, RelOptInfo *, Path *, PathTarget *);
3520:	RecursiveUnionPath *create_recursiveunion_path(PlannerInfo *, RelOptInfo *, Path *, Path *, PathTarget *, List *, int, double);
2148:	Path *create_resultscan_path(PlannerInfo *, RelOptInfo *, Relids);
954:	Path *create_samplescan_path(PlannerInfo *, RelOptInfo *, Relids);
929:	Path *create_seqscan_path(PlannerInfo *, RelOptInfo *, Relids, int);
2824:	ProjectSetPath *create_set_projection_path(PlannerInfo *, RelOptInfo *, Path *, PathTarget *);
3458:	SetOpPath *create_setop_path(PlannerInfo *, RelOptInfo *, Path *, SetOpCmd, SetOpStrategy, List *, AttrNumber, int, double, double);
2942:	SortPath *create_sort_path(PlannerInfo *, RelOptInfo *, Path *, List *, double);
1991:	SubqueryScanPath *create_subqueryscan_path(PlannerInfo *, RelOptInfo *, Path *, List *, Relids);
2045:	Path *create_tablefuncscan_path(PlannerInfo *, RelOptInfo *, Relids);
1212:	TidRangePath *create_tidrangescan_path(PlannerInfo *, RelOptInfo *, List *, Relids);
1183:	TidPath *create_tidscan_path(PlannerInfo *, RelOptInfo *, List *, Relids);
1640:	UniquePath *create_unique_path(PlannerInfo *, RelOptInfo *, Path *, SpecialJoinInfo *);
3045:	UpperUniquePath *create_upper_unique_path(PlannerInfo *, RelOptInfo *, Path *, int, double);
2071:	Path *create_valuesscan_path(PlannerInfo *, RelOptInfo *, Relids);
3396:	WindowAggPath *create_windowagg_path(PlannerInfo *, RelOptInfo *, Path *, PathTarget *, List *, WindowClause *);
2174:	Path *create_worktablescan_path(PlannerInfo *, RelOptInfo *, Relids);
3845:	Path *reparameterize_path(PlannerInfo *, Path *, Relids, double);
3980:	Path *reparameterize_path_by_child(PlannerInfo *, Path *, RelOptInfo *);
244:	void set_cheapest(RelOptInfo *);
1386:	static int append_startup_cost_compare(const ListCell *, const ListCell *);
1364:	static int append_total_cost_compare(const ListCell *, const ListCell *);
166:	static PathCostComparison compare_path_costs_fuzzily(Path *, Path *, double);
4259:	static List *reparameterize_pathlist_by_child(PlannerInfo *, List *, RelOptInfo *);
1926:	static List *translate_sub_tlist(List *, int);

File pclose.c:
36:	int __new_pclose(FILE *);

File peekc.c:
33:	int _IO_peekc_locked(FILE *);

File perror.c:
47:	void __GI_perror(const char *);
26:	static void perror_internal(FILE *, const char *, int);

File pg_aggregate.c:
46:	ObjectAddress AggregateCreate(const char *, Oid, _Bool, char, int, int, oidvector *, Datum, Datum, Datum, List *, Oid, List *, List *, List *, List *, List *, List *, List *, List *, _Bool, _Bool, char, char, List *, Oid, int32, Oid, int32, const char *, const char *, char);
826:	static Oid lookup_agg_function(List *, int, Oid *, Oid, Oid *);

File pg_bitutils.c:
282:	uint64 pg_popcount(const char *, int);
202:	static int pg_popcount32_asm(uint32);
164:	static int pg_popcount32_choose(uint32);
231:	static int pg_popcount32_slow(uint32);
215:	static int pg_popcount64_asm(uint64);
181:	static int pg_popcount64_choose(uint64);
253:	static int pg_popcount64_slow(uint64);
142:	static _Bool pg_popcount_available(void);

File pg_cast.c:
43:	ObjectAddress CastCreate(Oid, Oid, Oid, char, char, DependencyType);

File pg_collation.c:
46:	Oid CollationCreate(const char *, Oid, Oid, char, _Bool, int32, const char *, const char *, const char *, _Bool, _Bool);

File pg_config.c:
25:	Datum pg_config(FunctionCallInfo);

File pg_constraint.c:
700:	void AlterConstraintNamespaces(Oid, Oid, Oid, _Bool, ObjectAddresses *);
487:	char *ChooseConstraintName(const char *, const char *, const char *, Oid, List *);
433:	_Bool ConstraintNameExists(const char *, Oid);
388:	_Bool ConstraintNameIsUsed(ConstraintCategory, Oid, const char *);
769:	void ConstraintSetParentConstraint(Oid, Oid, Oid);
50:	Oid CreateConstraintEntry(const char *, Oid, char, _Bool, _Bool, _Bool, Oid, Oid, const int16 *, int, int, Oid, Oid, Oid, const int16 *, const Oid *, const Oid *, const Oid *, int, char, char, char, const Oid *, Node *, const char *, _Bool, int, _Bool, _Bool);
1175:	void DeconstructFkConstraintRow(HeapTuple, int *, AttrNumber *, AttrNumber *, Oid *, Oid *, Oid *);
557:	void RemoveConstraintById(Oid);
648:	void RenameConstraintById(Oid, const char *);
1293:	_Bool check_functional_grouping(Oid, Index, Index, List *, List **);
1031:	Oid get_domain_constraint_oid(Oid, const char *, _Bool);
1090:	Bitmapset *get_primary_key_attnos(Oid, _Bool, Oid *);
895:	Bitmapset *get_relation_constraint_attnos(Oid, const char *, _Bool, Oid *);
838:	Oid get_relation_constraint_oid(Oid, const char *, _Bool);
984:	Oid get_relation_idx_constraint_oid(Oid, Oid);

File pg_controldata.c:
80:	Datum pg_control_checkpoint(FunctionCallInfo);
264:	Datum pg_control_init(FunctionCallInfo);
211:	Datum pg_control_recovery(FunctionCallInfo);
32:	Datum pg_control_system(FunctionCallInfo);

File pg_conversion.c:
41:	ObjectAddress ConversionCreate(const char *, Oid, Oid, int32, int32, Oid, _Bool);
155:	Oid FindDefaultConversion(Oid, int32, int32);

File pg_crc32c_sb8.c:
35:	pg_crc32c pg_comp_crc32c_sb8(pg_crc32c, const void *, size_t);

File pg_crc32c_sse42.c:
23:	pg_crc32c pg_comp_crc32c_sse42(pg_crc32c, const void *, size_t);

File pg_crc32c_sse42_choose.c:
54:	static pg_crc32c pg_comp_crc32c_choose(pg_crc32c, const void *, size_t);
34:	static _Bool pg_crc32c_sse42_available(void);

File pg_db_role_setting.c:
24:	void AlterSetting(Oid, Oid, VariableSetStmt *);
220:	void ApplySetting(Snapshot, Oid, Oid, Relation, GucSource);
170:	void DropSetting(Oid, Oid);

File pg_depend.c:
562:	long changeDependenciesOf(Oid, Oid, Oid);
618:	long changeDependenciesOn(Oid, Oid, Oid);
452:	long changeDependencyFor(Oid, Oid, Oid, Oid, Oid);
253:	void checkMembershipInCurrentExtension(const ObjectAddress *);
296:	long deleteDependencyRecordsFor(Oid, Oid, _Bool);
346:	long deleteDependencyRecordsForClass(Oid, Oid, Oid, char);
393:	long deleteDependencyRecordsForSpecific(Oid, Oid, char, Oid, Oid);
811:	List *getAutoExtensionsOfObject(Oid, Oid);
765:	Oid getExtensionOfObject(Oid, Oid);
978:	Oid getIdentitySequence(Oid, AttrNumber, _Bool);
969:	List *getOwnedSequences(Oid);
1002:	Oid get_index_constraint(Oid);
1058:	List *get_index_ref_constraints(Oid);
43:	void recordDependencyOn(const ObjectAddress *, const ObjectAddress *, DependencyType);
188:	void recordDependencyOnCurrentExtension(const ObjectAddress *, _Bool);
55:	void recordMultipleDependencies(const ObjectAddress *, const ObjectAddress *, int, DependencyType);
861:	_Bool sequenceIsOwned(Oid, char, Oid *, int32 *);
910:	static List *getOwnedSequences_internal(Oid, AttrNumber, char);
707:	static _Bool isObjectPinned(const ObjectAddress *, Relation);

File pg_enum.c:
208:	void AddEnumLabel(Oid, const char *, const char *, _Bool, _Bool);
609:	void AtEOXact_Enum(void);
591:	_Bool EnumUncommitted(Oid);
61:	void EnumValuesCreate(Oid, List *);
157:	void EnumValuesDelete(Oid);
695:	Size EstimateUncommittedEnumsSpace(void);
508:	void RenameEnumLabel(Oid, const char *, const char *);
741:	void RestoreUncommittedEnums(void *);
709:	void SerializeUncommittedEnums(void *, Size);
643:	static void RenumberEnumType(Relation, HeapTuple *, int);
188:	static void init_uncommitted_enums(void);
679:	static int sort_order_cmp(const void *, const void *);

File pg_get_line.c:
52:	char *pg_get_line(FILE *);
112:	_Bool pg_get_line_append(FILE *, StringInfo);
88:	_Bool pg_get_line_buf(FILE *, StringInfo);

File pg_inherits.c:
553:	_Bool DeleteInheritsTuple(Oid, Oid, _Bool, const char *);
621:	_Bool PartitionHasPendingDetach(Oid);
509:	void StoreSingleInheritance(Oid, Oid, int32);
256:	List *find_all_inheritors(Oid, LOCKMODE, List **);
59:	List *find_inheritance_children(Oid, LOCKMODE);
83:	List *find_inheritance_children_extended(Oid, _Bool, LOCKMODE, _Bool *, TransactionId *);
356:	_Bool has_subclass(Oid);
378:	_Bool has_superclass(Oid);
407:	_Bool typeInheritsFrom(Oid, Oid);

File pg_largeobject.c:
40:	Oid LargeObjectCreate(Oid);
86:	void LargeObjectDrop(Oid);
158:	_Bool LargeObjectExists(Oid);

File pg_locale.c:
465:	struct lconv *PGLC_localeconv(void);
358:	void assign_locale_messages(const char *, void *);
295:	void assign_locale_monetary(const char *, void *);
307:	void assign_locale_numeric(const char *, void *);
319:	void assign_locale_time(const char *, void *);
747:	void cache_locale_time(void);
2032:	size_t char2wchar(wchar_t *, size_t, const char *, size_t, pg_locale_t);
246:	_Bool check_locale(int, const char *, char **);
335:	_Bool check_locale_messages(char **, void **, GucSource);
289:	_Bool check_locale_monetary(char **, void **, GucSource);
301:	_Bool check_locale_numeric(char **, void **, GucSource);
313:	_Bool check_locale_time(char **, void **, GucSource);
1187:	void check_strxfrm_bug(void);
1645:	char *get_collation_actual_version(char, const char *);
1321:	_Bool lc_collate_is_c(Oid);
1371:	_Bool lc_ctype_is_c(Oid);
1468:	pg_locale_t pg_newlocale_from_collation(Oid);
143:	char *pg_perm_setlocale(int, const char *);
1961:	size_t wchar2char(char *, const wchar_t *, size_t, pg_locale_t);
724:	static void cache_single_string(char **, const char *, int);
435:	static void db_encoding_convert(int, char **);
375:	static void free_struct_lconv(struct lconv *);
1257:	static collation_cache_entry *lookup_collation_cache(Oid, _Bool);
1421:	static void report_newlocale_failure(const char *);
404:	static _Bool struct_lconv_is_valid(struct lconv *);

File pg_lsn.c:
192:	Datum pg_lsn_cmp(FunctionCallInfo);
119:	Datum pg_lsn_eq(FunctionCallInfo);
164:	Datum pg_lsn_ge(FunctionCallInfo);
146:	Datum pg_lsn_gt(FunctionCallInfo);
207:	Datum pg_lsn_hash(FunctionCallInfo);
214:	Datum pg_lsn_hash_extended(FunctionCallInfo);
64:	Datum pg_lsn_in(FunctionCallInfo);
30:	XLogRecPtr pg_lsn_in_internal(const char *, _Bool *);
173:	Datum pg_lsn_larger(FunctionCallInfo);
155:	Datum pg_lsn_le(FunctionCallInfo);
137:	Datum pg_lsn_lt(FunctionCallInfo);
225:	Datum pg_lsn_mi(FunctionCallInfo);
286:	Datum pg_lsn_mii(FunctionCallInfo);
128:	Datum pg_lsn_ne(FunctionCallInfo);
81:	Datum pg_lsn_out(FunctionCallInfo);
252:	Datum pg_lsn_pli(FunctionCallInfo);
93:	Datum pg_lsn_recv(FunctionCallInfo);
103:	Datum pg_lsn_send(FunctionCallInfo);
182:	Datum pg_lsn_smaller(FunctionCallInfo);

File pg_lzcompress.c:
509:	int32 pglz_compress(const char *, int32, char *, const PGLZ_Strategy *);
692:	int32 pglz_decompress(const char *, int32, char *, int32, _Bool);
842:	int32 pglz_maximum_compressed_size(int32, int32);
399:	static int pglz_find_match(int16 *, const char *, const char *, int *, int *, int, int, int);

File pg_namespace.c:
43:	Oid NamespaceCreate(const char *, Oid, _Bool);

File pg_operator.c:
327:	ObjectAddress OperatorCreate(const char *, Oid, Oid, Oid, Oid, List *, List *, Oid, Oid, _Bool, _Bool);
654:	void OperatorUpd(Oid, Oid, Oid, _Bool);
777:	ObjectAddress makeOperatorDependencies(HeapTuple, _Bool, _Bool);
130:	static Oid OperatorGet(const char *, Oid, Oid, Oid, _Bool *);
170:	static Oid OperatorLookup(List *, Oid, Oid, _Bool *);
199:	static Oid OperatorShellMake(const char *, Oid, Oid, Oid);
585:	static Oid get_other_operator(List *, Oid, Oid, const char *, Oid, Oid, Oid, _Bool);
74:	static _Bool validOperatorName(const char *);

File pg_proc.c:
71:	ObjectAddress ProcedureCreate(const char *, Oid, _Bool, _Bool, Oid, Oid, Oid, Oid, const char *, const char *, Node *, char, _Bool, _Bool, _Bool, char, char, oidvector *, Datum, Datum, Datum, List *, Datum, Datum, Oid, float4, float4);
770:	Datum fmgr_c_validator(FunctionCallInfo);
724:	Datum fmgr_internal_validator(FunctionCallInfo);
818:	Datum fmgr_sql_validator(FunctionCallInfo);
1011:	_Bool function_parse_error_transpose(const char *);
1193:	List *oid_array_to_list(Datum);
1136:	static _Bool match_prosrc_to_literal(const char *, const char *, int, int *);
1078:	static int match_prosrc_to_query(const char *, const char *, int);
987:	static void sql_function_parse_error_callback(void *);

File pg_publication.c:
415:	List *GetAllTablesPublicationRelations(_Bool);
374:	List *GetAllTablesPublications(void);
184:	List *GetPubPartitionOptionRelations(List *, PublicationPartOpt, Oid);
476:	Publication *GetPublication(Oid);
508:	Publication *GetPublicationByName(const char *, _Bool);
335:	List *GetPublicationRelations(Oid, PublicationPartOpt);
306:	List *GetRelationPublications(Oid);
544:	char *get_publication_name(Oid, _Bool);
524:	Oid get_publication_oid(const char *, _Bool);
151:	_Bool is_publishable_relation(Relation);
571:	Datum pg_get_publication_tables(FunctionCallInfo);
165:	Datum pg_relation_is_publishable(FunctionCallInfo);
220:	ObjectAddress publication_add_relation(Oid, Relation, _Bool);
51:	static void check_publication_add_relation(Relation);
113:	static List *filter_partitions(List *);
99:	static _Bool is_publishable_class(Oid, Form_pg_class);

File pg_range.c:
36:	void RangeCreate(Oid, Oid, Oid, Oid, RegProcedure, RegProcedure, Oid);
113:	void RangeDelete(Oid);

File pg_rusage.c:
27:	void pg_rusage_init(PGRUsage *);
40:	const char *pg_rusage_show(const PGRUsage *);

File pg_sema.c:
196:	void PGReserveSemaphores(int);
262:	PGSemaphore PGSemaphoreCreate(void);
320:	void PGSemaphoreLock(PGSemaphore);
295:	void PGSemaphoreReset(PGSemaphore);
165:	Size PGSemaphoreShmemSize(int);
365:	_Bool PGSemaphoreTryLock(PGSemaphore);
340:	void PGSemaphoreUnlock(PGSemaphore);
135:	static void PosixSemaphoreCreate(sem_t *);
147:	static void PosixSemaphoreKill(sem_t *);
240:	static void ReleaseSemaphores(int, Datum);

File pg_shdepend.c:
314:	void changeDependencyOnOwner(Oid, Oid, Oid);
383:	void changeDependencyOnTablespace(Oid, Oid, Oid);
634:	_Bool checkSharedDependencies(Oid, Oid, char **, char **);
853:	void copyTemplateDependencies(Oid, Oid);
1005:	void deleteSharedDependencyRecordsFor(Oid, Oid, int32);
957:	void dropDatabaseDependencies(Oid);
166:	void recordDependencyOnOwner(Oid, Oid, Oid);
362:	void recordDependencyOnTablespace(Oid, Oid, Oid);
122:	void recordSharedDependencyOn(ObjectAddress *, ObjectAddress *, SharedDependencyType);
1345:	void shdepDropOwned(List *, DropBehavior);
1169:	void shdepLockAndCheckObject(Oid, Oid);
1499:	void shdepReassignOwned(List *, Oid);
483:	void updateAclDependencies(Oid, Oid, int32, Oid, int, Oid *, int, Oid *);
1148:	static Oid classIdGetDbId(Oid);
413:	static void getOidListDiff(Oid *, int *, Oid *, int *);
1293:	static _Bool isSharedObjectPinned(Oid, Oid, Relation);
566:	static int shared_dependency_comparator(const void *, const void *);
1027:	static void shdepAddDependency(Relation, Oid, Oid, int32, Oid, Oid, SharedDependencyType);
204:	static void shdepChangeDep(Relation, Oid, Oid, int32, Oid, Oid, SharedDependencyType);
1082:	static void shdepDropDependency(Relation, Oid, Oid, int32, _Bool, Oid, Oid, SharedDependencyType);
1234:	static void storeObjectDescription(StringInfo, SharedDependencyObjectType, ObjectAddress *, SharedDependencyType, int);

File pg_shmem.c:
661:	PGShmemHeader *PGSharedMemoryCreate(Size, PGShmemHeader **);
925:	void PGSharedMemoryDetach(void);
320:	_Bool PGSharedMemoryIsInUse(unsigned long, unsigned long);
636:	static void AnonymousShmemDetach(int, Datum);
568:	static void *CreateAnonymousSegment(Size *);
482:	static void GetHugePageSize(Size *, int *);
124:	static void *InternalIpcMemoryCreate(IpcMemoryKey, Size);
301:	static void IpcMemoryDelete(int, Datum);
289:	static void IpcMemoryDetach(int, Datum);
350:	static IpcMemoryState PGSharedMemoryAttach(IpcMemoryId, void *, PGShmemHeader **);

File pg_strong_random.c:
153:	_Bool pg_strong_random(void *, size_t);
147:	void pg_strong_random_init(void);

File pg_subscription.c:
238:	void AddSubscriptionRelState(Oid, Oid, char, XLogRecPtr);
116:	int CountDBSubscriptions(Oid);
148:	void FreeSubscription(Subscription *);
43:	Subscription *GetSubscription(Oid, _Bool);
513:	List *GetSubscriptionNotReadyRelations(Oid);
335:	char GetSubscriptionRelState(Oid, Oid, XLogRecPtr *);
460:	List *GetSubscriptionRelations(Oid);
385:	void RemoveSubscriptionRel(Oid, Oid);
284:	void UpdateSubscriptionRelState(Oid, Oid, char, XLogRecPtr);
185:	char *get_subscription_name(Oid, _Bool);
165:	Oid get_subscription_oid(const char *, _Bool);
214:	static List *textarray_to_stringlist(ArrayType *);

File pg_type.c:
558:	void GenerateTypeDependencies(HeapTuple, Relation, Node *, void *, char, _Bool, _Bool, _Bool, _Bool);
744:	void RenameTypeInternal(Oid, const char *, Oid);
198:	ObjectAddress TypeCreate(Oid, const char *, Oid, Oid, char, Oid, int16, char, char, _Bool, char, Oid, Oid, Oid, Oid, Oid, Oid, Oid, Oid, Oid, _Bool, Oid, Oid, const char *, char *, _Bool, char, char, int32, int32, _Bool, Oid);
60:	ObjectAddress TypeShellMake(const char *, Oid, Oid);
819:	char *makeArrayTypeName(const char *, Oid);
904:	char *makeMultirangeTypeName(const char *, Oid);
859:	_Bool moveArrayTypeName(Oid, const char *, Oid);
948:	static char *makeUniqueTypeName(const char *, Oid, _Bool);

File pg_upgrade_support.c:
131:	Datum binary_upgrade_create_empty_extension(FunctionCallInfo);
209:	Datum binary_upgrade_set_missing_value(FunctionCallInfo);
44:	Datum binary_upgrade_set_next_array_pg_type_oid(FunctionCallInfo);
77:	Datum binary_upgrade_set_next_heap_pg_class_oid(FunctionCallInfo);
88:	Datum binary_upgrade_set_next_index_pg_class_oid(FunctionCallInfo);
66:	Datum binary_upgrade_set_next_multirange_array_pg_type_oid(FunctionCallInfo);
55:	Datum binary_upgrade_set_next_multirange_pg_type_oid(FunctionCallInfo);
121:	Datum binary_upgrade_set_next_pg_authid_oid(FunctionCallInfo);
110:	Datum binary_upgrade_set_next_pg_enum_oid(FunctionCallInfo);
33:	Datum binary_upgrade_set_next_pg_type_oid(FunctionCallInfo);
99:	Datum binary_upgrade_set_next_toast_pg_class_oid(FunctionCallInfo);
198:	Datum binary_upgrade_set_record_init_privs(FunctionCallInfo);

File pgarch.c:
148:	_Bool PgArchCanRestart(void);
120:	void PgArchShmemInit(void);
109:	Size PgArchShmemSize(void);
210:	void PgArchWakeup(void);
168:	void PgArchiverMain(void);
708:	static void HandlePgArchInterrupts(void);
324:	static void pgarch_ArchiverCopyLoop(void);
244:	static void pgarch_MainLoop(void);
678:	static void pgarch_archiveDone(char *);
451:	static _Bool pgarch_archiveXlog(char *);
695:	static void pgarch_die(int, Datum);
601:	static _Bool pgarch_readyXlog(char *);
227:	static void pgarch_waken_stop(int);

File pgfnames.c:
37:	char **pgfnames(const char *);
86:	void pgfnames_cleanup(char **);

File pgmkdirp.c:
57:	int pg_mkdir_p(char *, int);

File pgsleep.c:
47:	void pg_usleep(long);

File pgstat.c:
2453:	void AtEOSubXact_PgStat(_Bool, int);
2366:	void AtEOXact_PgStat(_Bool, _Bool);
2552:	void AtPrepare_PgStat(void);
2601:	void PostPrepare_PgStat(void);
818:	void allow_immediate_pgstat_restart(void);
1949:	PgStat_BackendFunctionEntry *find_funcstat_entry(Oid);
2151:	PgStat_TableStatus *find_tabstat_entry(Oid);
4699:	void pgstat_clear_snapshot(void);
2266:	void pgstat_count_heap_delete(Relation);
2220:	void pgstat_count_heap_insert(Relation, PgStat_Counter);
2241:	void pgstat_count_heap_update(Relation, _Bool);
5842:	void pgstat_count_slru_flush(int);
5824:	void pgstat_count_slru_page_exists(int);
5818:	void pgstat_count_slru_page_hit(int);
5830:	void pgstat_count_slru_page_read(int);
5836:	void pgstat_count_slru_page_written(int);
5812:	void pgstat_count_slru_page_zeroed(int);
5848:	void pgstat_count_slru_truncate(int);
2321:	void pgstat_count_truncate(Relation);
1351:	void pgstat_drop_database(Oid);
1969:	void pgstat_end_function_usage(PgStat_FunctionCallUsage *, _Bool);
2834:	PgStat_GlobalStats *pgstat_fetch_global(void);
2882:	PgStat_StatReplSlotEntry *pgstat_fetch_replslot(NameData);
2866:	PgStat_SLRUStats *pgstat_fetch_slru(void);
2817:	PgStat_ArchiverStats *pgstat_fetch_stat_archiver(void);
2704:	PgStat_StatDBEntry *pgstat_fetch_stat_dbentry(Oid);
2787:	PgStat_StatFuncEntry *pgstat_fetch_stat_funcentry(Oid);
2731:	PgStat_StatTabEntry *pgstat_fetch_stat_tabentry(Oid);
2850:	PgStat_WalStats *pgstat_fetch_stat_wal(void);
378:	void pgstat_init(void);
1898:	void pgstat_init_function_usage(FunctionCallInfo, PgStat_FunctionCallUsage *);
2919:	void pgstat_initialize(void);
2026:	void pgstat_initstats(Relation);
1863:	void pgstat_ping(void);
1590:	void pgstat_report_analyze(Relation, PgStat_Counter, PgStat_Counter, _Bool);
1540:	void pgstat_report_autovac(Oid);
1709:	void pgstat_report_checksum_failure(void);
1687:	void pgstat_report_checksum_failures_in_db(Oid, int);
1741:	void pgstat_report_connect(Oid);
1666:	void pgstat_report_deadlock(void);
1646:	void pgstat_report_recovery_conflict(int);
1798:	void pgstat_report_replslot(const PgStat_StatReplSlotEntry *);
1827:	void pgstat_report_replslot_create(const char *);
1845:	void pgstat_report_replslot_drop(const char *);
844:	void pgstat_report_stat(_Bool);
1721:	void pgstat_report_tempfile(size_t);
1562:	void pgstat_report_vacuum(Oid, _Bool, PgStat_Counter, PgStat_Counter);
713:	void pgstat_reset_all(void);
1406:	void pgstat_reset_counters(void);
1511:	void pgstat_reset_replslot_counter(const char *);
1428:	void pgstat_reset_shared_counters(const char *);
1461:	void pgstat_reset_single_counter(Oid, PgStat_Single_Reset_Type);
1487:	void pgstat_reset_slru_counter(const char *);
2988:	void pgstat_send_archiver(const char *, _Bool);
3009:	void pgstat_send_bgwriter(void);
3044:	void pgstat_send_wal(_Bool);
5757:	int pgstat_slru_index(const char *);
5779:	const char *pgstat_slru_name(int);
755:	int pgstat_start(void);
2670:	void pgstat_twophase_postabort(TransactionId, uint16, void *, uint32);
2634:	void pgstat_twophase_postcommit(TransactionId, uint16, void *, uint32);
2350:	void pgstat_update_heap_dead_tuples(Relation, int);
1102:	void pgstat_vacuum_stat(void);
3177:	static void PgstatCollectorMain(int, char **);
2193:	static void add_tabstat_xact_level(PgStat_TableStatus *, int);
4544:	static void backend_read_statsfile(void);
3767:	static void get_dbstat_filename(_Bool, _Bool, Oid, char *, int);
2063:	static PgStat_TableStatus *get_tabstat_entry(Oid, _Bool);
2171:	static PgStat_SubXactStatus *get_tabstat_stack_level(int);
1302:	static HTAB *pgstat_collect_oids(Oid, AttrNumber);
5654:	static _Bool pgstat_db_requested(Oid);
3524:	static PgStat_StatDBEntry *pgstat_get_db_entry(Oid, _Bool);
5682:	static PgStat_StatReplSlotEntry *pgstat_get_replslot_entry(NameData, _Bool);
3555:	static PgStat_StatTabEntry *pgstat_get_tab_entry(PgStat_StatDBEntry *, Oid, _Bool);
4217:	static void pgstat_read_db_statsfile(Oid, HTAB *, HTAB *, _Bool);
4380:	static _Bool pgstat_read_db_statsfile_timestamp(Oid, _Bool, TimestampTz *);
3916:	static HTAB *pgstat_read_statsfiles(Oid, _Bool, _Bool);
5243:	static void pgstat_recv_analyze(PgStat_MsgAnalyze *, int);
5286:	static void pgstat_recv_archiver(PgStat_MsgArchiver *, int);
5178:	static void pgstat_recv_autovac(PgStat_MsgAutovacStart *, int);
5313:	static void pgstat_recv_bgwriter(PgStat_MsgBgWriter *, int);
5427:	static void pgstat_recv_checksum_failure(PgStat_MsgChecksumFailure *, int);
5495:	static void pgstat_recv_connect(PgStat_MsgConnect *, int);
5411:	static void pgstat_recv_deadlock(PgStat_MsgDeadlock *, int);
5510:	static void pgstat_recv_disconnect(PgStat_MsgDisconnect *, int);
4966:	static void pgstat_recv_dropdb(PgStat_MsgDropdb *, int);
5606:	static void pgstat_recv_funcpurge(PgStat_MsgFuncpurge *, int);
5558:	static void pgstat_recv_funcstat(PgStat_MsgFuncstat *, int);
4726:	static void pgstat_recv_inquiry(PgStat_MsgInquiry *, int);
5371:	static void pgstat_recv_recoveryconflict(PgStat_MsgRecoveryConflict *, int);
5444:	static void pgstat_recv_replslot(PgStat_MsgReplSlot *, int);
5009:	static void pgstat_recv_resetcounter(PgStat_MsgResetcounter *, int);
5132:	static void pgstat_recv_resetreplslotcounter(PgStat_MsgResetreplslotcounter *, int);
5047:	static void pgstat_recv_resetsharedcounter(PgStat_MsgResetsharedcounter *, int);
5081:	static void pgstat_recv_resetsinglecounter(PgStat_MsgResetsinglecounter *, int);
5109:	static void pgstat_recv_resetslrucounter(PgStat_MsgResetslrucounter *, int);
5353:	static void pgstat_recv_slru(PgStat_MsgSLRU *, int);
4933:	static void pgstat_recv_tabpurge(PgStat_MsgTabpurge *, int);
4819:	static void pgstat_recv_tabstat(PgStat_MsgTabstat *, int);
5541:	static void pgstat_recv_tempfile(PgStat_MsgTempFile *, int);
5197:	static void pgstat_recv_vacuum(PgStat_MsgVacuum *, int);
5334:	static void pgstat_recv_wal(PgStat_MsgWal *, int);
1762:	static void pgstat_report_disconnect(Oid);
665:	static void pgstat_reset_remove_files(const char *);
5735:	static void pgstat_reset_replslot(PgStat_StatReplSlotEntry *, TimestampTz);
2958:	static void pgstat_send(void *, int);
1043:	static void pgstat_send_funcstats(void);
1881:	static void pgstat_send_inquiry(TimestampTz, TimestampTz, Oid);
3135:	static void pgstat_send_slru(void);
972:	static void pgstat_send_tabstat(PgStat_MsgTabstat *, TimestampTz);
2945:	static void pgstat_setheader(PgStat_MsgHdr *, StatMsgType);
4679:	static void pgstat_setup_memcxt(void);
1786:	static _Bool pgstat_should_report_connstat(void);
2897:	static void pgstat_shutdown_hook(int, Datum);
2307:	static void pgstat_truncate_restore_counters(PgStat_TableXactStatus *);
2292:	static void pgstat_truncate_save_counters(PgStat_TableXactStatus *);
3793:	static void pgstat_write_db_statsfile(PgStat_StatDBEntry *, _Bool);
5638:	static _Bool pgstat_write_statsfile_needed(void);
3614:	static void pgstat_write_statsfiles(_Bool, _Bool);
3466:	static void reset_dbentry_counters(PgStat_StatDBEntry *);
5794:	static PgStat_MsgSLRU *slru_entry(int);

File pgstatfuncs.c:
967:	Datum pg_backend_pid(FunctionCallInfo);
2142:	Datum pg_stat_clear_snapshot(FunctionCallInfo);
571:	Datum pg_stat_get_activity(FunctionCallInfo);
352:	Datum pg_stat_get_analyze_count(FunctionCallInfo);
2245:	Datum pg_stat_get_archiver(FunctionCallInfo);
367:	Datum pg_stat_get_autoanalyze_count(FunctionCallInfo);
337:	Datum pg_stat_get_autovacuum_count(FunctionCallInfo);
1013:	Datum pg_stat_get_backend_activity(FunctionCallInfo);
1081:	Datum pg_stat_get_backend_activity_start(FunctionCallInfo);
1151:	Datum pg_stat_get_backend_client_addr(FunctionCallInfo);
1198:	Datum pg_stat_get_backend_client_port(FunctionCallInfo);
987:	Datum pg_stat_get_backend_dbid(FunctionCallInfo);
417:	Datum pg_stat_get_backend_idset(FunctionCallInfo);
974:	Datum pg_stat_get_backend_pid(FunctionCallInfo);
1129:	Datum pg_stat_get_backend_start(FunctionCallInfo);
1000:	Datum pg_stat_get_backend_userid(FunctionCallInfo);
1059:	Datum pg_stat_get_backend_wait_event(FunctionCallInfo);
1038:	Datum pg_stat_get_backend_wait_event_type(FunctionCallInfo);
1107:	Datum pg_stat_get_backend_xact_start(FunctionCallInfo);
1745:	Datum pg_stat_get_bgwriter_buf_written_checkpoints(FunctionCallInfo);
1751:	Datum pg_stat_get_bgwriter_buf_written_clean(FunctionCallInfo);
1757:	Datum pg_stat_get_bgwriter_maxwritten_clean(FunctionCallInfo);
1739:	Datum pg_stat_get_bgwriter_requested_checkpoints(FunctionCallInfo);
1777:	Datum pg_stat_get_bgwriter_stat_reset_time(FunctionCallInfo);
1733:	Datum pg_stat_get_bgwriter_timed_checkpoints(FunctionCallInfo);
219:	Datum pg_stat_get_blocks_fetched(FunctionCallInfo);
235:	Datum pg_stat_get_blocks_hit(FunctionCallInfo);
1795:	Datum pg_stat_get_buf_alloc(FunctionCallInfo);
1789:	Datum pg_stat_get_buf_fsync_backend(FunctionCallInfo);
1783:	Datum pg_stat_get_buf_written_backend(FunctionCallInfo);
1770:	Datum pg_stat_get_checkpoint_sync_time(FunctionCallInfo);
1763:	Datum pg_stat_get_checkpoint_write_time(FunctionCallInfo);
1653:	Datum pg_stat_get_db_active_time(FunctionCallInfo);
1607:	Datum pg_stat_get_db_blk_read_time(FunctionCallInfo);
1623:	Datum pg_stat_get_db_blk_write_time(FunctionCallInfo);
1299:	Datum pg_stat_get_db_blocks_fetched(FunctionCallInfo);
1315:	Datum pg_stat_get_db_blocks_hit(FunctionCallInfo);
1568:	Datum pg_stat_get_db_checksum_failures(FunctionCallInfo);
1586:	Datum pg_stat_get_db_checksum_last_failure(FunctionCallInfo);
1534:	Datum pg_stat_get_db_conflict_all(FunctionCallInfo);
1504:	Datum pg_stat_get_db_conflict_bufferpin(FunctionCallInfo);
1474:	Datum pg_stat_get_db_conflict_lock(FunctionCallInfo);
1489:	Datum pg_stat_get_db_conflict_snapshot(FunctionCallInfo);
1519:	Datum pg_stat_get_db_conflict_startup_deadlock(FunctionCallInfo);
1459:	Datum pg_stat_get_db_conflict_tablespace(FunctionCallInfo);
1553:	Datum pg_stat_get_db_deadlocks(FunctionCallInfo);
1667:	Datum pg_stat_get_db_idle_in_transaction_time(FunctionCallInfo);
1246:	Datum pg_stat_get_db_numbackends(FunctionCallInfo);
1639:	Datum pg_stat_get_db_session_time(FunctionCallInfo);
1681:	Datum pg_stat_get_db_sessions(FunctionCallInfo);
1694:	Datum pg_stat_get_db_sessions_abandoned(FunctionCallInfo);
1707:	Datum pg_stat_get_db_sessions_fatal(FunctionCallInfo);
1720:	Datum pg_stat_get_db_sessions_killed(FunctionCallInfo);
1410:	Datum pg_stat_get_db_stat_reset_time(FunctionCallInfo);
1444:	Datum pg_stat_get_db_temp_bytes(FunctionCallInfo);
1428:	Datum pg_stat_get_db_temp_files(FunctionCallInfo);
1395:	Datum pg_stat_get_db_tuples_deleted(FunctionCallInfo);
1347:	Datum pg_stat_get_db_tuples_fetched(FunctionCallInfo);
1363:	Datum pg_stat_get_db_tuples_inserted(FunctionCallInfo);
1331:	Datum pg_stat_get_db_tuples_returned(FunctionCallInfo);
1379:	Datum pg_stat_get_db_tuples_updated(FunctionCallInfo);
1267:	Datum pg_stat_get_db_xact_commit(FunctionCallInfo);
1283:	Datum pg_stat_get_db_xact_rollback(FunctionCallInfo);
171:	Datum pg_stat_get_dead_tuples(FunctionCallInfo);
382:	Datum pg_stat_get_function_calls(FunctionCallInfo);
405:	Datum pg_stat_get_function_self_time(FunctionCallInfo);
393:	Datum pg_stat_get_function_total_time(FunctionCallInfo);
203:	Datum pg_stat_get_ins_since_vacuum(FunctionCallInfo);
286:	Datum pg_stat_get_last_analyze_time(FunctionCallInfo);
304:	Datum pg_stat_get_last_autoanalyze_time(FunctionCallInfo);
268:	Datum pg_stat_get_last_autovacuum_time(FunctionCallInfo);
250:	Datum pg_stat_get_last_vacuum_time(FunctionCallInfo);
155:	Datum pg_stat_get_live_tuples(FunctionCallInfo);
187:	Datum pg_stat_get_mod_since_analyze(FunctionCallInfo);
43:	Datum pg_stat_get_numscans(FunctionCallInfo);
460:	Datum pg_stat_get_progress_info(FunctionCallInfo);
2315:	Datum pg_stat_get_replication_slot(FunctionCallInfo);
1872:	Datum pg_stat_get_slru(FunctionCallInfo);
2135:	Datum pg_stat_get_snapshot_timestamp(FunctionCallInfo);
123:	Datum pg_stat_get_tuples_deleted(FunctionCallInfo);
75:	Datum pg_stat_get_tuples_fetched(FunctionCallInfo);
139:	Datum pg_stat_get_tuples_hot_updated(FunctionCallInfo);
91:	Datum pg_stat_get_tuples_inserted(FunctionCallInfo);
59:	Datum pg_stat_get_tuples_returned(FunctionCallInfo);
107:	Datum pg_stat_get_tuples_updated(FunctionCallInfo);
322:	Datum pg_stat_get_vacuum_count(FunctionCallInfo);
1804:	Datum pg_stat_get_wal(FunctionCallInfo);
2070:	Datum pg_stat_get_xact_blocks_fetched(FunctionCallInfo);
2085:	Datum pg_stat_get_xact_blocks_hit(FunctionCallInfo);
2100:	Datum pg_stat_get_xact_function_calls(FunctionCallInfo);
2122:	Datum pg_stat_get_xact_function_self_time(FunctionCallInfo);
2111:	Datum pg_stat_get_xact_function_total_time(FunctionCallInfo);
1947:	Datum pg_stat_get_xact_numscans(FunctionCallInfo);
2034:	Datum pg_stat_get_xact_tuples_deleted(FunctionCallInfo);
1977:	Datum pg_stat_get_xact_tuples_fetched(FunctionCallInfo);
2055:	Datum pg_stat_get_xact_tuples_hot_updated(FunctionCallInfo);
1992:	Datum pg_stat_get_xact_tuples_inserted(FunctionCallInfo);
1962:	Datum pg_stat_get_xact_tuples_returned(FunctionCallInfo);
2013:	Datum pg_stat_get_xact_tuples_updated(FunctionCallInfo);
2152:	Datum pg_stat_reset(FunctionCallInfo);
2207:	Datum pg_stat_reset_replication_slot(FunctionCallInfo);
2161:	Datum pg_stat_reset_shared(FunctionCallInfo);
2182:	Datum pg_stat_reset_single_function_counters(FunctionCallInfo);
2172:	Datum pg_stat_reset_single_table_counters(FunctionCallInfo);
2193:	Datum pg_stat_reset_slru(FunctionCallInfo);

File pgstrcasecmp.c:
146:	unsigned char pg_ascii_tolower(unsigned char);
135:	unsigned char pg_ascii_toupper(unsigned char);
36:	int pg_strcasecmp(const char *, const char *);
69:	int pg_strncasecmp(const char *, const char *, size_t);
122:	unsigned char pg_tolower(unsigned char);
105:	unsigned char pg_toupper(unsigned char);

File pgstrsignal.c:
42:	const char *pg_strsignal(int);

File pgtz.c:
76:	int pg_open_tzfile(const char *, char *);
361:	void pg_timezone_initialize(void);
414:	void pg_tzenumerate_end(pg_tzenum *);
426:	pg_tz *pg_tzenumerate_next(pg_tzenum *);
397:	pg_tzenum *pg_tzenumerate_start(void);
234:	pg_tz *pg_tzset(const char *);
320:	pg_tz *pg_tzset_offset(long);
202:	static _Bool init_timezone_hashtable(void);
43:	static const char *pg_TZDIR(void);
151:	static _Bool scan_directory_ci(const char *, const char *, int, char *, int);

File placeholder.c:
379:	void add_placeholders_to_base_rels(PlannerInfo *);
413:	void add_placeholders_to_joinrel(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *);
69:	PlaceHolderInfo *find_placeholder_info(PlannerInfo *, PlaceHolderVar *, _Bool);
144:	void find_placeholders_in_jointree(PlannerInfo *);
350:	void fix_placeholder_input_needed_levels(PlannerInfo *);
39:	PlaceHolderVar *make_placeholder_expr(PlannerInfo *, Expr *, Relids);
265:	void update_placeholder_eval_levels(PlannerInfo *, SpecialJoinInfo *);
213:	static void find_placeholders_in_expr(PlannerInfo *, Node *);
163:	static void find_placeholders_recurse(PlannerInfo *, Node *);

File planagg.c:
73:	void preprocess_minmax_aggregates(PlannerInfo *);
317:	static _Bool build_minmax_path(PlannerInfo *, MinMaxAggInfo *, Oid, Oid, _Bool);
241:	static _Bool can_minmax_aggs(PlannerInfo *, List **);
498:	static Oid fetch_agg_sort_op(Oid);
479:	static void minmax_qp_callback(PlannerInfo *, void *);

File plancache.c:
1309:	_Bool CachedPlanAllowsSimpleValidityCheck(CachedPlanSource *, CachedPlan *, ResourceOwner);
1611:	List *CachedPlanGetTargetList(CachedPlanSource *, QueryEnvironment *);
1424:	_Bool CachedPlanIsSimplyValid(CachedPlanSource *, CachedPlan *, ResourceOwner);
1598:	_Bool CachedPlanIsValid(CachedPlanSource *);
1469:	void CachedPlanSetParentContext(CachedPlanSource *, MemoryContext);
338:	void CompleteCachedPlan(CachedPlanSource *, List *, MemoryContext, Oid *, int, ParserSetupHook, void *, int, _Bool);
1507:	CachedPlanSource *CopyCachedPlan(CachedPlanSource *);
164:	CachedPlanSource *CreateCachedPlan(RawStmt *, const char *, CommandTag);
248:	CachedPlanSource *CreateOneShotCachedPlan(RawStmt *, const char *, CommandTag);
498:	void DropCachedPlan(CachedPlanSource *);
1705:	void FreeCachedExpression(CachedExpression *);
1648:	CachedExpression *GetCachedExpression(Node *);
1141:	CachedPlan *GetCachedPlan(CachedPlanSource *, ParamListInfo, ResourceOwner, QueryEnvironment *);
127:	void InitPlanCache(void);
1264:	void ReleaseCachedPlan(CachedPlan *, ResourceOwner);
2149:	void ResetPlanCache(void);
454:	void SaveCachedPlan(CachedPlanSource *);
1743:	static void AcquireExecutorLocks(List *, _Bool);
1798:	static void AcquirePlannerLocks(List *, _Bool);
879:	static CachedPlan *BuildCachedPlan(CachedPlanSource *, List *, ParamListInfo, QueryEnvironment *);
795:	static _Bool CheckCachedPlan(CachedPlanSource *);
1911:	static TupleDesc PlanCacheComputeResultDesc(List *);
2031:	static void PlanCacheObjectCallback(Datum, int, uint32);
1947:	static void PlanCacheRelCallback(Datum, Oid);
2140:	static void PlanCacheSysCallback(Datum, int, uint32);
1724:	static Query *QueryListGetPrimaryStmt(List *);
527:	static void ReleaseGenericPlan(CachedPlanSource *);
555:	static List *RevalidateCachedQuery(CachedPlanSource *, QueryEnvironment *);
1823:	static void ScanQueryForLocks(Query *, _Bool);
1882:	static _Bool ScanQueryWalker(Node *, _Bool *);
1076:	static double cached_plan_cost(CachedPlan *, _Bool);
1019:	static _Bool choose_custom_plan(CachedPlanSource *, ParamListInfo);

File plancat.c:
1983:	void add_function_cost(PlannerInfo *, Oid, Node *, QualCost *);
1658:	List *build_physical_tlist(PlannerInfo *, RelOptInfo *);
975:	void estimate_rel_size(Relation, int32 *, BlockNumber *, double *, double *);
1921:	Selectivity function_selectivity(PlannerInfo *, Oid, List *, Oid, _Bool, int, JoinType, SpecialJoinInfo *);
2207:	Bitmapset *get_dependent_generated_columns(PlannerInfo *, Index, Bitmapset *);
2044:	double get_function_rows(PlannerInfo *, Oid, Node *);
1113:	int32 get_rel_data_width(Relation, int32 *);
1155:	int32 get_relation_data_width(Oid, int32 *);
113:	void get_relation_info(PlannerInfo *, Oid, _Bool, RelOptInfo *);
2134:	_Bool has_row_triggers(PlannerInfo *, Index, CmdType);
2180:	_Bool has_stored_generated_columns(PlannerInfo *, Index);
2102:	_Bool has_unique_index(RelOptInfo *, AttrNumber);
627:	List *infer_arbiter_indexes(PlannerInfo *);
1880:	Selectivity join_selectivity(PlannerInfo *, Oid, List *, Oid, JoinType, SpecialJoinInfo *);
1471:	_Bool relation_excluded_by_constraints(PlannerInfo *, RelOptInfo *, RangeTblEntry *);
1841:	Selectivity restriction_selectivity(PlannerInfo *, Oid, List *, Oid, int);
1779:	static List *build_index_tlist(PlannerInfo *, IndexOptInfo *, Relation);
2285:	static PartitionScheme find_partition_scheme(PlannerInfo *, Relation);
1195:	static List *get_relation_constraints(PlannerInfo *, Oid, RelOptInfo *, _Bool, _Bool, _Bool);
512:	static void get_relation_foreign_keys(PlannerInfo *, RelOptInfo *, Relation, _Bool);
1317:	static List *get_relation_statistics(RelOptInfo *, Relation);
893:	static _Bool infer_collation_opclass_match(InferenceElem *, Relation, List *);
2460:	static void set_baserel_partition_constraint(Relation, RelOptInfo *);
2392:	static void set_baserel_partition_key_exprs(Relation, RelOptInfo *);
2255:	static void set_relation_partition_info(PlannerInfo *, RelOptInfo *, Relation);

File planmain.c:
55:	RelOptInfo *query_planner(PlannerInfo *, query_pathkeys_callback, void *);

File planner.c:
5654:	Expr *expression_planner(Expr *);
5681:	Expr *expression_planner_with_deps(Expr *, List **, List **);
5495:	Path *get_cheapest_fractional_path(RelOptInfo *, double);
2482:	_Bool limit_needed(Query *);
4895:	void mark_partial_aggref(Aggref *, AggSplit);
5734:	_Bool plan_cluster_use_sort(Oid, Oid);
5852:	int plan_create_index_workers(Oid, Oid);
263:	PlannedStmt *planner(Query *, const char *, int, ParamListInfo);
1199:	Expr *preprocess_phv_expression(PlannerInfo *, Expr *);
2231:	RowMarkType select_rowmark_type(RangeTblEntry *, LockClauseStrength);
276:	PlannedStmt *standard_planner(Query *, const char *, int, ParamListInfo);
590:	PlannerInfo *subquery_planner(PlannerGlobal *, Query *, PlannerInfo *, _Bool, double);
5983:	static void add_paths_to_grouping_rel(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, const AggClauseCosts *, grouping_sets_data *, double, GroupPathExtraData *);
5538:	static void adjust_paths_for_srfs(PlannerInfo *, RelOptInfo *, List *, List *);
6844:	static void apply_scanjoin_target_to_paths(PlannerInfo *, RelOptInfo *, List *, List *, _Bool, _Bool);
6802:	static _Bool can_partial_agg(PlannerInfo *);
5043:	static int common_prefix_cmp(const void *, const void *);
3662:	static void consider_groupingsets_paths(PlannerInfo *, RelOptInfo *, Path *, _Bool, _Bool, grouping_sets_data *, const AggClauseCosts *, double);
3462:	static void create_degenerate_grouping_paths(PlannerInfo *, RelOptInfo *, RelOptInfo *);
4231:	static RelOptInfo *create_distinct_paths(PlannerInfo *, RelOptInfo *);
3275:	static RelOptInfo *create_grouping_paths(PlannerInfo *, RelOptInfo *, PathTarget *, _Bool, grouping_sets_data *);
4114:	static void create_one_window_path(PlannerInfo *, RelOptInfo *, Path *, PathTarget *, PathTarget *, WindowFuncLists *, List *);
4434:	static RelOptInfo *create_ordered_paths(PlannerInfo *, RelOptInfo *, PathTarget *, _Bool, double);
3526:	static void create_ordinary_grouping_paths(PlannerInfo *, RelOptInfo *, RelOptInfo *, const AggClauseCosts *, grouping_sets_data *, GroupPathExtraData *, RelOptInfo **);
6329:	static RelOptInfo *create_partial_grouping_paths(PlannerInfo *, RelOptInfo *, RelOptInfo *, grouping_sets_data *, GroupPathExtraData *, _Bool);
7077:	static void create_partitionwise_grouping_paths(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, const AggClauseCosts *, grouping_sets_data *, PartitionwiseAggregateType, GroupPathExtraData *);
4027:	static RelOptInfo *create_window_paths(PlannerInfo *, RelOptInfo *, PathTarget *, PathTarget *, _Bool, WindowFuncLists *, List *);
2805:	static List *extract_rollup_sets(List *);
6714:	static void gather_grouping_paths(PlannerInfo *, RelOptInfo *);
3153:	static double get_number_of_groups(PlannerInfo *, double, grouping_sets_data *, List *);
7217:	static _Bool group_by_has_partkey(RelOptInfo *, List *, List *);
1228:	static void grouping_planner(PlannerInfo *, double);
3441:	static _Bool is_degenerate_grouping(PlannerInfo *);
4705:	static PathTarget *make_group_input_target(PlannerInfo *, PathTarget *);
3388:	static RelOptInfo *make_grouping_rel(PlannerInfo *, RelOptInfo *, PathTarget *, _Bool, Node *);
4792:	static PathTarget *make_partial_grouping_target(PlannerInfo *, PathTarget *, Node *);
5230:	static List *make_pathkeys_for_window(PlannerInfo *, WindowClause *, List *);
5324:	static PathTarget *make_sort_input_target(PlannerInfo *, PathTarget *, _Bool *);
5112:	static PathTarget *make_window_input_target(PlannerInfo *, PathTarget *, List *);
4930:	static List *postprocess_setop_tlist(List *, List *);
1053:	static Node *preprocess_expression(PlannerInfo *, Node *, int);
2702:	static List *preprocess_groupclause(PlannerInfo *, List *);
1908:	static grouping_sets_data *preprocess_grouping_sets(PlannerInfo *);
2297:	static double preprocess_limit(PlannerInfo *, double, int64 *, int64 *);
1155:	static void preprocess_qual_conditions(PlannerInfo *, Node *);
2120:	static void preprocess_rowmarks(PlannerInfo *);
2083:	static List *remap_to_groupclause_idx(List *, List *, int *);
2541:	static void remove_useless_groupby_columns(PlannerInfo *);
3017:	static List *reorder_grouping_sets(List *, List *);
4963:	static List *select_active_windows(PlannerInfo *, WindowFuncLists *);
3063:	static void standard_qp_callback(PlannerInfo *, void *);

File plural-exp.c:
97:	void __gettext_extract_plural(const char *, const struct expression **, unsigned long *);

File plural.y:
210:	void __gettext_free_exp(struct expression *);
63:	static struct expression *new_exp(enum expression_operator, struct expression * const *, int);

File pm_getmaps.c:
55:	struct pmaplist *__GI_pmap_getmaps(struct sockaddr_in *);

File pm_getport.c:
84:	u_short __GI___libc_rpc_getport(struct sockaddr_in *, u_long, u_long, u_int, time_t, time_t);
149:	u_short __GI_pmap_getport(struct sockaddr_in *, u_long, u_long, u_int);
49:	int __get_socket(struct sockaddr_in *);

File pmap_clnt.c:
106:	bool_t __GI_pmap_set(u_long, u_long, int, u_short);
142:	bool_t __GI_pmap_unset(u_long, u_long);
56:	static bool_t __get_myaddress(struct sockaddr_in *);

File pmap_prot.c:
42:	bool_t __GI_xdr_pmap(XDR *, struct pmap *);

File pmap_prot2.c:
80:	bool_t __GI_xdr_pmaplist(XDR *, struct pmaplist **);

File pmap_rmt.c:
199:	enum clnt_stat __GI_clnt_broadcast(u_long, u_long, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, resultproc_t);
68:	enum clnt_stat __GI_pmap_rmtcall(struct sockaddr_in *, u_long, u_long, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval, u_long *);
112:	bool_t __GI_xdr_rmtcall_args(XDR *, struct rmtcallargs *);
144:	bool_t __GI_xdr_rmtcallres(XDR *, struct rmtcallres *);

File pmsignal.c:
247:	int AssignPostmasterChildSlot(void);
198:	_Bool CheckPostmasterSignal(PMSignalReason);
229:	QuitSignalReason GetQuitSignalReason(void);
307:	_Bool IsPostmasterChildWalSender(int);
323:	void MarkPostmasterChildActive(void);
356:	void MarkPostmasterChildInactive(void);
339:	void MarkPostmasterChildWalSender(void);
144:	void PMSignalShmemInit(void);
129:	Size PMSignalShmemSize(void);
437:	void PostmasterDeathSignalInit(void);
376:	_Bool PostmasterIsAliveInternal(void);
284:	_Bool ReleasePostmasterChildSlot(int);
181:	void SendPostmasterSignal(PMSignalReason);
218:	void SetQuitSignalReason(QuitSignalReason);
101:	static void postmaster_death_handler(int);

File policy.c:
773:	ObjectAddress AlterPolicy(AlterPolicyStmt *);
573:	ObjectAddress CreatePolicy(CreatePolicyStmt *);
196:	void RelationBuildRowSecurity(Relation);
335:	void RemovePolicyById(Oid);
419:	_Bool RemoveRoleFromObjectPolicy(Oid, Oid, Oid);
1210:	Oid get_relation_policy_oid(Oid, const char *, _Bool);
1262:	_Bool relation_has_policies(Relation);
1102:	ObjectAddress rename_policy(RenameStmt *);
67:	static void RangeVarCallbackForPolicy(const RangeVar *, Oid, Oid, void *);
111:	static char parse_policy_command(const char *);
140:	static Datum *policy_role_list_to_array(List *, int *);

File poll_chk.c:
22:	int __poll_chk(struct pollfd *, nfds_t, int, unsigned long);

File portalcmds.c:
43:	void PerformCursorOpen(ParseState *, DeclareCursorStmt *, ParamListInfo, _Bool);
214:	void PerformPortalClose(const char *);
167:	void PerformPortalFetch(FetchStmt *, DestReceiver *, QueryCompletion *);
316:	void PersistHoldablePortal(Portal);
263:	void PortalCleanup(Portal);

File portalmem.c:
781:	void AtAbort_Portals(void);
858:	void AtCleanup_Portals(void);
979:	void AtSubAbort_Portals(SubTransactionId, SubTransactionId, ResourceOwner, ResourceOwner);
1092:	void AtSubCleanup_Portals(SubTransactionId);
943:	void AtSubCommit_Portals(SubTransactionId, SubTransactionId, int, ResourceOwner);
235:	Portal CreateNewPortal(void);
175:	Portal CreatePortal(const char *, _Bool, _Bool);
104:	void EnablePortalManager(void);
1303:	void ForgetPortalSnapshots(void);
130:	Portal GetPortalByName(const char *);
1254:	void HoldPinnedPortals(void);
395:	void MarkPortalActive(Portal);
414:	void MarkPortalDone(Portal);
442:	void MarkPortalFailed(Portal);
371:	void PinPortal(Portal);
331:	void PortalCreateHoldStore(Portal);
282:	void PortalDefineQuery(Portal, const char *, const char *, CommandTag, List *, CachedPlan *);
468:	void PortalDrop(Portal, _Bool);
917:	void PortalErrorCleanup(void);
151:	PlannedStmt *PortalGetPrimaryStmt(Portal);
607:	void PortalHashTableDeleteAll(void);
677:	_Bool PreCommit_Portals(_Bool);
1218:	_Bool ThereAreNoReadyPortals(void);
380:	void UnpinPortal(Portal);
1131:	Datum pg_cursor(FunctionCallInfo);
636:	static void HoldPortal(Portal);
310:	static void PortalReleaseCachedPlan(Portal);

File postgres.c:
2964:	void FloatExceptionHandler(int);
3916:	void PostgresMain(int, char **, const char *, const char *);
489:	void ProcessClientReadInterrupt(_Bool);
534:	void ProcessClientWriteInterrupt(_Bool);
3121:	void ProcessInterrupts(void);
2981:	void RecoveryConflictInterrupt(ProcSignalReason);
4769:	void ResetUsage(void);
4775:	void ShowUsage(const char *);
2944:	void StatementCancelHandler(int);
3544:	void assign_max_stack_depth(int, void *);
2326:	int check_log_duration(char *, _Bool);
3528:	_Bool check_max_stack_depth(int *, void **, GucSource);
3467:	void check_stack_depth(void);
2911:	void die(int);
4735:	long get_stack_depth_rlimit(void);
3625:	const char *get_stats_option_name(const char *);
638:	List *pg_analyze_and_rewrite(RawStmt *, const char *, Oid *, int, QueryEnvironment *);
675:	List *pg_analyze_and_rewrite_params(RawStmt *, const char *, ParserSetupHook, void *, QueryEnvironment *);
590:	List *pg_parse_query(const char *);
910:	List *pg_plan_queries(List *, const char *, int, ParamListInfo);
824:	PlannedStmt *pg_plan_query(Query *, const char *, int, ParamListInfo);
733:	List *pg_rewrite_query(Query *);
3663:	void process_postgres_switches(int, char **, GucContext, const char **);
2815:	void quickdie(int);
3446:	void restore_stack_base(pg_stack_base_t);
3557:	void set_debug_options(int, GucContext, GucSource);
3584:	_Bool set_plan_disabling_options(const char *, GucContext, GucSource);
3406:	pg_stack_base_t set_stack_base(void);
3480:	_Bool stack_is_too_deep(void);
225:	static int InteractiveBackend(StringInfo);
2745:	static _Bool IsTransactionExitStmt(Node *);
2762:	static _Bool IsTransactionExitStmtList(List *);
2777:	static _Bool IsTransactionStmtList(List *);
469:	static int ReadCommand(StringInfo);
341:	static int SocketBackend(StringInfo);
2492:	static void bind_param_error_callback(void *);
2288:	static _Bool check_log_statement(List *);
4934:	static void disable_statement_timeout(void);
2792:	static void drop_unnamed_stmt(void);
4913:	static void enable_statement_timeout(void);
2442:	static int errdetail_abort(void);
2389:	static int errdetail_execute(List *);
2422:	static int errdetail_params(ParamListInfo);
2456:	static int errdetail_recovery_conflict(void);
1582:	static void exec_bind_message(StringInfo);
2635:	static void exec_describe_portal_message(const char *);
2541:	static void exec_describe_statement_message(const char *);
2043:	static void exec_execute_message(const char *, long);
1325:	static void exec_parse_message(const char *, const char *, Oid *, int);
950:	static void exec_simple_query(const char *);
2714:	static void finish_xact_command(void);
4715:	static void forbidden_in_wal_sender(char);
313:	static int interactive_getc(void);
4877:	static void log_disconnections(int, Datum);
2686:	static void start_xact_command(void);

File postinit.c:
537:	void BaseInit(void);
579:	void InitPostgres(const char *, Oid, const char *, Oid, char *, _Bool);
515:	void InitializeMaxBackends(void);
456:	void pg_split_opts(char **, int *, const char *);
306:	static void CheckMyDatabase(const char *, _Bool, _Bool);
1252:	static void ClientCheckTimeoutHandler(void);
97:	static HeapTuple GetDatabaseTuple(const char *);
140:	static HeapTuple GetDatabaseTupleByOid(Oid);
1236:	static void IdleInTransactionSessionTimeoutHandler(void);
1244:	static void IdleSessionTimeoutHandler(void);
429:	static void InitCommunication(void);
1226:	static void LockTimeoutHandler(void);
186:	static void PerformAuthentication(Port *);
1187:	static void ShutdownPostgres(int, Datum);
1204:	static void StatementTimeoutHandler(void);
1263:	static _Bool ThereIsAtLeastOneRole(void);
1153:	static void process_settings(Oid, Oid);
1088:	static void process_startup_options(Port *, _Bool);

File postmaster.c:
5765:	void BackgroundWorkerBlockSignals(void);
5719:	void BackgroundWorkerInitializeConnection(const char *, const char *, uint32);
5742:	void BackgroundWorkerInitializeConnectionByOid(Oid, Oid, uint32);
5771:	void BackgroundWorkerUnblockSignals(void);
2587:	void ClosePostmasterPorts(_Bool);
2651:	void InitProcessGlobals(void);
5709:	int MaxLivePostmasterChildren(void);
581:	void PostmasterMain(int, char **);
6125:	_Bool PostmasterMarkPIDForWorkerNotify(int);
4343:	static void BackendInitialize(Port *);
4523:	static void BackendRun(Port *);
4191:	static int BackendStartup(Port *);
3385:	static void CleanupBackend(int, int);
3285:	static _Bool CleanupBackgroundWorker(int, int);
1432:	static void CloseServerPorts(int, Datum);
2539:	static Port *ConnCreate(int);
2570:	static void ConnFree(Port *);
5402:	static int CountChildren(int);
5665:	static _Bool CreateOptsFile(int, char **, char *);
1563:	static void DetermineSleepTime(struct timeval *);
5137:	static void ExitPostmaster(int);
3469:	static void HandleChildCrash(int, int, const char *);
6607:	static void InitPostmasterDeathWatchHandle(void);
3722:	static void LogChildExit(int, const char *, int, int);
5646:	static void MaybeStartWalReceiver(void);
3787:	static void PostmasterStateMachine(void);
1945:	static int ProcessStartupPacket(Port *, _Bool, _Bool);
5392:	static _Bool RandomCancelKey(int32 *);
2702:	static void SIGHUP_handler(int);
2387:	static void SendNegotiateProtocolVersion(List *);
1661:	static int ServerLoop(void);
4114:	static _Bool SignalSomeChildren(int, int);
5555:	static void StartAutovacuumWorker(void);
5448:	static pid_t StartChildProcess(AuxProcType);
5382:	static void StartupPacketTimeoutHandler(void);
4158:	static void TerminateChildren(int);
5942:	static _Bool assign_backendlist_entry(RegisteredBgWorker *);
5899:	static _Bool bgworker_should_start_now(BgWorkerStartTime);
2474:	static CAC_state canAcceptConnections(int);
1534:	static void checkControlFile(void);
5807:	static _Bool do_start_bgworker(RegisteredBgWorker *);
5373:	static void dummy_handler(int);
1480:	static void getInstallationPaths(const char *);
1903:	static int initMasks(fd_set *);
6006:	static void maybe_start_bgworkers(void);
2784:	static void pmdie(int);
2408:	static void processCancelRequest(Port *, void *);
5358:	static void process_startup_packet_die(int);
2936:	static void reaper(int);
4308:	static void report_fork_failure_to_client(Port *, int);
2685:	static void reset_shared(void);
4088:	static void signal_child(pid_t, int);
5170:	static void sigusr1_handler(int);
1468:	static void unlink_external_pid_file(int, Datum);

File ppoll_chk.c:
22:	int __ppoll_chk(struct pollfd *, nfds_t, const struct timespec *, const __sigset_t *, unsigned long);

File pqcomm.c:
883:	void RemoveSocketFiles(void);
850:	void StreamClose(pgsocket);
716:	int StreamConnection(pgsocket, Port *);
318:	int StreamServerPort(int, const char *, unsigned short, const char *, pgsocket *, int);
865:	void TouchSocketFiles(void);
1151:	_Bool pq_buffer_has_data(void);
1945:	_Bool pq_check_connection(void);
1188:	void pq_endmsgread(void);
994:	int pq_getbyte(void);
1034:	int pq_getbyte_if_available(unsigned char *);
1088:	int pq_getbytes(char *, size_t);
1792:	int pq_getkeepalivescount(Port *);
1623:	int pq_getkeepalivesidle(Port *);
1708:	int pq_getkeepalivesinterval(Port *);
1226:	int pq_getmessage(StringInfo, int);
1867:	int pq_gettcpusertimeout(Port *);
176:	void pq_init(void);
1204:	_Bool pq_is_reading_msg(void);
1013:	int pq_peekbyte(void);
1552:	int pq_putmessage_v2(char, const char *, size_t);
1822:	int pq_setkeepalivescount(int, Port *);
1658:	int pq_setkeepalivesidle(int, Port *);
1743:	int pq_setkeepalivesinterval(int, Port *);
1897:	int pq_settcpusertimeout(int, Port *);
1164:	void pq_startmsgread(void);
606:	static int Lock_AF_UNIX(const char *, const char *);
641:	static int Setup_AF_UNIX(const char *);
1353:	static int internal_flush(void);
1300:	static int internal_putbytes(const char *, size_t);
1122:	static int pq_discardbytes(size_t);
933:	static int pq_recvbuf(void);
247:	static void socket_close(int, Datum);
232:	static void socket_comm_reset(void);
1331:	static int socket_flush(void);
1426:	static int socket_flush_if_writable(void);
1452:	static _Bool socket_is_send_pending(void);
1482:	static int socket_putmessage(char, const char *, size_t);
1515:	static void socket_putmessage_noblock(char, const char *, size_t);
916:	static void socket_set_nonblocking(_Bool);

File pqformat.c:
87:	void pq_beginmessage(StringInfo, char);
108:	void pq_beginmessage_reuse(StringInfo, char);
328:	void pq_begintypsend(StringInfo);
530:	void pq_copymsgbytes(StringInfo, char *, int);
298:	void pq_endmessage(StringInfo);
316:	void pq_endmessage_reuse(StringInfo);
348:	bytea *pq_endtypsend(StringInfo);
401:	int pq_getmsgbyte(StringInfo);
510:	const char *pq_getmsgbytes(StringInfo, int);
637:	void pq_getmsgend(StringInfo);
471:	float4 pq_getmsgfloat4(StringInfo);
490:	float8 pq_getmsgfloat8(StringInfo);
417:	unsigned int pq_getmsgint(StringInfo, int);
455:	int64 pq_getmsgint64(StringInfo);
610:	const char *pq_getmsgrawstring(StringInfo);
581:	const char *pq_getmsgstring(StringInfo);
548:	char *pq_getmsgtext(StringInfo, int, int *);
390:	void pq_putemptymessage(char);
369:	void pq_puttextmessage(char, const char *);
229:	void pq_send_ascii_string(StringInfo, const char *);
125:	void pq_sendbytes(StringInfo, const char *, int);
142:	void pq_sendcountedtext(StringInfo, const char *, int, _Bool);
254:	void pq_sendfloat4(StringInfo, float4);
278:	void pq_sendfloat8(StringInfo, float8);
197:	void pq_sendstring(StringInfo, const char *);
174:	void pq_sendtext(StringInfo, const char *, int);

File pqmq.c:
199:	void pq_parse_errornotice(StringInfo, ErrorData *);
51:	void pq_redirect_to_shm_mq(dsm_segment *, shm_mq_handle *);
76:	void pq_set_parallel_leader(pid_t, BackendId);
84:	static void mq_comm_reset(void);
90:	static int mq_flush(void);
97:	static int mq_flush_if_writable(void);
104:	static _Bool mq_is_send_pending(void);
116:	static int mq_putmessage(char, const char *, size_t);
182:	static void mq_putmessage_noblock(char, const char *, size_t);
65:	static void pq_cleanup_redirect_to_shm_mq(dsm_segment *, Datum);

File pqsignal.c:
41:	void pqinitmask(void);
40:	pqsigfunc pqsignal(int, pqsigfunc);
120:	pqsigfunc pqsignal_pm(int, pqsigfunc);

File pquery.c:
206:	PortalStrategy ChoosePortalStrategy(List *);
67:	QueryDesc *CreateQueryDesc(PlannedStmt *, const char *, Snapshot, Snapshot, DestReceiver *, ParamListInfo, QueryEnvironment *, int);
1782:	void EnsurePortalSnapshotExists(void);
323:	List *FetchPortalTargetList(Portal);
345:	List *FetchStatementTargetList(Node *);
105:	void FreeQueryDesc(QueryDesc *);
1734:	_Bool PlannedStmtRequiresSnapshot(PlannedStmt *);
681:	_Bool PortalRun(Portal, long, _Bool, _Bool, DestReceiver *, DestReceiver *, QueryCompletion *);
1388:	uint64 PortalRunFetch(Portal, FetchDirection, long, DestReceiver *);
620:	void PortalSetResultFormat(Portal, int, int16 *);
430:	void PortalStart(Portal, ParamListInfo, int, Snapshot);
1683:	static void DoPortalRewind(Portal);
1489:	static uint64 DoPortalRunFetch(Portal, FetchDirection, long, DestReceiver *);
997:	static void FillPortalStore(Portal, _Bool);
1187:	static void PortalRunMulti(Portal, _Bool, _Bool, DestReceiver *, DestReceiver *, QueryCompletion *);
864:	static uint64 PortalRunSelect(Portal, _Bool, long, DestReceiver *);
1124:	static void PortalRunUtility(Portal, PlannedStmt *, _Bool, _Bool, DestReceiver *, QueryCompletion *);
136:	static void ProcessQuery(PlannedStmt *, const char *, ParamListInfo, QueryEnvironment *, DestReceiver *, QueryCompletion *);
1058:	static uint64 RunFromStore(Portal, ScanDirection, uint64, DestReceiver *);

File pread64_chk.c:
23:	ssize_t __pread64_chk(int, void *, size_t, off64_t, size_t);

File pread_chk.c:
23:	ssize_t __pread_chk(int, void *, size_t, off_t, size_t);

File predicate.c:
4925:	void AtPrepare_PredicateLocks(void);
5195:	void AttachSerializableXact(SerializableXactHandle);
4446:	void CheckForSerializableConflictIn(Relation, ItemPointer, BlockNumber);
4121:	void CheckForSerializableConflictOut(Relation, TransactionId, Snapshot);
4089:	_Bool CheckForSerializableConflictOutNeeded(Relation, Snapshot);
1069:	void CheckPointPredicate(void);
4529:	void CheckTableForSerializableConflictIn(Relation);
1443:	PredicateLockData *GetPredicateLockStatusData(void);
1628:	int GetSafeSnapshotBlockingPids(int, int *, int);
1680:	Snapshot GetSerializableTransactionSnapshot(Snapshot);
1153:	void InitPredicateLocks(void);
1990:	_Bool PageIsPredicateLocked(Relation, BlockNumber);
5001:	void PostPrepare_PredicateLocks(TransactionId);
4831:	void PreCommit_CheckForSerializationFailure(void);
2592:	void PredicateLockPage(Relation, BlockNumber, Snapshot);
3252:	void PredicateLockPageCombine(Relation, BlockNumber, BlockNumber);
3167:	void PredicateLockPageSplit(Relation, BlockNumber, BlockNumber);
2569:	void PredicateLockRelation(Relation, Snapshot);
1355:	Size PredicateLockShmemSize(void);
2614:	void PredicateLockTID(Relation, ItemPointer, Snapshot, TransactionId);
5023:	void PredicateLockTwoPhaseFinish(TransactionId, _Bool);
1941:	void RegisterPredicateLockingXid(TransactionId);
3332:	void ReleasePredicateLocks(_Bool, _Bool);
1720:	void SetSerializableTransactionSnapshot(Snapshot, VirtualTransactionId *, int);
5186:	SerializableXactHandle ShareSerializableXact(void);
3146:	void TransferPredicateLocksToHeapRelation(Relation);
5050:	void predicatelock_twophase_recover(TransactionId, uint16, void *, uint32);
2318:	static _Bool CheckAndPromotePredicateLockRequest(const PREDICATELOCKTARGETTAG *);
4264:	static void CheckTargetForConflictsIn(PREDICATELOCKTARGETTAG *);
3743:	static void ClearOldPredicateLocks(void);
2093:	static _Bool CoarserLockCovers(const PREDICATELOCKTARGETTAG *);
1922:	static void CreateLocalPredicateLockHash(void);
580:	static SERIALIZABLEXACT *CreatePredXact(void);
2445:	static void CreatePredicateLock(const PREDICATELOCKTARGETTAG *, uint32, SERIALIZABLEXACT *);
2383:	static void DecrementParentLocks(const PREDICATELOCKTARGETTAG *);
2196:	static void DeleteChildTargetLocks(const PREDICATELOCKTARGETTAG *);
2662:	static void DeleteLockTarget(PREDICATELOCKTARGET *, uint32);
2950:	static void DropAllPredicateLocksFromTable(Relation, _Bool);
612:	static SERIALIZABLEXACT *FirstPredXact(void);
4621:	static void FlagRWConflict(SERIALIZABLEXACT *, SERIALIZABLEXACT *);
750:	static void FlagSxactUnsafe(SERIALIZABLEXACT *);
2054:	static _Bool GetParentPredicateLockTag(const PREDICATELOCKTARGETTAG *, PREDICATELOCKTARGETTAG *);
1558:	static Snapshot GetSafeSnapshot(Snapshot);
1762:	static Snapshot GetSerializableTransactionSnapshotInt(Snapshot, VirtualTransactionId *, int);
2281:	static int MaxPredicateChildLocks(const PREDICATELOCKTARGETTAG *);
627:	static SERIALIZABLEXACT *NextPredXact(SERIALIZABLEXACT *);
4656:	static void OnConflict_CheckForSerializationFailure(const SERIALIZABLEXACT *, SERIALIZABLEXACT *);
2510:	static void PredicateLockAcquire(const PREDICATELOCKTARGETTAG *);
2027:	static _Bool PredicateLockExists(const PREDICATELOCKTARGETTAG *);
495:	static _Bool PredicateLockingNeededForRelation(Relation);
653:	static _Bool RWConflictExists(const SERIALIZABLEXACT *, const SERIALIZABLEXACT *);
3900:	static void ReleaseOneSerializableXact(SERIALIZABLEXACT *, _Bool, _Bool);
597:	static void ReleasePredXact(SERIALIZABLEXACT *);
3725:	static void ReleasePredicateLocksLocal(void);
742:	static void ReleaseRWConflict(RWConflict);
2122:	static void RemoveScratchTarget(_Bool);
2165:	static void RemoveTargetIfNoLongerUsed(PREDICATELOCKTARGET *, uint32);
2143:	static void RestoreScratchTarget(_Bool);
906:	static void SerialAdd(TransactionId, SerCommitSeqNo);
977:	static SerCommitSeqNo SerialGetMinConflictCommitSeqNo(TransactionId);
866:	static void SerialInit(void);
791:	static _Bool SerialPagePrecedesLogically(int, int);
1018:	static void SerialSetActiveSerXmin(TransactionId);
514:	static _Bool SerializationNeededForRead(Relation, Snapshot);
558:	static _Bool SerializationNeededForWrite(Relation);
3274:	static void SetNewSxactGlobalXmin(void);
712:	static void SetPossibleUnsafeConflict(SERIALIZABLEXACT *, SERIALIZABLEXACT *);
686:	static void SetRWConflict(SERIALIZABLEXACT *, SERIALIZABLEXACT *);
1501:	static void SummarizeOldestCommittedSxact(void);
2733:	static _Bool TransferPredicateLocksToNewTarget(PREDICATELOCKTARGETTAG, PREDICATELOCKTARGETTAG, _Bool);
4063:	static _Bool XidIsConcurrent(TransactionId);
1417:	static uint32 predicatelock_hash(const void *, Size);

File predtest.c:
151:	_Bool predicate_implied_by(List *, List *, _Bool);
221:	_Bool predicate_refuted_by(List *, List *, _Bool);
2209:	static void InvalidateOprProofCacheCallBack(Datum, int, uint32);
1020:	static void arrayconst_cleanup_fn(PredIterInfo);
1007:	static Node *arrayconst_next_fn(PredIterInfo);
958:	static void arrayconst_startup_fn(Node *, PredIterInfo);
1080:	static void arrayexpr_cleanup_fn(PredIterInfo);
1068:	static Node *arrayexpr_next_fn(PredIterInfo);
1041:	static void arrayexpr_startup_fn(Node *, PredIterInfo);
937:	static void boolexpr_startup_fn(Node *, PredIterInfo);
1323:	static _Bool clause_is_strict_for(Node *, Node *, _Bool);
1249:	static Node *extract_not_arg(Node *);
1277:	static Node *extract_strong_not_arg(Node *);
2193:	static Oid get_btree_test_op(Oid, Oid, _Bool);
927:	static void list_cleanup_fn(PredIterInfo);
914:	static Node *list_next_fn(PredIterInfo);
907:	static void list_startup_fn(Node *, PredIterInfo);
1964:	static OprProofCacheEntry *lookup_proof_cache(Oid, Oid, _Bool);
1642:	static _Bool operator_predicate_proof(Expr *, Node *, _Bool, _Bool);
2168:	static _Bool operator_same_subexprs_lookup(Oid, Oid, _Bool);
1895:	static _Bool operator_same_subexprs_proof(Oid, Oid, _Bool);
825:	static PredClass predicate_classify(Node *, PredIterInfo);
289:	static _Bool predicate_implied_by_recurse(Node *, Node *, _Bool);
1117:	static _Bool predicate_implied_by_simple_clause(Expr *, Node *, _Bool);
530:	static _Bool predicate_refuted_by_recurse(Node *, Node *, _Bool);
1179:	static _Bool predicate_refuted_by_simple_clause(Expr *, Node *, _Bool);

File prepagg.c:
538:	void get_agg_clause_costs(PlannerInfo *, AggSplit, AggClauseCosts *);
111:	void preprocess_aggrefs(PlannerInfo *, Node *);
500:	static Datum GetAggInitVal(Datum, Oid);
360:	static int find_compatible_agg(PlannerInfo *, Aggref *, List **);
438:	static int find_compatible_trans(PlannerInfo *, Aggref *, _Bool, Oid, Oid, int, _Bool, Oid, Oid, Oid, Datum, _Bool, List *);
117:	static void preprocess_aggref(Aggref *, PlannerInfo *);
324:	static _Bool preprocess_aggrefs_walker(Node *, PlannerInfo *);

File prepare.c:
539:	void DeallocateQuery(DeallocateStmt *);
574:	void DropAllPreparedStatements(void);
553:	void DropPreparedStatement(const char *, _Bool);
184:	void ExecuteQuery(ParseState *, ExecuteStmt *, IntoClause *, ParamListInfo, DestReceiver *, QueryCompletion *);
605:	void ExplainExecuteQuery(ExecuteStmt *, IntoClause *, ExplainState *, const char *, ParamListInfo, QueryEnvironment *);
468:	PreparedStatement *FetchPreparedStatement(const char *, _Bool);
500:	TupleDesc FetchPreparedStatementResultDesc(PreparedStatement *);
523:	List *FetchPreparedStatementTargetList(PreparedStatement *);
58:	void PrepareQuery(ParseState *, PrepareStmt *, int, int);
426:	void StorePreparedStatement(const char *, CachedPlanSource *, _Bool);
701:	Datum pg_prepared_statement(FunctionCallInfo);
315:	static ParamListInfo EvaluateParams(ParseState *, PreparedStatement *, List *, EState *);
406:	static void InitQueryHashTable(void);
797:	static Datum build_regtype_array(Oid *, int);

File prepjointree.c:
2471:	void flatten_simple_union_all(PlannerInfo *);
3582:	Relids get_relids_for_join(Query *, int);
3538:	Relids get_relids_in_jointree(Node *, _Bool);
643:	void preprocess_function_rtes(PlannerInfo *);
209:	void pull_up_sublinks(PlannerInfo *);
684:	void pull_up_subqueries(PlannerInfo *);
2589:	void reduce_outer_joins(PlannerInfo *);
3002:	void remove_useless_result_rtes(PlannerInfo *);
151:	void replace_empty_jointree(Query *);
3346:	static _Bool find_dependent_phvs(PlannerInfo *, int);
3364:	static _Bool find_dependent_phvs_in_jointree(PlannerInfo *, Node *, int);
3309:	static _Bool find_dependent_phvs_walker(Node *, find_dependent_phvs_context *);
3599:	static Node *find_jointree_node_for_rel(Node *, int);
3500:	static void fix_append_rel_relids(List *, int, Relids);
3240:	static int get_result_relid(PlannerInfo *, Node *);
1907:	static _Bool is_safe_append_member(Query *);
1415:	static _Bool is_simple_subquery(PlannerInfo *, Query *, RangeTblEntry *, JoinExpr *);
1836:	static _Bool is_simple_union_all(Query *);
1864:	static _Bool is_simple_union_all_recurse(Node *, Query *, List *);
1648:	static _Bool is_simple_values(PlannerInfo *, RangeTblEntry *);
1955:	static _Bool jointree_contains_lateral_outer_refs(PlannerInfo *, Node *, _Bool, Relids);
1377:	static void make_setop_translation_list(Query *, Index, AppendRelInfo *);
2031:	static void perform_pullup_replace_vars(PlannerInfo *, pullup_replace_vars_context *, JoinExpr *, AppendRelInfo *);
1707:	static Node *pull_up_constant_function(PlannerInfo *, Node *, RangeTblEntry *, JoinExpr *, AppendRelInfo *);
891:	static Node *pull_up_simple_subquery(PlannerInfo *, Node *, RangeTblEntry *, JoinExpr *, JoinExpr *, AppendRelInfo *);
1229:	static Node *pull_up_simple_union_all(PlannerInfo *, Node *, RangeTblEntry *);
1552:	static Node *pull_up_simple_values(PlannerInfo *, Node *, RangeTblEntry *);
236:	static Node *pull_up_sublinks_jointree_recurse(PlannerInfo *, Node *, Relids *);
393:	static Node *pull_up_sublinks_qual_recurse(PlannerInfo *, Node *, Node **, Relids, Node **, Relids);
734:	static Node *pull_up_subqueries_recurse(PlannerInfo *, Node *, JoinExpr *, JoinExpr *, AppendRelInfo *);
1310:	static void pull_up_union_leaf_queries(Node *, PlannerInfo *, int, Query *, int);
2240:	static Node *pullup_replace_vars(Node *, pullup_replace_vars_context *);
2250:	static Node *pullup_replace_vars_callback(Var *, replace_rte_variables_context *);
2444:	static Query *pullup_replace_vars_subquery(Query *, pullup_replace_vars_context *);
2618:	static reduce_outer_joins_state *reduce_outer_joins_pass1(Node *);
2690:	static void reduce_outer_joins_pass2(Node *, reduce_outer_joins_state *, PlannerInfo *, Relids, List *, List *);
3270:	static void remove_result_refs(PlannerInfo *, int, Node *);
3041:	static Node *remove_useless_results_recurse(PlannerInfo *, Node *);
2119:	static void replace_vars_in_jointree(Node *, pullup_replace_vars_context *, JoinExpr *);
3472:	static void substitute_phv_relids(Node *, int, Relids);
3428:	static _Bool substitute_phv_relids_walker(Node *, substitute_phv_relids_context *);

File prepqual.c:
293:	Expr *canonicalize_qual(Expr *, _Bool);
74:	Node *negate_clause(Node *);
406:	static Expr *find_duplicate_ors(Expr *, _Bool);
517:	static Expr *process_duplicate_ors(List *);
323:	static List *pull_ands(List *);
349:	static List *pull_ors(List *);

File preptlist.c:
261:	List *extract_update_targetlist_colnos(List *);
425:	PlanRowMark *get_plan_rowmark(List *, Index);
62:	void preprocess_targetlist(PlannerInfo *);
295:	static List *expand_insert_targetlist(List *, Relation);

File prepunion.c:
103:	RelOptInfo *plan_set_operations(PlannerInfo *);
1016:	static _Bool choose_hashed_setop(PlannerInfo *, List *, Path *, double, double, const char *);
1260:	static List *generate_append_tlist(List *, List *, _Bool, List *, List *);
700:	static RelOptInfo *generate_nonunion_paths(SetOperationStmt *, PlannerInfo *, List *, List **);
434:	static RelOptInfo *generate_recursion_path(SetOperationStmt *, PlannerInfo *, List *, List **);
1388:	static List *generate_setop_grouplist(SetOperationStmt *, List *);
1122:	static List *generate_setop_tlist(List *, List *, int, Index, _Bool, List *, List *);
540:	static RelOptInfo *generate_union_paths(SetOperationStmt *, PlannerInfo *, List *, List **);
936:	static Path *make_union_unique(SetOperationStmt *, Path *, List *, PlannerInfo *);
877:	static List *plan_union_children(PlannerInfo *, SetOperationStmt *, List *, List **);
998:	static void postprocess_setop_rel(PlannerInfo *, RelOptInfo *);
207:	static RelOptInfo *recurse_set_operations(Node *, PlannerInfo *, List *, List *, _Bool, int, List *, List **, double *);

File print.c:
72:	void elog_node_display(int, const char *, const void *, _Bool);
97:	char *format_node_dump(const char *);
54:	void pprint(const void *);
151:	char *pretty_format_node_dump(const char *);
36:	void print(const void *);
321:	void print_expr(const Node *, const List *);
426:	void print_pathkeys(const List *, const List *);
254:	void print_rt(const List *);
492:	void print_slot(TupleTableSlot *);
466:	void print_tl(const List *, const List *);

File printf-parsemb.c:
61:	size_t __parse_one_specmb(const unsigned char *, size_t, struct printf_spec *, size_t *);
58:	size_t __parse_one_specwc(const unsigned int *, size_t, struct printf_spec *, size_t *);

File printf-prs.c:
59:	size_t parse_printf_format(const char *, size_t, int *);

File printf.c:
27:	int __printf(const char *, ...);

File printf_chk.c:
24:	int ___printf_chk(int, const char *, ...);

File printf_fp.c:
205:	int __GI___printf_fp_l(FILE *, locale_t, const struct printf_info *, const void * const *);
1264:	int ___printf_fp(FILE *, const struct printf_info *, const void * const *);
1277:	unsigned int __guess_grouping(unsigned int, const char *);
161:	static wchar_t hack_digit(struct hack_digit_param *);

File printf_size.c:
82:	int __printf_size(FILE *, const struct printf_info *, const void * const *);
223:	int printf_size_info(const struct printf_info *, size_t, int *);

File printsimple.c:
58:	_Bool printsimple(TupleTableSlot *, DestReceiver *);
30:	void printsimple_startup(DestReceiver *, int, TupleDesc);

File printtup.c:
166:	void SendRowDescriptionMessage(StringInfo, TupleDesc, List *, int16 *);
100:	void SetRemoteDestReceiverParams(DestReceiver *, Portal);
441:	void debugStartup(DestReceiver *, int, TupleDesc);
459:	_Bool debugtup(TupleTableSlot *, DestReceiver *);
71:	DestReceiver *printtup_create_DR(CommandDest);
420:	static void printatt(unsigned int, Form_pg_attribute, char *);
301:	static _Bool printtup(TupleTableSlot *, DestReceiver *);
410:	static void printtup_destroy(DestReceiver *);
250:	static void printtup_prepare_info(DR_printtup *, TupleDesc, int);
386:	static void printtup_shutdown(DestReceiver *);
111:	static void printtup_startup(DestReceiver *, int, TupleDesc);

File proc.c:
992:	PGPROC *AuxiliaryPidGetProc(int);
1951:	void BecomeLockGroupLeader(void);
1981:	_Bool BecomeLockGroupMember(PGPROC *, int);
1875:	void CheckDeadLockAlert(void);
662:	int GetStartupBufferPinWaitBufId(void);
676:	_Bool HaveNFreeProcs(int);
517:	void InitAuxiliaryProcess(void);
159:	void InitProcGlobal(void);
303:	void InitProcess(void);
482:	void InitProcessPhase2(void);
699:	_Bool IsWaitingForLock(void);
716:	void LockErrorCleanup(void);
124:	int ProcGlobalSemas(void);
102:	Size ProcGlobalShmemSize(void);
1730:	void ProcLockWakeup(LockMethod, LOCK *);
1045:	void ProcQueueInit(PROC_QUEUE *);
792:	void ProcReleaseLocks(_Bool);
1913:	void ProcSendSignal(int);
1069:	ProcWaitStatus ProcSleep(LOCALLOCK *, LockMethod);
1901:	void ProcWaitForSignal(uint32);
1693:	PGPROC *ProcWakeup(PGPROC *, ProcWaitStatus);
632:	void PublishStartupProcessInformation(void);
650:	void SetStartupBufferPinWaitBufId(int);
948:	static void AuxiliaryProcKill(int, Datum);
1789:	static void CheckDeadLock(void);
820:	static void ProcKill(int, Datum);
809:	static void RemoveProcFromArray(int, Datum);

File procarray.c:
3212:	PGPROC *BackendPidGetProc(int);
3235:	PGPROC *BackendPidGetProcWithLock(int);
3272:	int BackendXidGetPid(TransactionId);
3671:	void CancelDBBackends(Oid, ProcSignalReason, _Bool);
3502:	pid_t CancelVirtualTransaction(VirtualTransactionId, ProcSignalReason);
3610:	int CountDBBackends(Oid);
3640:	int CountDBConnections(Oid);
3761:	_Bool CountOtherDBBackends(Oid, int *, int *);
3711:	int CountUserBackends(Oid);
426:	void CreateSharedProcArray(void);
4534:	void ExpireAllKnownAssignedTransactionIds(void);
4554:	void ExpireOldKnownAssignedTransactionIds(TransactionId);
4508:	void ExpireTreeKnownAssignedTransactionIds(TransactionId, int, TransactionId *, TransactionId);
3428:	VirtualTransactionId *GetConflictingVirtualXIDs(TransactionId, Oid);
3340:	VirtualTransactionId *GetCurrentVirtualXIDs(TransactionId, _Bool, _Bool, int, int *);
2092:	int GetMaxSnapshotSubxidCount(void);
2081:	int GetMaxSnapshotXidCount(void);
2908:	TransactionId GetOldestActiveTransactionId(void);
2018:	TransactionId GetOldestNonRemovableTransactionId(Relation);
2973:	TransactionId GetOldestSafeDecodingTransactionId(_Bool);
2046:	TransactionId GetOldestTransactionIdConsideredRunning(void);
2059:	void GetReplicationHorizons(TransactionId *, TransactionId *);
2733:	RunningTransactions GetRunningTransactionData(void);
2218:	Snapshot GetSnapshotData(Snapshot);
3114:	VirtualTransactionId *GetVirtualXIDsDelayingChkpt(int *);
3124:	VirtualTransactionId *GetVirtualXIDsDelayingChkptEnd(int *);
4320:	_Bool GlobalVisCheckRemovableFullXid(Relation, FullTransactionId);
4334:	_Bool GlobalVisCheckRemovableXid(Relation, TransactionId);
4111:	GlobalVisState *GlobalVisTestFor(Relation);
4226:	_Bool GlobalVisTestIsRemovableFullXid(GlobalVisState *, FullTransactionId);
4268:	_Bool GlobalVisTestIsRemovableXid(GlobalVisState *, TransactionId);
4295:	FullTransactionId GlobalVisTestNonRemovableFullHorizon(GlobalVisState *);
4306:	TransactionId GlobalVisTestNonRemovableHorizon(GlobalVisState *);
3187:	_Bool HaveVirtualXIDsDelayingChkpt(VirtualTransactionId *, int);
3198:	_Bool HaveVirtualXIDsDelayingChkptEnd(VirtualTransactionId *, int);
3307:	_Bool IsBackendPid(int);
4576:	void KnownAssignedTransactionIdsIdleMaintenance(void);
3557:	_Bool MinimumActiveBackends(int);
477:	void ProcArrayAdd(PGPROC *);
1063:	void ProcArrayApplyRecoveryInfo(RunningTransactions);
1309:	void ProcArrayApplyXidAssignment(TransactionId, int, TransactionId *);
916:	void ProcArrayClearTransaction(PGPROC *);
675:	void ProcArrayEndTransaction(PGPROC *, TransactionId);
3972:	void ProcArrayGetReplicationSlotXmin(TransactionId *, TransactionId *);
1032:	void ProcArrayInitRecovery(TransactionId);
2581:	_Bool ProcArrayInstallImportedXmin(TransactionId, VirtualTransactionId *);
2660:	_Bool ProcArrayInstallRestoredXmin(TransactionId, PGPROC *);
573:	void ProcArrayRemove(PGPROC *, TransactionId);
3947:	void ProcArraySetReplicationSlotXmin(TransactionId, TransactionId, _Bool);
384:	Size ProcArrayShmemSize(void);
4437:	void RecordKnownAssignedTransactionIds(TransactionId);
3508:	pid_t SignalVirtualTransaction(VirtualTransactionId, ProcSignalReason, _Bool);
3839:	void TerminateOtherDBBackends(Oid);
1630:	_Bool TransactionIdIsActive(TransactionId);
1393:	_Bool TransactionIdIsInProgress(TransactionId);
3995:	void XidCacheRemoveRunningXids(TransactionId, int, const TransactionId *, TransactionId);
1734:	static void ComputeXidHorizons(ComputeXidHorizonsResult *);
4355:	static FullTransactionId FullXidRelativeTo(FullTransactionId, TransactionId);
2101:	static void GetSnapshotDataInitOldSnapshot(Snapshot);
2135:	static _Bool GetSnapshotDataReuse(Snapshot);
3072:	static VirtualTransactionId *GetVirtualXIDsDelayingChkptGuts(int *, int);
1984:	static GlobalVisHorizonKind GlobalVisHorizonKindForRel(Relation);
4151:	static _Bool GlobalVisTestShouldUpdate(GlobalVisState *);
4209:	static void GlobalVisUpdate(void);
4170:	static void GlobalVisUpdateApply(ComputeXidHorizonsResult *);
3139:	static _Bool HaveVirtualXIDsDelayingChkptGuts(VirtualTransactionId *, int, int);
5001:	static _Bool KnownAssignedXidExists(TransactionId);
4797:	static void KnownAssignedXidsAdd(TransactionId, TransactionId, _Bool);
4680:	static void KnownAssignedXidsCompress(KAXCompressReason, _Bool);
5247:	static void KnownAssignedXidsDisplay(int);
5140:	static int KnownAssignedXidsGet(TransactionId *, TransactionId);
5154:	static int KnownAssignedXidsGetAndSetXmin(TransactionId *, TransactionId *, TransactionId);
5212:	static TransactionId KnownAssignedXidsGetOldestXmin(void);
5014:	static void KnownAssignedXidsRemove(TransactionId);
5062:	static void KnownAssignedXidsRemovePreceding(TransactionId);
5040:	static void KnownAssignedXidsRemoveTree(TransactionId, int, TransactionId *);
5285:	static void KnownAssignedXidsReset(void);
4908:	static _Bool KnownAssignedXidsSearch(TransactionId, _Bool);
976:	static void MaintainLatestCompletedXid(TransactionId);
998:	static void MaintainLatestCompletedXidRecovery(TransactionId);
740:	static void ProcArrayEndTransactionInternal(PGPROC *, TransactionId);
802:	static void ProcArrayGroupClearXid(PGPROC *, TransactionId);

File proclang.c:
39:	ObjectAddress CreateProceduralLanguage(CreatePLangStmt *);
228:	Oid get_language_oid(const char *, _Bool);

File procsignal.c:
332:	uint64 EmitProcSignalBarrier(ProcSignalBarrierType);
161:	void ProcSignalInit(int);
125:	void ProcSignalShmemInit(void);
111:	Size ProcSignalShmemSize(void);
453:	void ProcessProcSignalBarrier(void);
261:	int SendProcSignal(pid_t, ProcSignalReason, BackendId);
392:	void WaitForProcSignalBarrier(uint64);
642:	void procsignal_sigusr1_handler(int);
621:	static _Bool CheckProcSignal(ProcSignalReason);
212:	static void CleanupProcSignalState(int, Datum);
437:	static void HandleProcSignalBarrierInterrupt(void);
598:	static _Bool ProcessBarrierPlaceholder(void);
590:	static void ResetProcSignalBarrierBits(uint32);

File proto.c:
60:	void logicalrep_read_begin(StringInfo, LogicalRepBeginData *);
95:	void logicalrep_read_commit(StringInfo, LogicalRepCommitData *);
290:	LogicalRepRelId logicalrep_read_delete(StringInfo, LogicalRepTupleData *);
164:	LogicalRepRelId logicalrep_read_insert(StringInfo, LogicalRepTupleData *);
129:	char *logicalrep_read_origin(StringInfo, XLogRecPtr *);
425:	LogicalRepRelation *logicalrep_read_rel(StringInfo);
893:	void logicalrep_read_stream_abort(StringInfo, TransactionId *, TransactionId *);
851:	TransactionId logicalrep_read_stream_commit(StringInfo, LogicalRepCommitData *);
801:	TransactionId logicalrep_read_stream_start(StringInfo, _Bool *);
344:	List *logicalrep_read_truncate(StringInfo, _Bool *, _Bool *);
481:	void logicalrep_read_typ(StringInfo, LogicalRepTyp *);
219:	LogicalRepRelId logicalrep_read_update(StringInfo, _Bool *, LogicalRepTupleData *, LogicalRepTupleData *);
46:	void logicalrep_write_begin(StringInfo, ReorderBufferTXN *);
75:	void logicalrep_write_commit(StringInfo, ReorderBufferTXN *, XLogRecPtr);
260:	void logicalrep_write_delete(StringInfo, TransactionId, Relation, HeapTuple, _Bool);
142:	void logicalrep_write_insert(StringInfo, TransactionId, Relation, HeapTuple, _Bool);
369:	void logicalrep_write_message(StringInfo, TransactionId, XLogRecPtr, _Bool, const char *, Size, const char *);
113:	void logicalrep_write_origin(StringInfo, const char *, XLogRecPtr);
396:	void logicalrep_write_rel(StringInfo, TransactionId, Relation);
877:	void logicalrep_write_stream_abort(StringInfo, TransactionId, TransactionId);
826:	void logicalrep_write_stream_commit(StringInfo, ReorderBufferTXN *, XLogRecPtr);
783:	void logicalrep_write_stream_start(StringInfo, TransactionId, _Bool);
817:	void logicalrep_write_stream_stop(StringInfo);
312:	void logicalrep_write_truncate(StringInfo, TransactionId, int, Oid *, _Bool, _Bool);
450:	void logicalrep_write_typ(StringInfo, TransactionId, Oid);
186:	void logicalrep_write_update(StringInfo, TransactionId, Relation, HeapTuple, HeapTuple, _Bool);
707:	static void logicalrep_read_attrs(StringInfo, LogicalRepRelation *);
769:	static const char *logicalrep_read_namespace(StringInfo);
583:	static void logicalrep_read_tuple(StringInfo, LogicalRepTupleData *);
649:	static void logicalrep_write_attrs(StringInfo, Relation);
749:	static void logicalrep_write_namespace(StringInfo, Oid);
494:	static void logicalrep_write_tuple(StringInfo, Relation, HeapTuple, _Bool);

File pruneheap.c:
957:	void heap_get_root_tuples(Page, OffsetNumber *);
238:	int heap_page_prune(Relation, Buffer, GlobalVisState *, TransactionId, TimestampTz, _Bool, OffsetNumber *);
890:	void heap_page_prune_execute(Buffer, OffsetNumber *, int, OffsetNumber *, int, OffsetNumber *, int);
106:	void heap_page_prune_opt(Relation, Buffer);
576:	static int heap_prune_chain(Buffer, OffsetNumber, PruneState *);
863:	static void heap_prune_record_dead(PruneState *, OffsetNumber);
834:	static void heap_prune_record_prunable(PruneState *, TransactionId);
848:	static void heap_prune_record_redirect(PruneState *, OffsetNumber, OffsetNumber);
874:	static void heap_prune_record_unused(PruneState *, OffsetNumber);
491:	static HTSV_Result heap_prune_satisfies_vacuum(PruneState *, HeapTuple, Buffer);

File ps_status.c:
430:	const char *get_ps_display(int *);
258:	void init_ps_display(const char *);
131:	char **save_ps_display_args(int, char **);
349:	void set_ps_display(const char *);

File pseudotypes.c:
379:	Datum any_in(FunctionCallInfo);
379:	Datum any_out(FunctionCallInfo);
157:	Datum anyarray_in(FunctionCallInfo);
161:	Datum anyarray_out(FunctionCallInfo);
158:	Datum anyarray_recv(FunctionCallInfo);
167:	Datum anyarray_send(FunctionCallInfo);
390:	Datum anycompatible_in(FunctionCallInfo);
390:	Datum anycompatible_out(FunctionCallInfo);
177:	Datum anycompatiblearray_in(FunctionCallInfo);
181:	Datum anycompatiblearray_out(FunctionCallInfo);
178:	Datum anycompatiblearray_recv(FunctionCallInfo);
187:	Datum anycompatiblearray_send(FunctionCallInfo);
236:	Datum anycompatiblemultirange_in(FunctionCallInfo);
239:	Datum anycompatiblemultirange_out(FunctionCallInfo);
391:	Datum anycompatiblenonarray_in(FunctionCallInfo);
391:	Datum anycompatiblenonarray_out(FunctionCallInfo);
223:	Datum anycompatiblerange_in(FunctionCallInfo);
226:	Datum anycompatiblerange_out(FunctionCallInfo);
388:	Datum anyelement_in(FunctionCallInfo);
388:	Datum anyelement_out(FunctionCallInfo);
197:	Datum anyenum_in(FunctionCallInfo);
200:	Datum anyenum_out(FunctionCallInfo);
248:	Datum anymultirange_in(FunctionCallInfo);
263:	Datum anymultirange_out(FunctionCallInfo);
389:	Datum anynonarray_in(FunctionCallInfo);
389:	Datum anynonarray_out(FunctionCallInfo);
210:	Datum anyrange_in(FunctionCallInfo);
213:	Datum anyrange_out(FunctionCallInfo);
110:	Datum cstring_in(FunctionCallInfo);
118:	Datum cstring_out(FunctionCallInfo);
126:	Datum cstring_recv(FunctionCallInfo);
137:	Datum cstring_send(FunctionCallInfo);
381:	Datum event_trigger_in(FunctionCallInfo);
381:	Datum event_trigger_out(FunctionCallInfo);
383:	Datum fdw_handler_in(FunctionCallInfo);
383:	Datum fdw_handler_out(FunctionCallInfo);
385:	Datum index_am_handler_in(FunctionCallInfo);
385:	Datum index_am_handler_out(FunctionCallInfo);
387:	Datum internal_in(FunctionCallInfo);
387:	Datum internal_out(FunctionCallInfo);
382:	Datum language_handler_in(FunctionCallInfo);
382:	Datum language_handler_out(FunctionCallInfo);
372:	Datum pg_ddl_command_in(FunctionCallInfo);
372:	Datum pg_ddl_command_out(FunctionCallInfo);
373:	Datum pg_ddl_command_recv(FunctionCallInfo);
373:	Datum pg_ddl_command_send(FunctionCallInfo);
348:	Datum pg_node_tree_in(FunctionCallInfo);
352:	Datum pg_node_tree_out(FunctionCallInfo);
349:	Datum pg_node_tree_recv(FunctionCallInfo);
358:	Datum pg_node_tree_send(FunctionCallInfo);
317:	Datum shell_in(FunctionCallInfo);
327:	Datum shell_out(FunctionCallInfo);
384:	Datum table_am_handler_in(FunctionCallInfo);
384:	Datum table_am_handler_out(FunctionCallInfo);
380:	Datum trigger_in(FunctionCallInfo);
380:	Datum trigger_out(FunctionCallInfo);
386:	Datum tsm_handler_in(FunctionCallInfo);
386:	Datum tsm_handler_out(FunctionCallInfo);
277:	Datum void_in(FunctionCallInfo);
283:	Datum void_out(FunctionCallInfo);
289:	Datum void_recv(FunctionCallInfo);
299:	Datum void_send(FunctionCallInfo);

File psiginfo.c:
61:	void psiginfo(const siginfo_t *, const char *);

File psignal.c:
28:	void psignal(int, const char *);

File psprintf.c:
46:	char *psprintf(const char *, ...);
106:	size_t pvsnprintf(char *, size_t, const char *, struct __va_list_tag *);

File pt-allocrtsig.c:
47:	int __libc_allocate_rtsig(int);
40:	int __libc_current_sigrtmax(void);
33:	int __libc_current_sigrtmin(void);

File pt-cleanup.c:
25:	void __GI___pthread_cleanup_upto(long *, char *);

File pt-fork.c:
38:	static pid_t fork_compat(void);

File pt-system.c:
38:	static int system_compat(const char *);

File pthread_atfork.c:
48:	int __dyn_pthread_atfork(void (*)(void), void (*)(void), void (*)(void));
48:	int __pthread_atfork(void (*)(void), void (*)(void), void (*)(void));

File pthread_attr_destroy.c:
26:	int __pthread_attr_destroy(pthread_attr_t *);

File pthread_attr_getaffinity.c:
29:	int __pthread_attr_getaffinity_new(const pthread_attr_t *, size_t, cpu_set_t *);
65:	int __pthread_attr_getaffinity_old(const pthread_attr_t *, cpu_set_t *);

File pthread_attr_getdetachstate.c:
23:	int __pthread_attr_getdetachstate(const pthread_attr_t *, int *);

File pthread_attr_getguardsize.c:
23:	int pthread_attr_getguardsize(const pthread_attr_t *, size_t *);

File pthread_attr_getinheritsched.c:
23:	int __pthread_attr_getinheritsched(const pthread_attr_t *, int *);

File pthread_attr_getschedparam.c:
24:	int __pthread_attr_getschedparam(const pthread_attr_t *, struct sched_param *);

File pthread_attr_getschedpolicy.c:
23:	int __pthread_attr_getschedpolicy(const pthread_attr_t *, int *);

File pthread_attr_getscope.c:
23:	int __pthread_attr_getscope(const pthread_attr_t *, int *);

File pthread_attr_getstack.c:
23:	int __pthread_attr_getstack(const pthread_attr_t *, void **, size_t *);

File pthread_attr_getstackaddr.c:
24:	int __pthread_attr_getstackaddr(const pthread_attr_t *, void **);

File pthread_attr_getstacksize.c:
23:	int __pthread_attr_getstacksize(const pthread_attr_t *, size_t *);

File pthread_attr_init.c:
32:	int __pthread_attr_init_2_1(pthread_attr_t *);

File pthread_attr_setaffinity.c:
28:	int __pthread_attr_setaffinity_new(pthread_attr_t *, size_t, const cpu_set_t *);
64:	int __pthread_attr_setaffinity_old(pthread_attr_t *, cpu_set_t *);

File pthread_attr_setdetachstate.c:
24:	int __pthread_attr_setdetachstate(pthread_attr_t *, int);

File pthread_attr_setguardsize.c:
23:	int pthread_attr_setguardsize(pthread_attr_t *, size_t);

File pthread_attr_setinheritsched.c:
24:	int __pthread_attr_setinheritsched(pthread_attr_t *, int);

File pthread_attr_setschedparam.c:
25:	int __pthread_attr_setschedparam(pthread_attr_t *, const struct sched_param *);

File pthread_attr_setschedpolicy.c:
24:	int __pthread_attr_setschedpolicy(pthread_attr_t *, int);

File pthread_attr_setscope.c:
24:	int __pthread_attr_setscope(pthread_attr_t *, int);

File pthread_attr_setstack.c:
30:	int __pthread_attr_setstack(pthread_attr_t *, void *, size_t);

File pthread_attr_setstackaddr.c:
24:	int __pthread_attr_setstackaddr(pthread_attr_t *, void *);

File pthread_attr_setstacksize.c:
29:	int __pthread_attr_setstacksize(pthread_attr_t *, size_t);

File pthread_barrier_destroy.c:
26:	int pthread_barrier_destroy(pthread_barrier_t *);

File pthread_barrier_init.c:
32:	int __pthread_barrier_init(pthread_barrier_t *, const pthread_barrierattr_t *, unsigned int);

File pthread_barrier_wait.c:
95:	int __pthread_barrier_wait(pthread_barrier_t *);

File pthread_barrierattr_destroy.c:
23:	int pthread_barrierattr_destroy(pthread_barrierattr_t *);

File pthread_barrierattr_getpshared.c:
23:	int pthread_barrierattr_getpshared(const pthread_barrierattr_t *, int *);

File pthread_barrierattr_init.c:
23:	int pthread_barrierattr_init(pthread_barrierattr_t *);

File pthread_barrierattr_setpshared.c:
25:	int pthread_barrierattr_setpshared(pthread_barrierattr_t *, int);

File pthread_cancel.c:
28:	int __pthread_cancel(pthread_t);

File pthread_clockjoin.c:
22:	int __pthread_clockjoin_np(pthread_t, void **, clockid_t, const struct timespec *);

File pthread_cond_broadcast.c:
39:	int __pthread_cond_broadcast(pthread_cond_t *);

File pthread_cond_destroy.c:
42:	int __pthread_cond_destroy(pthread_cond_t *);

File pthread_cond_init.c:
27:	int __pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);

File pthread_cond_signal.c:
35:	int __pthread_cond_signal(pthread_cond_t *);

File pthread_cond_wait.c:
674:	int __pthread_cond_clockwait(pthread_cond_t *, pthread_mutex_t *, clockid_t, const struct timespec *);
652:	int __pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *, const struct timespec *);
644:	int __pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
79:	static void __condvar_cancel_waiting(pthread_cond_t *, uint64_t, unsigned int, int);
168:	static void __condvar_cleanup_waiting(void *);

File pthread_condattr_destroy.c:
23:	int __pthread_condattr_destroy(pthread_condattr_t *);

File pthread_condattr_getclock.c:
23:	int pthread_condattr_getclock(const pthread_condattr_t *, clockid_t *);

File pthread_condattr_getpshared.c:
23:	int pthread_condattr_getpshared(const pthread_condattr_t *, int *);

File pthread_condattr_init.c:
24:	int __pthread_condattr_init(pthread_condattr_t *);

File pthread_condattr_setclock.c:
28:	int pthread_condattr_setclock(pthread_condattr_t *, clockid_t);

File pthread_condattr_setpshared.c:
24:	int pthread_condattr_setpshared(pthread_condattr_t *, int);

File pthread_create.c:
209:	struct pthread *__find_in_stack_list(struct pthread *);
344:	void __free_tcb(struct pthread *);
250:	void __nptl_deallocate_tsd(void);
623:	int __pthread_create_2_1(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *);
378:	static int start_thread(void *);

File pthread_detach.c:
25:	int __pthread_detach(pthread_t);

File pthread_equal.c:
23:	int __pthread_equal(pthread_t, pthread_t);

File pthread_exit.c:
24:	void __pthread_exit(void *);

File pthread_getattr_default_np.c:
24:	int pthread_getattr_default_np(pthread_attr_t *);

File pthread_getattr_np.c:
33:	int pthread_getattr_np(pthread_t, pthread_attr_t *);

File pthread_getconcurrency.c:
23:	int pthread_getconcurrency(void);

File pthread_getschedparam.c:
26:	int __pthread_getschedparam(pthread_t, int *, struct sched_param *);

File pthread_getspecific.c:
24:	void *__GI___pthread_getspecific(pthread_key_t);

File pthread_join.c:
22:	int __pthread_join(pthread_t, void **);

File pthread_join_common.c:
82:	int __pthread_clockjoin_ex(pthread_t, void **, clockid_t, const struct timespec *, _Bool);
25:	static void cleanup(void *);

File pthread_key_create.c:
25:	int __GI___pthread_key_create(pthread_key_t *, void (*)(void *));

File pthread_key_delete.c:
25:	int __pthread_key_delete(pthread_key_t);

File pthread_kill_other_threads.c:
31:	void __pthread_kill_other_threads_np(void);

File pthread_mutex_conf.c:
41:	void __pthread_tunables_init(void);
35:	static void _dl_tunable_set_mutex_spin_count(tunable_val_t *);

File pthread_mutex_consistent.c:
24:	int pthread_mutex_consistent(pthread_mutex_t *);

File pthread_mutex_destroy.c:
26:	int __GI___pthread_mutex_destroy(pthread_mutex_t *);

File pthread_mutex_getprioceiling.c:
25:	int pthread_mutex_getprioceiling(const pthread_mutex_t *, int *);

File pthread_mutex_init.c:
51:	int __GI___pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);

File pthread_mutex_setprioceiling.c:
27:	int pthread_mutex_setprioceiling(pthread_mutex_t *, int, int *);

File pthread_mutex_unlock.c:
355:	int __GI___pthread_mutex_unlock(pthread_mutex_t *);
37:	int __pthread_mutex_unlock_usercnt(pthread_mutex_t *, int);
98:	static int __pthread_mutex_unlock_full(pthread_mutex_t *, int);

File pthread_mutexattr_destroy.c:
23:	int __pthread_mutexattr_destroy(pthread_mutexattr_t *);

File pthread_mutexattr_getprioceiling.c:
25:	int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *, int *);

File pthread_mutexattr_getprotocol.c:
24:	int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *, int *);

File pthread_mutexattr_getpshared.c:
23:	int pthread_mutexattr_getpshared(const pthread_mutexattr_t *, int *);

File pthread_mutexattr_getrobust.c:
23:	int pthread_mutexattr_getrobust(const pthread_mutexattr_t *, int *);

File pthread_mutexattr_gettype.c:
23:	int pthread_mutexattr_gettype(const pthread_mutexattr_t *, int *);

File pthread_mutexattr_init.c:
24:	int __GI___pthread_mutexattr_init(pthread_mutexattr_t *);

File pthread_mutexattr_setprioceiling.c:
26:	int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int);

File pthread_mutexattr_setprotocol.c:
25:	int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int);

File pthread_mutexattr_setpshared.c:
25:	int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int);

File pthread_mutexattr_setrobust.c:
24:	int pthread_mutexattr_setrobust(pthread_mutexattr_t *, int);

File pthread_mutexattr_settype.c:
24:	int __GI___pthread_mutexattr_settype(pthread_mutexattr_t *, int);

File pthread_once.c:
135:	int __GI___pthread_once(pthread_once_t *, void (*)(void));
67:	static int __pthread_once_slow(pthread_once_t *, void (*)(void));
28:	static void clear_once_control(void *);

File pthread_rwlock_clockrdlock.c:
24:	int pthread_rwlock_clockrdlock(pthread_rwlock_t *, clockid_t, const struct timespec *);

File pthread_rwlock_clockwrlock.c:
24:	int pthread_rwlock_clockwrlock(pthread_rwlock_t *, clockid_t, const struct timespec *);

File pthread_rwlock_destroy.c:
24:	int __pthread_rwlock_destroy(pthread_rwlock_t *);

File pthread_rwlock_init.c:
33:	int __pthread_rwlock_init(pthread_rwlock_t *, const pthread_rwlockattr_t *);

File pthread_rwlock_rdlock.c:
23:	int __GI___pthread_rwlock_rdlock(pthread_rwlock_t *);

File pthread_rwlock_timedrdlock.c:
23:	int pthread_rwlock_timedrdlock(pthread_rwlock_t *, const struct timespec *);

File pthread_rwlock_timedwrlock.c:
23:	int pthread_rwlock_timedwrlock(pthread_rwlock_t *, const struct timespec *);

File pthread_rwlock_tryrdlock.c:
28:	int __pthread_rwlock_tryrdlock(pthread_rwlock_t *);

File pthread_rwlock_trywrlock.c:
25:	int __pthread_rwlock_trywrlock(pthread_rwlock_t *);

File pthread_rwlock_unlock.c:
30:	int __GI___pthread_rwlock_unlock(pthread_rwlock_t *);

File pthread_rwlock_wrlock.c:
23:	int __GI___pthread_rwlock_wrlock(pthread_rwlock_t *);

File pthread_rwlockattr_destroy.c:
23:	int pthread_rwlockattr_destroy(pthread_rwlockattr_t *);

File pthread_rwlockattr_getkind_np.c:
23:	int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *, int *);

File pthread_rwlockattr_getpshared.c:
23:	int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *, int *);

File pthread_rwlockattr_init.c:
23:	int pthread_rwlockattr_init(pthread_rwlockattr_t *);

File pthread_rwlockattr_setkind_np.c:
24:	int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *, int);

File pthread_rwlockattr_setpshared.c:
25:	int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int);

File pthread_self.c:
23:	pthread_t pthread_self(void);

File pthread_setattr_default_np.c:
26:	int pthread_setattr_default_np(const pthread_attr_t *);

File pthread_setcancelstate.c:
25:	int __GI___pthread_setcancelstate(int, int *);

File pthread_setcanceltype.c:
25:	int __pthread_setcanceltype(int, int *);

File pthread_setconcurrency.c:
28:	int pthread_setconcurrency(int);

File pthread_setschedparam.c:
27:	int __pthread_setschedparam(pthread_t, int, const struct sched_param *);

File pthread_setschedprio.c:
28:	int pthread_setschedprio(pthread_t, int);

File pthread_setspecific.c:
25:	int __GI___pthread_setspecific(pthread_key_t, const void *);

File pthread_sigmask.c:
26:	int pthread_sigmask(int, const sigset_t *, sigset_t *);

File pthread_spin_destroy.c:
23:	int pthread_spin_destroy(pthread_spinlock_t *);

File pthread_testcancel.c:
24:	void __GI___pthread_testcancel(void);

File pthread_timedjoin.c:
22:	int __pthread_timedjoin_np(pthread_t, void **, const struct timespec *);

File pthread_tryjoin.c:
22:	int pthread_tryjoin_np(pthread_t, void **);

File pthread_yield.c:
26:	int pthread_yield(void);

File ptsname_r_chk.c:
22:	int __ptsname_r_chk(int, char *, size_t, size_t);

File publicationcmds.c:
444:	void AlterPublication(AlterPublicationStmt *);
771:	ObjectAddress AlterPublicationOwner(const char *, Oid);
806:	void AlterPublicationOwner_oid(Oid, Oid);
145:	ObjectAddress CreatePublication(CreatePublicationStmt *);
344:	void InvalidatePublicationRels(List *);
523:	void RemovePublicationById(Oid);
482:	void RemovePublicationRelById(Oid);
261:	static void AlterPublicationOptions(AlterPublicationStmt *, Relation, HeapTuple);
720:	static void AlterPublicationOwner_internal(Relation, HeapTuple, Oid);
365:	static void AlterPublicationTables(AlterPublicationStmt *, Relation, HeapTuple);
637:	static void CloseTableList(List *);
554:	static List *OpenTableList(List *);
653:	static void PublicationAddTables(Oid, List *, _Bool, AlterPublicationStmt *);
686:	static void PublicationDropTables(Oid, List *, _Bool);
55:	static void parse_publication_options(List *, _Bool *, PublicationActions *, _Bool *, _Bool *);

File publickey.c:
35:	int __GI_getpublickey(const char *, char *);
78:	int __GI_getsecretkey(const char *, char *, const char *);

File putc.c:
24:	int __GI__IO_putc(int, FILE *);

File putc_u.c:
24:	int __putc_unlocked(int, FILE *);

File putchar.c:
24:	int putchar(int);

File putchar_u.c:
24:	int putchar_unlocked(int);

File putenv.c:
52:	int putenv(char *);

File putgrent.c:
32:	int putgrent(const struct group *, FILE *);

File putpwent.c:
30:	int putpwent(const struct passwd *, FILE *);

File putsgent.c:
30:	int putsgent(const struct sgrp *, FILE *);

File putspent.c:
32:	int putspent(const struct spwd *, FILE *);

File pututxline.c:
23:	struct utmpx *pututxline(const struct utmpx *);

File putw.c:
24:	int putw(int, FILE *);

File putwc.c:
22:	wint_t __GI_putwc(wchar_t, FILE *);

File putwc_u.c:
22:	wint_t __GI_putwc_unlocked(wchar_t, FILE *);

File putwchar.c:
22:	wint_t putwchar(wchar_t);

File putwchar_u.c:
22:	wint_t putwchar_unlocked(wchar_t);

File qsort.c:
89:	void _quicksort(void * const, size_t, size_t, __compar_d_fn_t, void *);
19:	int pg_qsort_strcmp(const void *, const void *);

File queryenvironment.c:
125:	TupleDesc ENRMetadataGetTupDesc(EphemeralNamedRelationMetadata);
39:	QueryEnvironment *create_queryEnv(void);
96:	EphemeralNamedRelation get_ENR(QueryEnvironment *, const char *);
45:	EphemeralNamedRelationMetadata get_visible_ENR_metadata(QueryEnvironment *, const char *);
69:	void register_ENR(QueryEnvironment *, EphemeralNamedRelation);
82:	void unregister_ENR(QueryEnvironment *, const char *);

File queryjumble.c:
62:	const char *CleanQuerytext(const char *, int *, int *);
150:	void EnableQueryId(void);
101:	JumbleState *JumbleQuery(Query *, const char *);
189:	static void AppendJumble(JumbleState *, const unsigned char *, Size);
359:	static void JumbleExpr(JumbleState *, Node *);
240:	static void JumbleQueryInternal(JumbleState *, Query *);
271:	static void JumbleRangeTable(JumbleState *, List *);
327:	static void JumbleRowMarks(JumbleState *, List *);
839:	static void RecordConstLocation(JumbleState *, int);
160:	static uint64 compute_utility_query_id(const char *, int, int);

File quick_exit.c:
28:	void __new_quick_exit(int);
42:	void __old_quick_exit(int);

File quote.c:
24:	Datum quote_ident(FunctionCallInfo);
77:	Datum quote_literal(FunctionCallInfo);
102:	char *quote_literal_cstr(const char *);
124:	Datum quote_nullable(FunctionCallInfo);
46:	static size_t quote_literal_internal(char *, const char *, size_t);

File quotes.c:
33:	char *escape_single_quotes_ascii(const char *);

File rand.c:
25:	int rand(void);

File rand_r.c:
26:	int rand_r(unsigned int *);

File random.c:
230:	char *__initstate(unsigned int, char *, size_t);
287:	long __random(void);
257:	char *__setstate(char *);
208:	void __srandom(unsigned int);

File random_r.c:
230:	int __initstate_r(unsigned int, char *, size_t, struct random_data *);
353:	int __random_r(struct random_data *, int32_t *);
295:	int __setstate_r(char *, struct random_data *);
161:	int __srandom_r(unsigned int, struct random_data *);

File rangetypes.c:
739:	_Bool bounds_adjacent(TypeCacheEntry *, RangeBound, RangeBound);
1508:	Datum daterange_canonical(FunctionCallInfo);
1587:	Datum daterange_subdiff(FunctionCallInfo);
539:	Datum elem_contained_by_range(FunctionCallInfo);
1312:	Datum hash_range(FunctionCallInfo);
1378:	Datum hash_range_extended(FunctionCallInfo);
1446:	Datum int4range_canonical(FunctionCallInfo);
1553:	Datum int4range_subdiff(FunctionCallInfo);
1477:	Datum int8range_canonical(FunctionCallInfo);
1562:	Datum int8range_subdiff(FunctionCallInfo);
2073:	RangeType *make_empty_range(TypeCacheEntry *);
1884:	RangeType *make_range(TypeCacheEntry *, RangeBound *, RangeBound *, _Bool);
1571:	Datum numrange_subdiff(FunctionCallInfo);
810:	Datum range_adjacent(FunctionCallInfo);
780:	_Bool range_adjacent_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
709:	Datum range_after(FunctionCallInfo);
684:	_Bool range_after_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
671:	Datum range_before(FunctionCallInfo);
646:	_Bool range_before_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
1231:	Datum range_cmp(FunctionCallInfo);
1998:	int range_cmp_bound_values(TypeCacheEntry *, const RangeBound *, const RangeBound *);
1924:	int range_cmp_bounds(TypeCacheEntry *, const RangeBound *, const RangeBound *);
2037:	int range_compare(const void *, const void *, void *);
359:	Datum range_constructor2(FunctionCallInfo);
388:	Datum range_constructor3(FunctionCallInfo);
633:	Datum range_contained_by(FunctionCallInfo);
2464:	_Bool range_contained_by_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
620:	Datum range_contains(FunctionCallInfo);
526:	Datum range_contains_elem(FunctionCallInfo);
2473:	_Bool range_contains_elem_internal(TypeCacheEntry *, const RangeType *, Datum);
2432:	_Bool range_contains_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
1788:	void range_deserialize(TypeCacheEntry *, const RangeType *, RangeBound *, RangeBound *, _Bool *);
473:	Datum range_empty(FunctionCallInfo);
587:	Datum range_eq(FunctionCallInfo);
555:	_Bool range_eq_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
1293:	Datum range_ge(FunctionCallInfo);
1855:	char range_get_flags(const RangeType *);
1635:	TypeCacheEntry *range_get_typcache(FunctionCallInfo, Oid);
1301:	Datum range_gt(FunctionCallInfo);
78:	Datum range_in(FunctionCallInfo);
1109:	Datum range_intersect(FunctionCallInfo);
1201:	Datum range_intersect_agg_transfn(FunctionCallInfo);
1125:	RangeType *range_intersect_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
1285:	Datum range_le(FunctionCallInfo);
428:	Datum range_lower(FunctionCallInfo);
483:	Datum range_lower_inc(FunctionCallInfo);
503:	Datum range_lower_inf(FunctionCallInfo);
1277:	Datum range_lt(FunctionCallInfo);
1096:	Datum range_merge(FunctionCallInfo);
954:	Datum range_minus(FunctionCallInfo);
975:	RangeType *range_minus_internal(TypeCacheEntry *, RangeType *, RangeType *);
607:	Datum range_ne(FunctionCallInfo);
600:	_Bool range_ne_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
120:	Datum range_out(FunctionCallInfo);
856:	Datum range_overlaps(FunctionCallInfo);
823:	_Bool range_overlaps_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
897:	Datum range_overleft(FunctionCallInfo);
869:	_Bool range_overleft_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
938:	Datum range_overright(FunctionCallInfo);
910:	_Bool range_overright_internal(TypeCacheEntry *, const RangeType *, const RangeType *);
160:	Datum range_recv(FunctionCallInfo);
243:	Datum range_send(FunctionCallInfo);
1659:	RangeType *range_serialize(TypeCacheEntry *, RangeBound *, RangeBound *, _Bool);
1869:	void range_set_contain_empty(RangeType *);
1164:	_Bool range_split_internal(TypeCacheEntry *, const RangeType *, const RangeType *, RangeType **, RangeType **);
1080:	Datum range_union(FunctionCallInfo);
1034:	RangeType *range_union_internal(TypeCacheEntry *, RangeType *, RangeType *, _Bool);
449:	Datum range_upper(FunctionCallInfo);
493:	Datum range_upper_inc(FunctionCallInfo);
513:	Datum range_upper_inf(FunctionCallInfo);
1596:	Datum tsrange_subdiff(FunctionCallInfo);
1607:	Datum tstzrange_subdiff(FunctionCallInfo);
2528:	static Size datum_compute_size(Size, Datum, _Bool, char, int16, char);
2554:	static Pointer datum_write(Pointer, Datum, _Bool, char, int16, char);
299:	static RangeIOData *get_range_io_data(FunctionCallInfo, Oid, IOFuncSelector);
2383:	static char *range_bound_escape(const char *);
2353:	static char *range_deparse(char, const char *, const char *);
2175:	static void range_parse(const char *, char *, char **, char **);
2284:	static const char *range_parse_bound(const char *, const char *, char **, _Bool *);
2103:	static char range_parse_flags(const char *);

File rangetypes_gist.c:
245:	Datum multirange_gist_compress(FunctionCallInfo);
270:	Datum multirange_gist_consistent(FunctionCallInfo);
191:	Datum range_gist_consistent(FunctionCallInfo);
362:	Datum range_gist_penalty(FunctionCallInfo);
619:	Datum range_gist_picksplit(FunctionCallInfo);
778:	Datum range_gist_same(FunctionCallInfo);
324:	Datum range_gist_union(FunctionCallInfo);
1787:	static float8 call_subtype_diff(TypeCacheEntry *, Datum, Datum);
1769:	static int common_entry_cmp(const void *, const void *);
1703:	static int get_gist_range_class(RangeType *);
1743:	static int interval_cmp_lower(const void *, const void *, void *);
1756:	static int interval_cmp_upper(const void *, const void *, void *);
888:	static _Bool multirange_union_range_equal(TypeCacheEntry *, const RangeType *, const MultirangeType *);
1186:	static void range_gist_class_split(TypeCacheEntry *, GistEntryVector *, GIST_SPLITVEC *, SplitLR *);
1620:	static void range_gist_consider_split(ConsiderSplitContext *, RangeBound *, int, RangeBound *, int);
1039:	static _Bool range_gist_consistent_int_element(TypeCacheEntry *, StrategyNumber, const RangeType *, Datum);
977:	static _Bool range_gist_consistent_int_multirange(TypeCacheEntry *, StrategyNumber, const RangeType *, const MultirangeType *);
915:	static _Bool range_gist_consistent_int_range(TypeCacheEntry *, StrategyNumber, const RangeType *, const RangeType *);
1128:	static _Bool range_gist_consistent_leaf_element(TypeCacheEntry *, StrategyNumber, const RangeType *, Datum);
1093:	static _Bool range_gist_consistent_leaf_multirange(TypeCacheEntry *, StrategyNumber, const RangeType *, const MultirangeType *);
1058:	static _Bool range_gist_consistent_leaf_range(TypeCacheEntry *, StrategyNumber, const RangeType *, const RangeType *);
1318:	static void range_gist_double_sorting_split(TypeCacheEntry *, GistEntryVector *, GIST_SPLITVEC *);
1148:	static void range_gist_fallback_split(TypeCacheEntry *, GistEntryVector *, GIST_SPLITVEC *);
1229:	static void range_gist_single_sorting_split(TypeCacheEntry *, GistEntryVector *, GIST_SPLITVEC *, _Bool);
821:	static RangeType *range_super_union(TypeCacheEntry *, RangeType *, RangeType *);
1730:	static int single_bound_cmp(const void *, const void *, void *);

File rangetypes_selfuncs.c:
109:	Datum rangesel(FunctionCallInfo);
373:	static double calc_hist_selectivity(TypeCacheEntry *, VariableStatData *, const RangeType *, Oid);
1018:	static double calc_hist_selectivity_contained(TypeCacheEntry *, const RangeBound *, RangeBound *, const RangeBound *, int, Datum *, int);
1139:	static double calc_hist_selectivity_contains(TypeCacheEntry *, const RangeBound *, const RangeBound *, const RangeBound *, int, Datum *, int);
596:	static double calc_hist_selectivity_scalar(TypeCacheEntry *, const RangeBound *, const RangeBound *, int, _Bool);
855:	static double calc_length_hist_frac(Datum *, int, double, double, _Bool);
231:	static double calc_rangesel(TypeCacheEntry *, VariableStatData *, const RangeType *, Oid);
68:	static double default_range_selectivity(Oid);
807:	static float8 get_distance(TypeCacheEntry *, const RangeBound *, const RangeBound *);
762:	static double get_len_position(double, double, double);
683:	static float8 get_position(TypeCacheEntry *, const RangeBound *, const RangeBound *, const RangeBound *);
657:	static int length_hist_bsearch(Datum *, int, double, _Bool);
628:	static int rbound_bsearch(TypeCacheEntry *, const RangeBound *, const RangeBound *, int, _Bool);

File rangetypes_spgist.c:
131:	Datum spg_range_quad_choose(FunctionCallInfo);
60:	Datum spg_range_quad_config(FunctionCallInfo);
300:	Datum spg_range_quad_inner_consistent(FunctionCallInfo);
919:	Datum spg_range_quad_leaf_consistent(FunctionCallInfo);
200:	Datum spg_range_quad_picksplit(FunctionCallInfo);
787:	static int adjacent_cmp_bounds(TypeCacheEntry *, const RangeBound *, const RangeBound *);
889:	static int adjacent_inner_consistent(TypeCacheEntry *, const RangeBound *, const RangeBound *, const RangeBound *);
186:	static int bound_cmp(const void *, const void *, void *);
95:	static int16 getQuadrant(TypeCacheEntry *, const RangeType *, const RangeType *);

File rangetypes_typanalyze.c:
72:	Datum multirange_typanalyze(FunctionCallInfo);
45:	Datum range_typanalyze(FunctionCallInfo);
126:	static void compute_range_stats(VacAttrStats *, AnalyzeAttrFetchFunc, int, double);
96:	static int float8_qsort_cmp(const void *, const void *, void *);
113:	static int range_bound_qsort_cmp(const void *, const void *, void *);

File rbtree.c:
740:	void rbt_begin_iterate(RBTree *, RBTOrderControl, RBTreeIterator *);
102:	RBTree *rbt_create(Size, rbt_comparator, rbt_combiner, rbt_allocfunc, rbt_freefunc, void *);
633:	void rbt_delete(RBTree *, RBTNode *);
145:	RBTNode *rbt_find(RBTree *, const RBTNode *);
391:	RBTNode *rbt_insert(RBTree *, const RBTNode *, _Bool *);
764:	RBTNode *rbt_iterate(RBTreeIterator *);
173:	RBTNode *rbt_leftmost(RBTree *);
127:	static void rbt_copy_data(RBTree *, RBTNode *, const RBTNode *);
459:	static void rbt_delete_fixup(RBTree *, RBTNode *);
557:	static void rbt_delete_node(RBTree *, RBTNode *);
282:	static void rbt_insert_fixup(RBTree *, RBTNode *);
643:	static RBTNode *rbt_left_right_iterator(RBTreeIterator *);
685:	static RBTNode *rbt_right_left_iterator(RBTreeIterator *);
201:	static void rbt_rotate_left(RBTree *, RBTNode *);
238:	static void rbt_rotate_right(RBTree *, RBTNode *);

File rcmd.c:
588:	int __GI_iruserok_af(const void *, int, const char *, const char *, sa_family_t);
103:	int __GI_rcmd_af(char **, u_short, const char *, const char *, const char *, int *, sa_family_t);
366:	int __GI_rresvport_af(int *, sa_family_t);
435:	int __GI_ruserok_af(const char *, int, const char *, const char *, sa_family_t);
635:	int __ivaliduser(FILE *, uint32_t, const char *, const char *);
618:	int iruserok(uint32_t, int, const char *, const char *);
359:	int rcmd(char **, u_short, const char *, const char *, const char *, int *);
426:	int rresvport(int *);
460:	int ruserok(const char *, int, const char *, const char *);
745:	static int __validuser2_sa(FILE *, struct sockaddr *, size_t, const char *, const char *, const char *);
468:	static FILE *iruserfopen(const char *, uid_t);
521:	static int ruserok2_sa(struct sockaddr *, size_t, int, const char *, const char *, const char *);

File read.c:
213:	char *debackslash(const char *, int);
316:	void *nodeRead(const char *, int);
152:	const char *pg_strtok(int *);
89:	void *stringToNode(const char *);
245:	static NodeTag nodeTokenType(const char *, int);
48:	static void *stringToNodeInternal(const char *, _Bool);

File read_chk.c:
27:	ssize_t __read_chk(int, void *, size_t, size_t);

File readfuncs.c:
2716:	Node *parseNodeString(void);
3053:	AttrNumber *readAttrNumberCols(int);
238:	Bitmapset *readBitmapset(void);
3125:	_Bool *readBoolCols(int);
2996:	Datum readDatum(_Bool);
3101:	int *readIntCols(int);
3077:	Oid *readOidCols(int);
2123:	static void ReadCommonJoin(Join *);
1612:	static void ReadCommonPlan(Plan *);
1805:	static void ReadCommonScan(Scan *);
2245:	static void ReadCommonSort(Sort *);
2308:	static Agg *_readAgg(void);
640:	static Aggref *_readAggref(void);
503:	static Alias *_readAlias(void);
2633:	static AlternativeSubPlan *_readAlternativeSubPlan(void);
1712:	static Append *_readAppend(void);
1404:	static AppendRelInfo *_readAppendRelInfo(void);
963:	static ArrayCoerceExpr *_readArrayCoerceExpr(void);
1061:	static ArrayExpr *_readArrayExpr(void);
1773:	static BitmapAnd *_readBitmapAnd(void);
1918:	static BitmapHeapScan *_readBitmapHeapScan(void);
1900:	static BitmapIndexScan *_readBitmapIndexScan(void);
1788:	static BitmapOr *_readBitmapOr(void);
197:	static Bitmapset *_readBitmapset(void);
847:	static BoolExpr *_readBoolExpr(void);
1201:	static BooleanTest *_readBooleanTest(void);
434:	static CTECycleClause *_readCTECycleClause(void);
418:	static CTESearchClause *_readCTESearchClause(void);
1013:	static CaseExpr *_readCaseExpr(void);
1046:	static CaseTestExpr *_readCaseTestExpr(void);
1031:	static CaseWhen *_readCaseWhen(void);
1114:	static CoalesceExpr *_readCoalesceExpr(void);
1216:	static CoerceToDomain *_readCoerceToDomain(void);
1234:	static CoerceToDomainValue *_readCoerceToDomainValue(void);
946:	static CoerceViaIO *_readCoerceViaIO(void);
998:	static CollateExpr *_readCollateExpr(void);
456:	static CommonTableExpr *_readCommonTableExpr(void);
597:	static Const *_readConst(void);
982:	static ConvertRowtypeExpr *_readConvertRowtypeExpr(void);
2024:	static CteScan *_readCteScan(void);
1266:	static CurrentOfExpr *_readCurrentOfExpr(void);
2093:	static CustomScan *_readCustomScan(void);
312:	static DeclareCursorStmt *_readDeclareCursorStmt(void);
1556:	static DefElem *_readDefElem(void);
788:	static DistinctExpr *_readDistinctExpr(void);
2646:	static ExtensibleNode *_readExtensibleNode(void);
895:	static FieldSelect *_readFieldSelect(void);
912:	static FieldStore *_readFieldStore(void);
2070:	static ForeignScan *_readForeignScan(void);
1363:	static FromExpr *_readFromExpr(void);
731:	static FuncExpr *_readFuncExpr(void);
1978:	static FunctionScan *_readFunctionScan(void);
2382:	static Gather *_readGather(void);
2401:	static GatherMerge *_readGatherMerge(void);
2290:	static Group *_readGroup(void);
671:	static GroupingFunc *_readGroupingFunc(void);
361:	static GroupingSet *_readGroupingSet(void);
2423:	static Hash *_readHash(void);
2191:	static HashJoin *_readHashJoin(void);
2275:	static IncrementalSort *_readIncrementalSort(void);
1880:	static IndexOnlyScan *_readIndexOnlyScan(void);
1859:	static IndexScan *_readIndexScan(void);
1295:	static InferenceElem *_readInferenceElem(void);
556:	static IntoClause *_readIntoClause(void);
2138:	static Join *_readJoin(void);
1342:	static JoinExpr *_readJoinExpr(void);
2481:	static Limit *_readLimit(void);
2465:	static LockRows *_readLockRows(void);
2209:	static Material *_readMaterial(void);
2222:	static Memoize *_readMemoize(void);
1731:	static MergeAppend *_readMergeAppend(void);
2166:	static MergeJoin *_readMergeJoin(void);
1130:	static MinMaxExpr *_readMinMaxExpr(void);
1678:	static ModifyTable *_readModifyTable(void);
752:	static NamedArgExpr *_readNamedArgExpr(void);
2040:	static NamedTuplestoreScan *_readNamedTuplestoreScan(void);
2151:	static NestLoop *_readNestLoop(void);
2502:	static NestLoopParam *_readNestLoopParam(void);
1281:	static NextValueExpr *_readNextValueExpr(void);
298:	static NotifyStmt *_readNotifyStmt(void);
808:	static NullIfExpr *_readNullIfExpr(void);
1185:	static NullTest *_readNullTest(void);
1377:	static OnConflictExpr *_readOnConflictExpr(void);
768:	static OpExpr *_readOpExpr(void);
622:	static Param *_readParam(void);
2676:	static PartitionBoundSpec *_readPartitionBoundSpec(void);
2533:	static PartitionPruneInfo *_readPartitionPruneInfo(void);
2576:	static PartitionPruneStepCombine *_readPartitionPruneStepCombine(void);
2562:	static PartitionPruneStepOp *_readPartitionPruneStepOp(void);
2696:	static PartitionRangeDatum *_readPartitionRangeDatum(void);
2544:	static PartitionedRelPruneInfo *_readPartitionedRelPruneInfo(void);
1637:	static Plan *_readPlan(void);
2591:	static PlanInvalItem *_readPlanInvalItem(void);
2516:	static PlanRowMark *_readPlanRowMark(void);
1577:	static PlannedStmt *_readPlannedStmt(void);
1665:	static ProjectSet *_readProjectSet(void);
247:	static Query *_readQuery(void);
1428:	static RangeTblEntry *_readRangeTblEntry(void);
1522:	static RangeTblFunction *_readRangeTblFunction(void);
1329:	static RangeTblRef *_readRangeTblRef(void);
514:	static RangeVar *_readRangeVar(void);
1753:	static RecursiveUnion *_readRecursiveUnion(void);
928:	static RelabelType *_readRelabelType(void);
1650:	static Result *_readResult(void);
1096:	static RowCompareExpr *_readRowCompareExpr(void);
1079:	static RowExpr *_readRowExpr(void);
402:	static RowMarkClause *_readRowMarkClause(void);
1148:	static SQLValueFunction *_readSQLValueFunction(void);
1844:	static SampleScan *_readSampleScan(void);
828:	static ScalarArrayOpExpr *_readScalarArrayOpExpr(void);
1818:	static Scan *_readScan(void);
1831:	static SeqScan *_readSeqScan(void);
2442:	static SetOp *_readSetOp(void);
481:	static SetOperationStmt *_readSetOperationStmt(void);
1250:	static SetToDefault *_readSetToDefault(void);
2262:	static Sort *_readSort(void);
344:	static SortGroupClause *_readSortGroupClause(void);
873:	static SubLink *_readSubLink(void);
2605:	static SubPlan *_readSubPlan(void);
1963:	static SubqueryScan *_readSubqueryScan(void);
710:	static SubscriptingRef *_readSubscriptingRef(void);
534:	static TableFunc *_readTableFunc(void);
2009:	static TableFuncScan *_readTableFuncScan(void);
1541:	static TableSampleClause *_readTableSampleClause(void);
1310:	static TargetEntry *_readTargetEntry(void);
1948:	static TidRangeScan *_readTidRangeScan(void);
1933:	static TidScan *_readTidScan(void);
2364:	static Unique *_readUnique(void);
1994:	static ValuesScan *_readValuesScan(void);
576:	static Var *_readVar(void);
2333:	static WindowAgg *_readWindowAgg(void);
376:	static WindowClause *_readWindowClause(void);
688:	static WindowFunc *_readWindowFunc(void);
327:	static WithCheckOption *_readWithCheckOption(void);
2055:	static WorkTableScan *_readWorkTableScan(void);
1164:	static XmlExpr *_readXmlExpr(void);

File readline.c:
90:	ssize_t __GI___libc_readline_unlocked(FILE *, char *, size_t);

File readlink_chk.c:
27:	ssize_t __readlink_chk(const char *, void *, size_t, size_t);

File readlinkat_chk.c:
23:	ssize_t __readlinkat_chk(int, const char *, void *, size_t, size_t);

File reallocarray.c:
23:	void *__GI___libc_reallocarray(void *, size_t, size_t);

File realpath_chk.c:
25:	char *__realpath_chk(const char *, char *, size_t);

File recv_chk.c:
23:	ssize_t __recv_chk(int, void *, size_t, size_t, int);

File recvfrom_chk.c:
23:	ssize_t __recvfrom_chk(int, void *, size_t, size_t, int, __SOCKADDR_ARG, socklen_t *);

File reg-modifier.c:
102:	int __handle_registered_modifier_mb(const unsigned char **, struct printf_info *);
145:	int __handle_registered_modifier_wc(const unsigned int **, struct printf_info *);
42:	int __register_printf_modifier(const wchar_t *);
186:	static void free_mem(void);

File reg-printf.c:
42:	int __GI___register_printf_specifier(int, printf_function *, printf_arginfo_size_function *);
82:	int __register_printf_function(int, printf_function *, printf_arginfo_function *);

File reg-type.c:
35:	int __register_printf_type(printf_va_arg_function *);

File regc_color.c:
120:	color pg_reg_getcolor(struct colormap *, chr);
984:	static void colorchain(struct colormap *, struct arc *);
1064:	static void colorcomplement(struct nfa *, struct colormap *, int, struct state *, struct state *, struct state *);
103:	static void freecm(struct colormap *);
257:	static void freecolor(struct colormap *, color);
49:	static void initcm(struct vars *, struct colormap *);
172:	static color maxcolor(struct colormap *);
185:	static color newcolor(struct colormap *);
469:	static void newhicolorcols(struct colormap *);
420:	static int newhicolorrow(struct colormap *, int);
389:	static color newsub(struct colormap *, color);
916:	static void okcolors(struct nfa *, struct colormap *);
312:	static color pseudocolor(struct colormap *);
1031:	static void rainbow(struct nfa *, struct colormap *, int, color, struct state *, struct state *);
336:	static color subcolor(struct colormap *, chr);
522:	static void subcolorcvec(struct vars *, struct cvec *, struct state *, struct state *);
366:	static color subcolorhi(struct colormap *, color *);
624:	static void subcoloronechr(struct vars *, chr, struct state *, struct state *, color *);
747:	static void subcoloronerange(struct vars *, chr, chr, struct state *, struct state *, color *);
885:	static void subcoloronerow(struct vars *, int, struct state *, struct state *, color *);
1001:	static void uncolorchain(struct colormap *, struct arc *);

File regc_cvec.c:
79:	static void addchr(struct cvec *, chr);
90:	static void addrange(struct cvec *, chr, chr);
66:	static struct cvec *clearcvec(struct cvec *);
135:	static void freecvec(struct cvec *);
112:	static struct cvec *getcvec(struct vars *, int, int);
45:	static struct cvec *newcvec(int, int);

File regc_lex.c:
856:	static int brenext(struct vars *, chr);
1017:	static chr chrnamed(struct vars *, const chr *, const chr *, chr);
775:	static chr lexdigits(struct vars *, int, int, int);
604:	static int lexescape(struct vars *);
70:	static void lexstart(struct vars *);
1005:	static chr newline(void);
200:	static int next(struct vars *);
99:	static void prefixes(struct vars *);
977:	static void skip(struct vars *);

File regc_locale.c:
721:	static struct cvec *allcases(struct vars *, chr);
492:	static int before(chr, chr);
762:	static int casecmp(const chr *, const chr *, size_t);
675:	static int cclass_column_index(struct colormap *, chr);
573:	static struct cvec *cclasscvec(struct vars *, enum char_classes, int);
747:	static int cmp(const chr *, const chr *, size_t);
504:	static struct cvec *eclass(struct vars *, chr, int);
376:	static chr element(struct vars *, const chr *, const chr *);
540:	static enum char_classes lookupcclass(struct vars *, const chr *, const chr *);
412:	static struct cvec *range(struct vars *, chr, chr, int);

File regc_nfa.c:
376:	static struct arc *allocarc(struct nfa *);
2987:	static long analyze(struct nfa *);
2522:	static void breakconstraintloop(struct nfa *, struct state *);
3552:	static int carc_cmp(const void *, const void *);
3545:	static void carcsort(struct carc *, size_t);
497:	static void changearcsource(struct arc *, struct state *);
541:	static void changearctarget(struct arc *, struct state *);
3409:	static _Bool check_in_colors_match(struct state *, color, color);
3355:	static _Bool check_out_colors_match(struct state *, color, color);
3033:	static void checkmatchall(struct nfa *);
3213:	static _Bool checkmatchall_recurse(struct nfa *, struct state *, _Bool **);
2900:	static void cleanup(struct nfa *);
1460:	static void cleartraverse(struct nfa *, struct state *);
1229:	static void cloneouts(struct nfa *, struct state *, struct state *, struct state *, int);
2668:	static void clonesuccessorstates(struct nfa *, struct state *, struct state *, struct state *, struct arc *, char *, char *, int);
1953:	static int combine(struct nfa *, struct arc *, struct arc *);
3454:	static void compact(struct nfa *, struct cnfa *);
874:	static void copyins(struct nfa *, struct state *, struct state *);
1147:	static void copyouts(struct nfa *, struct state *, struct state *);
616:	static void cparc(struct nfa *, struct arc *, struct state *, struct state *);
331:	static void createarc(struct nfa *, int, color, struct state *, struct state *);
1254:	static void delsub(struct nfa *, struct state *, struct state *);
1277:	static void deltraverse(struct nfa *, struct state *, struct state *);
230:	static void dropstate(struct nfa *, struct state *);
3585:	static void dumpnfa(struct nfa *, FILE *);
1328:	static void dupnfa(struct nfa *, struct state *, struct state *, struct state *, struct state *);
1352:	static void duptraverse(struct nfa *, struct state *, struct state *);
2267:	static struct state *emptyreachable(struct nfa *, struct state *, struct state *, struct arc **);
600:	static struct arc *findarc(struct state *, int, color);
2433:	static int findconstraintloop(struct nfa *, struct state *);
2334:	static void fixconstraintloops(struct nfa *, FILE *);
2040:	static void fixempties(struct nfa *, FILE *);
426:	static void freearc(struct nfa *, struct arc *);
3572:	static void freecnfa(struct cnfa *);
107:	static void freenfa(struct nfa *);
246:	static void freestate(struct nfa *, struct state *);
2313:	static int hasconstraintout(struct state *);
583:	static int hasnonemptyout(struct state *);
2295:	static int isconstraintarc(struct arc *);
2961:	static void markcanreach(struct nfa *, struct state *, struct state *, struct state *);
2935:	static void markreachable(struct nfa *, struct state *, struct state *, struct state *);
956:	static void mergeins(struct nfa *, struct state *, struct arc **, int);
782:	static void moveins(struct nfa *, struct state *, struct state *);
1055:	static void moveouts(struct nfa *, struct state *, struct state *);
285:	static void newarc(struct nfa *, int, color, struct state *, struct state *);
216:	static struct state *newfstate(struct nfa *, int);
47:	static struct nfa *newnfa(struct vars *, struct colormap *, struct nfa *);
137:	static struct state *newstate(struct nfa *);
1566:	static long optimize(struct nfa *, FILE *);
1686:	static int pull(struct nfa *, struct arc *, struct state **);
1606:	static void pullback(struct nfa *, FILE *);
1857:	static int push(struct nfa *, struct arc *, struct state **);
1777:	static void pushfwd(struct nfa *, FILE *);
1392:	static void removeconstraints(struct nfa *, struct state *, struct state *);
1411:	static void removetraverse(struct nfa *, struct state *);
1497:	static struct state *single_color_transition(struct state *, struct state *);
628:	static void sortins(struct nfa *, struct state *);
670:	static int sortins_cmp(const void *, const void *);
695:	static void sortouts(struct nfa *, struct state *);
737:	static int sortouts_cmp(const void *, const void *);
1527:	static void specialcolors(struct nfa *);

File regc_pg_locale.c:
232:	void pg_set_regex_collation(Oid);
790:	static struct cvec *pg_ctype_get_cache(pg_wc_probefunc, int);
368:	static int pg_wc_isalnum(pg_wchar);
332:	static int pg_wc_isalpha(pg_wchar);
296:	static int pg_wc_isdigit(pg_wchar);
485:	static int pg_wc_isgraph(pg_wchar);
449:	static int pg_wc_islower(pg_wchar);
521:	static int pg_wc_isprint(pg_wchar);
557:	static int pg_wc_ispunct(pg_wchar);
593:	static int pg_wc_isspace(pg_wchar);
413:	static int pg_wc_isupper(pg_wchar);
404:	static int pg_wc_isword(pg_wchar);
673:	static pg_wchar pg_wc_tolower(pg_wchar);
629:	static pg_wchar pg_wc_toupper(pg_wchar);
746:	static _Bool store_match(pg_ctype_cache *, pg_wchar, int);

File regcomp.c:
461:	int __GI___regcomp(regex_t * restrict, const char * restrict, int);
633:	void __GI___regfree(regex_t *);
264:	int __re_compile_fastmap(struct re_pattern_buffer *);
217:	const char *__re_compile_pattern(const char *, size_t, struct re_pattern_buffer *);
254:	reg_syntax_t __re_set_syntax(reg_syntax_t);
519:	size_t __regerror(int, const regex_t * restrict, char * restrict, size_t);
328:	int pg_regcomp(regex_t *, const chr *, size_t, int, Oid);
668:	char *re_comp(const char *);
1626:	static void bracket(struct vars *, struct state *, struct state *);
1716:	static void brackpart(struct vars *, struct state *, struct state *, _Bool *);
3566:	static reg_errcode_t build_charclass(unsigned char *, bitset_word_t *, Idx *, const char *, reg_syntax_t, re_charset_t *, re_charset_t *);
3648:	static bin_tree_t *build_charclass_op(re_dfa_t *, unsigned char *, const char *, const char *, _Bool, reg_errcode_t *);
1693:	static reg_errcode_t calc_eclosure_iter(re_node_set *, re_dfa_t *, Idx, _Bool);
1682:	static void cbracket(struct vars *, struct state *, struct state *);
1447:	static void charclass(struct vars *, enum char_classes, struct state *, struct state *);
1471:	static void charclasscomplement(struct vars *, enum char_classes, struct state *, struct state *);
2230:	static void cleanst(struct vars *);
1487:	static reg_errcode_t duplicate_node_closure(re_dfa_t *, Idx, Idx, Idx, unsigned int);
583:	static void free_dfa_content(re_dfa_t *);
713:	static void free_mem(void);
3869:	static reg_errcode_t free_tree(void *, bin_tree_t *);
2347:	static void freelacons(struct subre *, int);
2140:	static void freesrnode(struct vars *, struct subre *);
2105:	static void freesubre(struct vars *, struct subre *);
2124:	static void freesubreandsiblings(struct vars *, struct subre *);
547:	static int freev(struct vars *, int);
1344:	static bin_tree_t *lower_subexp(reg_errcode_t *, regex_t *, bin_tree_t *);
576:	static void makesearch(struct vars *, struct nfa *);
2215:	static void markst(struct subre *);
510:	static void moresubs(struct vars *, int);
2308:	static int newlacon(struct vars *, struct state *, struct state *, int);
2269:	static long nfanode(struct vars *, struct subre *, int, FILE *);
2249:	static long nfatree(struct vars *, struct subre *, FILE *);
1411:	static void nonword(struct vars *, int, struct state *, struct state *);
2182:	static int numst(struct subre *, int);
1864:	static void onechr(struct vars *, chr, struct state *, struct state *);
1890:	static void optimizebracket(struct vars *, struct state *, struct state *);
2166:	static void optst(struct vars *, struct subre *);
672:	static struct subre *parse(struct vars *, int, int, struct state *, struct state *);
3393:	static reg_errcode_t parse_bracket_element(bracket_elem_t *, re_string_t *, re_token_t *, int, reg_syntax_t, _Bool, re_dfa_t *);
2202:	static bin_tree_t *parse_branch(re_string_t *, regex_t *, re_token_t *, reg_syntax_t, Idx, reg_errcode_t *);
2247:	static bin_tree_t *parse_expression(re_string_t *, regex_t *, re_token_t *, reg_syntax_t, Idx, reg_errcode_t *);
2153:	static bin_tree_t *parse_reg_exp(re_string_t *, regex_t *, re_token_t *, reg_syntax_t, Idx, reg_errcode_t *);
740:	static struct subre *parsebranch(struct vars *, int, int, struct state *, struct state *, int);
793:	static struct subre *parseqatom(struct vars *, int, int, struct state *, struct state *, struct subre *);
1783:	static int peek_token(re_token_t *, re_string_t *, reg_syntax_t);
2021:	static int peek_token_bracket(re_token_t *, re_string_t *, reg_syntax_t);
1226:	static reg_errcode_t postorder(bin_tree_t *, void *, reg_errcode_t (*)(void *, bin_tree_t *));
1982:	static void processlacon(struct vars *, struct state *, struct state *, int, struct state *, struct state *);
2400:	static int rcancelrequested(void);
295:	static void re_compile_fastmap_iter(regex_t *, char *, const re_dfastate_t *, const re_dfastate_t *);
726:	static reg_errcode_t re_compile_internal(regex_t *, const char *, size_t, reg_syntax_t);
1539:	static void repeat(struct vars *, struct state *, struct state *, int, int);
2364:	static void rfree(regex_t *);
2416:	static int rstacktoodeep(void);
1508:	static int scannum(struct vars *);
1839:	static const chr *scanplain(struct vars *);
2048:	static struct subre *subre(struct vars *, int, int, struct state *, struct state *);
1429:	static void word(struct vars *, int, struct state *, struct state *);
1946:	static void wordchrs(struct vars *);

File rege_dfa.c:
506:	static chr *dfa_backref(struct vars *, struct dfa *, chr *, chr *, chr *, _Bool);
691:	static void freedfa(struct dfa *);
977:	static struct sset *getvacant(struct vars *, struct dfa *, chr *, chr *);
715:	static unsigned int hash(unsigned int *, int);
731:	static struct sset *initialize(struct vars *, struct dfa *, chr *);
920:	static int lacon(struct vars *, struct cnfa *, chr *, color);
585:	static chr *lastcold(struct vars *, struct dfa *);
42:	static chr *longest(struct vars *, struct dfa *, chr *, chr *, int *);
371:	static int matchuntil(struct vars *, struct dfa *, chr *, struct sset **, chr **);
777:	static struct sset *miss(struct vars *, struct dfa *, struct sset *, color, chr *, chr *);
607:	static struct dfa *newdfa(struct vars *, struct cnfa *, struct colormap *, struct smalldfa *);
1048:	static struct sset *pickss(struct vars *, struct dfa *, chr *, chr *);
204:	static chr *shortest(struct vars *, struct dfa *, chr *, chr *, chr *, chr **, int *);

File regerror.c:
60:	size_t pg_regerror(int, const regex_t *, char *, size_t);

File regex_internal.c:
211:	static void build_wcs_buffer(re_string_t *);
281:	static reg_errcode_t build_wcs_upper_buffer(re_string_t *);
1477:	static re_dfastate_t *re_acquire_state(reg_errcode_t *, const re_dfa_t *, const re_node_set *);
1525:	static re_dfastate_t *re_acquire_state_context(reg_errcode_t *, const re_dfa_t *, const re_node_set *, unsigned int);
1403:	static Idx re_dfa_add_node(re_dfa_t *, re_token_t);
1052:	static reg_errcode_t re_node_set_add_intersect(re_node_set *, const re_node_set *, const re_node_set *);
1143:	static reg_errcode_t re_node_set_init_union(re_node_set *, const re_node_set *, const re_node_set *);
1279:	static _Bool re_node_set_insert(re_node_set *, Idx);
1196:	static reg_errcode_t re_node_set_merge(re_node_set *, const re_node_set *);
925:	static unsigned int re_string_context_at(const re_string_t *, Idx, int);
578:	static reg_errcode_t re_string_reconstruct(re_string_t *, Idx, int);
1566:	static reg_errcode_t register_state(const re_dfa_t *, re_dfastate_t *, re_hashval_t);

File regexec.c:
192:	int __GI___regexec(const regex_t * restrict, const char * restrict, size_t, regmatch_t *, int);
235:	int __compat_regexec(const regex_t * restrict, const char * restrict, size_t, regmatch_t *, int);
276:	regoff_t __re_match(struct re_pattern_buffer *, const char *, Idx, Idx, struct re_registers *);
297:	regoff_t __re_match_2(struct re_pattern_buffer *, const char *, Idx, const char *, Idx, Idx, struct re_registers *, Idx);
286:	regoff_t __re_search(struct re_pattern_buffer *, const char *, Idx, Idx, regoff_t, struct re_registers *);
309:	regoff_t __re_search_2(struct re_pattern_buffer *, const char *, Idx, const char *, Idx, Idx, regoff_t, struct re_registers *, Idx);
537:	void __re_set_registers(struct re_pattern_buffer *, struct re_registers *, __re_size_t, regoff_t *, regoff_t *);
176:	int pg_regexec(regex_t *, const chr *, size_t, size_t, rm_detail_t *, size_t, regmatch_t *, int);
566:	int re_exec(const char *);
3255:	static _Bool build_trtable(const re_dfa_t *, re_dfastate_t *);
1056:	static int caltdissect(struct vars *, struct subre *, chr *, chr *);
974:	static int cbrdissect(struct vars *, struct subre *, chr *, chr *);
809:	static int ccondissect(struct vars *, struct subre *, chr *, chr *);
734:	static int cdissect(struct vars *, struct subre *, chr *, chr *);
487:	static int cfind(struct vars *, struct cnfa *, struct colormap *);
527:	static int cfindloop(struct vars *, struct cnfa *, struct colormap *, struct dfa *, struct dfa *, chr **);
2828:	static reg_errcode_t check_arrival(re_match_context_t *, state_array_t *, Idx, Idx, Idx, Idx, int);
3071:	static reg_errcode_t check_arrival_expand_ecl(const re_dfa_t *, re_node_set *, Idx, int);
3122:	static reg_errcode_t check_arrival_expand_ecl_sub(const re_dfa_t *, re_node_set *, Idx, Idx, int);
1845:	static _Bool check_dst_limits(const re_match_context_t *, Idx, Idx, Idx, Idx, const re_node_set *, const re_node_set *);
1880:	static int check_dst_limits_calc_pos_1(const re_match_context_t *, int, Idx, Idx, Idx);
1193:	static Idx check_halt_state_context(const re_match_context_t *, const re_dfastate_t *, Idx);
3978:	static _Bool check_node_accept(const re_match_context_t *, const re_token_t *, Idx);
3689:	static int check_node_accept_bytes(Idx, const re_string_t *, Idx, const re_dfa_t *, const re_dfa_t *);
2372:	static reg_errcode_t check_subexp_matching_top(re_match_context_t *, Idx, re_node_set *, re_node_set *);
1097:	static int citerdissect(struct vars *, struct subre *, chr *, chr *);
890:	static int crevcondissect(struct vars *, struct subre *, chr *, chr *);
1301:	static int creviterdissect(struct vars *, struct subre *, chr *, chr *);
3167:	static reg_errcode_t expand_bkref_cache(re_match_context_t *, re_node_set *, Idx, Idx, int);
4028:	static reg_errcode_t extend_buffers(re_match_context_t *, int);
397:	static int find(struct vars *, struct cnfa *, struct colormap *);
2778:	static reg_errcode_t get_subexp_sub(re_match_context_t *, re_sub_match_last_t *, Idx, Idx, const re_sub_match_top_t *);
378:	static struct dfa *getladfa(struct vars *, int);
350:	static struct dfa *getsubdfa(struct vars *, struct subre *);
4128:	static void match_ctx_clean(re_match_context_t *);
2264:	static re_dfastate_t *merge_state_with_log(reg_errcode_t *, re_match_context_t *, re_dfastate_t *);
585:	static reg_errcode_t re_search_internal(const regex_t *, const char *, Idx, Idx, Idx, Idx, size_t, regmatch_t *, int);
368:	static regoff_t re_search_stub(struct re_pattern_buffer *, const char *, Idx, Idx, regoff_t, Idx, struct re_registers *, _Bool);
1365:	static reg_errcode_t set_regs(const regex_t *, const re_match_context_t *, size_t, regmatch_t *, _Bool);
1556:	static reg_errcode_t sift_states_backward(const re_match_context_t *, re_sift_context_t *);
1797:	static reg_errcode_t sub_epsilon_src_nodes(const re_dfa_t *, Idx, re_node_set *, const re_node_set *);
680:	static void subset(struct vars *, struct subre *, chr *, chr *);
2513:	static reg_errcode_t transit_state_bkref(re_match_context_t *, const re_node_set *, const re_node_set *);
1721:	static reg_errcode_t update_cur_sifted_state(const re_match_context_t *, re_sift_context_t *, Idx, re_node_set *);
641:	static void zapallsubs(regmatch_t *, size_t);
657:	static void zaptreesubs(struct vars *, struct subre *);

File regexp.c:
137:	regex_t *RE_compile_and_cache(text *, int, Oid);
343:	_Bool RE_compile_and_execute(text *, char *, int, int, Oid, int, regmatch_t *);
73:	int advance(const char *, const char *);
503:	Datum nameicregexeq(FunctionCallInfo);
517:	Datum nameicregexne(FunctionCallInfo);
440:	Datum nameregexeq(FunctionCallInfo);
454:	Datum nameregexne(FunctionCallInfo);
1499:	char *regexp_fixed_prefix(text *, _Bool, Oid, _Bool *);
966:	Datum regexp_match(FunctionCallInfo);
1002:	Datum regexp_match_no_flags(FunctionCallInfo);
1012:	Datum regexp_matches(FunctionCallInfo);
1061:	Datum regexp_matches_no_flags(FunctionCallInfo);
1405:	Datum regexp_split_to_array(FunctionCallInfo);
1444:	Datum regexp_split_to_array_no_flags(FunctionCallInfo);
1341:	Datum regexp_split_to_table(FunctionCallInfo);
1394:	Datum regexp_split_to_table_no_flags(FunctionCallInfo);
940:	Datum similar_escape(FunctionCallInfo);
922:	Datum similar_to_escape_1(FunctionCallInfo);
906:	Datum similar_to_escape_2(FunctionCallInfo);
50:	int step(const char *, const char *);
531:	Datum texticregexeq(FunctionCallInfo);
545:	Datum texticregexne(FunctionCallInfo);
468:	Datum textregexeq(FunctionCallInfo);
482:	Datum textregexne(FunctionCallInfo);
640:	Datum textregexreplace(FunctionCallInfo);
623:	Datum textregexreplace_noopt(FunctionCallInfo);
564:	Datum textregexsubstr(FunctionCallInfo);
309:	static _Bool RE_execute(regex_t *, char *, int, int, regmatch_t *);
266:	static _Bool RE_wchar_execute(regex_t *, pg_wchar *, int, int, int, regmatch_t *);
1285:	static ArrayType *build_regexp_match_result(regexp_matches_ctx *);
1456:	static Datum build_regexp_split_result(regexp_matches_ctx *);
366:	static void parse_re_flags(pg_re_flags *, text *);
1084:	static regexp_matches_ctx *setup_regexp_matches(text *, text *, pg_re_flags *, Oid, _Bool, _Bool, _Bool);
667:	static text *similar_escape_internal(text *, text *);

File regexport.c:
191:	int pg_reg_colorisbegin(const regex_t *, int);
208:	int pg_reg_colorisend(const regex_t *, int);
266:	void pg_reg_getcharacters(const regex_t *, int, pg_wchar *, int);
64:	int pg_reg_getfinalstate(const regex_t *);
50:	int pg_reg_getinitialstate(const regex_t *);
230:	int pg_reg_getnumcharacters(const regex_t *, int);
174:	int pg_reg_getnumcolors(const regex_t *);
134:	int pg_reg_getnumoutarcs(const regex_t *, int);
36:	int pg_reg_getnumstates(const regex_t *);
155:	void pg_reg_getoutarcs(const regex_t *, int, regex_arc_t *, int);
93:	static void traverse_lacons(struct cnfa *, int, int *, regex_arc_t *, int);

File regfree.c:
49:	void pg_regfree(regex_t *);

File regis.c:
85:	void RS_compile(Regis *, _Bool, const char *);
213:	_Bool RS_execute(Regis *, char *);
166:	void RS_free(Regis *);
31:	_Bool RS_isRegis(const char *);
182:	static _Bool mb_strchr(char *, char *);
74:	static RegisNode *newRegisNode(RegisNode *, int);

File register-atfork.c:
37:	int __GI___register_atfork(void (*)(void), void (*)(void), void (*)(void), void *);
110:	void __run_fork_handlers(enum __run_fork_handler_type, _Bool);
78:	void __unregister_atfork(void *);
143:	static void free_mem(void);

File regprefix.c:
46:	int pg_regprefix(regex_t *, chr **, size_t *);
116:	static int findprefix(struct cnfa *, struct colormap *, chr *, size_t *);

File regproc.c:
852:	char *format_operator(Oid);
781:	char *format_operator_extended(Oid, bits16);
865:	void format_operator_parts(Oid, List **, List **, _Bool);
858:	char *format_operator_qualified(Oid);
323:	char *format_procedure(Oid);
350:	char *format_procedure_extended(Oid, bits16);
422:	void format_procedure_parts(Oid, List **, List **, _Bool);
329:	char *format_procedure_qualified(Oid);
941:	Datum regclassin(FunctionCallInfo);
1010:	Datum regclassout(FunctionCallInfo);
1067:	Datum regclassrecv(FunctionCallInfo);
1077:	Datum regclasssend(FunctionCallInfo);
1093:	Datum regcollationin(FunctionCallInfo);
1161:	Datum regcollationout(FunctionCallInfo);
1219:	Datum regcollationrecv(FunctionCallInfo);
1229:	Datum regcollationsend(FunctionCallInfo);
1387:	Datum regconfigin(FunctionCallInfo);
1426:	Datum regconfigout(FunctionCallInfo);
1472:	Datum regconfigrecv(FunctionCallInfo);
1482:	Datum regconfigsend(FunctionCallInfo);
1498:	Datum regdictionaryin(FunctionCallInfo);
1537:	Datum regdictionaryout(FunctionCallInfo);
1584:	Datum regdictionaryrecv(FunctionCallInfo);
1594:	Datum regdictionarysend(FunctionCallInfo);
1734:	Datum regnamespacein(FunctionCallInfo);
1802:	Datum regnamespaceout(FunctionCallInfo);
1834:	Datum regnamespacerecv(FunctionCallInfo);
1844:	Datum regnamespacesend(FunctionCallInfo);
674:	Datum regoperatorin(FunctionCallInfo);
898:	Datum regoperatorout(FunctionCallInfo);
915:	Datum regoperatorrecv(FunctionCallInfo);
925:	Datum regoperatorsend(FunctionCallInfo);
502:	Datum regoperin(FunctionCallInfo);
580:	Datum regoperout(FunctionCallInfo);
648:	Datum regoperrecv(FunctionCallInfo);
658:	Datum regopersend(FunctionCallInfo);
230:	Datum regprocedurein(FunctionCallInfo);
459:	Datum regprocedureout(FunctionCallInfo);
476:	Datum regprocedurerecv(FunctionCallInfo);
486:	Datum regproceduresend(FunctionCallInfo);
61:	Datum regprocin(FunctionCallInfo);
142:	Datum regprocout(FunctionCallInfo);
204:	Datum regprocrecv(FunctionCallInfo);
214:	Datum regprocsend(FunctionCallInfo);
1609:	Datum regrolein(FunctionCallInfo);
1677:	Datum regroleout(FunctionCallInfo);
1709:	Datum regrolerecv(FunctionCallInfo);
1719:	Datum regrolesend(FunctionCallInfo);
1251:	Datum regtypein(FunctionCallInfo);
1313:	Datum regtypeout(FunctionCallInfo);
1361:	Datum regtyperecv(FunctionCallInfo);
1371:	Datum regtypesend(FunctionCallInfo);
1877:	List *stringToQualifiedNameList(const char *);
1858:	Datum text_regclass(FunctionCallInfo);
985:	Datum to_regclass(FunctionCallInfo);
1136:	Datum to_regcollation(FunctionCallInfo);
1777:	Datum to_regnamespace(FunctionCallInfo);
557:	Datum to_regoper(FunctionCallInfo);
734:	Datum to_regoperator(FunctionCallInfo);
119:	Datum to_regproc(FunctionCallInfo);
290:	Datum to_regprocedure(FunctionCallInfo);
1652:	Datum to_regrole(FunctionCallInfo);
1292:	Datum to_regtype(FunctionCallInfo);
1925:	static void parseNameAndArgTypes(const char *, _Bool, List **, int *, Oid *);

File reinit.c:
46:	void ResetUnloggedRelations(int);
369:	_Bool parse_filename_for_nontemp_relation(const char *, int *, ForkNumber *);
149:	static void ResetUnloggedRelationsInDbspaceDir(const char *, int);
102:	static void ResetUnloggedRelationsInTablespaceDir(const char *, int);

File relation.c:
585:	LogicalRepRelMapEntry *logicalrep_partition_open(LogicalRepRelMapEntry *, Relation, AttrMap *);
523:	void logicalrep_partmap_reset_relmap(LogicalRepRelation *);
456:	void logicalrep_rel_close(LogicalRepRelMapEntry *, LOCKMODE);
319:	LogicalRepRelMapEntry *logicalrep_rel_open(LogicalRepRelId, LOCKMODE);
157:	void logicalrep_relmap_update(LogicalRepRelation *);
206:	void relation_close(Relation, LOCKMODE);
48:	Relation relation_open(Oid, LOCKMODE);
138:	Relation relation_openrv(const RangeVar *, LOCKMODE);
173:	Relation relation_openrv_extended(const RangeVar *, LOCKMODE, _Bool);
89:	Relation try_relation_open(Oid, LOCKMODE);
550:	static void logicalrep_partmap_init(void);
475:	static void logicalrep_partmap_invalidate_cb(Datum, Oid);
202:	static int logicalrep_rel_att_by_name(LogicalRepRelation *, const char *);
266:	static void logicalrep_rel_mark_updatable(LogicalRepRelMapEntry *);
125:	static void logicalrep_relmap_free_entry(LogicalRepRelMapEntry *);
98:	static void logicalrep_relmap_init(void);
57:	static void logicalrep_relmap_invalidate_cb(Datum, Oid);
219:	static void logicalrep_report_missing_attrs(LogicalRepRelation *, Bitmapset *);

File relcache.c:
3308:	void AtEOSubXact_RelationCache(_Bool, SubTransactionId, SubTransactionId);
3156:	void AtEOXact_RelationCache(_Bool);
5548:	struct PublicationActions *GetRelationPublicationActions(Relation);
3842:	void RelationAssumeNewRelfilenode(Relation);
3445:	Relation RelationBuildLocalRelation(const char *, Oid, TupleDesc, Oid, Oid, Oid, Oid, _Bool, _Bool, char, char);
6568:	void RelationCacheInitFilePostInvalidate(void);
6543:	void RelationCacheInitFilePreInvalidate(void);
6583:	void RelationCacheInitFileRemove(void);
3868:	void RelationCacheInitialize(void);
3914:	void RelationCacheInitializePhase2(void);
3973:	void RelationCacheInitializePhase3(void);
2912:	void RelationCacheInvalidate(_Bool);
2856:	void RelationCacheInvalidateEntry(Oid);
2152:	void RelationClose(Relation);
3021:	void RelationCloseSmgrByOid(Oid);
2132:	void RelationDecrementReferenceCount(Relation);
2812:	void RelationForgetRelation(Oid);
4969:	List *RelationGetDummyIndexExpressions(Relation);
5424:	void RelationGetExclusionInfo(Relation, Oid **, Oid **, uint16 **);
4567:	List *RelationGetFKeyList(Relation);
5350:	Bitmapset *RelationGetIdentityKeyBitmap(Relation);
5678:	bytea **RelationGetIndexAttOptions(Relation, _Bool);
5106:	Bitmapset *RelationGetIndexAttrBitmap(Relation, IndexAttrBitmapKind);
4910:	List *RelationGetIndexExpressions(Relation);
4676:	List *RelationGetIndexList(Relation);
5023:	List *RelationGetIndexPredicate(Relation);
5632:	Datum *RelationGetIndexRawAttOptions(Relation);
4864:	Oid RelationGetPrimaryKeyIndex(Relation);
4885:	Oid RelationGetReplicaIndex(Relation);
4795:	List *RelationGetStatExtList(Relation);
2046:	Relation RelationIdGetRelation(Oid);
6503:	_Bool RelationIdIsInInitFile(Oid);
2119:	void RelationIncrementReferenceCount(Relation);
1411:	void RelationInitIndexAccessInfo(Relation);
1794:	void RelationInitTableAccessMethod(Relation);
3691:	void RelationSetNewRelfilenode(Relation, char);
5739:	int errtable(Relation);
5756:	int errtablecol(Relation, int);
5780:	int errtablecolname(Relation, const char *);
5793:	int errtableconstraint(Relation, const char *);
404:	static Relation AllocateRelationDesc(Form_pg_class);
3363:	static void AtEOSubXact_cleanup(Relation, _Bool, SubTransactionId, SubTransactionId);
3226:	static void AtEOXact_cleanup(Relation, _Bool);
4440:	static int AttrDefaultCmp(const void *, const void *);
4360:	static void AttrDefaultFetch(Relation, int);
4295:	static TupleDesc BuildHardcodedDescriptor(int, const FormData_pg_attribute *);
4544:	static int CheckConstraintCmp(const void *, const void *);
4455:	static void CheckConstraintFetch(Relation);
5658:	static bytea **CopyIndexAttOptions(bytea **, int);
4325:	static TupleDesc GetPgClassDescriptor(void);
4338:	static TupleDesc GetPgIndexDescriptor(void);
1581:	static void IndexSupportInitialize(oidvector *, RegProcedure *, Oid *, Oid *, StrategyNumber, AttrNumber);
1387:	static void InitIndexAmRoutine(Relation);
1785:	static void InitTableAmRoutine(Relation);
1632:	static OpClassCacheEnt *LookupOpclassInfo(Oid, StrategyNumber);
1019:	static Relation RelationBuildDesc(Oid, _Bool);
726:	static void RelationBuildRuleLock(Relation);
516:	static void RelationBuildTupleDesc(Relation);
6616:	static void RelationCacheInitFileRemoveInDir(const char *);
2482:	static void RelationClearRelation(Relation, _Bool);
2393:	static void RelationDestroyRelation(Relation, _Bool);
2779:	static void RelationFlushRelation(Relation);
1305:	static void RelationInitPhysicalAddr(Relation);
459:	static void RelationParseRelOptions(Relation, HeapTuple);
2209:	static void RelationReloadIndexInfo(Relation);
2321:	static void RelationReloadNailed(Relation);
3034:	static void RememberToFreeTupleDescAtEOX(TupleDesc);
334:	static HeapTuple ScanPgRelation(Oid, _Bool, _Bool);
932:	static _Bool equalPolicy(RowSecurityPolicy *, RowSecurityPolicy *);
978:	static _Bool equalRSDesc(RowSecurityDesc *, RowSecurityDesc *);
887:	static _Bool equalRuleLocks(RuleLock *, RuleLock *);
1858:	static void formrdesc(const char *, Oid, _Bool, int, const FormData_pg_attribute *);
4259:	static void load_critical_index(Oid, Oid);
5857:	static _Bool load_relcache_init_file(_Bool);
6640:	static void unlink_initfile(const char *, int);
6484:	static void write_item(const void *, Size, FILE *);
6276:	static void write_relcache_init_file(_Bool);

File relfilenodemap.c:
138:	Oid RelidByRelfilenode(Oid, Oid);
88:	static void InitializeRelfilenodeMap(void);
54:	static void RelfilenodeMapInvalidateCallback(Datum, Oid);

File relmapdesc.c:
20:	void relmap_desc(StringInfo, XLogReaderState *);
35:	const char *relmap_identify(uint8);

File relmapper.c:
439:	void AtCCI_RelationMap(void);
476:	void AtEOXact_RelationMap(_Bool, _Bool);
523:	void AtPrepare_RelationMap(void);
546:	void CheckPointRelationMap(void);
646:	Size EstimateRelationMapSpace(void);
212:	Oid RelationMapFilenodeToOid(Oid, _Bool);
560:	void RelationMapFinishBootstrap(void);
584:	void RelationMapInitialize(void);
604:	void RelationMapInitializePhase2(void);
625:	void RelationMapInitializePhase3(void);
403:	void RelationMapInvalidate(_Bool);
425:	void RelationMapInvalidateAll(void);
159:	Oid RelationMapOidToFilenode(Oid, _Bool);
373:	void RelationMapRemoveMapping(Oid);
261:	void RelationMapUpdateMap(Oid, Oid, _Bool, _Bool);
674:	void RestoreRelationMap(char *);
657:	void SerializeRelationMap(Size, char *);
1006:	void relmap_redo(XLogReaderState *);
319:	static void apply_map_update(RelMapFile *, Oid, Oid, _Bool);
698:	static void load_relmap_file(_Bool, _Bool);
351:	static void merge_map_updates(RelMapFile *, const RelMapFile *, _Bool);
958:	static void perform_relmap_update(_Bool, const RelMapFile *);
802:	static void write_relmap_file(_Bool, RelMapFile *, _Bool, _Bool, _Bool, Oid, Oid, const char *);

File relnode.c:
784:	RelOptInfo *build_child_join_rel(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *, List *, SpecialJoinInfo *, JoinType);
576:	RelOptInfo *build_join_rel(PlannerInfo *, Relids, RelOptInfo *, RelOptInfo *, SpecialJoinInfo *, List **);
194:	RelOptInfo *build_simple_rel(PlannerInfo *, int, RelOptInfo *);
152:	void expand_planner_arrays(PlannerInfo *, int);
1207:	RelOptInfo *fetch_upper_rel(PlannerInfo *, UpperRelationKind, Relids);
374:	RelOptInfo *find_base_rel(PlannerInfo *, int);
1258:	Relids find_childrel_parents(PlannerInfo *, RelOptInfo *);
438:	RelOptInfo *find_join_rel(PlannerInfo *, Relids);
1623:	ParamPathInfo *find_param_path_info(RelOptInfo *, Relids);
1591:	ParamPathInfo *get_appendrel_parampathinfo(RelOptInfo *, Relids);
1294:	ParamPathInfo *get_baserel_parampathinfo(PlannerInfo *, RelOptInfo *, Relids);
1384:	ParamPathInfo *get_joinrel_parampathinfo(PlannerInfo *, RelOptInfo *, Path *, Path *, SpecialJoinInfo *, Relids, List **);
928:	Relids min_join_parameterization(PlannerInfo *, Relids, RelOptInfo *, RelOptInfo *);
83:	void setup_simple_rel_arrays(PlannerInfo *);
539:	static void add_join_rel(PlannerInfo *, RelOptInfo *);
2028:	static void build_child_join_reltarget(PlannerInfo *, RelOptInfo *, RelOptInfo *, int, AppendRelInfo **);
397:	static void build_join_rel_hash(PlannerInfo *);
1103:	static void build_joinrel_joinlist(RelOptInfo *, RelOptInfo *, RelOptInfo *);
1645:	static void build_joinrel_partition_info(RelOptInfo *, RelOptInfo *, RelOptInfo *, List *, JoinType);
1073:	static List *build_joinrel_restrictlist(PlannerInfo *, RelOptInfo *, RelOptInfo *, RelOptInfo *);
971:	static void build_joinrel_tlist(PlannerInfo *, RelOptInfo *, RelOptInfo *);
1716:	static _Bool have_partkey_equi_join(RelOptInfo *, RelOptInfo *, RelOptInfo *, JoinType, List *);
1840:	static int match_expr_to_partition_keys(Expr *, RelOptInfo *, _Bool);
501:	static void set_foreign_rel_properties(RelOptInfo *, RelOptInfo *, RelOptInfo *);
1889:	static void set_joinrel_partition_key_exprs(RelOptInfo *, RelOptInfo *, RelOptInfo *, JoinType);
1155:	static List *subbuild_joinrel_joinlist(RelOptInfo *, List *, List *);
1121:	static List *subbuild_joinrel_restrictlist(RelOptInfo *, List *, List *);

File reloptions.c:
2102:	LOCKMODE AlterTableGetRelOptionsLockLevel(List *);
842:	void add_bool_reloption(bits32, const char *, const char *, _Bool, LOCKMODE);
1011:	void add_enum_reloption(bits32, const char *, const char *, relopt_enum_elt_def *, int, const char *, LOCKMODE);
894:	void add_int_reloption(bits32, const char *, const char *, int, int, int, LOCKMODE);
858:	void add_local_bool_reloption(local_relopts *, const char *, const char *, _Bool, int);
1029:	void add_local_enum_reloption(local_relopts *, const char *, const char *, relopt_enum_elt_def *, int, const char *, int);
911:	void add_local_int_reloption(local_relopts *, const char *, const char *, int, int, int, int);
965:	void add_local_real_reloption(local_relopts *, const char *, const char *, double, double, double, int);
1111:	void add_local_string_reloption(local_relopts *, const char *, const char *, const char *, validate_string_relopt, fill_string_relopt, int);
947:	void add_real_reloption(bits32, const char *, const char *, double, double, double, LOCKMODE);
676:	relopt_kind add_reloption_kind(void);
1091:	void add_string_reloption(bits32, const char *, const char *, const char *, validate_string_relopt, LOCKMODE);
2063:	bytea *attribute_reloptions(Datum, _Bool);
1941:	void *build_local_reloptions(local_relopts *, Datum, _Bool);
1904:	void *build_reloptions(Datum, _Bool, relopt_kind, Size, const relopt_parse_elt *, int);
1834:	bytea *default_reloptions(Datum, _Bool, relopt_kind);
1374:	bytea *extractRelOptions(HeapTuple, TupleDesc, amoptions_function);
2013:	bytea *heap_reloptions(char, Datum, _Bool);
2048:	bytea *index_reloptions(amoptions_function, Datum, _Bool);
727:	void init_local_reloptions(local_relopts *, Size);
1979:	bytea *partitioned_table_reloptions(Datum, _Bool);
740:	void register_reloptions_validator(local_relopts *, relopts_validator);
2080:	bytea *tablespace_reloptions(Datum, _Bool);
1149:	Datum transformRelOptions(Datum, List *, const char *, char **, _Bool, _Bool);
1325:	List *untransformRelOptions(Datum);
1994:	bytea *view_reloptions(Datum, _Bool);
750:	static void add_local_reloption(local_relopts *, relopt_gen *, int);
693:	static void add_reloption(relopt_gen *);
1698:	static void *allocateReloptStruct(Size, relopt_value *, int);
768:	static relopt_gen *allocate_reloption(bits32, int, const char *, const char *, LOCKMODE);
1738:	static void fillRelOptions(void *, Size, relopt_value *, int, _Bool, const relopt_parse_elt *, int);
825:	static relopt_bool *init_bool_reloption(bits32, const char *, const char *, _Bool, LOCKMODE);
982:	static relopt_enum *init_enum_reloption(bits32, const char *, const char *, relopt_enum_elt_def *, int, const char *, LOCKMODE);
874:	static relopt_int *init_int_reloption(bits32, const char *, const char *, int, int, int, LOCKMODE);
927:	static relopt_real *init_real_reloption(bits32, const char *, const char *, double, double, double, LOCKMODE);
1046:	static relopt_string *init_string_reloption(bits32, const char *, const char *, const char *, validate_string_relopt, fill_string_relopt, LOCKMODE);
573:	static void initialize_reloptions(void);
1537:	static relopt_value *parseLocalRelOptions(local_relopts *, Datum, _Bool);
1495:	static relopt_value *parseRelOptions(Datum, _Bool, relopt_kind, int *);
1422:	static void parseRelOptionsInternal(Datum, _Bool, relopt_value *, int);
1565:	static void parse_one_reloption(relopt_value *, char *, int, _Bool);

File relpath.c:
110:	char *GetDatabasePath(Oid, Oid);
141:	char *GetRelationPath(Oid, Oid, Oid, int, ForkNumber);
81:	int forkname_chars(const char *, ForkNumber *);
50:	ForkNumber forkname_to_number(const char *);

File reorderbuffer.c:
2848:	void ReorderBufferAbort(ReorderBuffer *, TransactionId, XLogRecPtr);
2890:	void ReorderBufferAbortOld(ReorderBuffer *, TransactionId);
3227:	void ReorderBufferAddInvalidations(ReorderBuffer *, TransactionId, XLogRecPtr, Size, SharedInvalidationMessage *);
3108:	void ReorderBufferAddNewCommandId(ReorderBuffer *, TransactionId, XLogRecPtr, CommandId);
3190:	void ReorderBufferAddNewTupleCids(ReorderBuffer *, TransactionId, XLogRecPtr, RelFileNode, ItemPointerData, CommandId, CommandId, CommandId);
3059:	void ReorderBufferAddSnapshot(ReorderBuffer *, TransactionId, XLogRecPtr, Snapshot);
301:	ReorderBuffer *ReorderBufferAllocate(void);
1038:	void ReorderBufferAssignChild(ReorderBuffer *, TransactionId, TransactionId, XLogRecPtr);
2658:	void ReorderBufferCommit(ReorderBuffer *, TransactionId, XLogRecPtr, XLogRecPtr, TimestampTz, RepOriginId, XLogRecPtr);
1158:	void ReorderBufferCommitChild(ReorderBuffer *, TransactionId, TransactionId, XLogRecPtr, XLogRecPtr);
2764:	void ReorderBufferFinishPrepared(ReorderBuffer *, TransactionId, XLogRecPtr, XLogRecPtr, XLogRecPtr, TimestampTz, RepOriginId, XLogRecPtr, char *, _Bool);
2937:	void ReorderBufferForget(ReorderBuffer *, TransactionId, XLogRecPtr);
377:	void ReorderBufferFree(ReorderBuffer *);
458:	ReorderBufferChange *ReorderBufferGetChange(ReorderBuffer *);
983:	ReorderBufferTXN *ReorderBufferGetOldestTXN(ReorderBuffer *);
1011:	TransactionId ReorderBufferGetOldestXmin(ReorderBuffer *);
579:	Oid *ReorderBufferGetRelids(ReorderBuffer *, int);
543:	ReorderBufferTupleBuf *ReorderBufferGetTupleBuf(ReorderBuffer *, Size);
3010:	void ReorderBufferImmediateInvalidation(ReorderBuffer *, uint32, SharedInvalidationMessage *);
2979:	void ReorderBufferInvalidate(ReorderBuffer *, TransactionId, XLogRecPtr);
2727:	void ReorderBufferPrepare(ReorderBuffer *, TransactionId, char *);
3046:	void ReorderBufferProcessXid(ReorderBuffer *, TransactionId, XLogRecPtr);
766:	void ReorderBufferQueueChange(ReorderBuffer *, TransactionId, XLogRecPtr, ReorderBufferChange *, _Bool);
812:	void ReorderBufferQueueMessage(ReorderBuffer *, TransactionId, Snapshot, XLogRecPtr, _Bool, const char *, Size, const char *);
2680:	_Bool ReorderBufferRememberPrepareInfo(ReorderBuffer *, TransactionId, XLogRecPtr, XLogRecPtr, TimestampTz, RepOriginId, XLogRecPtr);
473:	void ReorderBufferReturnChange(ReorderBuffer *, ReorderBufferChange *, _Bool);
595:	void ReorderBufferReturnRelids(ReorderBuffer *, Oid *);
564:	void ReorderBufferReturnTupleBuf(ReorderBuffer *, ReorderBufferTupleBuf *);
3077:	void ReorderBufferSetBaseSnapshot(ReorderBuffer *, TransactionId, XLogRecPtr, Snapshot);
1026:	void ReorderBufferSetRestartPoint(ReorderBuffer *, XLogRecPtr);
2708:	void ReorderBufferSkipPrepare(ReorderBuffer *, TransactionId);
3340:	_Bool ReorderBufferXidHasBaseSnapshot(ReorderBuffer *, TransactionId);
3323:	_Bool ReorderBufferXidHasCatalogChanges(ReorderBuffer *, TransactionId);
3299:	void ReorderBufferXidSetCatalogChanges(ReorderBuffer *, TransactionId, XLogRecPtr);
5122:	_Bool ResolveCminCmaxDuringDecoding(HTAB *, Snapshot, HeapTuple, Buffer, CommandId *, CommandId *);
4489:	void StartupReorderBuffer(void);
4919:	static void ApplyLogicalMappingFile(HTAB *, Oid, const char *);
952:	static void AssertChangeLsnOrder(ReorderBufferTXN *);
881:	static void AssertTXNLsnOrder(ReorderBuffer *);
1934:	static void ReorderBufferApplyChange(ReorderBuffer *, ReorderBufferTXN *, Relation, ReorderBufferChange *, _Bool);
1962:	static void ReorderBufferApplyMessage(ReorderBuffer *, ReorderBufferTXN *, ReorderBufferChange *, _Bool);
1948:	static void ReorderBufferApplyTruncate(ReorderBuffer *, ReorderBufferTXN *, int, Relation *, ReorderBufferChange *, _Bool);
1697:	static void ReorderBufferBuildTupleCidHash(ReorderBuffer *, ReorderBufferTXN *);
3864:	static _Bool ReorderBufferCanStartStreaming(ReorderBuffer *);
3855:	static _Bool ReorderBufferCanStream(ReorderBuffer *);
3133:	static void ReorderBufferChangeMemoryUpdate(ReorderBuffer *, ReorderBufferChange *, _Bool, Size);
4007:	static Size ReorderBufferChangeSize(ReorderBufferChange *);
3483:	static void ReorderBufferCheckMemoryLimit(ReorderBuffer *);
4433:	static void ReorderBufferCleanupSerializedTXNs(const char *);
1474:	static void ReorderBufferCleanupTXN(ReorderBuffer *, ReorderBufferTXN *);
1773:	static Snapshot ReorderBufferCopySnap(ReorderBuffer *, Snapshot, ReorderBufferTXN *, CommandId);
3287:	static void ReorderBufferExecuteInvalidations(uint32, SharedInvalidationMessage *);
1832:	static void ReorderBufferFreeSnap(ReorderBuffer *, Snapshot);
395:	static ReorderBufferTXN *ReorderBufferGetTXN(ReorderBuffer *);
1200:	static int ReorderBufferIterCompare(Datum, Datum, void *);
1443:	static void ReorderBufferIterTXNFinish(ReorderBuffer *, ReorderBufferIterTXNState *);
1223:	static void ReorderBufferIterTXNInit(ReorderBuffer *, ReorderBufferTXN *, ReorderBufferIterTXNState * volatile *);
1351:	static ReorderBufferChange *ReorderBufferIterTXNNext(ReorderBuffer *, ReorderBufferIterTXNState *);
3396:	static ReorderBufferTXN *ReorderBufferLargestTXN(ReorderBuffer *);
3443:	static ReorderBufferTXN *ReorderBufferLargestTopTXN(ReorderBuffer *);
695:	static void ReorderBufferProcessPartialChange(ReorderBuffer *, ReorderBufferTXN *, ReorderBufferChange *, _Bool);
2046:	static void ReorderBufferProcessTXN(ReorderBuffer *, ReorderBufferTXN *, XLogRecPtr, volatile Snapshot, volatile CommandId, _Bool);
2597:	static void ReorderBufferReplay(ReorderBufferTXN *, ReorderBuffer *, TransactionId, XLogRecPtr, XLogRecPtr, TimestampTz, RepOriginId, XLogRecPtr);
2003:	static void ReorderBufferResetTXN(ReorderBuffer *, ReorderBufferTXN *, Snapshot, CommandId, XLogRecPtr, ReorderBufferChange *);
4235:	static void ReorderBufferRestoreChange(ReorderBuffer *, ReorderBufferTXN *, char *);
4092:	static Size ReorderBufferRestoreChanges(ReorderBuffer *, ReorderBufferTXN *, TXNEntryFile *, XLogSegNo *);
4403:	static void ReorderBufferRestoreCleanup(ReorderBuffer *, ReorderBufferTXN *);
419:	static void ReorderBufferReturnTXN(ReorderBuffer *, ReorderBufferTXN *);
1982:	static void ReorderBufferSaveTXNSnapshot(ReorderBuffer *, ReorderBufferTXN *, Snapshot, CommandId);
3640:	static void ReorderBufferSerializeChange(ReorderBuffer *, ReorderBufferTXN *, int, ReorderBufferChange *);
3370:	static void ReorderBufferSerializeReserve(ReorderBuffer *, Size);
3548:	static void ReorderBufferSerializeTXN(ReorderBuffer *, ReorderBufferTXN *);
4472:	static void ReorderBufferSerializedPath(char *, ReplicationSlot *, TransactionId, XLogSegNo);
1847:	static void ReorderBufferStreamCommit(ReorderBuffer *, ReorderBufferTXN *);
3890:	static void ReorderBufferStreamTXN(ReorderBuffer *, ReorderBufferTXN *);
607:	static ReorderBufferTXN *ReorderBufferTXNByXid(ReorderBuffer *, TransactionId, _Bool, _Bool *, XLogRecPtr, _Bool);
4543:	static void ReorderBufferToastAppendChunk(ReorderBuffer *, ReorderBufferTXN *, Relation, ReorderBufferChange *);
4523:	static void ReorderBufferToastInitHash(ReorderBuffer *, ReorderBufferTXN *);
4629:	static void ReorderBufferToastReplace(ReorderBuffer *, ReorderBufferTXN *, Relation, ReorderBufferChange *);
4820:	static void ReorderBufferToastReset(ReorderBuffer *, ReorderBufferTXN *);
1104:	static void ReorderBufferTransferSnapToParent(ReorderBufferTXN *, ReorderBufferTXN *);
1582:	static void ReorderBufferTruncateTXN(ReorderBuffer *, ReorderBufferTXN *, _Bool);
1911:	static void SetupCheckXidLive(TransactionId);
5017:	static _Bool TransactionIdInArray(TransactionId, TransactionId *, Size);
5044:	static void UpdateLogicalMappings(HTAB *, Oid, Snapshot);
5027:	static int file_sort_by_lsn(const ListCell *, const ListCell *);

File repl_gram.c:
1199:	int replication_yyparse(void);
1170:	static void yydestruct(const char *, int, YYSTYPE *);

File repl_scanner.c:
2026:	YY_BUFFER_STATE replication_yy_create_buffer(FILE *, int);
2054:	void replication_yy_delete_buffer(YY_BUFFER_STATE);
2101:	void replication_yy_flush_buffer(YY_BUFFER_STATE);
2228:	YY_BUFFER_STATE replication_yy_scan_buffer(char *, yy_size_t);
2278:	YY_BUFFER_STATE replication_yy_scan_bytes(const char *, int);
2265:	YY_BUFFER_STATE replication_yy_scan_string(const char *);
1981:	void replication_yy_switch_to_buffer(YY_BUFFER_STATE);
2490:	void *replication_yyalloc(yy_size_t);
2508:	void replication_yyfree(void *);
2405:	int replication_yyget_debug(void);
2349:	FILE *replication_yyget_in(void);
2365:	int replication_yyget_leng(void);
2340:	int replication_yyget_lineno(void);
2357:	FILE *replication_yyget_out(void);
2374:	char *replication_yyget_text(void);
1188:	int replication_yylex(void);
2444:	int replication_yylex_destroy(void);
2160:	void replication_yypop_buffer_state(void);
2130:	void replication_yypush_buffer_state(YY_BUFFER_STATE);
2495:	void *replication_yyrealloc(void *, yy_size_t);
1964:	void replication_yyrestart(FILE *);
2410:	void replication_yyset_debug(int);
2395:	void replication_yyset_in(FILE *);
2383:	void replication_yyset_lineno(int);
2400:	void replication_yyset_out(FILE *);
2073:	static void replication_yy_init_buffer(YY_BUFFER_STATE, FILE *);
2012:	static void replication_yy_load_buffer_state(void);
2179:	static void replication_yyensure_buffer_stack(void);
2312:	static void yy_fatal_error(const char *);
1688:	static int yy_get_next_buffer(void);
1826:	static yy_state_type yy_get_previous_state(void);
2415:	static int yy_init_globals(void);
1858:	static yy_state_type yy_try_NUL_trans(yy_state_type);

File repl_scanner.l:
276:	void replication_scanner_finish(void);
251:	void replication_scanner_init(const char *);
291:	_Bool replication_scanner_is_replication_command(void);
242:	void replication_yyerror(const char *);
230:	static void addlit(char *, int);
236:	static void addlitchar(unsigned char);
26:	static void fprintf_to_ereport(const char *, const char *);
224:	static char *litbufdup(void);
218:	static void startlit(void);

File replorigindesc.c:
19:	void replorigin_desc(StringInfo, XLogReaderState *);
51:	const char *replorigin_identify(uint8);

File res-close.c:
94:	void __GI___res_iclose(res_state, _Bool);
122:	void __GI___res_nclose(res_state);
130:	void __res_thread_freeres(void);

File res-state.c:
23:	struct __res_state *__GI___res_state(void);

File res.c:
23:	struct __res_state *__res_state(void);

File res_hconf.c:
323:	void _res_hconf_init(void);
356:	void _res_hconf_reorder_addrs(struct hostent *);
536:	void _res_hconf_trim_domain(char *);
561:	void _res_hconf_trim_domains(struct hostent *);
159:	static const char *arg_bool(const char *, int, const char *, unsigned int);
103:	static const char *arg_trimdomain_list(const char *, int, const char *);
268:	static void do_init(void);

File res_init.c:
110:	int __GI___res_ninit(res_state);
606:	int __res_vinit(res_state, int);
553:	struct resolv_conf *__resolv_conf_load(struct __res_state *);
631:	static void res_setoptions(struct resolv_conf_parser *, const char *);

File res_libc.c:
46:	int __res_init(void);

File res_randomid.c:
89:	unsigned int __GI___res_randomid(void);

File resolv_conf.c:
381:	struct resolv_conf *__resolv_conf_allocate(const struct resolv_conf *);
598:	_Bool __resolv_conf_attach(struct __res_state *, struct resolv_conf *);
657:	void __resolv_conf_detach(struct __res_state *);
358:	struct resolv_conf *__resolv_conf_get(struct __res_state *);
124:	struct resolv_conf *__resolv_conf_get_current(void);
370:	void __resolv_conf_put(struct resolv_conf *);
116:	static void conf_decrement(struct resolv_conf *);
677:	static void freeres(void);
89:	static struct resolv_conf_global *get_locked_global(void);
262:	static _Bool resolv_conf_matches(const struct __res_state *, const struct resolv_conf *);

File resolv_context.c:
193:	struct resolv_context *__GI___resolv_context_get(void);
207:	struct resolv_context *__GI___resolv_context_get_override(struct __res_state *);
200:	struct resolv_context *__GI___resolv_context_get_preinit(void);
221:	void __GI___resolv_context_put(struct resolv_context *);
241:	void __resolv_context_freeres(void);

File resowner.c:
887:	void CreateAuxProcessResourceOwner(void);
849:	void RegisterResourceReleaseCallback(ResourceReleaseCallback, void *);
908:	void ReleaseAuxProcessResources(_Bool);
428:	ResourceOwner ResourceOwnerCreate(ResourceOwner, const char *);
737:	void ResourceOwnerDelete(ResourceOwner);
946:	void ResourceOwnerEnlargeBuffers(ResourceOwner);
1070:	void ResourceOwnerEnlargeCatCacheListRefs(ResourceOwner);
1035:	void ResourceOwnerEnlargeCatCacheRefs(ResourceOwner);
1411:	void ResourceOwnerEnlargeCryptoHash(ResourceOwner);
1331:	void ResourceOwnerEnlargeDSMs(ResourceOwner);
1286:	void ResourceOwnerEnlargeFiles(ResourceOwner);
1456:	void ResourceOwnerEnlargeHMAC(ResourceOwner);
1376:	void ResourceOwnerEnlargeJIT(ResourceOwner);
1150:	void ResourceOwnerEnlargePlanCacheRefs(ResourceOwner);
1105:	void ResourceOwnerEnlargeRelationRefs(ResourceOwner);
1240:	void ResourceOwnerEnlargeSnapshots(ResourceOwner);
1194:	void ResourceOwnerEnlargeTupleDescs(ResourceOwner);
968:	void ResourceOwnerForgetBuffer(ResourceOwner, Buffer);
1090:	void ResourceOwnerForgetCatCacheListRef(ResourceOwner, CatCList *);
1055:	void ResourceOwnerForgetCatCacheRef(ResourceOwner, HeapTuple);
1431:	void ResourceOwnerForgetCryptoHash(ResourceOwner, Datum);
1351:	void ResourceOwnerForgetDSM(ResourceOwner, dsm_segment *);
1306:	void ResourceOwnerForgetFile(ResourceOwner, File);
1476:	void ResourceOwnerForgetHMAC(ResourceOwner, Datum);
1396:	void ResourceOwnerForgetJIT(ResourceOwner, Datum);
1006:	void ResourceOwnerForgetLock(ResourceOwner, LOCALLOCK *);
1170:	void ResourceOwnerForgetPlanCacheRef(ResourceOwner, CachedPlan *);
1125:	void ResourceOwnerForgetRelationRef(ResourceOwner, Relation);
1260:	void ResourceOwnerForgetSnapshot(ResourceOwner, Snapshot);
1214:	void ResourceOwnerForgetTupleDesc(ResourceOwner, TupleDesc);
792:	ResourceOwner ResourceOwnerGetParent(ResourceOwner);
801:	void ResourceOwnerNewParent(ResourceOwner, ResourceOwner);
486:	void ResourceOwnerRelease(ResourceOwner, ResourceReleasePhase, _Bool, _Bool);
718:	void ResourceOwnerReleaseAllPlanCacheRefs(ResourceOwner);
959:	void ResourceOwnerRememberBuffer(ResourceOwner, Buffer);
1081:	void ResourceOwnerRememberCatCacheListRef(ResourceOwner, CatCList *);
1046:	void ResourceOwnerRememberCatCacheRef(ResourceOwner, HeapTuple);
1422:	void ResourceOwnerRememberCryptoHash(ResourceOwner, Datum);
1342:	void ResourceOwnerRememberDSM(ResourceOwner, dsm_segment *);
1297:	void ResourceOwnerRememberFile(ResourceOwner, File);
1467:	void ResourceOwnerRememberHMAC(ResourceOwner, Datum);
1387:	void ResourceOwnerRememberJIT(ResourceOwner, Datum);
986:	void ResourceOwnerRememberLock(ResourceOwner, LOCALLOCK *);
1161:	void ResourceOwnerRememberPlanCacheRef(ResourceOwner, CachedPlan *);
1116:	void ResourceOwnerRememberRelationRef(ResourceOwner, Relation);
1251:	void ResourceOwnerRememberSnapshot(ResourceOwner, Snapshot);
1205:	void ResourceOwnerRememberTupleDesc(ResourceOwner, TupleDesc);
863:	void UnregisterResourceReleaseCallback(ResourceReleaseCallback, void *);
1442:	static void PrintCryptoHashLeakWarning(Datum);
1362:	static void PrintDSMLeakWarning(dsm_segment *);
1317:	static void PrintFileLeakWarning(File);
1487:	static void PrintHMACLeakWarning(Datum);
1181:	static void PrintPlanCacheLeakWarning(CachedPlan *);
1136:	static void PrintRelCacheLeakWarning(Relation);
1271:	static void PrintSnapshotLeakWarning(Snapshot);
1225:	static void PrintTupleDescLeakWarning(TupleDesc);
930:	static void ReleaseAuxProcessResourcesCallback(int, Datum);
269:	static void ResourceArrayAdd(ResourceArray *, Datum);
214:	static void ResourceArrayEnlarge(ResourceArray *);
408:	static void ResourceArrayFree(ResourceArray *);
376:	static _Bool ResourceArrayGetAny(ResourceArray *, Datum *);
195:	static void ResourceArrayInit(ResourceArray *, Datum);
307:	static _Bool ResourceArrayRemove(ResourceArray *, Datum);
496:	static void ResourceOwnerReleaseInternal(ResourceOwner, ResourceReleasePhase, _Bool, _Bool);

File restrictinfo.c:
326:	RestrictInfo *commute_restrictinfo(RestrictInfo *, Oid);
443:	List *extract_actual_clauses(List *, _Bool);
470:	void extract_actual_join_clauses(List *, Relids, List **, List **);
420:	List *get_actual_clauses(List *);
598:	_Bool join_clause_is_movable_into(RestrictInfo *, Relids, Relids);
525:	_Bool join_clause_is_movable_to(RestrictInfo *, RelOptInfo *);
61:	RestrictInfo *make_restrictinfo(PlannerInfo *, Expr *, _Bool, _Bool, _Bool, Index, Relids, Relids, Relids);
382:	_Bool restriction_is_or_clause(RestrictInfo *);
397:	_Bool restriction_is_securely_promotable(RestrictInfo *, RelOptInfo *);
107:	static RestrictInfo *make_restrictinfo_internal(PlannerInfo *, Expr *, Expr *, _Bool, _Bool, _Bool, Index, Relids, Relids, Relids);
243:	static Expr *make_sub_restrictinfos(PlannerInfo *, Expr *, _Bool, _Bool, _Bool, Index, Relids, Relids, Relids);

File revoke.c:
23:	int __revoke(const char *);

File rewind.c:
31:	void __GI_rewind(FILE *);

File rewriteDefine.c:
233:	ObjectAddress DefineQueryRewrite(const char *, Oid, Node *, CmdType, _Bool, _Bool, List *);
199:	ObjectAddress DefineRule(RuleStmt *, const char *);
868:	void EnableDisableRule(Relation, const char *, char);
969:	ObjectAddress RenameRewriteRule(RangeVar *, const char *, const char *);
811:	void setRuleCheckAsUser(Node *, Oid);
59:	static Oid InsertRule(const char *, int, Oid, _Bool, Node *, List *, _Bool);
933:	static void RangeVarCallbackForRenameRule(const RangeVar *, Oid, Oid, void *);
679:	static void checkRuleResultList(List *, TupleDesc, _Bool, _Bool);
831:	static void setRuleCheckAsUser_Query(Query *, Oid);
817:	static _Bool setRuleCheckAsUser_walker(Node *, Oid *);

File rewriteHandler.c:
140:	void AcquireRewriteLocks(Query *, _Bool, _Bool);
4140:	List *QueryRewrite(Query *);
1215:	Node *build_column_default(Relation, int);
2441:	Query *get_view_query(Relation);
2791:	int relation_is_updatable(Oid, List *, _Bool, Bitmapset *);
2560:	const char *view_query_is_auto_updatable(Query *, _Bool);
1713:	static Query *ApplyRetrieveRule(Query *, RewriteRule *, int, Relation, List *);
2280:	static Query *CopyAndAddInvertedQual(Query *, Node *, int, CmdType);
3601:	static List *RewriteQuery(Query *, List *, int);
302:	static _Bool acquireLocksOnSubLinks(Node *, acquireLocksOnSubLinks_context *);
687:	static List *adjustJoinTreeList(Query *, _Bool, int);
2972:	static Bitmapset *adjust_view_column_set(Bitmapset *, List *);
1326:	static Bitmapset *findDefaultOnlyColumns(RangeTblEntry *);
1957:	static _Bool fireRIRonSubLink(Node *, List *);
1988:	static Query *fireRIRrules(Query *, List *);
2350:	static List *fireRules(Query *, int, CmdType, List *, _Bool *, _Bool *, Query **);
1186:	static Node *get_assignment_input(Node *);
1897:	static void markQueryForLocking(Query *, Node *, LockClauseStrength, LockWaitPolicy, _Bool);
1647:	static List *matchLocks(CmdType, RuleLock *, int, Query *, _Bool *);
1033:	static TargetEntry *process_matched_tle(TargetEntry *, TargetEntry *, const char *);
343:	static Query *rewriteRuleAction(Query *, Query *, Node *, int, CmdType, _Bool *);
749:	static List *rewriteTargetListIU(List *, CmdType, OverridingKind, Relation, RangeTblEntry *, int, Bitmapset **);
3042:	static Query *rewriteTargetView(Query *, Relation);
1414:	static _Bool rewriteValuesRTE(Query *, RangeTblEntry *, int, Relation, Bitmapset *);
1609:	static void rewriteValuesRTEToNulls(Query *, RangeTblEntry *);
1300:	static _Bool searchForDefault(RangeTblEntry *);
2512:	static const char *view_col_is_auto_updatable(RangeTblRef *, TargetEntry *);
2708:	static const char *view_cols_are_auto_updatable(Query *, Bitmapset *, Bitmapset **, char **);
2474:	static _Bool view_has_instead_trigger(Relation, CmdType);

File rewriteManip.c:
1050:	void AddInvertedQual(Query *, Node *);
982:	void AddQual(Query *, Node *);
610:	void ChangeVarNodes(Node *, int, int, int);
776:	void IncrementVarSublevelsUp(Node *, int, int);
799:	void IncrementVarSublevelsUp_rtable(List *, int, int);
425:	void OffsetVarNodes(Node *, int, int);
1517:	Node *ReplaceVarsFromTargetList(Node *, int, int, RangeTblEntry *, List *, ReplaceVarsNoMatchOption, int, _Bool *);
277:	_Bool checkExprHasSubLink(Node *);
67:	_Bool contain_aggs_of_level(Node *, int);
197:	_Bool contain_windowfuncs(Node *);
924:	Query *getInsertSelectQuery(Query *, Query ***);
131:	int locate_agg_of_level(Node *, int);
235:	int locate_windowfunc(Node *);
1359:	Node *map_variable_attnos(Node *, int, int, const AttrMap *, Oid, _Bool *);
892:	_Bool rangeTableEntry_used(Node *, int, int);
1090:	Node *replace_rte_variables(Node *, int, int, replace_rte_variables_callback, void *, _Bool *);
1137:	Node *replace_rte_variables_mutator(Node *, replace_rte_variables_context *);
505:	static _Bool ChangeVarNodes_walker(Node *, ChangeVarNodes_context *);
703:	static _Bool IncrementVarSublevelsUp_walker(Node *, IncrementVarSublevelsUp_context *);
340:	static _Bool OffsetVarNodes_walker(Node *, OffsetVarNodes_context *);
1413:	static Node *ReplaceVarsFromTargetList_callback(Var *, replace_rte_variables_context *);
664:	static Relids adjust_relid_set(Relids, int, int);
290:	static _Bool checkExprHasSubLink_walker(Node *, void *);
84:	static _Bool contain_aggs_of_level_walker(Node *, contain_aggs_of_level_context *);
210:	static _Bool contain_windowfuncs_walker(Node *, void *);
306:	static _Bool contains_multiexpr_param(Node *, void *);
151:	static _Bool locate_agg_of_level_walker(Node *, locate_agg_of_level_context *);
254:	static _Bool locate_windowfunc_walker(Node *, locate_windowfunc_context *);
1236:	static Node *map_variable_attnos_mutator(Node *, map_variable_attnos_context *);
473:	static Relids offset_relid_set(Relids, int);
826:	static _Bool rangeTableEntry_used_walker(Node *, rangeTableEntry_used_context *);

File rewriteRemove.c:
39:	void RemoveRewriteRuleById(Oid);

File rewriteSearchCycle.c:
203:	CommonTableExpr *rewriteSearchAndCycle(CommonTableExpr *);
180:	static Expr *make_path_cat_expr(RowExpr *, AttrNumber);
159:	static Expr *make_path_initial_array(RowExpr *);
117:	static RowExpr *make_path_rowexpr(const CommonTableExpr *, const List *);

File rewriteSupport.c:
33:	_Bool IsDefinedRewriteRule(Oid, const char *);
54:	void SetRelationRuleStatus(Oid, _Bool);
93:	Oid get_rewrite_oid(Oid, const char *, _Bool);

File rewrite_field.c:
27:	const char *__nss_rewrite_field(const char *, char **);

File rewriteheap.c:
1192:	void CheckPointLogicalRewriteHeap(void);
237:	RewriteState begin_heap_rewrite(Relation, Relation, TransactionId, TransactionId, MultiXactId);
300:	void end_heap_rewrite(RewriteState);
1110:	void heap_xlog_logical_rewrite(XLogReaderState *);
563:	_Bool rewrite_heap_dead_tuple(RewriteState, HeapTuple);
361:	void rewrite_heap_tuple(RewriteState, HeapTuple, HeapTuple);
794:	static void logical_begin_heap_rewrite(RewriteState);
940:	static void logical_end_heap_rewrite(RewriteState);
842:	static void logical_heap_rewrite_flush_mappings(RewriteState);
1036:	static void logical_rewrite_heap_tuple(RewriteState, ItemPointerData, HeapTuple);
970:	static void logical_rewrite_log_mapping(RewriteState, TransactionId, LogicalRewriteMappingData *);
613:	static void raw_heap_insert(RewriteState, HeapTuple);

File rexec.c:
48:	int __GI_rexec_af(char **, int, const char *, const char *, const char *, int *, sa_family_t);
194:	int rexec(char **, int, const char *, const char *, const char *, int *);

File ri_triggers.c:
740:	Datum RI_FKey_cascade_del(FunctionCallInfo);
846:	Datum RI_FKey_cascade_upd(FunctionCallInfo);
421:	Datum RI_FKey_check_ins(FunctionCallInfo);
437:	Datum RI_FKey_check_upd(FunctionCallInfo);
1202:	_Bool RI_FKey_fk_upd_check_required(Trigger *, Relation, TupleTableSlot *, TupleTableSlot *);
548:	Datum RI_FKey_noaction_del(FunctionCallInfo);
585:	Datum RI_FKey_noaction_upd(FunctionCallInfo);
1170:	_Bool RI_FKey_pk_upd_check_required(Trigger *, Relation, TupleTableSlot *, TupleTableSlot *);
568:	Datum RI_FKey_restrict_del(FunctionCallInfo);
605:	Datum RI_FKey_restrict_upd(FunctionCallInfo);
997:	Datum RI_FKey_setdefault_del(FunctionCallInfo);
1012:	Datum RI_FKey_setdefault_upd(FunctionCallInfo);
967:	Datum RI_FKey_setnull_del(FunctionCallInfo);
982:	Datum RI_FKey_setnull_upd(FunctionCallInfo);
2930:	int RI_FKey_trigger_type(Oid);
1303:	_Bool RI_Initial_Check(Trigger *, Relation, Relation);
1583:	void RI_PartitionRemove_Check(Trigger *, Relation, Relation);
2156:	static void InvalidateConstraintCacheCallBack(Datum, int, uint32);
236:	static Datum RI_FKey_check(TriggerData *);
2122:	static Oid get_ri_constraint_root(Oid);
1802:	static void quoteOneName(char *, const char *);
1822:	static void quoteRelationName(char *, Relation);
2795:	static _Bool ri_AttributesEqual(Oid, Oid, Datum, Datum);
1909:	static void ri_BuildQueryKey(RI_QueryKey *, const RI_ConstraintInfo *, int32);
1941:	static void ri_CheckTrigger(FunctionCallInfo, const char *, int);
458:	static _Bool ri_Check_Pk_Match(Relation, Relation, TupleTableSlot *, const RI_ConstraintInfo *);
2378:	static void ri_ExtractValues(Relation, TupleTableSlot *, const RI_ConstraintInfo *, _Bool, Datum *, char *);
1987:	static const RI_ConstraintInfo *ri_FetchConstraintInfo(Trigger *, Relation, _Bool);
2638:	static SPIPlanPtr ri_FetchPreparedPlan(RI_QueryKey *);
1839:	static void ri_GenerateQual(StringInfo, const char *, const char *, Oid, Oid, const char *, Oid);
1868:	static void ri_GenerateQualCollation(StringInfo, Oid);
2837:	static RI_CompareHashEntry *ri_HashCompareOp(Oid, Oid);
2690:	static void ri_HashPreparedPlan(RI_QueryKey *, SPIPlanPtr);
2602:	static void ri_InitHashTables(void);
2724:	static _Bool ri_KeysEqual(Relation, TupleTableSlot *, TupleTableSlot *, const RI_ConstraintInfo *, _Bool);
2041:	static const RI_ConstraintInfo *ri_LoadConstraintInfo(Oid);
2565:	static int ri_NullCheck(TupleDesc, TupleTableSlot *, const RI_ConstraintInfo *, _Bool);
2241:	static _Bool ri_PerformCheck(const RI_ConstraintInfo *, RI_QueryKey *, SPIPlanPtr, Relation, Relation, TupleTableSlot *, TupleTableSlot *, _Bool, int);
2198:	static SPIPlanPtr ri_PlanCheck(const char *, int, Oid *, RI_QueryKey *, Relation, Relation);
2407:	static void ri_ReportViolation(const RI_ConstraintInfo *, Relation, Relation, TupleTableSlot *, TupleDesc, int, _Bool);
621:	static Datum ri_restrict(TriggerData *, _Bool);
1028:	static Datum ri_set(TriggerData *, _Bool);

File rls.c:
52:	int check_enable_rls(Oid, Oid, _Bool);
142:	Datum row_security_active(FunctionCallInfo);
153:	Datum row_security_active_name(FunctionCallInfo);

File rmtree.c:
42:	_Bool rmtree(const char *, _Bool);

File rowsecurity.c:
108:	void get_row_security_policies(Query *, RangeTblEntry *, int, List **, List **, _Bool *, _Bool *);
559:	static void add_security_quals(int, List *, List *, List **, _Bool *);
655:	static void add_with_check_options(Relation, int, WCOKind, List *, List *, List **, _Bool *, _Bool);
776:	static _Bool check_role_for_policy(ArrayType *, Oid);
408:	static void get_policies_for_relation(Relation, CmdType, Oid, List **, List **);
533:	static int row_security_policy_cmp(const ListCell *, const ListCell *);
524:	static void sort_policies_by_name(List *);

File rowtypes.c:
1296:	Datum btrecordcmp(FunctionCallInfo);
1766:	Datum btrecordimagecmp(FunctionCallInfo);
1777:	Datum hash_record(FunctionCallInfo);
1897:	Datum hash_record_extended(FunctionCallInfo);
1050:	Datum record_eq(FunctionCallInfo);
1290:	Datum record_ge(FunctionCallInfo);
1278:	Datum record_gt(FunctionCallInfo);
1560:	Datum record_image_eq(FunctionCallInfo);
1760:	Datum record_image_ge(FunctionCallInfo);
1748:	Datum record_image_gt(FunctionCallInfo);
1754:	Datum record_image_le(FunctionCallInfo);
1742:	Datum record_image_lt(FunctionCallInfo);
1736:	Datum record_image_ne(FunctionCallInfo);
75:	Datum record_in(FunctionCallInfo);
1284:	Datum record_le(FunctionCallInfo);
1272:	Datum record_lt(FunctionCallInfo);
1266:	Datum record_ne(FunctionCallInfo);
303:	Datum record_out(FunctionCallInfo);
454:	Datum record_recv(FunctionCallInfo);
670:	Datum record_send(FunctionCallInfo);
806:	static int record_cmp(FunctionCallInfo);
1314:	static int record_image_cmp(FunctionCallInfo);

File rpc_cmsg.c:
43:	bool_t __GI_xdr_callmsg(XDR *, struct rpc_msg *);

File rpc_dtable.c:
41:	int __GI__rpc_dtablesize(void);

File rpc_gethostbyname.c:
26:	int __libc_rpc_gethostbyname(const char *, struct sockaddr_in *);

File rpc_prot.c:
232:	void __GI__seterr_reply(struct rpc_msg *, struct rpc_err *);
78:	bool_t __GI_xdr_accepted_reply(XDR *, struct accepted_reply *);
152:	bool_t __GI_xdr_callhdr(XDR *, struct rpc_msg *);
66:	bool_t __GI_xdr_des_block(XDR *, des_block *);
52:	bool_t __GI_xdr_opaque_auth(XDR *, struct opaque_auth *);
104:	bool_t __GI_xdr_rejected_reply(XDR *, struct rejected_reply *);
133:	bool_t __GI_xdr_replymsg(XDR *, struct rpc_msg *);

File rpc_thread.c:
93:	struct rpc_createerr *__GI___rpc_thread_createerr(void);
81:	fd_set *__GI___rpc_thread_svc_fdset(void);
121:	int *__GI___rpc_thread_svc_max_pollfd(void);
105:	struct pollfd **__GI___rpc_thread_svc_pollfd(void);
20:	void __rpc_thread_destroy(void);
53:	struct rpc_thread_variables *__rpc_thread_variables(void);
46:	static void rpc_thread_multi(void);

File rpmatch.c:
53:	int rpmatch(const char *);

File rtime.c:
70:	int __GI_rtime(struct sockaddr_in *, struct rpc_timeval *, struct rpc_timeval *);

File rtld.c:
856:	unsigned int handle_preload_list(const char *, struct link_map *, const char *);
462:	static Elf64_Addr _dl_start(void *);
1086:	static void dl_main(const Elf64_Phdr *, Elf64_Word, Elf64_Addr *, Elf64_auxv_t *);
614:	static void dlmopen_doit(void *);
698:	static void *init_tls(void);
625:	static void lookup_doit(void *);
605:	static void map_doit(void *);
2383:	static void print_missing_version(int, const char *, const char *);
2788:	static void print_statistics(const hp_timing_t *);
2757:	static void print_statistics_item(const char *, hp_timing_t, hp_timing_t);
2372:	static void print_unresolved(int, const char *, const char *);
2396:	static void process_dl_debug(const char *);
597:	static void relocate_doit(void *);
800:	static void rtld_lock_default_lock_recursive(void *);
806:	static void rtld_lock_default_unlock_recursive(void *);
890:	static void unload_audit_module(int, struct link_map *);
638:	static void version_check_doit(void *);

File ruleutils.c:
3569:	List *deparse_context_for(const char *, Oid);
3614:	List *deparse_context_for_plan_tree(PlannedStmt *, List *);
3509:	char *deparse_expression(Node *, List *, _Bool, _Bool);
11988:	char *generate_collation_name(Oid);
11346:	char *generate_opclass_name(Oid);
11884:	void generate_operator_clause(StringInfo, const char *, Oid, Oid, const char *, Oid);
12122:	char *get_range_partbound_string(List *);
2071:	Datum pg_get_constraintdef(FunctionCallInfo);
2109:	char *pg_get_constraintdef_command(Oid);
2088:	Datum pg_get_constraintdef_ext(FunctionCallInfo);
2565:	Datum pg_get_expr(FunctionCallInfo);
2595:	Datum pg_get_expr_ext(FunctionCallInfo);
3348:	Datum pg_get_function_arg_default(FunctionCallInfo);
3041:	Datum pg_get_function_arguments(FunctionCallInfo);
3067:	Datum pg_get_function_identity_arguments(FunctionCallInfo);
3092:	Datum pg_get_function_result(FunctionCallInfo);
3474:	Datum pg_get_function_sqlbody(FunctionCallInfo);
2787:	Datum pg_get_functiondef(FunctionCallInfo);
1127:	Datum pg_get_indexdef(FunctionCallInfo);
1184:	char *pg_get_indexdef_columns(Oid, _Bool);
1147:	Datum pg_get_indexdef_ext(FunctionCallInfo);
1174:	char *pg_get_indexdef_string(Oid);
2053:	char *pg_get_partconstrdef_string(Oid, char *);
2021:	Datum pg_get_partition_constraintdef(FunctionCallInfo);
1829:	Datum pg_get_partkeydef(FunctionCallInfo);
1844:	char *pg_get_partkeydef_columns(Oid, _Bool);
510:	Datum pg_get_ruledef(FunctionCallInfo);
528:	Datum pg_get_ruledef_ext(FunctionCallInfo);
2693:	Datum pg_get_serial_sequence(FunctionCallInfo);
1521:	Datum pg_get_statisticsobjdef(FunctionCallInfo);
1550:	Datum pg_get_statisticsobjdef_columns(FunctionCallInfo);
1755:	Datum pg_get_statisticsobjdef_expressions(FunctionCallInfo);
1540:	char *pg_get_statisticsobjdef_string(Oid);
823:	Datum pg_get_triggerdef(FunctionCallInfo);
837:	Datum pg_get_triggerdef_ext(FunctionCallInfo);
2655:	Datum pg_get_userbyid(FunctionCallInfo);
629:	Datum pg_get_viewdef(FunctionCallInfo);
648:	Datum pg_get_viewdef_ext(FunctionCallInfo);
687:	Datum pg_get_viewdef_name(FunctionCallInfo);
712:	Datum pg_get_viewdef_name_ext(FunctionCallInfo);
667:	Datum pg_get_viewdef_wrap(FunctionCallInfo);
11476:	const char *quote_identifier(const char *);
11560:	char *quote_qualified_identifier(const char *, const char *);
3706:	List *select_rtable_names_for_explain(List *, Bitmapset *);
3683:	List *set_deparse_context_plan(List *, Plan *, List *);
11924:	static void add_cast_to(StringInfo, Oid);
8290:	static void appendContextKeyword(deparse_context *, const char *, int, int, int);
4673:	static _Bool colname_is_unique(const char *, deparse_namespace *, deparse_columns *);
2523:	static int decompile_column_index_array(Datum, Oid, StringInfo);
3536:	static char *deparse_expression_pretty(Node *, List *, _Bool, _Bool, int, int);
4766:	static void expand_colnames_array_to(deparse_columns *, int);
7797:	static Node *find_param_referent(Param *, deparse_context *, deparse_namespace **, ListCell **);
4948:	static Plan *find_recursive_union(deparse_namespace *, WorkTableScan *);
12089:	static char *flatten_reloptions(Oid);
11702:	static char *generate_function_name(Oid, int, List *, Oid *, _Bool, _Bool *, ParseExprKind);
11807:	static char *generate_operator_name(Oid, Oid, Oid);
11660:	static char *generate_qualified_relation_name(Oid);
11955:	static char *generate_qualified_type_name(Oid);
11600:	static char *generate_relation_name(Oid, List *);
9919:	static void get_agg_combine_expr(Node *, deparse_context *, void *);
9812:	static void get_agg_expr(Aggref *, deparse_context *, Aggref *);
5793:	static void get_basic_select_query(Query *, deparse_context *, TupleDesc, _Bool);
10250:	static void get_coercion_expr(Node *, deparse_context *, Oid, int32, Node *);
11173:	static void get_column_alias_list(deparse_columns *, deparse_context *);
10444:	static void get_const_collation(Const *, deparse_context *);
10314:	static void get_const_expr(Const *, deparse_context *, int);
6938:	static void get_delete_query_def(Query *, deparse_context *, _Bool);
10721:	static void get_from_clause(Query *, const char *, deparse_context *);
11213:	static void get_from_clause_coldeflist(RangeTblFunction *, deparse_columns *, deparse_context *);
10815:	static void get_from_clause_item(Node *, Query *, deparse_context *);
9716:	static void get_func_expr(FuncExpr *, deparse_context *, _Bool);
10012:	static _Bool get_func_sql_syntax(FuncExpr *, deparse_context *);
6512:	static void get_insert_query_def(Query *, deparse_context *, _Bool);
7398:	static const char *get_name_for_var_field(Var *, int, int, deparse_context *);
11308:	static void get_opclass_name(Oid, Oid, StringInfo);
9676:	static void get_oper_expr(OpExpr *, deparse_context *);
7932:	static void get_parameter(Param *, deparse_context *);
5336:	static void get_query_def(Query *, StringInfo, List *, TupleDesc, _Bool, int, int, int);
11580:	static char *get_relation_name(Oid);
12033:	static void get_reloptions(StringInfo, Datum);
4858:	static char *get_rtable_name(int, deparse_context *);
11106:	static void get_rte_alias(RangeTblEntry *, int, _Bool, deparse_context *);
8395:	static void get_rule_expr(Node *, deparse_context *, _Bool);
9625:	static void get_rule_expr_funccall(Node *, deparse_context *, _Bool);
8363:	static void get_rule_expr_paren(Node *, deparse_context *, _Bool, Node *);
9577:	static void get_rule_expr_toplevel(Node *, deparse_context *, _Bool);
6253:	static void get_rule_groupingset(GroupingSet *, List *, _Bool, deparse_context *);
9595:	static void get_rule_list_toplevel(List *, deparse_context *, _Bool);
6313:	static void get_rule_orderby(List *, List *, _Bool, deparse_context *);
6197:	static Node *get_rule_sortgroupclause(Index, List *, _Bool, deparse_context *);
6371:	static void get_rule_windowclause(Query *, deparse_context *);
6403:	static void get_rule_windowspec(WindowClause *, List *, deparse_context *);
5592:	static void get_select_query_def(Query *, deparse_context *, TupleDesc, _Bool);
6063:	static void get_setop_query(Node *, Query *, deparse_context *, TupleDesc, _Bool);
8045:	static const char *get_simple_binary_op_name(OpExpr *);
5724:	static RangeTblEntry *get_simple_values_rte(Query *, TupleDesc);
7269:	static void get_special_variable(Node *, deparse_context *, void *);
10491:	static void get_sublink_expr(SubLink *, deparse_context *);
10616:	static void get_tablefunc(TableFunc *, deparse_context *, _Bool);
11264:	static void get_tablesample_def(TableSampleClause *, deparse_context *);
5927:	static void get_target_list(List *, deparse_context *, TupleDesc, _Bool);
6729:	static void get_update_query_def(Query *, deparse_context *, _Bool);
6786:	static void get_update_query_targetlist_def(Query *, List *, deparse_context *, RangeTblEntry *);
6990:	static void get_utility_query_def(Query *, deparse_context *);
5410:	static void get_values_def(List *, deparse_context *);
7035:	static char *get_variable(Var *, int, _Bool, deparse_context *);
9935:	static void get_windowfunc_expr(WindowFunc *, deparse_context *);
5453:	static void get_with_clause(Query *, deparse_context *);
3986:	static _Bool has_dangerous_join_using(deparse_namespace *, Node *);
4790:	static void identify_join_columns(JoinExpr *, RangeTblEntry *, deparse_columns *);
8071:	static _Bool isSimpleNode(Node *, Node *, int);
3308:	static _Bool is_input_argument(int, const char *);
9648:	static _Bool looks_like_function(Node *);
4727:	static char *make_colname_unique(char *, deparse_namespace *, deparse_columns *);
5062:	static void make_ruledef(StringInfo, HeapTuple, TupleDesc, int);
5251:	static void make_viewdef(StringInfo, HeapTuple, TupleDesc, int, int);
2118:	static char *pg_get_constraintdef_worker(Oid, _Bool, int, _Bool);
2620:	static text *pg_get_expr_worker(text *, Oid, const char *, int);
1203:	static char *pg_get_indexdef_worker(Oid, int, const Oid *, _Bool, _Bool, _Bool, _Bool, int, _Bool);
1857:	static char *pg_get_partkeydef_worker(Oid, int, _Bool, _Bool);
547:	static char *pg_get_ruledef_worker(Oid, int);
1567:	static char *pg_get_statisticsobj_worker(Oid, _Bool, _Bool);
852:	static char *pg_get_triggerdef_worker(Oid, _Bool);
740:	static char *pg_get_viewdef_worker(Oid, int, int);
5046:	static void pop_ancestor_plan(deparse_namespace *, deparse_namespace *);
4995:	static void pop_child_plan(deparse_namespace *, deparse_namespace *);
11446:	static void printSubscripts(SubscriptingRef *, deparse_context *);
3160:	static int print_function_arguments(StringInfo, HeapTuple, _Bool, _Bool);
3122:	static void print_function_rettype(StringInfo, HeapTuple);
3418:	static void print_function_sqlbody(StringInfo, HeapTuple);
3320:	static void print_function_trftypes(StringInfo, HeapTuple);
11368:	static Node *processIndirection(Node *, deparse_context *);
5025:	static void push_ancestor_plan(deparse_namespace *, ListCell *, deparse_namespace *);
4978:	static void push_child_plan(deparse_namespace *, Plan *, deparse_namespace *);
8344:	static void removeStringInfoSpaces(StringInfo);
7290:	static void resolve_special_varno(Node *, deparse_context *, rsv_callback, void *);
3880:	static void set_deparse_for_query(deparse_namespace *, Query *, List *);
4877:	static void set_deparse_plan(deparse_namespace *, Plan *);
4413:	static void set_join_column_names(deparse_namespace *, RangeTblEntry *, deparse_columns *);
4217:	static void set_relation_column_names(deparse_namespace *, RangeTblEntry *, deparse_columns *);
3735:	static void set_rtable_names(deparse_namespace *, List *, Bitmapset *);
3945:	static void set_simple_column_names(deparse_namespace *);
4052:	static void set_using_names(deparse_namespace *, Node *, List *);
10464:	static void simple_quote_literal(StringInfo, const char *);
12020:	static text *string_to_text(char *);

File ruserpass.c:
93:	int __GI_ruserpass(const char *, const char **, const char **);
214:	static int token(void);

File ryu_common.h:
95:	static int copy_special_str(char * const, const _Bool, const _Bool, const _Bool);
125:	static uint64 double_to_bits(const double);
116:	static uint32 float_to_bits(const float);
70:	static int32 log10Pow2(const int32);
83:	static int32 log10Pow5(const int32);
54:	static uint32 pow5bits(const int32);

File s_lock.c:
174:	void finish_spin_delay(SpinDelayStatus *);
124:	void perform_spin_delay(SpinDelayStatus *);
91:	int s_lock(volatile slock_t *, const char *, int, const char *);
195:	void set_spins_per_delay(int);
206:	int update_spins_per_delay(int);
72:	static void s_lock_stuck(const char *, int, const char *);

File s_nextafter.c:
35:	double __nextafter(double, double);

File sampling.c:
58:	_Bool BlockSampler_HasMore(BlockSampler);
39:	BlockNumber BlockSampler_Init(BlockSampler, BlockNumber, int, long);
64:	BlockNumber BlockSampler_Next(BlockSampler);
288:	double anl_get_next_S(double, int, double *);
277:	double anl_init_selection_state(int);
266:	double anl_random_fract(void);
146:	double reservoir_get_next_S(ReservoirState, double, int);
133:	void reservoir_init_selection_state(ReservoirState, int);
242:	double sampler_random_fract(unsigned short *);
233:	void sampler_random_init_state(long, unsigned short *);

File saslprep.c:
1044:	pg_saslprep_rc pg_saslprep(const char *, char **);
968:	static int codepoint_range_cmp(const void *, const void *);
982:	static _Bool is_code_in_table(pg_wchar, const pg_wchar *, int);
1002:	static int pg_utf8_string_len(const char *);

File sbrk.c:
31:	void *__GI___sbrk(intptr_t);

File scan.c:
7047:	YY_BUFFER_STATE core_yy_create_buffer(FILE *, int, yyscan_t);
7075:	void core_yy_delete_buffer(YY_BUFFER_STATE, yyscan_t);
7124:	void core_yy_flush_buffer(YY_BUFFER_STATE, yyscan_t);
7255:	YY_BUFFER_STATE core_yy_scan_buffer(char *, yy_size_t, yyscan_t);
7305:	YY_BUFFER_STATE core_yy_scan_bytes(const char *, int, yyscan_t);
7292:	YY_BUFFER_STATE core_yy_scan_string(const char *, yyscan_t);
7000:	void core_yy_switch_to_buffer(YY_BUFFER_STATE, yyscan_t);
7391:	int core_yyget_column(yyscan_t);
7496:	int core_yyget_debug(yyscan_t);
7369:	core_yy_extra_type *core_yyget_extra(yyscan_t);
7404:	FILE *core_yyget_in(yyscan_t);
7422:	int core_yyget_leng(yyscan_t);
7378:	int core_yyget_lineno(yyscan_t);
7522:	int *core_yyget_lloc(yyscan_t);
7510:	core_YYSTYPE *core_yyget_lval(yyscan_t);
7413:	FILE *core_yyget_out(yyscan_t);
7432:	char *core_yyget_text(yyscan_t);
5622:	int core_yylex(core_YYSTYPE *, int *, yyscan_t);
7628:	int core_yylex_destroy(yyscan_t);
7540:	int core_yylex_init(yyscan_t *);
7567:	int core_yylex_init_extra(core_yy_extra_type *, yyscan_t *);
7185:	void core_yypop_buffer_state(yyscan_t);
7154:	void core_yypush_buffer_state(YY_BUFFER_STATE, yyscan_t);
6982:	void core_yyrestart(FILE *, yyscan_t);
7467:	void core_yyset_column(int, yyscan_t);
7502:	void core_yyset_debug(int, yyscan_t);
7442:	void core_yyset_extra(core_yy_extra_type *, yyscan_t);
7484:	void core_yyset_in(FILE *, yyscan_t);
7452:	void core_yyset_lineno(int, yyscan_t);
7528:	void core_yyset_lloc(int *, yyscan_t);
7516:	void core_yyset_lval(core_YYSTYPE *, yyscan_t);
7490:	void core_yyset_out(FILE *, yyscan_t);
7095:	static void core_yy_init_buffer(YY_BUFFER_STATE, FILE *, yyscan_t);
7032:	static void core_yy_load_buffer_state(yyscan_t);
7205:	static void core_yyensure_buffer_stack(yyscan_t);
7339:	static void yy_fatal_error(const char *, yyscan_t);
6722:	static int yy_get_next_buffer(yyscan_t);
6861:	static yy_state_type yy_get_previous_state(yyscan_t);
7594:	static int yy_init_globals(yyscan_t);
6882:	static yy_state_type yy_try_NUL_trans(yy_state_type, yyscan_t);

File scan.l:
1143:	void cancel_scanner_errposition_callback(ScannerCallbackState *);
1410:	void *core_yyalloc(yy_size_t, core_yyscan_t);
1425:	void core_yyfree(void *, core_yyscan_t);
1416:	void *core_yyrealloc(void *, yy_size_t, core_yyscan_t);
1080:	int scanner_errposition(int, core_yyscan_t);
1231:	void scanner_finish(core_yyscan_t);
1189:	core_yyscan_t scanner_init(const char *, core_yy_extra_type *, const ScanKeywordList *, const uint16 *);
1162:	void scanner_yyerror(const char *, core_yyscan_t);
1126:	void setup_scanner_errposition_callback(ScannerCallbackState *, core_yyscan_t, int);
1251:	static void addlit(char *, int, core_yyscan_t);
1270:	static void addlitchar(unsigned char, core_yyscan_t);
1323:	static void addunicode(pg_wchar, core_yyscan_t);
1393:	static void check_escape_warning(core_yyscan_t);
1366:	static void check_string_escape_warning(unsigned char, core_yyscan_t);
54:	static void fprintf_to_ereport(const char *, const char *);
1289:	static char *litbufdup(core_yyscan_t);
1305:	static int process_integer_literal(const char *, core_YYSTYPE *);
1101:	static void scb_error_callback(void *);
1342:	static unsigned char unescape_single_char(unsigned char, core_yyscan_t);

File scandir-cancel.c:
22:	void __scandir_cancel_handler(void *);

File scandirat64.c:
23:	int scandirat64(int, const char *, struct dirent64 ***, int (*)(const struct dirent64 *), int (*)(const struct dirent64 **, const struct dirent64 **));

File scanf.c:
32:	int __scanf(const char *, ...);

File scankey.c:
32:	void ScanKeyEntryInitialize(ScanKey, int, AttrNumber, StrategyNumber, Oid, Oid, RegProcedure, Datum);
101:	void ScanKeyEntryInitializeWithInfo(ScanKey, int, AttrNumber, StrategyNumber, Oid, Oid, FmgrInfo *, Datum);
76:	void ScanKeyInit(ScanKey, AttrNumber, StrategyNumber, RegProcedure, Datum);

File scansup.c:
46:	char *downcase_identifier(const char *, int, _Bool, _Bool);
37:	char *downcase_truncate_identifier(const char *, int, _Bool);
117:	_Bool scanner_isspace(char);
93:	void truncate_identifier(char *, int, _Bool);

File sched_cpualloc.c:
23:	cpu_set_t *__sched_cpualloc(size_t);

File sched_cpufree.c:
23:	void __sched_cpufree(cpu_set_t *);

File schemacmds.c:
311:	ObjectAddress AlterSchemaOwner(const char *, Oid);
288:	void AlterSchemaOwner_oid(Oid, Oid);
50:	Oid CreateSchemaCommand(CreateSchemaStmt *, const char *, int, int);
230:	ObjectAddress RenameSchema(const char *, const char *);
342:	static void AlterSchemaOwner_internal(HeapTuple, Relation, Oid);

File scram-common.c:
117:	int scram_ClientKey(const uint8 *, uint8 *);
93:	int scram_H(const uint8 *, int, uint8 *);
34:	int scram_SaltedPassword(const char *, const char *, int, int, uint8 *);
140:	int scram_ServerKey(const uint8 *, uint8 *);
169:	char *scram_build_secret(const char *, int, int, const char *);

File scratch_buffer_grow.c:
27:	_Bool __GI___libc_scratch_buffer_grow(struct scratch_buffer *);

File scratch_buffer_grow_preserve.c:
28:	_Bool __GI___libc_scratch_buffer_grow_preserve(struct scratch_buffer *);

File scratch_buffer_set_array_size.c:
28:	_Bool __GI___libc_scratch_buffer_set_array_size(struct scratch_buffer *, size_t, size_t);
28:	_Bool __libc_scratch_buffer_set_array_size(struct scratch_buffer *, size_t, size_t);

File seclabel.c:
520:	void DeleteSecurityLabel(const ObjectAddress *);
488:	void DeleteSharedSecurityLabel(Oid, Oid);
113:	ObjectAddress ExecSecLabelStmt(SecLabelStmt *);
269:	char *GetSecurityLabel(const ObjectAddress *, const char *);
401:	void SetSecurityLabel(const ObjectAddress *, const char *, const char *);
567:	void register_label_provider(const char *, check_object_relabel_type);
221:	static char *GetSharedSecurityLabel(const ObjectAddress *, const char *);
37:	static _Bool SecLabelSupportsObjectType(ObjectType);
326:	static void SetSharedSecurityLabel(const ObjectAddress *, const char *, const char *);

File secure-getenv.c:
27:	char *__GI___libc_secure_getenv(const char *);

File seed48.c:
23:	unsigned short *seed48(unsigned short *);

File seed48_r.c:
24:	int __seed48_r(unsigned short *, struct drand48_data *);

File selfuncs.c:
6651:	List *add_predicate_to_index_quals(IndexOptInfo *, List *);
1537:	Selectivity booltestsel(PlannerInfo *, BoolTestType, Node *, int, JoinType, SpecialJoinInfo *);
1509:	Selectivity boolvarsel(PlannerInfo *, Node *, int);
7767:	void brincostestimate(PlannerInfo *, IndexPath *, double, Cost *, Cost *, Selectivity *, double *, double *);
6672:	void btcostestimate(PlannerInfo *, IndexPath *, double, Cost *, Cost *, Selectivity *, double *, double *);
2237:	Datum eqjoinsel(FunctionCallInfo);
224:	Datum eqsel(FunctionCallInfo);
2132:	int estimate_array_length(Node *);
3751:	void estimate_hash_bucket_stats(PlannerInfo *, Node *, double, Selectivity *, Selectivity *);
3870:	double estimate_hashagg_tablesize(PlannerInfo *, Path *, const AggClauseCosts *, double);
3368:	double estimate_num_groups(PlannerInfo *, List *, double, List **, EstimationInfo *);
4968:	void examine_variable(PlannerInfo *, Node *, int, VariableStatData *);
911:	double generic_restriction_selectivity(PlannerInfo *, Oid, Oid, List *, int, double);
6433:	void genericcostestimate(PlannerInfo *, IndexPath *, double, GenericCosts *);
4899:	void get_join_variables(PlannerInfo *, List *, SpecialJoinInfo *, VariableStatData *, VariableStatData *, _Bool *);
6349:	List *get_quals_from_indexclauses(List *);
4839:	_Bool get_restriction_variable(PlannerInfo *, List *, int, VariableStatData *, Node **, _Bool *);
5654:	double get_variable_numdistinct(VariableStatData *, _Bool *);
7436:	void gincostestimate(PlannerInfo *, IndexPath *, double, Cost *, Cost *, Selectivity *, double *, double *);
7022:	void gistcostestimate(PlannerInfo *, IndexPath *, double, Cost *, Cost *, Selectivity *, double *, double *);
6978:	void hashcostestimate(PlannerInfo *, IndexPath *, double, Cost *, Cost *, Selectivity *, double *, double *);
820:	double histogram_selectivity(VariableStatData *, FmgrInfo *, Oid, Datum, _Bool, int, int, int *);
6379:	Cost index_other_operands_eval_cost(PlannerInfo *, List *);
1038:	double ineq_histogram_selectivity(PlannerInfo *, VariableStatData *, Oid, FmgrInfo *, _Bool, _Bool, Oid, Datum, Oid);
3227:	Datum matchingjoinsel(FunctionCallInfo);
3209:	Datum matchingsel(FunctionCallInfo);
729:	double mcv_selectivity(VariableStatData *, FmgrInfo *, Oid, Datum, _Bool, double *);
2904:	void mergejoinscansel(PlannerInfo *, Node *, Oid, int, _Bool, Selectivity *, Selectivity *, Selectivity *, Selectivity *);
2771:	Datum neqjoinsel(FunctionCallInfo);
554:	Datum neqsel(FunctionCallInfo);
1695:	Selectivity nulltestsel(PlannerInfo *, NullTestType, Node *, int, JoinType, SpecialJoinInfo *);
2170:	Selectivity rowcomparesel(PlannerInfo *, RowCompareExpr *, int, JoinType, SpecialJoinInfo *);
1813:	Selectivity scalararraysel(PlannerInfo *, ScalarArrayOpExpr *, _Bool, int, JoinType, SpecialJoinInfo *);
2876:	Datum scalargejoinsel(FunctionCallInfo);
1495:	Datum scalargesel(FunctionCallInfo);
2867:	Datum scalargtjoinsel(FunctionCallInfo);
1486:	Datum scalargtsel(FunctionCallInfo);
2858:	Datum scalarlejoinsel(FunctionCallInfo);
1477:	Datum scalarlesel(FunctionCallInfo);
2849:	Datum scalarltjoinsel(FunctionCallInfo);
1468:	Datum scalarltsel(FunctionCallInfo);
7079:	void spgcostestimate(PlannerInfo *, IndexPath *, double, Cost *, Cost *, Selectivity *, double *, double *);
5625:	_Bool statistic_proc_security_check(VariableStatData *, Oid);
292:	double var_eq_const(VariableStatData *, Oid, Oid, Datum, _Bool, _Bool, _Bool);
463:	double var_eq_non_const(VariableStatData *, Oid, Oid, Node *, _Bool, _Bool);
4927:	static void ReleaseDummy(HeapTuple);
3248:	static List *add_unique_group_var(PlannerInfo *, List *, Node *, VariableStatData *);
4686:	static void convert_bytea_to_scalar(Datum, double *, Datum, double *, Datum, double *);
4412:	static double convert_numeric_to_scalar(Datum, Oid, _Bool *);
4734:	static double convert_one_bytea_to_scalar(unsigned char *, int, int, int);
4554:	static double convert_one_string_to_scalar(char *, int, int);
4605:	static char *convert_string_datum(Datum, Oid, Oid, _Bool *);
4474:	static void convert_string_to_scalar(char *, double *, char *, double *, char *, double *);
4777:	static double convert_timevalue_to_scalar(Datum, Oid, _Bool *);
4265:	static _Bool convert_to_scalar(Datum, Oid, Oid, double *, Datum, Datum, Oid, double *, double *);
2386:	static double eqjoinsel_inner(Oid, Oid, VariableStatData *, VariableStatData *, double, double, _Bool, _Bool, AttStatsSlot *, AttStatsSlot *, Form_pg_statistic, Form_pg_statistic, _Bool, _Bool);
2583:	static double eqjoinsel_semi(Oid, Oid, VariableStatData *, VariableStatData *, double, double, _Bool, _Bool, AttStatsSlot *, AttStatsSlot *, Form_pg_statistic, Form_pg_statistic, _Bool, _Bool, RelOptInfo *);
233:	static double eqsel_internal(FunctionCallInfo, _Bool);
3907:	static _Bool estimate_multivariate_ndistinct(PlannerInfo *, RelOptInfo *, List **, double *);
5377:	static void examine_simple_variable(PlannerInfo *, Var *, VariableStatData *);
6314:	static RelOptInfo *find_join_input_rel(PlannerInfo *, Relids);
6153:	static _Bool get_actual_variable_endpoint(Relation, Relation, ScanDirection, ScanKey, int16, _Bool, TupleTableSlot *, MemoryContext, Datum *);
5977:	static _Bool get_actual_variable_range(PlannerInfo *, VariableStatData *, Oid, Oid, Datum *, Datum *);
5914:	static void get_stats_slot_range(AttStatsSlot *, Oid, FmgrInfo *, Oid, int16, _Bool, Datum *, Datum *, _Bool *);
5787:	static _Bool get_variable_range(PlannerInfo *, VariableStatData *, Oid, Oid, Datum *, Datum *);
7270:	static _Bool gincost_opexpr(PlannerInfo *, IndexOptInfo *, int, OpExpr *, GinQualCounts *);
7156:	static _Bool gincost_pattern(IndexOptInfo *, int, Oid, Datum, GinQualCounts *);
7320:	static _Bool gincost_scalararrayopexpr(PlannerInfo *, IndexOptInfo *, int, ScalarArrayOpExpr *, double, GinQualCounts *);
577:	static double scalarineqsel(PlannerInfo *, Oid, _Bool, _Bool, Oid, VariableStatData *, Datum, Oid);
1397:	static Datum scalarineqsel_wrapper(FunctionCallInfo, _Bool, _Bool);
1780:	static Node *strip_array_coercion(Node *);

File sem_clockwait.c:
25:	int sem_clockwait(sem_t *, clockid_t, const struct timespec *);

File sem_close.c:
42:	int sem_close(sem_t *);
31:	static void walker(const void *, VISIT, void *);

File sem_destroy.c:
25:	int __new_sem_destroy(sem_t *);

File sem_getvalue.c:
26:	int __new_sem_getvalue(sem_t *, int *);

File sem_init.c:
28:	int __new_sem_init(sem_t *, int, unsigned int);

File sem_open.c:
39:	int __sem_search(const void *, const void *);
140:	sem_t *sem_open(const char *, int, ...);
65:	static sem_t *check_add_mapping(const char *, size_t, int, sem_t *);

File sem_post.c:
33:	int __new_sem_post(sem_t *);

File sem_timedwait.c:
26:	int sem_timedwait(sem_t *, const struct timespec *);

File sem_unlink.c:
28:	int sem_unlink(const char *);

File sem_wait.c:
73:	int __new_sem_trywait(sem_t *);
24:	int __new_sem_wait(sem_t *);

File sem_waitcommon.c:
165:	static int __new_sem_wait_slow(struct new_sem *, const struct timespec *, clockid_t);
87:	static void __sem_wait_cleanup(void *);
106:	static int do_futex_wait(struct new_sem *, const struct timespec *, clockid_t);

File seqdesc.c:
21:	void seq_desc(StringInfo, XLogReaderState *);
34:	const char *seq_identify(uint8);

File sequence.c:
430:	ObjectAddress AlterSequence(ParseState *, AlterSeqStmt *);
118:	ObjectAddress DefineSequence(ParseState *, CreateSeqStmt *);
534:	void DeleteSequenceTuple(Oid);
278:	void ResetSequence(Oid);
1943:	void ResetSequenceCaches(void);
838:	Datum currval_oid(FunctionCallInfo);
869:	Datum lastval(FunctionCallInfo);
557:	Datum nextval(FunctionCallInfo);
587:	int64 nextval_internal(Oid, _Bool);
579:	Datum nextval_oid(FunctionCallInfo);
1854:	Datum pg_sequence_last_value(FunctionCallInfo);
1795:	Datum pg_sequence_parameters(FunctionCallInfo);
1958:	void seq_mask(char *, BlockNumber);
1890:	void seq_redo(XLogReaderState *);
1761:	List *sequence_options(Oid);
1045:	Datum setval3_oid(FunctionCallInfo);
1030:	Datum setval_oid(FunctionCallInfo);
1094:	static void create_seq_hashtable(void);
917:	static void do_setval(Oid, int64, _Bool);
351:	static void fill_seq_with_data(Relation, HeapTuple);
1243:	static void init_params(ParseState *, List *, _Bool, _Bool, Form_pg_sequence, Form_pg_sequence_data, _Bool *, List **);
1110:	static void init_sequence(Oid, SeqTable *, Relation *);
1066:	static Relation lock_and_open_sequence(SeqTable);
1648:	static void process_owned_by(Relation, List *, _Bool);
1177:	static Form_pg_sequence_data read_seq_tuple(Relation, Buffer *, HeapTuple);

File session.c:
155:	void AttachSession(dsm_handle);
201:	void DetachSession(void);
70:	dsm_handle GetSessionDsmHandle(void);
54:	void InitializeSession(void);

File set-freeres.c:
34:	void __GI___libc_freeres(void);

File setbuf.c:
31:	void setbuf(FILE *, char *);

File setenv.c:
116:	int __add_to_environ(const char *, const char *, const char *, int);
305:	int __clearenv(void);
251:	int __setenv(const char *, const char *, int);
263:	int __unsetenv(const char *);
324:	static void free_mem(void);

File setfpucw.c:
23:	void __setfpucw(fpu_control_t);

File setlinebuf.c:
33:	void setlinebuf(FILE *);

File setlocale.c:
217:	char *__GI_setlocale(int, const char *);
502:	void _nl_locale_subfreeres(void);
138:	static char *new_composite_name(int, const char **);

File setlogin.c:
23:	int setlogin(const char *);

File setpgrp.c:
21:	int setpgrp(void);

File setrefs.c:
3094:	void extract_query_dependencies(Node *, List **, List **, _Bool *);
3130:	_Bool extract_query_dependencies_walker(Node *, PlannerInfo *);
3013:	void record_plan_function_dependency(PlannerInfo *, Oid);
3053:	void record_plan_type_dependency(PlannerInfo *, Oid);
250:	Plan *set_plan_references(PlannerInfo *, Plan *);
483:	static void add_rte_to_flat_rtable(PlannerGlobal *, RangeTblEntry *);
351:	static void add_rtes_to_flat_rtable(PlannerInfo *, _Bool);
2438:	static indexed_tlist *build_tlist_index(List *);
2488:	static indexed_tlist *build_tlist_index_other_vars(List *, Index);
1330:	static Plan *clean_up_removed_plan_level(Plan *, Plan *);
2302:	static Node *convert_combining_aggrefs(Node *, void *);
1701:	static Var *copyVar(Var *);
1846:	static Node *fix_alternative_subplan(PlannerInfo *, AlternativeSubPlan *, double);
1723:	static void fix_expr_common(PlannerInfo *, Node *);
2684:	static List *fix_join_expr(PlannerInfo *, List *, indexed_tlist *, indexed_tlist *, Index, int, double);
2704:	static Node *fix_join_expr_mutator(Node *, fix_join_expr_context *);
1815:	static Node *fix_param_node(PlannerInfo *, Param *);
1902:	static Node *fix_scan_expr(PlannerInfo *, Node *, int, double);
1937:	static Node *fix_scan_expr_mutator(Node *, fix_scan_expr_context *);
2012:	static _Bool fix_scan_expr_walker(Node *, fix_scan_expr_context *);
2837:	static Node *fix_upper_expr(PlannerInfo *, Node *, indexed_tlist *, Index, int, double);
2855:	static Node *fix_upper_expr_mutator(Node *, fix_upper_expr_context *);
447:	static _Bool flatten_rtes_walker(Node *, PlannerGlobal *);
437:	static void flatten_unplanned_rtes(PlannerGlobal *, RangeTblEntry *);
1679:	static Relids offset_relid_set(Relids, int);
2579:	static Var *search_indexed_tlist_for_non_var(Expr *, indexed_tlist *, Index);
2619:	static Var *search_indexed_tlist_for_sortgroupref(Expr *, Index, indexed_tlist *, Index);
2539:	static Var *search_indexed_tlist_for_var(Var *, indexed_tlist *, Index, int);
1506:	static Plan *set_append_references(PlannerInfo *, Append *, int);
1433:	static void set_customscan_references(PlannerInfo *, CustomScan *, int);
2371:	static void set_dummy_tlist_references(Plan *, int);
1351:	static void set_foreignscan_references(PlannerInfo *, ForeignScan *, int);
1647:	static void set_hash_references(PlannerInfo *, Plan *, int);
1150:	static Plan *set_indexonlyscan_references(PlannerInfo *, IndexOnlyScan *, int);
2033:	static void set_join_references(PlannerInfo *, Join *, int);
1578:	static Plan *set_mergeappend_references(PlannerInfo *, MergeAppend *, int);
2247:	static void set_param_references(PlannerInfo *, Plan *);
537:	static Plan *set_plan_refs(PlannerInfo *, Plan *, int);
2963:	static List *set_returning_clause_references(PlannerInfo *, List *, Plan *, Index, int);
1221:	static Plan *set_subqueryscan_references(PlannerInfo *, SubqueryScan *, int);
2184:	static void set_upper_references(PlannerInfo *, Plan *, int);
1272:	static _Bool trivial_subqueryscan(SubqueryScan *);

File settimeofday.c:
25:	int __settimeofday(const struct timeval *, const struct timezone *);

File setutxent.c:
23:	void setutxent(void);

File sgetsgent.c:
32:	struct sgrp *sgetsgent(const char *);

File sgetsgent_r.c:
35:	int __GI__nss_files_parse_sgent(char *, struct sgrp *, struct parser_data *, size_t, int *);
55:	int __sgetsgent_r(const char *, struct sgrp *, char *, size_t, struct sgrp **);

File sgetspent.c:
32:	struct spwd *sgetspent(const char *);

File sgetspent_r.c:
36:	int __GI__nss_files_parse_spent(char *, struct spwd *, struct parser_data *, size_t, int *);
90:	int __sgetspent_r(const char *, struct spwd *, char *, size_t, struct spwd **);

File sha1.c:
365:	void pg_sha1_final(pg_sha1_ctx *, uint8 *);
316:	void pg_sha1_init(pg_sha1_ctx *);
332:	void pg_sha1_update(pg_sha1_ctx *, const uint8 *, size_t);
233:	static void sha1_pad(pg_sha1_ctx *);
276:	static void sha1_result(uint8 *, pg_sha1_ctx *);
90:	static void sha1_step(pg_sha1_ctx *);

File sha2.c:
994:	void pg_sha224_final(pg_sha224_ctx *, uint8 *);
978:	void pg_sha224_init(pg_sha224_ctx *);
988:	void pg_sha224_update(pg_sha224_ctx *, const uint8 *, size_t);
577:	void pg_sha256_final(pg_sha256_ctx *, uint8 *);
279:	void pg_sha256_init(pg_sha256_ctx *);
476:	void pg_sha256_update(pg_sha256_ctx *, const uint8 *, size_t);
950:	void pg_sha384_final(pg_sha384_ctx *, uint8 *);
934:	void pg_sha384_init(pg_sha384_ctx *);
944:	void pg_sha384_update(pg_sha384_ctx *, const uint8 *, size_t);
905:	void pg_sha512_final(pg_sha512_ctx *, uint8 *);
605:	void pg_sha512_init(pg_sha512_ctx *);
802:	void pg_sha512_update(pg_sha512_ctx *, const uint8 *, size_t);
529:	static void SHA256_Last(pg_sha256_ctx *);
386:	static void SHA256_Transform(pg_sha256_ctx *, const uint8 *);
855:	static void SHA512_Last(pg_sha512_ctx *);
712:	static void SHA512_Transform(pg_sha512_ctx *, const uint8 *);

File sharedfileset.c:
127:	void SharedFileSetAttach(SharedFileSet *, dsm_segment *);
154:	File SharedFileSetCreate(SharedFileSet *, const char *);
199:	_Bool SharedFileSetDelete(SharedFileSet *, const char *, _Bool);
213:	void SharedFileSetDeleteAll(SharedFileSet *);
64:	void SharedFileSetInit(SharedFileSet *, dsm_segment *);
183:	File SharedFileSetOpen(SharedFileSet *, const char *, int);
290:	void SharedFileSetUnregister(SharedFileSet *);
337:	static Oid ChooseTablespace(const SharedFileSet *, const char *);
348:	static void SharedFilePath(char *, SharedFileSet *, const char *);
267:	static void SharedFileSetDeleteOnProcExit(int, Datum);
241:	static void SharedFileSetOnDetach(dsm_segment *, Datum);
322:	static void SharedFileSetPath(char *, SharedFileSet *, Oid);

File sharedtuplestore.c:
179:	SharedTuplestoreAccessor *sts_attach(SharedTuplestore *, int, SharedFileSet *);
254:	void sts_begin_parallel_scan(SharedTuplestoreAccessor *);
282:	void sts_end_parallel_scan(SharedTuplestoreAccessor *);
214:	void sts_end_write(SharedTuplestoreAccessor *);
105:	size_t sts_estimate(int);
127:	SharedTuplestoreAccessor *sts_initialize(SharedTuplestore *, int, int, size_t, int, SharedFileSet *, const char *);
521:	MinimalTuple sts_parallel_scan_next(SharedTuplestoreAccessor *, void *);
301:	void sts_puttuple(SharedTuplestoreAccessor *, void *, MinimalTuple);
235:	void sts_reinitialize(SharedTuplestoreAccessor *);
626:	static void sts_filename(char *, SharedTuplestoreAccessor *, int);
197:	static void sts_flush_chunk(SharedTuplestoreAccessor *);
411:	static MinimalTuple sts_read_tuple(SharedTuplestoreAccessor *, void *);

File shm_mq.c:
283:	shm_mq_handle *shm_mq_attach(shm_mq *, dsm_segment *, BackgroundWorkerHandle *);
170:	shm_mq *shm_mq_create(void *, Size);
820:	void shm_mq_detach(shm_mq_handle *);
875:	shm_mq *shm_mq_get_queue(shm_mq_handle *);
235:	PGPROC *shm_mq_get_receiver(shm_mq *);
250:	PGPROC *shm_mq_get_sender(shm_mq *);
548:	shm_mq_result shm_mq_receive(shm_mq_handle *, Size *, void **, _Bool);
321:	shm_mq_result shm_mq_send(shm_mq_handle *, Size, const void *, _Bool);
347:	shm_mq_result shm_mq_sendv(shm_mq_handle *, shm_mq_iovec *, int, _Bool);
311:	void shm_mq_set_handle(shm_mq_handle *, BackgroundWorkerHandle *);
199:	void shm_mq_set_receiver(shm_mq *, PGPROC *);
217:	void shm_mq_set_sender(shm_mq *, PGPROC *);
797:	shm_mq_result shm_mq_wait_for_attach(shm_mq_handle *);
1139:	static _Bool shm_mq_counterparty_gone(shm_mq *, BackgroundWorkerHandle *);
1283:	static void shm_mq_detach_callback(dsm_segment *, Datum);
852:	static void shm_mq_detach_internal(shm_mq *);
1230:	static void shm_mq_inc_bytes_read(shm_mq *, Size);
1263:	static void shm_mq_inc_bytes_written(shm_mq *, Size);
1039:	static shm_mq_result shm_mq_receive_bytes(shm_mq_handle *, Size, _Bool, Size *, void **);
884:	static shm_mq_result shm_mq_send_bytes(shm_mq_handle *, Size, const void *, _Bool, Size *);
1178:	static _Bool shm_mq_wait_internal(shm_mq *, PGPROC **, BackgroundWorkerHandle *);

File shm_toc.c:
88:	void *shm_toc_allocate(shm_toc *, Size);
64:	shm_toc *shm_toc_attach(uint64, void *);
40:	shm_toc *shm_toc_create(uint64, void *, Size);
263:	Size shm_toc_estimate(shm_toc_estimator *);
131:	Size shm_toc_freespace(shm_toc *);
171:	void shm_toc_insert(shm_toc *, uint64, void *);
232:	void *shm_toc_lookup(shm_toc *, uint64, _Bool);

File shmem.c:
101:	void InitShmemAccess(void *);
116:	void InitShmemAllocation(void);
292:	void InitShmemIndex(void);
283:	_Bool ShmemAddrIsValid(const void *);
161:	void *ShmemAlloc(Size);
181:	void *ShmemAllocNoError(Size);
247:	void *ShmemAllocUnlocked(Size);
341:	HTAB *ShmemInitHash(const char *, long, long, HASHCTL *, int);
396:	void *ShmemInitStruct(const char *, Size, _Bool *);
502:	Size add_size(Size, Size);
519:	Size mul_size(Size, Size);
536:	Datum pg_get_shmem_allocations(FunctionCallInfo);
195:	static void *ShmemAllocRaw(Size, Size *);

File shmqueue.c:
68:	void SHMQueueDelete(SHM_QUEUE *);
57:	void SHMQueueElemInit(SHM_QUEUE *);
180:	_Bool SHMQueueEmpty(const SHM_QUEUE *);
36:	void SHMQueueInit(SHM_QUEUE *);
108:	void SHMQueueInsertAfter(SHM_QUEUE *, SHM_QUEUE *);
89:	void SHMQueueInsertBefore(SHM_QUEUE *, SHM_QUEUE *);
47:	_Bool SHMQueueIsDetached(const SHM_QUEUE *);
145:	Pointer SHMQueueNext(const SHM_QUEUE *, const SHM_QUEUE *, Size);
164:	Pointer SHMQueuePrev(const SHM_QUEUE *, const SHM_QUEUE *, Size);

File sigaddset.c:
25:	int __GI_sigaddset(sigset_t *, int);

File sigandset.c:
24:	int sigandset(sigset_t *, const sigset_t *, const sigset_t *);

File sigdelset.c:
25:	int __GI_sigdelset(sigset_t *, int);

File sigempty.c:
24:	int __GI_sigemptyset(sigset_t *);

File sigfillset.c:
25:	int __GI_sigfillset(sigset_t *);

File siggetmask.c:
22:	int siggetmask(void);

File sighold.c:
25:	int sighold(int);

File sigisempty.c:
24:	int sigisemptyset(const sigset_t *);

File sigismem.c:
24:	int __GI_sigismember(const sigset_t *, int);

File sigjmp.c:
27:	int __sigjmp_save(struct __jmp_buf_tag *, int);

File signalfuncs.c:
112:	Datum pg_cancel_backend(FunctionCallInfo);
242:	Datum pg_reload_conf(FunctionCallInfo);
261:	Datum pg_rotate_logfile(FunctionCallInfo);
289:	Datum pg_rotate_logfile_v2(FunctionCallInfo);
202:	Datum pg_terminate_backend(FunctionCallInfo);
49:	static int pg_signal_backend(int, int);
134:	static _Bool pg_wait_until_termination(int, int64);

File sigorset.c:
24:	int sigorset(sigset_t *, const sigset_t *, const sigset_t *);

File sigrelse.c:
25:	int sigrelse(int);

File sigsetops.c:
37:	int __sigaddset(__sigset_t *, int);
46:	int __sigdelset(__sigset_t *, int);
29:	int __sigismember(const __sigset_t *, int);

File sigvec.c:
67:	int __sigvec(int, const struct sigvec *, struct sigvec *);

File sinval.c:
156:	void HandleCatchupInterrupt(void);
176:	void ProcessCatchupInterrupt(void);
71:	void ReceiveSharedInvalidMessages(void (*)(SharedInvalidationMessage *), void (*)(void));
49:	void SendSharedInvalidMessages(const SharedInvalidationMessage *, int);

File sinvaladt.c:
376:	PGPROC *BackendIdGetProc(int);
403:	void BackendIdGetTransactionIds(int, TransactionId *, TransactionId *);
218:	void CreateSharedInvalidationState(void);
766:	LocalTransactionId GetNextLocalTransactionId(void);
640:	void SICleanupQueue(_Bool, int);
536:	int SIGetDataEntries(SharedInvalidationMessage *, int);
433:	void SIInsertDataEntries(const SharedInvalidationMessage *, int);
203:	Size SInvalShmemSize(void);
257:	void SharedInvalBackendInit(_Bool);
335:	static void CleanupInvalidationState(int, Datum);

File slab.c:
177:	MemoryContext SlabContextCreate(MemoryContext, const char *, Size, Size);
342:	static void *SlabAlloc(MemoryContext, Size);
328:	static void SlabDelete(MemoryContext);
500:	static void SlabFree(MemoryContext, void *);
608:	static Size SlabGetChunkSpace(MemoryContext, void *);
622:	static _Bool SlabIsEmpty(MemoryContext);
588:	static void *SlabRealloc(MemoryContext, void *, Size);
285:	static void SlabReset(MemoryContext);
641:	static void SlabStats(MemoryContext, MemoryStatsPrintFunc, void *, MemoryContextCounters *, _Bool);

File slot.c:
1354:	void CheckPointReplicationSlots(void);
1050:	void CheckSlotRequirements(void);
1311:	_Bool InvalidateObsoleteReplicationSlots(XLogSegNo);
379:	void ReplicationSlotAcquire(const char *, _Bool);
524:	void ReplicationSlotCleanup(void);
226:	void ReplicationSlotCreate(const char *, _Bool, ReplicationSlotPersistency, _Bool);
562:	void ReplicationSlotDrop(const char *, _Bool);
727:	void ReplicationSlotMarkDirty(void);
744:	void ReplicationSlotPersist(void);
468:	void ReplicationSlotRelease(void);
1075:	void ReplicationSlotReserveWal(void);
709:	void ReplicationSlotSave(void);
172:	_Bool ReplicationSlotValidateName(const char *, int);
866:	XLogRecPtr ReplicationSlotsComputeLogicalRestartLSN(void);
823:	void ReplicationSlotsComputeRequiredLSN(void);
766:	void ReplicationSlotsComputeRequiredXmin(_Bool);
918:	_Bool ReplicationSlotsCountDBSlots(Oid, int *, int *);
974:	void ReplicationSlotsDropDBSlots(Oid);
132:	void ReplicationSlotsShmemInit(void);
114:	Size ReplicationSlotsShmemSize(void);
347:	ReplicationSlot *SearchNamedReplicationSlot(const char *, _Bool);
1389:	void StartupReplicationSlots(void);
1449:	static void CreateSlotOnDisk(ReplicationSlot *);
1158:	static _Bool InvalidatePossiblyObsoleteSlot(ReplicationSlot *, XLogRecPtr, _Bool *);
575:	static void ReplicationSlotDropAcquired(void);
592:	static void ReplicationSlotDropPtr(ReplicationSlot *);
1664:	static void RestoreSlotFromDisk(const char *);
1510:	static void SaveSlotToPath(ReplicationSlot *, const char *, int);

File slotfuncs.c:
923:	Datum pg_copy_logical_replication_slot_a(FunctionCallInfo);
929:	Datum pg_copy_logical_replication_slot_b(FunctionCallInfo);
935:	Datum pg_copy_logical_replication_slot_c(FunctionCallInfo);
941:	Datum pg_copy_physical_replication_slot_a(FunctionCallInfo);
947:	Datum pg_copy_physical_replication_slot_b(FunctionCallInfo);
176:	Datum pg_create_logical_replication_slot(FunctionCallInfo);
74:	Datum pg_create_physical_replication_slot(FunctionCallInfo);
223:	Datum pg_drop_replication_slot(FunctionCallInfo);
240:	Datum pg_get_replication_slots(FunctionCallInfo);
608:	Datum pg_replication_slot_advance(FunctionCallInfo);
29:	static void check_permissions(void);
701:	static Datum copy_replication_slot(FunctionCallInfo, _Bool);
126:	static void create_logical_replication_slot(char *, char *, _Bool, _Bool, XLogRecPtr, _Bool);
46:	static void create_physical_replication_slot(char *, _Bool, _Bool, XLogRecPtr);
497:	static XLogRecPtr pg_logical_replication_slot_advance(XLogRecPtr);
460:	static XLogRecPtr pg_physical_replication_slot_advance(XLogRecPtr);

File slru.c:
626:	_Bool SimpleLruDoesPhysicalPageExist(SlruCtl, int);
187:	void SimpleLruInit(SlruCtl, const char *, int, int, LWLock *, const char *, int, SyncRequestHandler);
395:	int SimpleLruReadPage(SlruCtl, int, _Bool, TransactionId);
495:	int SimpleLruReadPage_ReadOnly(SlruCtl, int, TransactionId);
155:	Size SimpleLruShmemSize(int, int);
1226:	void SimpleLruTruncate(SlruCtl, int);
1156:	void SimpleLruWriteAll(SlruCtl, _Bool);
614:	void SimpleLruWritePage(SlruCtl, int);
280:	int SimpleLruZeroPage(SlruCtl, int);
1327:	void SlruDeleteSegment(SlruCtl, int);
1530:	_Bool SlruScanDirCbDeleteAll(SlruCtl, char *, int, void *);
1500:	_Bool SlruScanDirCbReportPresence(SlruCtl, char *, int, void *);
1553:	_Bool SlruScanDirectory(SlruCtl, SlruScanCallback, void *);
1593:	int SlruSyncFileTag(SlruCtl, const FileTag *, char *);
341:	static void SimpleLruWaitIO(SlruCtl, int);
324:	static void SimpleLruZeroLSNs(SlruCtl, int);
1304:	static void SlruInternalDeleteSegment(SlruCtl, int);
539:	static void SlruInternalWritePage(SlruCtl, int, SlruWriteAll);
1391:	static _Bool SlruMayDeleteSegment(SlruCtl, int, int);
684:	static _Bool SlruPhysicalReadPage(SlruCtl, int, int);
756:	static _Bool SlruPhysicalWritePage(SlruCtl, int, int, SlruWriteAll);
931:	static void SlruReportIOError(SlruCtl, int, TransactionId);
1515:	static _Bool SlruScanDirCbDeleteCutoff(SlruCtl, char *, int, void *);
1016:	static int SlruSelectLRUPage(SlruCtl, int);

File smgr.c:
678:	void AtEOXact_SMgr(void);
227:	void smgrclearowner(SMgrRelation *, SMgrRelation);
256:	void smgrclose(SMgrRelation);
286:	void smgrcloseall(void);
310:	void smgrclosenode(RelFileNodeBackend);
333:	void smgrcreate(SMgrRelation, ForkNumber, _Bool);
348:	void smgrdosyncall(SMgrRelation *, int);
384:	void smgrdounlinkall(SMgrRelation *, int, _Bool);
247:	_Bool smgrexists(SMgrRelation, ForkNumber);
462:	void smgrextend(SMgrRelation, ForkNumber, BlockNumber, char *, _Bool);
660:	void smgrimmedsync(SMgrRelation, ForkNumber);
111:	void smgrinit(void);
548:	BlockNumber smgrnblocks(SMgrRelation, ForkNumber);
572:	BlockNumber smgrnblocks_cached(SMgrRelation, ForkNumber);
146:	SMgrRelation smgropen(RelFileNode, BackendId);
487:	_Bool smgrprefetch(SMgrRelation, ForkNumber, BlockNumber);
501:	void smgrread(SMgrRelation, ForkNumber, BlockNumber, char *);
198:	void smgrsetowner(SMgrRelation *, SMgrRelation);
595:	void smgrtruncate(SMgrRelation, ForkNumber *, int, BlockNumber *);
523:	void smgrwrite(SMgrRelation, ForkNumber, BlockNumber, char *, _Bool);
536:	void smgrwriteback(SMgrRelation, ForkNumber, BlockNumber, BlockNumber);
129:	static void smgrshutdown(int, Datum);

File smgrdesc.c:
21:	void smgr_desc(StringInfo, XLogReaderState *);
46:	const char *smgr_identify(uint8);

File snapbuild.c:
310:	SnapBuild *AllocateSnapshotBuilder(ReorderBuffer *, TransactionId, XLogRecPtr, _Bool, XLogRecPtr);
2016:	void CheckPointSnapBuild(void);
356:	void FreeSnapshotBuilder(SnapBuild *);
711:	void SnapBuildClearExportedSnapshot(void);
1013:	void SnapBuildCommitTxn(SnapBuild *, XLogRecPtr, TransactionId, int, TransactionId *);
404:	SnapBuildState SnapBuildCurrentState(SnapBuild *);
650:	const char *SnapBuildExportSnapshot(SnapBuild *);
690:	Snapshot SnapBuildGetOrBuildSnapshot(SnapBuild *, TransactionId);
413:	XLogRecPtr SnapBuildInitialConsistentPoint(SnapBuild *);
558:	Snapshot SnapBuildInitialSnapshot(SnapBuild *);
750:	_Bool SnapBuildProcessChange(SnapBuild *, TransactionId, XLogRecPtr);
800:	void SnapBuildProcessNewCid(SnapBuild *, TransactionId, XLogRecPtr, xl_heap_new_cid *);
1183:	void SnapBuildProcessRunningXacts(SnapBuild *, XLogRecPtr, xl_running_xacts *);
738:	void SnapBuildResetExportedSnapshotState(void);
1574:	void SnapBuildSerializationPoint(SnapBuild *, XLogRecPtr);
446:	void SnapBuildSnapDecRefcount(Snapshot);
422:	_Bool SnapBuildXactNeedsSkip(SnapBuild *, XLogRecPtr);
2106:	void SnapBuildXidSetCatalogChanges(SnapBuild *, TransactionId, int, TransactionId *, XLogRecPtr);
895:	static void SnapBuildAddCommittedTxn(SnapBuild *, TransactionId);
478:	static Snapshot SnapBuildBuildSnapshot(SnapBuild *);
842:	static void SnapBuildDistributeNewCatalogSnapshot(SnapBuild *, XLogRecPtr);
1285:	static _Bool SnapBuildFindSnapshot(SnapBuild *, XLogRecPtr, xl_running_xacts *);
379:	static void SnapBuildFreeSnapshot(Snapshot);
929:	static void SnapBuildPurgeOlderTxn(SnapBuild *);
1799:	static _Bool SnapBuildRestore(SnapBuild *, XLogRecPtr);
1587:	static void SnapBuildSerialize(SnapBuild *, XLogRecPtr);
434:	static void SnapBuildSnapIncRefcount(Snapshot);
1491:	static void SnapBuildWaitSnapshot(xl_running_xacts *, TransactionId);

File snapmgr.c:
815:	_Bool ActiveSnapshotSet(void);
1023:	void AtEOXact_Snapshot(_Bool, _Bool);
987:	void AtSubAbort_Snapshot(int);
966:	void AtSubCommit_Snapshot(int);
1582:	void DeleteAllExportedSnapshotFiles(void);
2095:	Size EstimateSnapshotSpace(Snapshot);
1123:	char *ExportSnapshot(Snapshot);
803:	Snapshot GetActiveSnapshot(void);
386:	Snapshot GetCatalogSnapshot(Oid);
325:	Snapshot GetLatestSnapshot(void);
408:	Snapshot GetNonHistoricCatalogSnapshot(Oid);
1677:	TimestampTz GetOldSnapshotThresholdTimestamp(void);
357:	Snapshot GetOldestSnapshot(void);
1652:	TimestampTz GetSnapshotCurrentTimestamp(void);
250:	Snapshot GetTransactionSnapshot(void);
2075:	_Bool HistoricSnapshotActive(void);
2081:	HTAB *HistoricSnapshotGetTupleCids(void);
1394:	void ImportSnapshot(const char *);
456:	void InvalidateCatalogSnapshot(void);
477:	void InvalidateCatalogSnapshotConditionally(void);
1875:	void MaintainOldSnapshotTimeMapping(TimestampTz, TransactionId);
776:	void PopActiveSnapshot(void);
682:	void PushActiveSnapshot(Snapshot);
696:	void PushActiveSnapshotWithLevel(Snapshot, int);
733:	void PushCopiedSnapshot(Snapshot);
827:	Snapshot RegisterSnapshot(Snapshot);
840:	Snapshot RegisterSnapshotOnOwner(Snapshot, ResourceOwner);
2178:	Snapshot RestoreSnapshot(char *);
2243:	void RestoreTransactionSnapshot(Snapshot, void *);
2119:	void SerializeSnapshot(Snapshot, char *);
1689:	void SetOldSnapshotThresholdTimestamp(TimestampTz, TransactionId);
2052:	void SetupHistoricSnapshot(Snapshot, HTAB *);
213:	void SnapMgrInit(void);
197:	Size SnapMgrShmemSize(void);
490:	void SnapshotSetCommandId(CommandId);
1706:	void SnapshotTooOldMagicForTest(void);
2068:	void TeardownHistoricSnapshot(_Bool);
1621:	_Bool ThereAreNoPriorRegisteredSnapshots(void);
1768:	_Bool TransactionIdLimitedForOldSnapshots(TransactionId, Relation, TransactionId *, TimestampTz *);
869:	void UnregisterSnapshot(Snapshot);
882:	void UnregisterSnapshotFromOwner(Snapshot, ResourceOwner);
745:	void UpdateActiveSnapshotCommandId(void);
1569:	_Bool XactHasExportedSnapshots(void);
2259:	_Bool XidInMVCCSnapshot(TransactionId, Snapshot);
1299:	Datum pg_export_snapshot(FunctionCallInfo);
1638:	static TimestampTz AlignTimestampToMinuteBoundary(TimestampTz);
608:	static Snapshot CopySnapshot(Snapshot);
664:	static void FreeSnapshot(Snapshot);
1724:	static _Bool GetOldSnapshotFromTimeMapping(TimestampTz, TransactionId *);
511:	static void SetTransactionSnapshot(Snapshot, VirtualTransactionId *, int, PGPROC *);
942:	static void SnapshotResetXmin(void);
1314:	static int parseIntFromText(const char *, char **, const char *);
1364:	static void parseVxidFromText(const char *, char **, const char *, VirtualTransactionId *);
1339:	static TransactionId parseXidFromText(const char *, char **, const char *);
908:	static int xmin_cmp(const pairingheap_node *, const pairingheap_node *, void *);

File snprintf.c:
25:	int __GI___snprintf(char *, size_t, const char *, ...);
274:	int pg_fprintf(FILE *, const char *, ...);
292:	int pg_printf(const char *, ...);
212:	int pg_snprintf(char *, size_t, const char *, ...);
240:	int pg_sprintf(char *, const char *, ...);
1275:	int pg_strfromd(char *, size_t, int, double);
252:	int pg_vfprintf(FILE *, const char *, struct __va_list_tag *);
286:	int pg_vprintf(const char *, struct __va_list_tag *);
184:	int pg_vsnprintf(char *, size_t, const char *, struct __va_list_tag *);
224:	int pg_vsprintf(char *, const char *, struct __va_list_tag *);
1457:	static int adjust_sign(int, int, int *);
1471:	static int compute_padlen(int, int, int);
386:	static void dopr(PrintfTarget *, const char *, struct __va_list_tag *);
1404:	static void dopr_outch(int, PrintfTarget *);
1420:	static void dopr_outchmulti(int, int, PrintfTarget *);
1367:	static void dostr(const char *, int, PrintfTarget *);
759:	static _Bool find_arguments(const char *, struct __va_list_tag *, PrintfArgValue *);
308:	static void flushbuffer(PrintfTarget *);
1111:	static void fmtchar(int, int, int, PrintfTarget *);
1129:	static void fmtfloat(double, char, int, int, int, int, int, int, PrintfTarget *);
1024:	static void fmtint(long long, char, int, int, int, int, int, int, PrintfTarget *);
1010:	static void fmtptr(const void *, PrintfTarget *);
981:	static void fmtstr(const char *, int, int, int, int, PrintfTarget *);
1485:	static void leading_pad(int, int, int *, PrintfTarget *);
1521:	static void trailing_pad(int, PrintfTarget *);

File snprintf_chk.c:
25:	int ___snprintf_chk(char *, size_t, int, size_t, const char *, ...);

File sockaddr_un_set.c:
25:	int __sockaddr_un_set(struct sockaddr_un *, const char *);

File sortsupport.c:
69:	void PrepareSortSupportComparisonShim(Oid, SortSupport);
189:	void PrepareSortSupportFromGistIndexRel(Relation, SortSupport);
162:	void PrepareSortSupportFromIndexRel(Relation, int16, SortSupport);
135:	void PrepareSortSupportFromOrderingOp(Oid, SortSupport);
95:	static void FinishSortSupportFunction(Oid, Oid, SortSupport);
44:	static int comparison_shim(Datum, Datum, SortSupport);

File spawn.c:
25:	int __GI___posix_spawn(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *);
39:	int __posix_spawn_compat(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *);

File spawn_faction_addchdir.c:
26:	int posix_spawn_file_actions_addchdir_np(posix_spawn_file_actions_t *, const char *);

File spawn_faction_addclose.c:
27:	int __posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *, int);

File spawn_faction_adddup2.c:
27:	int __posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *, int, int);

File spawn_faction_addfchdir.c:
26:	int posix_spawn_file_actions_addfchdir_np(posix_spawn_file_actions_t *, int);

File spawn_faction_addopen.c:
28:	int __posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *, int, const char *, int, mode_t);

File spawn_faction_destroy.c:
25:	int __posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *);

File spawn_faction_init.c:
48:	int __posix_spawn_file_actions_init(posix_spawn_file_actions_t *);
29:	int __posix_spawn_file_actions_realloc(posix_spawn_file_actions_t *);

File spawn_valid_fd.c:
24:	_Bool __spawn_valid_fd(int);

File spawnattr_destroy.c:
22:	int __posix_spawnattr_destroy(posix_spawnattr_t *);

File spawnattr_getdefault.c:
24:	int posix_spawnattr_getsigdefault(const posix_spawnattr_t *, sigset_t *);

File spawnattr_getflags.c:
23:	int posix_spawnattr_getflags(const posix_spawnattr_t *, short *);

File spawnattr_getpgroup.c:
23:	int posix_spawnattr_getpgroup(const posix_spawnattr_t *, pid_t *);

File spawnattr_getschedparam.c:
23:	int posix_spawnattr_getschedparam(const posix_spawnattr_t *, struct sched_param *);

File spawnattr_getschedpolicy.c:
23:	int posix_spawnattr_getschedpolicy(const posix_spawnattr_t *, int *);

File spawnattr_getsigmask.c:
23:	int posix_spawnattr_getsigmask(const posix_spawnattr_t *, sigset_t *);

File spawnattr_init.c:
23:	int __posix_spawnattr_init(posix_spawnattr_t *);

File spawnattr_setdefault.c:
23:	int __posix_spawnattr_setsigdefault(posix_spawnattr_t *, const sigset_t *);

File spawnattr_setflags.c:
33:	int __posix_spawnattr_setflags(posix_spawnattr_t *, short);

File spawnattr_setpgroup.c:
23:	int posix_spawnattr_setpgroup(posix_spawnattr_t *, pid_t);

File spawnattr_setschedparam.c:
23:	int posix_spawnattr_setschedparam(posix_spawnattr_t *, const struct sched_param *);

File spawnattr_setschedpolicy.c:
23:	int posix_spawnattr_setschedpolicy(posix_spawnattr_t *, int);

File spawnattr_setsigmask.c:
23:	int __posix_spawnattr_setsigmask(posix_spawnattr_t *, const sigset_t *);

File spawnp.c:
25:	int __posix_spawnp(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *);
39:	int __posix_spawnp_compat(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *);

File spccache.c:
214:	int get_tablespace_io_concurrency(Oid);
228:	int get_tablespace_maintenance_io_concurrency(Oid);
181:	void get_tablespace_page_costs(Oid, double *, double *);
77:	static void InitializeTableSpaceCache(void);
54:	static void InvalidateTableSpaceCacheCallback(Datum, int, uint32);
106:	static TableSpaceCacheEntry *get_tablespace(Oid);

File spell.c:
103:	void NIFinishBuild(IspellDict *);
1445:	void NIImportAffixes(IspellDict *, const char *);
517:	void NIImportDictionary(IspellDict *, const char *);
2555:	TSLexeme *NINormalizeWord(IspellDict *, char *);
1991:	void NISortAffixes(IspellDict *);
1737:	void NISortDictionary(IspellDict *);
88:	void NIStartBuild(IspellDict *);
2376:	static void AddStem(SplitVar *, char *);
2086:	static char *CheckAffix(const char *, size_t, AFFIX *, int, char *, int *);
2309:	static int CheckCompoundAffixes(CMPDAffix **, char *, int, _Bool);
2351:	static SplitVar *CopyVar(SplitVar *, int);
2043:	static AffixNodeData *FindAffixes(AffixNode *, const char *, int, int *, int);
602:	static int FindWord(IspellDict *, const char *, const char *, int);
454:	static _Bool IsAffixFlagInUse(IspellDict *, int, const char *);
1592:	static int MergeAffix(IspellDict *, int, int);
688:	static void NIAddAffix(IspellDict *, const char *, char, const char *, const char *, const char *, int);
486:	static void NIAddSpell(IspellDict *, const char *, const char *);
1216:	static void NIImportOOAffixes(IspellDict *, const char *);
2191:	static char **NormalizeSubWord(IspellDict *, char *, int);
2389:	static SplitVar *SplitToVariants(IspellDict *, SPNode *, SplitVar *, char *, int, int, int);
1086:	static void addCompoundAffixFlagValue(IspellDict *, char *, uint32);
2539:	static void addNorm(TSLexeme **, TSLexeme **, char *, int, uint16);
2176:	static int addToResult(char **, char **, char *);
311:	static int cmpaffix(const void *, const void *);
210:	static int cmpcmdflag(const void *, const void *);
197:	static int cmpspell(const void *, const void *);
203:	static int cmpspellaffix(const void *, const void *);
130:	static void *compact_palloc0(IspellDict *, size_t);
162:	static char *cpstrdup(IspellDict *, const char *);
229:	static char *findchar(char *, int);
242:	static char *findchar2(char *, int, int);
1179:	static char *getAffixFlagSet(IspellDict *, char *);
1143:	static int getCompoundAffixFlagValue(IspellDict *, char *);
349:	static void getNextFlagFromString(IspellDict *, char **, char *);
811:	static _Bool get_nextfield(char **, char *);
1976:	static _Bool isAffixInUse(IspellDict *, char *);
175:	static char *lowerstr_ctx(IspellDict *, const char *);
1638:	static uint32 makeCompoundFlags(IspellDict *, int);
1845:	static AffixNode *mkANode(IspellDict *, int, int, int, int);
1655:	static SPNode *mkSPNode(IspellDict *, int, int, int);
1922:	static void mkVoidAffix(IspellDict *, _Bool, int);
933:	static _Bool parse_affentry(char *, char *, char *, char *);
877:	static int parse_ooaffentry(char *, char *, char *, char *, char *, char *);
662:	static void regex_affix_deletion_callback(void *);
1051:	static void setCompoundAffixFlagValue(IspellDict *, CompoundAffixFlag *, char *, uint32);
257:	static int strbcmp(const unsigned char *, const unsigned char *);
280:	static int strbncmp(const unsigned char *, const unsigned char *, size_t);

File spgdesc.c:
20:	void spg_desc(StringInfo, XLogReaderState *);
131:	const char *spg_identify(uint8);

File spgdoinsert.c:
131:	void spgPageIndexMultiDelete(SpGistState *, Page, OffsetNumber *, int, int, int, BlockNumber, OffsetNumber);
50:	void spgUpdateNodeLink(SpGistInnerTuple, int, BlockNumber, OffsetNumber);
1913:	_Bool spgdoinsert(Relation, SpGistState *, ItemPointer, Datum *, _Bool *);
203:	static void addLeafTuple(Relation, SpGistState *, SpGistLeafTuple, SPPageDesc *, SPPageDesc *, _Bool, _Bool);
78:	static SpGistInnerTuple addNode(SpGistState *, SpGistInnerTuple, Datum, int);
598:	static _Bool checkAllTheSame(spgPickSplitIn *, spgPickSplitOut *, _Bool, _Bool *);
333:	static int checkSplitConditions(Relation, SpGistState *, SPPageDesc *, int *);
110:	static int cmpOffsetNumbers(const void *, const void *);
676:	static _Bool doPickSplit(Relation, SpGistState *, SPPageDesc *, SPPageDesc *, SpGistLeafTuple, int, _Bool, _Bool);
387:	static void moveLeafs(Relation, SpGistState *, SPPageDesc *, SPPageDesc *, SpGistLeafTuple, _Bool);
186:	static void saveNodeLink(Relation, SPPageDesc *, BlockNumber, OffsetNumber);
567:	static void setRedirectionTuple(SPPageDesc *, OffsetNumber, BlockNumber, OffsetNumber);
1512:	static void spgAddNodeAction(Relation, SpGistState *, SpGistInnerTuple, SPPageDesc *, SPPageDesc *, int, Datum);
1458:	static void spgMatchNodeAction(Relation, SpGistState *, SpGistInnerTuple, SPPageDesc *, SPPageDesc *, int);
1714:	static void spgSplitNodeAction(Relation, SpGistState *, SpGistInnerTuple, SPPageDesc *, spgChooseOut *);

File spginsert.c:
75:	IndexBuildResult *spgbuild(Relation, Relation, IndexInfo *);
156:	void spgbuildempty(Relation);
207:	_Bool spginsert(Relation, Datum *, _Bool *, ItemPointer, Relation, IndexUniqueCheck, _Bool, IndexInfo *);
43:	static void spgistBuildCallback(Relation, ItemPointer, Datum *, _Bool *, _Bool, void *);

File spgkdtreeproc.c:
54:	Datum spg_kd_choose(FunctionCallInfo);
28:	Datum spg_kd_config(FunctionCallInfo);
160:	Datum spg_kd_inner_consistent(FunctionCallInfo);
108:	Datum spg_kd_picksplit(FunctionCallInfo);
41:	static int getSide(double, _Bool, Point *);
85:	static int x_cmp(const void *, const void *);
96:	static int y_cmp(const void *, const void *);

File spgproc.c:
82:	BOX *box_copy(BOX *);
63:	double *spg_key_orderbys_distances(Datum, _Bool, ScanKey, int);
31:	static double point_box_distance(Point *, BOX *);

File spgquadtreeproc.c:
115:	Datum spg_quad_choose(FunctionCallInfo);
27:	Datum spg_quad_config(FunctionCallInfo);
227:	Datum spg_quad_inner_consistent(FunctionCallInfo);
407:	Datum spg_quad_leaf_consistent(FunctionCallInfo);
169:	Datum spg_quad_picksplit(FunctionCallInfo);
55:	static int16 getQuadrant(Point *, Point *);
83:	static BOX *getQuadrantArea(BOX *, Point *, int);

File spgscan.c:
304:	IndexScanDesc spgbeginscan(Relation, int, int);
1085:	_Bool spgcanreturn(Relation, int);
429:	void spgendscan(IndexScanDesc);
943:	int64 spggetbitmap(IndexScanDesc, TIDBitmap *);
1027:	_Bool spggettuple(IndexScanDesc, ScanDirection);
380:	void spgrescan(IndexScanDesc, ScanKey, int, ScanKey, int);
41:	static int pairingheap_SpGistSearchItem_cmp(const pairingheap_node *, const pairingheap_node *, void *);
154:	static void resetSpGistScanOpaque(SpGistScanOpaque);
108:	static void spgAddSearchItemToQueue(SpGistScanOpaque, SpGistSearchItem *);
130:	static void spgAddStartItem(SpGistScanOpaque, _Bool);
114:	static SpGistSearchItem *spgAllocSearchItem(SpGistScanOpaque, _Bool, double *);
84:	static void spgFreeSearchItem(SpGistScanOpaque, SpGistSearchItem *);
746:	static SpGistSearchItem *spgGetNextQueueItem(SpGistScanOpaque);
606:	static void spgInitInnerConsistentIn(spgInnerConsistentIn *, SpGistScanOpaque, SpGistSearchItem *, SpGistInnerTuple);
667:	static void spgInnerTest(SpGistScanOpaque, SpGistSearchItem *, SpGistInnerTuple, _Bool);
516:	static _Bool spgLeafTest(SpGistScanOpaque, SpGistSearchItem *, SpGistLeafTuple, _Bool, _Bool *, storeRes_func);
629:	static SpGistSearchItem *spgMakeInnerItem(SpGistScanOpaque, SpGistSearchItem *, SpGistNodeTuple, spgInnerConsistentOut *, int, _Bool, double *);
463:	static SpGistSearchItem *spgNewHeapItem(SpGistScanOpaque, int, SpGistLeafTuple, Datum, _Bool, _Bool, _Bool, double *);
208:	static void spgPrepareScanKeys(IndexScanDesc);
763:	static OffsetNumber spgTestLeafTuple(SpGistScanOpaque, SpGistSearchItem *, Page, OffsetNumber, _Bool, _Bool, _Bool *, storeRes_func);
817:	static void spgWalk(Relation, SpGistScanOpaque, _Bool, storeRes_func, Snapshot);
932:	static void storeBitmap(SpGistScanOpaque, ItemPointer, Datum, _Bool, SpGistLeafTuple, _Bool, _Bool, double *);
960:	static void storeGettuple(SpGistScanOpaque, ItemPointer, Datum, _Bool, SpGistLeafTuple, _Bool, _Bool, double *);

File spgtextproc.c:
182:	Datum spg_text_choose(FunctionCallInfo);
94:	Datum spg_text_config(FunctionCallInfo);
424:	Datum spg_text_inner_consistent(FunctionCallInfo);
572:	Datum spg_text_leaf_consistent(FunctionCallInfo);
331:	Datum spg_text_picksplit(FunctionCallInfo);
322:	static int cmpNodePtr(const void *, const void *);
136:	static int commonPrefix(const char *, const char *, int, int);
111:	static Datum formTextDatum(const char *, int);
156:	static _Bool searchChar(Datum *, int, int16, int *);

File spgutils.c:
549:	Buffer SpGistGetBuffer(Relation, int, int, _Bool *);
760:	unsigned int SpGistGetInnerTypeSize(SpGistTypeDesc *, Datum);
799:	Size SpGistGetLeafTupleSize(TupleDesc, Datum *, _Bool *);
702:	void SpGistInitBuffer(Buffer, uint16);
712:	void SpGistInitMetapage(Page);
688:	void SpGistInitPage(Page, uint16);
365:	Buffer SpGistNewBuffer(Relation);
1185:	OffsetNumber SpGistPageAddNewItem(SpGistState *, Page, Item, Size, OffsetNumber *, _Bool);
653:	void SpGistSetLastUsedPage(Relation, Buffer);
430:	void SpGistUpdateMetaPage(Relation);
299:	TupleDesc getSpGistTupleDesc(Relation, SpGistTypeDesc *);
330:	void initSpGistState(SpGistState *, Relation);
1097:	void spgDeformLeafTuple(SpGistLeafTuple, TupleDesc, Datum *, _Bool *, _Bool);
1142:	Datum *spgExtractNodeLabels(SpGistState *, SpGistInnerTuple);
1066:	SpGistDeadTuple spgFormDeadTuple(SpGistState *, int, BlockNumber, OffsetNumber);
983:	SpGistInnerTuple spgFormInnerTuple(SpGistState *, _Bool, Datum, int, SpGistNodeTuple *);
852:	SpGistLeafTuple spgFormLeafTuple(SpGistState *, ItemPointer, Datum *, _Bool *);
941:	SpGistNodeTuple spgFormNodeTuple(SpGistState *, Datum, _Bool);
179:	SpGistCache *spgGetCache(Relation);
44:	Datum spghandler(FunctionCallInfo);
739:	bytea *spgoptions(Datum, _Bool);
1280:	_Bool spgproperty(Oid, int, IndexAMProperty, const char *, _Bool *, _Bool *);
112:	static Oid GetIndexInputType(Relation, AttrNumber);
493:	static Buffer allocNewBuffer(Relation, int);
157:	static void fillTypeDesc(SpGistTypeDesc *, Oid);
778:	static void memcpyInnerDatum(void *, SpGistTypeDesc *, Datum);

File spgvacuum.c:
906:	IndexBulkDeleteResult *spgbulkdelete(IndexVacuumInfo *, IndexBulkDeleteResult *, IndexBulkDeleteCallback, void *);
937:	IndexBulkDeleteResult *spgvacuumcleanup(IndexVacuumInfo *, IndexBulkDeleteResult *);
926:	static _Bool dummy_callback(ItemPointer, void *);
64:	static void spgAddPendingTID(spgBulkDeleteState *, ItemPointer);
90:	static void spgClearPendingList(spgBulkDeleteState *);
682:	static void spgprocesspending(spgBulkDeleteState *);
611:	static void spgvacuumpage(spgBulkDeleteState *, BlockNumber);
794:	static void spgvacuumscan(spgBulkDeleteState *);
126:	static void vacuumLeafPage(spgBulkDeleteState *, Relation, Buffer, _Bool);
407:	static void vacuumLeafRoot(spgBulkDeleteState *, Relation, Buffer);
492:	static void vacuumRedirectAndPlaceholder(Relation, Buffer);

File spgvalidate.c:
332:	void spgadjustmembers(Oid, Oid, List *, List *);
39:	_Bool spgvalidate(Oid);

File spgxlog.c:
998:	void spg_mask(char *, BlockNumber);
939:	void spg_redo(XLogReaderState *);
988:	void spg_xlog_cleanup(void);
980:	void spg_xlog_startup(void);
52:	static void addOrReplaceTuple(Page, Item, int, OffsetNumber);
37:	static void fillFakeState(SpGistState *, spgxlogState);
76:	static void spgRedoAddLeaf(XLogReaderState *);
286:	static void spgRedoAddNode(XLogReaderState *);
173:	static void spgRedoMoveLeafs(XLogReaderState *);
531:	static void spgRedoPickSplit(XLogReaderState *);
453:	static void spgRedoSplitTuple(XLogReaderState *);
753:	static void spgRedoVacuumLeaf(XLogReaderState *);
862:	static void spgRedoVacuumRedirect(XLogReaderState *);
836:	static void spgRedoVacuumRoot(XLogReaderState *);

File spi.c:
493:	void AtEOSubXact_SPI(_Bool, SubTransactionId);
439:	void AtEOXact_SPI(_Bool);
431:	void SPICleanup(void);
321:	void SPI_commit(void);
327:	void SPI_commit_and_chain(void);
95:	int SPI_connect(void);
101:	int SPI_connect_ext(int);
1055:	HeapTuple SPI_copytuple(HeapTuple);
1870:	void SPI_cursor_close(Portal);
1814:	void SPI_cursor_fetch(Portal, _Bool, long);
1802:	Portal SPI_cursor_find(const char *);
1829:	void SPI_cursor_move(Portal, _Bool, long);
1453:	Portal SPI_cursor_open(const char *, SPIPlanPtr, Datum *, const char *, _Bool);
1480:	Portal SPI_cursor_open_with_args(const char *, const char *, int, Oid *, Datum *, const char *, _Bool, int);
1533:	Portal SPI_cursor_open_with_paramlist(const char *, SPIPlanPtr, ParamListInfo, _Bool);
1541:	Portal SPI_cursor_parse_open(const char *, const char *, const SPIParseOpenOptions *);
1369:	Datum SPI_datumTransfer(Datum, _Bool, int);
638:	int SPI_exec(const char *, long);
712:	int SPI_execp(SPIPlanPtr, Datum *, const char *, long);
604:	int SPI_execute(const char *, _Bool, long);
645:	int SPI_execute_extended(const char *, const SPIExecuteOptions *);
680:	int SPI_execute_plan(SPIPlanPtr, Datum *, const char *, _Bool, long);
719:	int SPI_execute_plan_extended(SPIPlanPtr, const SPIExecuteOptions *);
741:	int SPI_execute_plan_with_paramlist(SPIPlanPtr, ParamListInfo, _Bool, long);
781:	int SPI_execute_snapshot(SPIPlanPtr, Datum *, const char *, Snapshot, Snapshot, _Bool, _Bool, long);
820:	int SPI_execute_with_args(const char *, int, Oid *, Datum *, const char *, _Bool, long);
183:	int SPI_finish(void);
1206:	char *SPI_fname(TupleDesc, int);
1183:	int SPI_fnumber(TupleDesc, const char *);
1033:	int SPI_freeplan(SPIPlanPtr);
1387:	void SPI_freetuple(HeapTuple);
1394:	void SPI_freetuptable(SPITupleTable *);
1898:	int SPI_getargcount(SPIPlanPtr);
1883:	Oid SPI_getargtypeid(SPIPlanPtr, int);
1260:	Datum SPI_getbinval(HeapTuple, TupleDesc, int, _Bool *);
1340:	char *SPI_getnspname(Relation);
1334:	char *SPI_getrelname(Relation);
1276:	char *SPI_gettype(TupleDesc, int);
1316:	Oid SPI_gettypeid(TupleDesc, int);
1228:	char *SPI_getvalue(HeapTuple, TupleDesc, int);
592:	_Bool SPI_inside_nonatomic_context(void);
1918:	_Bool SPI_is_cursor_plan(SPIPlanPtr);
984:	int SPI_keepplan(SPIPlanPtr);
1114:	HeapTuple SPI_modifytuple(Relation, HeapTuple, int, int *, Datum *, const char *);
1346:	void *SPI_palloc(Size);
1362:	void SPI_pfree(void *);
2078:	CachedPlan *SPI_plan_get_cached_plan(SPIPlanPtr);
2059:	List *SPI_plan_get_plan_sources(SPIPlanPtr);
1956:	_Bool SPI_plan_is_valid(SPIPlanPtr);
868:	SPIPlanPtr SPI_prepare(const char *, int, Oid *);
874:	SPIPlanPtr SPI_prepare_cursor(const char *, int, Oid *, int);
910:	SPIPlanPtr SPI_prepare_extended(const char *, const SPIPrepareOptions *);
946:	SPIPlanPtr SPI_prepare_params(const char *, ParserSetupHook, void *, int);
3278:	int SPI_register_relation(EphemeralNamedRelation);
3345:	int SPI_register_trigger_data(TriggerData *);
1355:	void *SPI_repalloc(void *, Size);
1980:	const char *SPI_result_code_string(int);
1082:	HeapTupleHeader SPI_returntuple(HeapTuple, TupleDesc);
414:	void SPI_rollback(void);
420:	void SPI_rollback_and_chain(void);
1011:	SPIPlanPtr SPI_saveplan(SPIPlanPtr);
1843:	void SPI_scroll_cursor_fetch(Portal, FetchDirection, long);
1858:	void SPI_scroll_cursor_move(Portal, FetchDirection, long);
223:	void SPI_start_transaction(void);
3312:	int SPI_unregister_relation(const char *);
2125:	void spi_dest_startup(DestReceiver *, int, TupleDesc);
2173:	_Bool spi_printtup(TupleTableSlot *, DestReceiver *);
1585:	static Portal SPI_cursor_open_internal(const char *, SPIPlanPtr, ParamListInfo, _Bool);
3058:	static int _SPI_begin_call(_Bool);
3098:	static _Bool _SPI_checktuples(void);
228:	static void _SPI_commit(_Bool);
2836:	static ParamListInfo _SPI_convert_params(int, Oid *, Datum *, const char *);
2988:	static void _SPI_cursor_operation(Portal, FetchDirection, long, DestReceiver *);
3082:	static int _SPI_end_call(_Bool);
2942:	static void _SPI_error_callback(void *);
3039:	static MemoryContext _SPI_execmem(void);
2401:	static int _SPI_execute_plan(SPIPlanPtr, const SPIExecuteOptions *, Snapshot, Snapshot, _Bool);
3261:	static EphemeralNamedRelation _SPI_find_ENR_by_name(const char *);
3122:	static SPIPlanPtr _SPI_make_plan_non_temp(SPIPlanPtr);
2861:	static int _SPI_pquery(QueryDesc *, _Bool, uint64);
2331:	static void _SPI_prepare_oneshot_plan(const char *, SPIPlanPtr);
2223:	static void _SPI_prepare_plan(const char *, SPIPlanPtr);
3045:	static MemoryContext _SPI_procmem(void);
333:	static void _SPI_rollback(_Bool);
3190:	static SPIPlanPtr _SPI_save_plan(SPIPlanPtr);

File spin.c:
55:	Size SpinlockSemaSize(void);
64:	int SpinlockSemas(void);

File sprintf.c:
24:	int __sprintf(char *, const char *, ...);

File sprintf_chk.c:
24:	int ___sprintf_chk(char *, int, size_t, const char *, ...);

File srand48.c:
23:	void srand48(long);

File srand48_r.c:
23:	int __srand48_r(long, struct drand48_data *);

File sscanf.c:
29:	int __sscanf(const char *, const char *, ...);

File sstk.c:
26:	void *sstk(int);

File stack_chk_fail.c:
22:	void __stack_chk_fail(void);

File standby.c:
867:	void CheckRecoveryConflictDeadlock(void);
82:	void InitRecoveryTransactionEnvironment(void);
1360:	void LogAccessExclusiveLock(Oid, Oid);
1377:	void LogAccessExclusiveLockPrepare(void);
250:	void LogRecoveryConflict(ProcSignalReason, TimestampTz, TimestampTz, VirtualTransactionId *, _Bool);
1399:	void LogStandbyInvalidations(int, SharedInvalidationMessage *, _Bool);
1222:	XLogRecPtr LogStandbySnapshot(void);
754:	void ResolveRecoveryConflictWithBufferPin(void);
530:	void ResolveRecoveryConflictWithDatabase(Oid);
584:	void ResolveRecoveryConflictWithLock(LOCKTAG, _Bool);
444:	void ResolveRecoveryConflictWithSnapshot(TransactionId, RelFileNode);
476:	void ResolveRecoveryConflictWithSnapshotFullXid(FullTransactionId, RelFileNode);
500:	void ResolveRecoveryConflictWithTablespace(Oid);
139:	void ShutdownRecoveryTransactionEnvironment(void);
948:	void StandbyAcquireAccessExclusiveLock(TransactionId, Oid, Oid);
898:	void StandbyDeadLockHandler(void);
916:	void StandbyLockTimeoutHandler(void);
1051:	void StandbyReleaseAllLocks(void);
1037:	void StandbyReleaseLockTree(TransactionId, int, TransactionId *);
1072:	void StandbyReleaseOldLocks(TransactionId);
907:	void StandbyTimeoutHandler(void);
1105:	void standby_redo(XLogReaderState *);
177:	static TimestampTz GetStandbyLimitTime(void);
1342:	static void LogAccessExclusiveLocks(int, xl_standby_lock *);
1282:	static XLogRecPtr LogCurrentRunningXacts(RunningTransactions);
336:	static void ResolveRecoveryConflictWithVirtualXIDs(VirtualTransactionId *, ProcSignalReason, uint32, _Bool);
839:	static void SendRecoveryConflictWithBufferPin(ProcSignalReason);
987:	static void StandbyReleaseLockList(List *);
1013:	static void StandbyReleaseLocks(TransactionId);
210:	static _Bool WaitExceedsMaxStandbyDelay(uint32);
1421:	static const char *get_recovery_conflict_desc(ProcSignalReason);

File standbydesc.c:
40:	void standby_desc(StringInfo, XLogReaderState *);
98:	void standby_desc_invalidations(StringInfo, int, SharedInvalidationMessage *, Oid, Oid, _Bool);
72:	const char *standby_identify(uint8);
20:	static void standby_desc_running_xacts(StringInfo, xl_running_xacts *);

File startup.c:
149:	void HandleStartupProcInterrupts(void);
274:	_Bool IsPromoteSignaled(void);
268:	void PostRestoreCommand(void);
254:	void PreRestoreCommand(void);
280:	void ResetPromoteSignaled(void);
207:	void StartupProcessMain(void);
194:	static void StartupProcExit(int, Datum);
100:	static void StartupProcShutdownHandler(int);
88:	static void StartupProcSigHupHandler(int);
76:	static void StartupProcTriggerHandler(int);
120:	static void StartupRereadConfig(void);

File statscmds.c:
622:	ObjectAddress AlterStatistics(AlterStatsStmt *);
65:	ObjectAddress CreateStatistics(CreateStatsStmt *);
728:	void RemoveStatisticsById(Oid);
881:	Oid StatisticsGetRelation(Oid, _Bool);
792:	static char *ChooseExtendedStatisticName(const char *, const char *, const char *, Oid);
834:	static char *ChooseExtendedStatisticNameAddition(List *);
52:	static int compare_int16(const void *, const void *);

File stime.c:
28:	int __stime(const time_t *);

File storage.c:
941:	void AtSubAbort_smgr(void);
921:	void AtSubCommit_smgr(void);
554:	Size EstimatePendingSyncsSpace(void);
900:	void PostPrepare_smgr(void);
540:	_Bool RelFileNodeSkippingWAL(RelFileNode);
441:	void RelationCopyStorage(SMgrRelation, SMgrRelation, ForkNumber, char);
118:	SMgrRelation RelationCreateStorage(RelFileNode, char);
195:	void RelationDropStorage(Relation);
413:	void RelationPreTruncate(Relation);
240:	void RelationPreserveStorage(RelFileNode, _Bool);
277:	void RelationTruncate(Relation, BlockNumber);
618:	void RestorePendingSyncs(char *);
567:	void SerializePendingSyncs(Size, char *);
175:	void log_smgrcreate(const RelFileNode *, ForkNumber);
639:	void smgrDoPendingDeletes(_Bool);
707:	void smgrDoPendingSyncs(_Bool, _Bool);
859:	int smgrGetPendingDeletes(_Bool, RelFileNode **);
947:	void smgr_redo(XLogReaderState *);
84:	static void AddPendingSync(const RelFileNode *);

File stpcpy_chk.c:
27:	char *__stpcpy_chk(char *, const char *, size_t);

File stpncpy_chk.c:
26:	char *__stpncpy_chk(char *, const char *, size_t, size_t);

File str-two-way.h:
118:	static size_t critical_factorization(const unsigned char *, size_t, size_t *);
390:	static char *two_way_long_needle(const unsigned char *, size_t, const unsigned char *, size_t);

File strcasestr.c:
62:	char *__strcasestr(const char *, const char *);

File strcat_chk.c:
24:	char *__strcat_chk(char *, const char *, size_t);

File strcoll.c:
32:	int __GI_strcoll(const char *, const char *);

File strcoll_l.c:
258:	int __GI___strcoll_l(const char *, const char *, locale_t);

File strcpy_chk.c:
26:	char *__strcpy_chk(char *, const char *, size_t);

File strdup.c:
39:	char *__GI___strdup(const char *);
39:	char *__strdup(const char *);

File streams-compat.c:
30:	int fattach(int, const char *);
39:	int fdetach(const char *);
49:	int getmsg(int, struct strbuf *, struct strbuf *, int *);
58:	int getpmsg(int, struct strbuf *, struct strbuf *, int *, int *);
68:	int isastream(int);
83:	int putmsg(int, const struct strbuf *, const struct strbuf *, int);
93:	int putpmsg(int, const struct strbuf *, const struct strbuf *, int, int);

File strerror.c:
35:	char *pg_strerror(int);
46:	char *pg_strerror_r(int, char *, size_t);
29:	char *strerror(int);
113:	static char *get_errno_symbol(int);
85:	static char *gnuish_strerror_r(int, char *, size_t);

File strerror_l.c:
60:	void __strerror_thread_freeres(void);
41:	char *strerror_l(int, locale_t);

File strfmon.c:
27:	ssize_t __strfmon(char *, size_t, const char *, ...);

File strfmon_l.c:
628:	ssize_t ___strfmon_l(char *, size_t, locale_t, const char *, ...);
80:	ssize_t __vstrfmon_l_internal(char *, size_t, locale_t, const char *, struct __va_list_tag *, unsigned int);

File strfrom-skeleton.c:
37:	int strfromd(char *, size_t, const char *, double);
37:	int strfromf(char *, size_t, const char *, float);
37:	int strfroml(char *, size_t, const char *, long double);

File strfry.c:
24:	char *strfry(char *);

File strftime.c:
23:	size_t __GI_strftime(char *, size_t, const char *, const struct tm *);
128:	size_t pg_strftime(char *, size_t, const char *, const struct pg_tm *);
525:	static char *_add(const char *, char *, const char *);
516:	static char *_conv(int, const char *, char *, const char *);
151:	static char *_fmt(const char *, const struct pg_tm *, char *, const char *, enum warn *);
541:	static char *_yconv(int, int, _Bool, _Bool, char *, const char *);

File strftime_l.c:
449:	size_t __GI___strftime_l(char *, size_t, const char *, const struct tm *, locale_t);
449:	size_t __GI___wcsftime_l(wchar_t *, size_t, const wchar_t *, const struct tm *, locale_t);
468:	static size_t __strftime_internal(char *, size_t, const char *, const struct tm *, int, _Bool *, locale_t);

File string-inlines.c:
297:	void *__old_mempcpy_small(void *, char, __STRING2_COPY_ARR2, __STRING2_COPY_ARR3, __STRING2_COPY_ARR4, __STRING2_COPY_ARR5, __STRING2_COPY_ARR6, __STRING2_COPY_ARR7, __STRING2_COPY_ARR8, size_t);
512:	char *__old_stpcpy_small(char *, __STRING2_COPY_ARR2, __STRING2_COPY_ARR3, __STRING2_COPY_ARR4, __STRING2_COPY_ARR5, __STRING2_COPY_ARR6, __STRING2_COPY_ARR7, __STRING2_COPY_ARR8, size_t);
402:	char *__old_strcpy_small(char *, __STRING2_COPY_ARR2, __STRING2_COPY_ARR3, __STRING2_COPY_ARR4, __STRING2_COPY_ARR5, __STRING2_COPY_ARR6, __STRING2_COPY_ARR7, __STRING2_COPY_ARR8, size_t);
123:	size_t __old_strcspn_c1(const char *, int);
133:	size_t __old_strcspn_c2(const char *, int, int);
144:	size_t __old_strcspn_c3(const char *, int, int, int);
191:	char *__old_strpbrk_c2(const char *, int, int);
201:	char *__old_strpbrk_c3(const char *, int, int, int);
55:	char *__old_strsep_1c(char **, char);
65:	char *__old_strsep_2c(char **, char, char);
92:	char *__old_strsep_3c(char **, char, char, char);
156:	size_t __old_strspn_c1(const char *, int);
167:	size_t __old_strspn_c2(const char *, int, int);
178:	size_t __old_strspn_c3(const char *, int, int, int);
31:	char *__old_strtok_r_1c(char *, char, char **);

File string.c:
82:	void pg_clean_ascii(char *);
99:	_Bool pg_is_ascii(const char *);
31:	_Bool pg_str_endswith(const char *, const char *);
121:	int pg_strip_crlf(char *);
50:	int strtoint(const char * restrict, char ** restrict, int);

File stringinfo.c:
227:	void appendBinaryStringInfo(StringInfo, const char *, int);
253:	void appendBinaryStringInfoNT(StringInfo, const char *, int);
91:	void appendStringInfo(StringInfo, const char *, ...);
188:	void appendStringInfoChar(StringInfo, char);
206:	void appendStringInfoSpaces(StringInfo, int);
176:	void appendStringInfoString(StringInfo, const char *);
133:	int appendStringInfoVA(StringInfo, const char *, struct __va_list_tag *);
283:	void enlargeStringInfo(StringInfo, int);
59:	void initStringInfo(StringInfo);
41:	StringInfo makeStringInfo(void);
75:	void resetStringInfo(StringInfo);

File stringinfo_mb.c:
34:	void appendStringInfoStringQuoted(StringInfo, const char *, int);

File strlcat.c:
33:	size_t strlcat(char *, const char *, size_t);

File strlcpy.c:
45:	size_t strlcpy(char *, const char *, size_t);

File strncat_chk.c:
24:	char *__strncat_chk(char *, const char *, size_t, size_t);

File strncpy_chk.c:
23:	char *__strncpy_chk(char *, const char *, size_t, size_t);

File strndup.c:
40:	char *__GI___strndup(const char *, size_t);

File strops.c:
161:	ssize_t _IO_str_count(FILE *);
344:	void _IO_str_finish(FILE *, int);
74:	void _IO_str_init_readonly(_IO_strfile *, const char *, int);
68:	void _IO_str_init_static(_IO_strfile *, char *, int, char *);
34:	void _IO_str_init_static_internal(_IO_strfile *, char *, size_t, char *);
81:	int __GI__IO_str_overflow(FILE *, int);
335:	int __GI__IO_str_pbackfail(FILE *, int);
248:	off64_t __GI__IO_str_seekoff(FILE *, off64_t, int, int);
141:	int __GI__IO_str_underflow(FILE *);
170:	static int enlarge_userbuf(FILE *, off64_t, int);

File strptime.c:
30:	char *__GI_strptime(const char *, const char *, struct tm *);

File strptime_l.c:
241:	char *__strptime_internal(const char *, const char *, struct tm *, void *, locale_t);
1252:	char *__strptime_l(const char *, const char *, struct tm *, locale_t);

File strsep.c:
24:	char *__GI___strsep(char **, const char *);

File strsignal.c:
41:	char *strsignal(int);
92:	static void free_key_mem(void *);
80:	static void init(void);

File strtod.c:
68:	double __GI___strtod_internal(const char *, char **, int);
68:	float __GI___strtof_internal(const char *, char **, int);
68:	long double __GI___strtold_internal(const char *, char **, int);
81:	double __GI_strtod(const char *, char **);
81:	float __GI_strtof(const char *, char **);
81:	long double __GI_strtold(const char *, char **);

File strtod_l.c:
507:	double __GI_____strtod_l_internal(const char *, char **, int, locale_t);
507:	float __GI_____strtof_l_internal(const char *, char **, int, locale_t);
1782:	double __GI___strtod_l(const char *, char **, locale_t);
1782:	float __GI___strtof_l(const char *, char **, locale_t);
214:	static float round_and_return(mp_limb_t *, intmax_t, int, mp_limb_t, mp_size_t, int);
366:	static const char *str_to_mpn(const char *, int, mp_limb_t *, mp_size_t *, intmax_t *, size_t, const char *, const char *);

File strtok.c:
31:	char *strtok(char *, const char *);

File strtok_r.c:
42:	char *__GI___strtok_r(char *, const char *, char **);

File strverscmp.c:
42:	int __GI___strverscmp(const char *, const char *);

File strxfrm.c:
29:	size_t strxfrm(char *, const char *, size_t);

File strxfrm_l.c:
668:	size_t __GI___strxfrm_l(char *, const char *, size_t, locale_t);

File stty.c:
24:	int stty(int, const struct sgttyb *);

File subscriptioncmds.c:
757:	ObjectAddress AlterSubscription(AlterSubscriptionStmt *, _Bool);
1415:	ObjectAddress AlterSubscriptionOwner(const char *, Oid);
1451:	void AlterSubscriptionOwner_oid(Oid, Oid);
327:	ObjectAddress CreateSubscription(CreateSubscriptionStmt *, _Bool);
1053:	void DropSubscription(DropSubscriptionStmt *, _Bool);
1323:	void ReplicationSlotDropAtPubNode(WalReceiverConn *, char *, _Bool);
1378:	static void AlterSubscriptionOwner_internal(Relation, HeapTuple, Oid);
545:	static void AlterSubscription_refresh(Subscription *, _Bool);
1548:	static void ReportSlotConnectionError(List *, Oid, char *, char *);
1591:	static void check_duplicates_in_publist(List *, Datum *);
1477:	static List *fetch_table_list(WalReceiverConn *, List *);
1631:	static List *merge_publications(List *, List *, _Bool, const char *);
63:	static void parse_subscription_options(List *, _Bool *, _Bool *, _Bool *, _Bool *, _Bool *, char **, _Bool *, char **, _Bool *, _Bool *, _Bool *, _Bool *, _Bool *);
296:	static Datum publicationListToArray(List *);

File subselect.c:
2184:	void SS_attach_initplans(PlannerInfo *, Plan *);
2127:	void SS_charge_for_initplans(PlannerInfo *, RelOptInfo *);
2199:	void SS_finalize_plan(PlannerInfo *, Plan *);
2065:	void SS_identify_outer_params(PlannerInfo *);
2958:	void SS_make_initplan_from_plan(PlannerInfo *, PlannerInfo *, Plan *, Param *);
2942:	Param *SS_make_initplan_output_param(PlannerInfo *, Oid, int32, Oid);
893:	void SS_process_ctes(PlannerInfo *);
1912:	Node *SS_process_sublinks(PlannerInfo *, Node *, _Bool);
1867:	Node *SS_replace_correlation_vars(PlannerInfo *, Node *);
1268:	JoinExpr *convert_ANY_sublink_to_join(PlannerInfo *, SubLink *, Relids);
1376:	JoinExpr *convert_EXISTS_sublink_to_join(PlannerInfo *, SubLink *, _Bool, Relids);
320:	static Node *build_subplan(PlannerInfo *, Plan *, PlannerInfo *, List *, SubLinkType, int, Node *, List *, _Bool);
1070:	static _Bool contain_dml(Node *);
1076:	static _Bool contain_dml_walker(Node *, void *);
1097:	static _Bool contain_outer_selfref(Node *);
1111:	static _Bool contain_outer_selfref_walker(Node *, Index *);
1628:	static Query *convert_EXISTS_to_ANY(PlannerInfo *, Query *, Node **, List **);
655:	static Node *convert_testexpr(PlannerInfo *, Node *, List *);
667:	static Node *convert_testexpr_mutator(Node *, convert_testexpr_context *);
2915:	static _Bool finalize_agg_primnode(Node *, finalize_primnode_context *);
2237:	static Bitmapset *finalize_plan(PlannerInfo *, Plan *, int, Bitmapset *, Bitmapset *);
2850:	static _Bool finalize_primnode(Node *, finalize_primnode_context *);
593:	static List *generate_subquery_params(PlannerInfo *, List *, List **);
626:	static List *generate_subquery_vars(PlannerInfo *, List *, Index);
118:	static void get_first_col_type(Plan *, Oid *, int32 *, Oid *);
845:	static _Bool hash_ok_operator(OpExpr *);
1152:	static void inline_cte(PlannerInfo *, CommonTableExpr *);
1165:	static _Bool inline_cte_walker(Node *, inline_cte_walker_context *);
162:	static Node *make_subplan(PlannerInfo *, Query *, SubLinkType, int, Node *, _Bool);
1922:	static Node *process_sublinks_mutator(Node *, process_sublinks_context *);
1874:	static Node *replace_correlation_vars_mutator(Node *, PlannerInfo *);
1540:	static _Bool simplify_EXISTS_query(PlannerInfo *, Query *);
749:	static _Bool subpath_is_hashable(Path *);
725:	static _Bool subplan_is_hashable(Plan *);
805:	static _Bool test_opexpr_is_hashable(OpExpr *, List *);
774:	static _Bool testexpr_is_hashable(Node *, List *);

File subtrans.c:
211:	void BootStrapSUBTRANS(void);
284:	void CheckPointSUBTRANS(void);
308:	void ExtendSUBTRANS(TransactionId);
191:	void SUBTRANSShmemInit(void);
185:	Size SUBTRANSShmemSize(void);
249:	void StartupSUBTRANS(TransactionId);
109:	TransactionId SubTransGetParent(TransactionId);
150:	TransactionId SubTransGetTopmostTransaction(TransactionId);
74:	void SubTransSetParent(TransactionId, TransactionId);
338:	void TruncateSUBTRANS(TransactionId);
362:	static _Bool SubTransPagePrecedes(int, int);
236:	static int ZeroSUBTRANSPage(int);

File superuser.c:
46:	_Bool superuser(void);
56:	_Bool superuser_arg(Oid);
103:	static void RoleidCallback(Datum, int, uint32);

File svc.c:
397:	void __GI_svc_getreq(int);
458:	void __GI_svc_getreq_common(const int);
427:	void __GI_svc_getreq_poll(struct pollfd *, int);
408:	void __GI_svc_getreqset(fd_set *);
182:	bool_t __GI_svc_register(SVCXPRT *, rpcprog_t, rpcvers_t, void (*)(struct svc_req *, SVCXPRT *), rpcproc_t);
252:	bool_t __GI_svc_sendreply(SVCXPRT *, xdrproc_t, caddr_t);
226:	void __GI_svc_unregister(rpcprog_t, rpcvers_t);
327:	void __GI_svcerr_auth(SVCXPRT *, enum auth_stat);
291:	void __GI_svcerr_decode(SVCXPRT *);
273:	void __GI_svcerr_noproc(SVCXPRT *);
349:	void __GI_svcerr_noprog(SVCXPRT *);
363:	void __GI_svcerr_progvers(SVCXPRT *, rpcvers_t, rpcvers_t);
309:	void __GI_svcerr_systemerr(SVCXPRT *);
341:	void __GI_svcerr_weakauth(SVCXPRT *);
86:	void __GI_xprt_register(SVCXPRT *);
133:	void __GI_xprt_unregister(SVCXPRT *);
565:	void __rpc_thread_svc_cleanup(void);
554:	void __svc_accept_failed(void);

File svc_auth.c:
96:	enum auth_stat __GI__authenticate(struct svc_req *, struct rpc_msg *);
112:	static enum auth_stat _svcauth_null(struct svc_req *, struct rpc_msg *);

File svc_authux.c:
144:	enum auth_stat _svcauth_short(struct svc_req *, struct rpc_msg *);
48:	enum auth_stat _svcauth_unix(struct svc_req *, struct rpc_msg *);

File svc_raw.c:
71:	SVCXPRT *__GI_svcraw_create(void);
153:	static void svcraw_destroy(SVCXPRT *);
140:	static bool_t svcraw_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
130:	static bool_t svcraw_getargs(SVCXPRT *, xdrproc_t, caddr_t);
97:	static bool_t svcraw_recv(SVCXPRT *, struct rpc_msg *);
113:	static bool_t svcraw_reply(SVCXPRT *, struct rpc_msg *);
91:	static enum xprt_stat svcraw_stat(SVCXPRT *);

File svc_run.c:
44:	void __GI_svc_exit(void);
53:	void __GI_svc_run(void);

File svc_simple.c:
63:	int __registerrpc(u_long, u_long, u_long, char *(*)(char *), xdrproc_t, xdrproc_t);
122:	static void universal(struct svc_req *, SVCXPRT *);

File svc_tcp.c:
216:	SVCXPRT *__GI_svcfd_create(int, u_int, u_int);
153:	SVCXPRT *__GI_svctcp_create(int, u_int, u_int);
313:	static int readtcp(char *, char *, int);
253:	static bool_t rendezvous_request(SVCXPRT *, struct rpc_msg *);
280:	static enum xprt_stat rendezvous_stat(SVCXPRT *);
286:	static void svctcp_destroy(SVCXPRT *);
408:	static bool_t svctcp_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
401:	static bool_t svctcp_getargs(SVCXPRT *, xdrproc_t, caddr_t);
384:	static bool_t svctcp_recv(SVCXPRT *, struct rpc_msg *);
99:	static void svctcp_rendezvous_abort(void);
417:	static bool_t svctcp_reply(SVCXPRT *, struct rpc_msg *);
371:	static enum xprt_stat svctcp_stat(SVCXPRT *);
354:	static int writetcp(char *, char *, int);

File svc_udp.c:
122:	SVCXPRT *__GI_svcudp_bufcreate(int, u_int, u_int);
207:	SVCXPRT *__GI_svcudp_create(int);
474:	int __GI_svcudp_enablecache(SVCXPRT *, u_long);
387:	static void svcudp_destroy(SVCXPRT *);
378:	static bool_t svcudp_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
371:	static bool_t svcudp_getargs(SVCXPRT *, xdrproc_t, caddr_t);
225:	static bool_t svcudp_recv(SVCXPRT *, struct rpc_msg *);
327:	static bool_t svcudp_reply(SVCXPRT *, struct rpc_msg *);
218:	static enum xprt_stat svcudp_stat(SVCXPRT *);

File svc_unix.c:
151:	SVCXPRT *__GI_svcunix_create(int, u_int, u_int, char *);
209:	SVCXPRT *__GI_svcunixfd_create(int, u_int, u_int);
412:	static int readunix(char *, char *, int);
246:	static bool_t rendezvous_request(SVCXPRT *, struct rpc_msg *);
276:	static enum xprt_stat rendezvous_stat(SVCXPRT *);
282:	static void svcunix_destroy(SVCXPRT *);
513:	static bool_t svcunix_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
506:	static bool_t svcunix_getargs(SVCXPRT *, xdrproc_t, caddr_t);
483:	static bool_t svcunix_recv(SVCXPRT *, struct rpc_msg *);
99:	static void svcunix_rendezvous_abort(void);
522:	static bool_t svcunix_reply(SVCXPRT *, struct rpc_msg *);
470:	static enum xprt_stat svcunix_stat(SVCXPRT *);
453:	static int writeunix(char *, char *, int);

File svcauth_des.c:
501:	int __GI_authdes_getucred(const struct authdes_cred *, uid_t *, gid_t *, short *, gid_t *);
106:	enum auth_stat _svcauth_des(struct svc_req *, struct rpc_msg *);

File swab.c:
21:	void swab(const void *, void *, ssize_t);

File swprintf.c:
25:	int __swprintf(wchar_t *, size_t, const wchar_t *, ...);

File swprintf_chk.c:
25:	int __swprintf_chk(wchar_t *, size_t, int, size_t, const wchar_t *, ...);

File swscanf.c:
29:	int __swscanf(const wchar_t *, const wchar_t *, ...);

File sync.c:
636:	void EnableSyncRequestForwarding(void);
130:	void InitSync(void);
294:	void ProcessSyncRequests(void);
588:	_Bool RegisterSyncRequest(const FileTag *, SyncRequestType, _Bool);
495:	void RememberSyncRequest(const FileTag *, SyncRequestType);
209:	void SyncPostCheckpoint(void);
184:	void SyncPreCheckpoint(void);

File syncrep.c:
382:	void SyncRepCleanupAtProcExit(void);
725:	int SyncRepGetCandidateStandbys(SyncRepStandbyData **);
411:	void SyncRepInitConfig(void);
440:	void SyncRepReleaseWaiters(void);
947:	void SyncRepUpdateSyncStandbysDefined(void);
148:	void SyncRepWaitForLSN(XLogRecPtr, _Bool);
1086:	void assign_synchronous_commit(int, void *);
1080:	void assign_synchronous_standby_names(const char *, void *);
1023:	_Bool check_synchronous_standby_names(char **, void **, GucSource);
372:	static void SyncRepCancelWait(void);
659:	static void SyncRepGetNthLatestSyncRecPtr(XLogRecPtr *, XLogRecPtr *, XLogRecPtr *, SyncRepStandbyData *, int, uint8);
626:	static void SyncRepGetOldestSyncRecPtr(XLogRecPtr *, XLogRecPtr *, XLogRecPtr *, SyncRepStandbyData *, int);
831:	static int SyncRepGetStandbyPriority(void);
552:	static _Bool SyncRepGetSyncRecPtr(XLogRecPtr *, XLogRecPtr *, XLogRecPtr *, _Bool *);
339:	static void SyncRepQueueInsert(int);
878:	static int SyncRepWakeQueue(_Bool, int);
704:	static int cmp_lsn(const void *, const void *);
804:	static int standby_priority_comparator(const void *, const void *);

File syncrep_gram.c:
1111:	int syncrep_yyparse(void);
1082:	static void yydestruct(const char *, int, YYSTYPE *);

File syncrep_gram.y:
81:	static SyncRepConfigData *create_syncrep_config(const char *, List *, uint8);

File syncrep_scanner.c:
1624:	YY_BUFFER_STATE syncrep_yy_create_buffer(FILE *, int);
1652:	void syncrep_yy_delete_buffer(YY_BUFFER_STATE);
1699:	void syncrep_yy_flush_buffer(YY_BUFFER_STATE);
1826:	YY_BUFFER_STATE syncrep_yy_scan_buffer(char *, yy_size_t);
1876:	YY_BUFFER_STATE syncrep_yy_scan_bytes(const char *, int);
1863:	YY_BUFFER_STATE syncrep_yy_scan_string(const char *);
1579:	void syncrep_yy_switch_to_buffer(YY_BUFFER_STATE);
2088:	void *syncrep_yyalloc(yy_size_t);
2106:	void syncrep_yyfree(void *);
2003:	int syncrep_yyget_debug(void);
1947:	FILE *syncrep_yyget_in(void);
1963:	int syncrep_yyget_leng(void);
1938:	int syncrep_yyget_lineno(void);
1955:	FILE *syncrep_yyget_out(void);
1972:	char *syncrep_yyget_text(void);
950:	int syncrep_yylex(void);
2042:	int syncrep_yylex_destroy(void);
1758:	void syncrep_yypop_buffer_state(void);
1728:	void syncrep_yypush_buffer_state(YY_BUFFER_STATE);
2093:	void *syncrep_yyrealloc(void *, yy_size_t);
1562:	void syncrep_yyrestart(FILE *);
2008:	void syncrep_yyset_debug(int);
1993:	void syncrep_yyset_in(FILE *);
1981:	void syncrep_yyset_lineno(int);
1998:	void syncrep_yyset_out(FILE *);
1671:	static void syncrep_yy_init_buffer(YY_BUFFER_STATE, FILE *);
1610:	static void syncrep_yy_load_buffer_state(void);
1777:	static void syncrep_yyensure_buffer_stack(void);
1910:	static void yy_fatal_error(const char *);
1286:	static int yy_get_next_buffer(void);
1424:	static yy_state_type yy_get_previous_state(void);
2013:	static int yy_init_globals(void);
1456:	static yy_state_type yy_try_NUL_trans(yy_state_type);

File syncrep_scanner.l:
159:	void syncrep_scanner_finish(void);
135:	void syncrep_scanner_init(const char *);
121:	void syncrep_yyerror(const char *);
25:	static void fprintf_to_ereport(const char *, const char *);

File syncscan.c:
135:	void SyncScanShmemInit(void);
126:	Size SyncScanShmemSize(void);
253:	BlockNumber ss_get_location(Relation, BlockNumber);
288:	void ss_report_location(Relation, BlockNumber);
191:	static BlockNumber ss_search(RelFileNode, BlockNumber, _Bool);

File syscache.c:
1423:	uint32 GetSysCacheHashValue(int, Datum, Datum, Datum, Datum);
1236:	Oid GetSysCacheOid(int, AttrNumber, Datum, Datum, Datum, Datum);
1021:	void InitCatalogCache(void);
1086:	void InitCatalogCachePhase2(void);
1507:	_Bool RelationHasSysCache(Oid);
1484:	_Bool RelationInvalidatesSnapshotsOnly(Oid);
1532:	_Bool RelationSupportsSysCache(Oid);
1175:	void ReleaseSysCache(HeapTuple);
1114:	HeapTuple SearchSysCache(int, Datum, Datum, Datum, Datum);
1127:	HeapTuple SearchSysCache1(int, Datum);
1138:	HeapTuple SearchSysCache2(int, Datum, Datum);
1149:	HeapTuple SearchSysCache3(int, Datum, Datum, Datum);
1160:	HeapTuple SearchSysCache4(int, Datum, Datum, Datum, Datum);
1268:	HeapTuple SearchSysCacheAttName(Oid, const char *);
1331:	HeapTuple SearchSysCacheAttNum(Oid, int16);
1189:	HeapTuple SearchSysCacheCopy(int, Datum, Datum, Datum, Datum);
1291:	HeapTuple SearchSysCacheCopyAttName(Oid, const char *);
1354:	HeapTuple SearchSysCacheCopyAttNum(Oid, int16);
1213:	_Bool SearchSysCacheExists(int, Datum, Datum, Datum, Datum);
1310:	_Bool SearchSysCacheExistsAttName(Oid, const char *);
1440:	struct catclist *SearchSysCacheList(int, int, Datum, Datum, Datum);
1388:	Datum SysCacheGetAttr(int, HeapTuple, AttrNumber, _Bool *);
1460:	void SysCacheInvalidate(int, uint32);
1557:	static int oid_compare(const void *, const void *);

File syslogger.c:
1537:	_Bool CheckLogrotateSignal(void);
1551:	void RemoveLogrotateSignalFiles(void);
540:	int SysLogger_Start(void);
1079:	void write_syslogger_file(const char *, int, int);
156:	static void SysLoggerMain(int, char **);
1028:	static void flush_pipe_input(char *, int *);
1389:	static char *logfile_getname(pg_time_t, const char *);
1197:	static FILE *logfile_open(const char *, const char *, _Bool);
1237:	static void logfile_rotate(_Bool, int);
877:	static void process_pipe_input(char *, int *);
1419:	static void set_next_rotation_time(void);
1558:	static void sigUsr1Handler(int);
1454:	static void update_metainfo_datafile(void);

File system.c:
68:	Datum tsm_system_handler(FunctionCallInfo);
140:	static void system_beginsamplescan(SampleScanState *, Datum *, int, uint32);
131:	static void system_initsamplescan(SampleScanState *, int);
179:	static BlockNumber system_nextsampleblock(SampleScanState *, BlockNumber);
237:	static OffsetNumber system_nextsampletuple(SampleScanState *, BlockNumber, OffsetNumber);
89:	static void system_samplescangetsamplesize(PlannerInfo *, RelOptInfo *, List *, BlockNumber *, double *);

File table.c:
167:	void table_close(Relation, LOCKMODE);
39:	Relation table_open(Oid, LOCKMODE);
102:	Relation table_openrv(const RangeVar *, LOCKMODE);
132:	Relation table_openrv_extended(const RangeVar *, LOCKMODE, _Bool);
69:	Relation try_table_open(Oid, LOCKMODE);

File tableam.c:
301:	void simple_table_tuple_delete(Relation, ItemPointer, Snapshot);
287:	void simple_table_tuple_insert(Relation, TupleTableSlot *);
346:	void simple_table_tuple_update(Relation, ItemPointer, TupleTableSlot *, Snapshot, _Bool *);
112:	TableScanDesc table_beginscan_catalog(Relation, int, struct ScanKeyData *);
175:	TableScanDesc table_beginscan_parallel(Relation, ParallelTableScanDesc);
394:	Size table_block_parallelscan_estimate(Relation);
400:	Size table_block_parallelscan_initialize(Relation, ParallelTableScanDesc);
503:	BlockNumber table_block_parallelscan_nextpage(Relation, ParallelBlockTableScanWorker, ParallelBlockTableScanDesc);
418:	void table_block_parallelscan_reinitialize(Relation, ParallelTableScanDesc);
433:	void table_block_parallelscan_startblock_init(Relation, ParallelBlockTableScanWorker, ParallelBlockTableScanDesc);
665:	void table_block_relation_estimate_size(Relation, int32 *, BlockNumber *, double *, double *, Size, Size);
628:	uint64 table_block_relation_size(Relation, ForkNumber);
219:	_Bool table_index_fetch_tuple_check(Relation, ItemPointer, Snapshot, _Bool *);
140:	Size table_parallelscan_estimate(Relation, Snapshot);
155:	void table_parallelscan_initialize(Relation, ParallelTableScanDesc, Snapshot);
124:	void table_scan_update_snapshot(TableScanDesc, Snapshot);
58:	const TupleTableSlotOps *table_slot_callbacks(Relation);
91:	TupleTableSlot *table_slot_create(Relation, List **);
246:	void table_tuple_get_latest_tid(TableScanDesc, ItemPointer);

File tableamapi.c:
34:	const TableAmRoutine *GetTableAmRoutine(Oid);
111:	_Bool check_default_table_access_method(char **, void **, GucSource);

File tablecmds.c:
13231:	void ATExecChangeOwner(Oid, Oid, _Bool, LOCKMODE);
15991:	void AlterRelationNamespaceInternal(Relation, Oid, Oid, Oid, _Bool, ObjectAddresses *);
4055:	void AlterTable(AlterTableStmt *, LOCKMODE, AlterTableUtilityContext *);
4129:	LOCKMODE AlterTableGetLockLevel(List *);
4084:	void AlterTableInternal(Oid, List *, _Bool);
3995:	Oid AlterTableLookupRelation(AlterTableStmt *, LOCKMODE);
14010:	Oid AlterTableMoveAll(AlterTableMoveAllStmt *);
15881:	ObjectAddress AlterTableNamespace(AlterObjectSchemaStmt *, Oid *);
15952:	void AlterTableNamespaceInternal(Relation, Oid, Oid, ObjectAddresses *);
16382:	void AtEOSubXact_on_commit_actions(_Bool, SubTransactionId, SubTransactionId);
16350:	void AtEOXact_on_commit_actions(_Bool);
3253:	_Bool CheckRelationTableSpaceMove(Relation, Oid);
3967:	void CheckTableNotInUse(Relation, const char *);
633:	ObjectAddress DefineRelation(CreateStmt *, char, Oid, ObjectAddress *, const char *);
1636:	void ExecuteTruncate(TruncateStmt *);
1760:	void ExecuteTruncateGuts(List *, List *, List *, DropBehavior, _Bool);
16960:	_Bool PartConstraintImpliedByRelConstraint(Relation, List *);
16250:	void PreCommit_on_commit_actions(void);
16473:	void RangeVarCallbackOwnsRelation(const RangeVar *, Oid, Oid, void *);
16417:	void RangeVarCallbackOwnsTable(const RangeVar *, Oid, Oid, void *);
1313:	void RemoveRelations(DropStmt *);
3709:	ObjectAddress RenameConstraint(RenameStmt *);
3760:	ObjectAddress RenameRelation(RenameStmt *);
3824:	void RenameRelationInternal(Oid, const char *, _Bool, _Bool);
3914:	void ResetRelRewrite(Oid);
3212:	void SetRelationHasSubclass(Oid, _Bool);
3310:	void SetRelationTableSpace(Relation, Oid, Oid);
6433:	void check_of_type(HeapTuple);
6266:	void find_composite_type_dependencies(Oid, Relation, const char *);
16191:	void register_on_commit_action(Oid, OnCommitAction);
16227:	void remove_on_commit_action(Oid);
3565:	ObjectAddress renameatt(RenameStmt *);
8750:	static ObjectAddress ATAddCheckConstraint(List **, AlteredTableInfo *, Relation, Constraint *, _Bool, _Bool, _Bool, LOCKMODE);
8887:	static ObjectAddress ATAddForeignKeyConstraint(List **, AlteredTableInfo *, Relation, Constraint *, _Bool, _Bool, LOCKMODE);
6191:	static void ATCheckPartitionsNotInUse(Relation, LOCKMODE);
11923:	static _Bool ATColumnChangeRequiresRewrite(Node *, AttrNumber);
4399:	static void ATController(AlterTableStmt *, Relation, List *, _Bool, LOCKMODE, AlterTableUtilityContext *);
18681:	static void ATDetachCheckNoForeignKeyRefs(Relation);
6500:	static ObjectAddress ATExecAddColumn(List **, AlteredTableInfo *, Relation, AlterTableCmd **, _Bool, _Bool, LOCKMODE, int, AlterTableUtilityContext *);
8635:	static ObjectAddress ATExecAddConstraint(List **, AlteredTableInfo *, Relation, Constraint *, _Bool, _Bool, LOCKMODE);
7497:	static ObjectAddress ATExecAddIdentity(Relation, const char *, Node *, LOCKMODE);
8460:	static ObjectAddress ATExecAddIndex(AlteredTableInfo *, Relation, IndexStmt *, _Bool, LOCKMODE);
8543:	static ObjectAddress ATExecAddIndexConstraint(AlteredTableInfo *, Relation, IndexStmt *, LOCKMODE);
14281:	static ObjectAddress ATExecAddInherit(Relation, RangeVar *, LOCKMODE);
15165:	static ObjectAddress ATExecAddOf(Relation, const TypeName *, LOCKMODE);
8522:	static ObjectAddress ATExecAddStatistics(AlteredTableInfo *, Relation, CreateStatsStmt *, _Bool, LOCKMODE);
13114:	static ObjectAddress ATExecAlterColumnGenericOptions(Relation, const char *, List *, LOCKMODE);
11970:	static ObjectAddress ATExecAlterColumnType(AlteredTableInfo *, Relation, AlterTableCmd *, LOCKMODE);
10428:	static _Bool ATExecAlterConstrRecurse(Constraint *, Relation, Relation, Relation, HeapTuple, List **, LOCKMODE);
10291:	static ObjectAddress ATExecAlterConstraint(Relation, AlterTableCmd *, _Bool, _Bool, LOCKMODE);
17143:	static ObjectAddress ATExecAttachPartition(List **, Relation, PartitionCmd *, AlterTableUtilityContext *);
18357:	static ObjectAddress ATExecAttachPartitionIdx(List **, Relation, RangeVar *);
7321:	static void ATExecCheckNotNull(AlteredTableInfo *, Relation, const char *, LOCKMODE);
13603:	static ObjectAddress ATExecClusterOn(Relation, const char *, LOCKMODE);
4865:	static void ATExecCmd(List **, AlteredTableInfo *, AlterTableCmd *, LOCKMODE, int, AlterTableUtilityContext *);
7387:	static ObjectAddress ATExecColumnDefault(Relation, const char *, Node *, LOCKMODE);
7468:	static ObjectAddress ATExecCookedColumnDefault(Relation, AttrNumber, Node *);
17788:	static ObjectAddress ATExecDetachPartition(List **, AlteredTableInfo *, Relation, RangeVar *, _Bool);
18162:	static ObjectAddress ATExecDetachPartitionFinalize(Relation, RangeVar *);
13635:	static void ATExecDropCluster(Relation, LOCKMODE);
8263:	static ObjectAddress ATExecDropColumn(List **, Relation, const char *, DropBehavior, _Bool, _Bool, _Bool, LOCKMODE, ObjectAddresses *);
11390:	static void ATExecDropConstraint(Relation, const char *, DropBehavior, _Bool, _Bool, _Bool, LOCKMODE);
7771:	static ObjectAddress ATExecDropExpression(Relation, const char *, _Bool, LOCKMODE);
7651:	static ObjectAddress ATExecDropIdentity(Relation, const char *, _Bool, LOCKMODE);
14817:	static ObjectAddress ATExecDropInherit(Relation, RangeVar *, LOCKMODE);
7032:	static ObjectAddress ATExecDropNotNull(Relation, const char *, LOCKMODE);
15307:	static void ATExecDropOf(Relation, LOCKMODE);
14245:	static void ATExecEnableDisableRule(Relation, const char *, char, LOCKMODE);
14231:	static void ATExecEnableDisableTrigger(Relation, const char *, char, _Bool, _Bool, LOCKMODE);
15574:	static void ATExecForceNoForceRowSecurity(Relation, _Bool);
15600:	static void ATExecGenericOptions(Relation, List *);
15438:	static void ATExecReplicaIdentity(Relation, ReplicaIdentityStmt *, LOCKMODE);
15680:	static ObjectAddress ATExecSetCompression(AlteredTableInfo *, Relation, const char *, Node *, LOCKMODE);
7569:	static ObjectAddress ATExecSetIdentity(Relation, const char *, Node *, LOCKMODE);
7239:	static ObjectAddress ATExecSetNotNull(AlteredTableInfo *, Relation, const char *, LOCKMODE);
7998:	static ObjectAddress ATExecSetOptions(Relation, const char *, Node *, _Bool, LOCKMODE);
13674:	static void ATExecSetRelOptions(Relation, List *, AlterTableType, LOCKMODE);
15547:	static void ATExecSetRowSecurity(Relation, _Bool);
7888:	static ObjectAddress ATExecSetStatistics(Relation, const char *, int16, Node *, LOCKMODE);
8140:	static ObjectAddress ATExecSetStorage(Relation, const char *, Node *, LOCKMODE);
13876:	static void ATExecSetTableSpace(Oid, Oid, LOCKMODE);
13971:	static void ATExecSetTableSpaceNoStorage(Relation, Oid);
10576:	static ObjectAddress ATExecValidateConstraint(List **, Relation, char *, _Bool, _Bool, LOCKMODE);
5981:	static AlteredTableInfo *ATGetQueueEntry(List **, Relation);
5221:	static AlterTableCmd *ATParseTransformCmd(List **, AlteredTableInfo *, Relation, AlterTableCmd *, _Bool, LOCKMODE, int, AlterTableUtilityContext *);
12615:	static void ATPostAlterTypeCleanup(List **, AlteredTableInfo *, LOCKMODE);
12783:	static void ATPostAlterTypeParse(Oid, Oid, Oid, char *, List **, LOCKMODE, _Bool);
6476:	static void ATPrepAddColumn(List **, Relation, _Bool, _Bool, _Bool, AlterTableCmd *, LOCKMODE, AlterTableUtilityContext *);
14259:	static void ATPrepAddInherit(Relation);
11643:	static void ATPrepAlterColumnType(List **, AlteredTableInfo *, Relation, _Bool, _Bool, AlterTableCmd *, LOCKMODE, AlterTableUtilityContext *);
15762:	static _Bool ATPrepChangePersistence(Relation, _Bool);
4434:	static void ATPrepCmd(List **, Relation, AlterTableCmd *, _Bool, _Bool, LOCKMODE, AlterTableUtilityContext *);
8235:	static void ATPrepDropColumn(List **, Relation, _Bool, _Bool, AlterTableCmd *, LOCKMODE, AlterTableUtilityContext *);
7725:	static void ATPrepDropExpression(Relation, AlterTableCmd *, _Bool, _Bool, LOCKMODE);
7008:	static void ATPrepDropNotNull(Relation, _Bool, _Bool);
7170:	static void ATPrepSetNotNull(List **, Relation, AlterTableCmd *, _Bool, _Bool, LOCKMODE, AlterTableUtilityContext *);
13644:	static void ATPrepSetTableSpace(AlteredTableInfo *, Relation, const char *, LOCKMODE);
4790:	static void ATRewriteCatalogs(List **, LOCKMODE, AlterTableUtilityContext *);
5605:	static void ATRewriteTable(AlteredTableInfo *, Oid, LOCKMODE);
5356:	static void ATRewriteTables(AlterTableStmt *, List **, LOCKMODE, AlterTableUtilityContext *);
6019:	static void ATSimplePermissions(Relation, int);
6146:	static void ATSimpleRecursion(List **, Relation, AlterTableCmd *, _Bool, LOCKMODE, AlterTableUtilityContext *);
6221:	static void ATTypedTableRecursion(List **, Relation, AlterTableCmd *, LOCKMODE, AlterTableUtilityContext *);
6075:	static void ATWrongRelkindError(Relation, int);
16061:	static void AlterIndexNamespaces(Relation, Relation, Oid, Oid, ObjectAddresses *);
16106:	static void AlterSeqNamespaces(Relation, Relation, Oid, Oid, ObjectAddresses *, LOCKMODE);
17449:	static void AttachPartitionEnsureIndexes(Relation, Relation);
8708:	static char *ChooseForeignKeyConstraintNameAddition(List *);
9758:	static void CloneFkReferenced(Relation, Relation);
9930:	static void CloneFkReferencing(List **, Relation, Relation);
9727:	static void CloneForeignKeyConstraints(List **, Relation, Relation);
17622:	static void CloneRowTriggersToPartition(Relation, Relation);
16703:	static void ComputePartitionAttrs(ParseState *, Relation, List *, AttrNumber *, List **, Oid *, Oid *, char);
17013:	static _Bool ConstraintImpliedByRelConstraint(Relation, List *, List *);
11196:	static void CreateFKCheckTrigger(Oid, Oid, Constraint *, Oid, Oid, _Bool);
14393:	static void CreateInheritance(Relation, Relation);
18197:	static void DetachAddConstraintIfNeeded(List **, Relation);
17959:	static void DetachPartitionFinalize(Relation, Relation, _Bool, Oid);
18238:	static void DropClonedTriggersFromPartition(Oid);
1238:	static void DropErrorMsgNonExistent(RangeVar *, char, _Bool);
1286:	static void DropErrorMsgWrongType(const char *, char, char);
18731:	static char GetAttributeCompression(Oid, char *);
18628:	static List *GetParentedForeignKeyRefs(Relation);
14859:	static void MarkInheritDetached(Relation, Relation);
2291:	static List *MergeAttributes(List *, List *, char, _Bool, List **);
14516:	static void MergeAttributesIntoExisting(Relation, Relation);
3053:	static _Bool MergeCheckConstraint(List *, char *, Node *);
14687:	static void MergeConstraintsIntoExisting(Relation, Relation);
7350:	static _Bool NotNullImpliedByRelConstraints(Relation, Form_pg_attribute);
17070:	static void QueuePartitionConstraintValidation(List **, Relation, List *, _Bool);
16505:	static void RangeVarCallbackForAlterRelation(const RangeVar *, Oid, Oid, void *);
18303:	static void RangeVarCallbackForAttachIndex(const RangeVar *, Oid, Oid, void *);
1477:	static void RangeVarCallbackForDropRelation(const RangeVar *, Oid, Oid, void *);
3545:	static void RangeVarCallbackForRenameAttribute(const RangeVar *, Oid, Oid, void *);
16449:	static void RangeVarCallbackForTruncate(const RangeVar *, Oid, Oid, void *);
12999:	static void RebuildConstraintComment(AlteredTableInfo *, int, Oid, Relation, List *, const char *);
12479:	static void RememberClusterOnForRebuilding(Oid, AlteredTableInfo *);
12495:	static void RememberConstraintForRebuilding(Oid, AlteredTableInfo *);
12535:	static void RememberIndexForRebuilding(Oid, AlteredTableInfo *);
12464:	static void RememberReplicaIdentityForRebuilding(Oid, AlteredTableInfo *);
12586:	static void RememberStatisticsForRebuilding(Oid, AlteredTableInfo *);
14942:	static void RemoveInheritance(Relation, Relation, _Bool);
8077:	static void SetIndexStorageProperties(Relation, Relation, AttrNumber, _Bool, char, _Bool, char, LOCKMODE);
3091:	static void StoreCatalogInheritance(Oid, List *, _Bool);
3135:	static void StoreCatalogInheritance1(Oid, Oid, int32, Relation, _Bool);
13071:	static void TryReuseForeignKey(Oid, Constraint *);
13043:	static void TryReuseIndex(Oid, IndexStmt *);
9326:	static ObjectAddress addFkRecurseReferenced(List **, Constraint *, Relation, Relation, Oid, Oid, int, int16 *, int16 *, Oid *, Oid *, Oid *, _Bool);
9531:	static void addFkRecurseReferencing(List **, Constraint *, Relation, Relation, Oid, Oid, int, int16 *, int16 *, Oid *, Oid *, Oid *, _Bool, LOCKMODE);
6985:	static void add_column_collation_dependency(Oid, int32, Oid);
6967:	static void add_column_datatype_dependency(Oid, int32, Oid);
13469:	static void change_owner_fix_column_acls(Oid, Oid, Oid);
13534:	static void change_owner_recurse_to_sequences(Oid, Oid, LOCKMODE);
11076:	static void checkFkeyPermissions(Relation, int16 *, int);
6914:	static _Bool check_for_column_name_collision(Relation, const char *, _Bool);
14487:	static _Bool constraints_equivalent(HeapTuple, HeapTuple, TupleDesc);
11251:	static void createForeignKeyActionTriggers(Relation, Oid, Constraint *, Oid, Oid);
11374:	static void createForeignKeyCheckTriggers(Oid, Oid, Constraint *, Oid, Oid);
14462:	static char *decompile_conbin(HeapTuple, TupleDesc);
15113:	static void drop_parent_dependency(Oid, Oid, Oid, DependencyType);
3180:	static int findAttrByName(const char *, List *);
11047:	static CoercionPathType findFkeyCast(Oid, Oid, Oid *);
6384:	static List *find_typed_table_dependencies(Oid, const char *, DropBehavior);
14172:	static void index_copy_data(Relation, RelFileNode);
18511:	static void refuseDupeIndexAttach(Relation, Relation, Relation);
15351:	static void relation_mark_replica_identity(Relation, char, Oid, _Bool);
3603:	static ObjectAddress rename_constraint_internal(Oid, Oid, const char *, const char *, _Bool, _Bool, int);
3352:	static void renameatt_check(Oid, Form_pg_class, _Bool);
3400:	static AttrNumber renameatt_internal(Oid, const char *, const char *, _Bool, _Bool, int, DropBehavior);
2216:	static const char *storage_name(char);
10764:	static int transformColumnNameList(Oid, List *, int16 *, Oid *);
10906:	static Oid transformFkeyCheckAttrs(Relation, int, int16 *, Oid *);
10809:	static int transformFkeyGetPrimaryKey(Relation, Oid *, List **, int16 *, Oid *, Oid *);
16632:	static PartitionSpec *transformPartitionSpec(Relation, PartitionSpec *, char *);
2193:	static void truncate_check_activity(Relation);
2175:	static void truncate_check_perms(Oid, Form_pg_class);
2135:	static void truncate_check_rel(Oid, Form_pg_class);
10158:	static _Bool tryAttachPartitionForeignKey(ForeignKeyCacheInfo *, Oid, Oid, int, AttrNumber *, AttrNumber *, Oid *);
11105:	static void validateForeignKeyConstraint(char *, Relation, Relation, Oid, Oid);
18534:	static void validatePartitionedIndex(Relation, Relation);

File tablesample.c:
27:	TsmRoutine *GetTsmRoutine(Oid);

File tablespace.c:
1021:	Oid AlterTableSpaceOptions(AlterTableSpaceOptionsStmt *);
212:	Oid CreateTableSpace(CreateTableSpaceStmt *);
396:	void DropTableSpace(DropTableSpaceStmt *);
1149:	Oid GetDefaultTablespace(char, _Bool);
1337:	void PrepareTempTablespaces(void);
936:	ObjectAddress RenameTableSpace(const char *, const char *);
116:	void TablespaceCreateDbspace(Oid, Oid, _Bool);
1312:	void assign_temp_tablespaces(const char *, void *);
1097:	_Bool check_default_tablespace(char **, void **, GucSource);
1204:	_Bool check_temp_tablespaces(char **, void **, GucSource);
857:	_Bool directory_is_empty(const char *);
1478:	char *get_tablespace_name(Oid);
1432:	Oid get_tablespace_oid(const char *, _Bool);
887:	void remove_tablespace_symlink(const char *);
1517:	void tblspc_redo(XLogReaderState *);
573:	static void create_tablespace_directories(const char *, const Oid);
687:	static _Bool destroy_tablespace_directories(Oid, _Bool);

File tablesync.c:
923:	char *LogicalRepSyncTableStart(XLogRecPtr *);
908:	void ReplicationOriginNameForTablesync(Oid, Oid, char *, int);
895:	void ReplicationSlotNameForTablesync(Oid, Oid, char *, int);
264:	void invalidate_syncing_table_states(Datum, int, uint32);
590:	void process_syncing_tables(XLogRecPtr);
622:	static int copy_read_data(void *, int, int);
811:	static void copy_table(Relation);
697:	static void fetch_remote_table_info(char *, char *, LogicalRepRelation *);
127:	static void finish_sync_worker(void);
602:	static List *make_copy_attnamelist(LogicalRepRelMapEntry *);
358:	static void process_syncing_tables_for_apply(XLogRecPtr);
278:	static void process_syncing_tables_for_sync(XLogRecPtr);
167:	static _Bool wait_for_relation_state_change(Oid, char);
215:	static _Bool wait_for_worker_state_change(char);

File tar.c:
22:	void print_tar_number(char *, int, uint64);
58:	uint64 read_tar_number(const char *, int);
90:	int tarChecksum(char *);
114:	enum tarError tarCreateHeader(char *, const char *, const char *, off_t, mode_t, uid_t, gid_t, time_t);

File tblspcdesc.c:
21:	void tblspc_desc(StringInfo, XLogReaderState *);
41:	const char *tblspc_identify(uint8);

File tcgetsid.c:
26:	pid_t tcgetsid(int);

File tempnam.c:
29:	char *tempnam(const char *, const char *);

File textdomain.c:
64:	char *__textdomain(const char *);

File thrd_create.c:
22:	int thrd_create(thrd_t *, thrd_start_t, void *);

File thrd_current.c:
22:	thrd_t thrd_current(void);

File thrd_detach.c:
22:	int thrd_detach(thrd_t);

File thrd_equal.c:
22:	int thrd_equal(thrd_t, thrd_t);

File thrd_exit.c:
22:	void thrd_exit(int);

File thrd_join.c:
22:	int thrd_join(thrd_t, int *);

File thrd_sleep.c:
25:	int thrd_sleep(const struct timespec *, struct timespec *);

File thrd_yield.c:
22:	void thrd_yield(void);

File thread-freeres.c:
30:	void __libc_thread_freeres(void);

File thread.c:
65:	int pqGetpwuid(uid_t, struct passwd *, char *, size_t, struct passwd **);

File tid.c:
220:	Datum bttidcmp(FunctionCallInfo);
398:	Datum currtid_byrelname(FunctionCallInfo);
247:	Datum hashtid(FunctionCallInfo);
262:	Datum hashtidextended(FunctionCallInfo);
166:	Datum tideq(FunctionCallInfo);
211:	Datum tidge(FunctionCallInfo);
202:	Datum tidgt(FunctionCallInfo);
57:	Datum tidin(FunctionCallInfo);
229:	Datum tidlarger(FunctionCallInfo);
193:	Datum tidle(FunctionCallInfo);
184:	Datum tidlt(FunctionCallInfo);
175:	Datum tidne(FunctionCallInfo);
109:	Datum tidout(FunctionCallInfo);
129:	Datum tidrecv(FunctionCallInfo);
150:	Datum tidsend(FunctionCallInfo);
238:	Datum tidsmaller(FunctionCallInfo);
326:	static ItemPointer currtid_for_view(Relation, ItemPointer);
286:	static ItemPointer currtid_internal(Relation, ItemPointer);

File tidbitmap.c:
442:	void tbm_add_page(TIDBitmap *, BlockNumber);
376:	void tbm_add_tuples(TIDBitmap *, const ItemPointer, int, _Bool);
1464:	TBMSharedIterator *tbm_attach_shared_iterate(dsa_area *, dsa_pointer);
688:	TBMIterator *tbm_begin_iterate(TIDBitmap *);
1545:	long tbm_calculate_entries(double);
265:	TIDBitmap *tbm_create(long, dsa_area *);
1145:	void tbm_end_iterate(TBMIterator *);
1157:	void tbm_end_shared_iterate(TBMSharedIterator *);
321:	void tbm_free(TIDBitmap *);
340:	void tbm_free_shared_area(dsa_area *, dsa_pointer);
539:	void tbm_intersect(TIDBitmap *, const TIDBitmap *);
669:	_Bool tbm_is_empty(const TIDBitmap *);
970:	TBMIterateResult *tbm_iterate(TBMIterator *);
765:	dsa_pointer tbm_prepare_shared_iterate(TIDBitmap *);
1051:	TBMIterateResult *tbm_shared_iterate(TBMSharedIterator *);
457:	void tbm_union(TIDBitmap *, const TIDBitmap *);
1497:	static void *pagetable_allocate(pagetable_hash *, Size);
1525:	static void pagetable_free(pagetable_hash *, void *);
940:	static void tbm_advance_schunkbit(PagetableEntry *, int *);
1423:	static int tbm_comparator(const void *, const void *);
291:	static void tbm_create_pagetable(TIDBitmap *);
910:	static int tbm_extract_page_tuple(PagetableEntry *, TBMIterateResult *);
1168:	static const PagetableEntry *tbm_find_pageentry(const TIDBitmap *, BlockNumber);
1201:	static PagetableEntry *tbm_get_pageentry(TIDBitmap *, BlockNumber);
588:	static _Bool tbm_intersect_page(TIDBitmap *, PagetableEntry *, const TIDBitmap *);
1354:	static void tbm_lossify(TIDBitmap *);
1282:	static void tbm_mark_page_lossy(TIDBitmap *, BlockNumber);
1248:	static _Bool tbm_page_is_lossy(const TIDBitmap *, BlockNumber);
1441:	static int tbm_shared_comparator(const void *, const void *, void *);
480:	static void tbm_union_page(TIDBitmap *, const PagetableEntry *);

File tidpath.c:
459:	void create_tidscan_paths(PlannerInfo *, RelOptInfo *);
387:	static void BuildParameterizedTidPaths(PlannerInfo *, RelOptInfo *, List *);
76:	static _Bool IsBinaryTidClause(RestrictInfo *, RelOptInfo *);
56:	static _Bool IsCTIDVar(Var *, RelOptInfo *);
211:	static _Bool IsCurrentOfClause(RestrictInfo *, RelOptInfo *);
172:	static _Bool IsTidEqualAnyClause(PlannerInfo *, RestrictInfo *, RelOptInfo *);
130:	static _Bool IsTidEqualClause(RestrictInfo *, RelOptInfo *);
150:	static _Bool IsTidRangeClause(RestrictInfo *, RelOptInfo *);
239:	static List *TidQualFromRestrictInfo(PlannerInfo *, RestrictInfo *, RelOptInfo *);
276:	static List *TidQualFromRestrictInfoList(PlannerInfo *, List *, RelOptInfo *);
359:	static List *TidRangeQualFromRestrictInfoList(List *, RelOptInfo *);
442:	static _Bool ec_member_matches_ctid(PlannerInfo *, RelOptInfo *, EquivalenceClass *, EquivalenceMember *, void *);

File timegm.c:
30:	time_t timegm(struct tm *);

File timeline.c:
222:	_Bool existsTimeLineHistory(TimeLineID);
264:	TimeLineID findNewestTimeLine(TimeLineID);
76:	List *readTimeLineHistory(TimeLineID);
50:	void restoreTimeLineHistoryFiles(TimeLineID, TimeLineID);
534:	_Bool tliInHistory(TimeLineID, List *);
552:	TimeLineID tliOfPointInHistory(XLogRecPtr, List *);
580:	XLogRecPtr tliSwitchPoint(TimeLineID, List *, TimeLineID *);
304:	void writeTimeLineHistory(TimeLineID, TimeLineID, XLogRecPtr, char *);
467:	void writeTimeLineHistoryFile(TimeLineID, char *, int);

File timeout.c:
448:	void InitializeTimeouts(void);
482:	TimeoutId RegisterTimeout(TimeoutId, timeout_handler_proc);
700:	void disable_all_timeouts(_Bool);
634:	void disable_timeout(TimeoutId, _Bool);
667:	void disable_timeouts(const DisableTimeoutParams *, int);
537:	void enable_timeout_after(TimeoutId, int);
562:	void enable_timeout_at(TimeoutId, TimestampTz);
585:	void enable_timeouts(const EnableTimeoutParams *, int);
729:	_Bool get_timeout_active(TimeoutId);
776:	TimestampTz get_timeout_finish_time(TimeoutId);
742:	_Bool get_timeout_indicator(TimeoutId, _Bool);
762:	TimestampTz get_timeout_start_time(TimeoutId);
517:	void reschedule_timeouts(void);
157:	static void enable_timeout(TimeoutId, TimestampTz, TimestampTz);
95:	static int find_active_timeout(TimeoutId);
361:	static void handle_sig_alarm(int);
113:	static void insert_timeout(TimeoutId, int);
136:	static void remove_timeout_index(int);
207:	static void schedule_alarm(TimestampTz);

File timespec_get.c:
23:	int timespec_get(struct timespec *, int);

File timestamp.c:
394:	void AdjustTimestampForTypmod(Timestamp *, int32);
339:	_Bool AdjustTimestampForTypmodError(Timestamp *, int32, _Bool *);
1533:	void EncodeSpecialTimestamp(Timestamp, char *);
1580:	TimestampTz GetCurrentTimestamp(void);
2048:	void GetEpochTime(struct pg_tm *);
1598:	TimestampTz GetSQLCurrentTimestamp(int32);
1612:	Timestamp GetSQLLocalTimestamp(int32);
2070:	Timestamp SetEpochTimestamp(void);
1656:	void TimestampDifference(TimestampTz, TimestampTz, long *, int *);
1711:	_Bool TimestampDifferenceExceeds(TimestampTz, TimestampTz, int);
1693:	long TimestampDifferenceMilliseconds(TimestampTz, TimestampTz);
5496:	_Bool TimestampTimestampTzRequiresRewrite(void);
104:	int32 anytimestamp_typmod_check(_Bool, int32);
1556:	Datum clock_timestamp(FunctionCallInfo);
4432:	int date2isoweek(int, int, int);
4487:	int date2isoyear(int, int, int);
4544:	int date2isoyearday(int, int, int);
1795:	void dt2time(Timestamp, int *, int *, int *, fsec_t *);
5356:	Datum extract_interval(FunctionCallInfo);
4894:	Datum extract_timestamp(FunctionCallInfo);
5167:	Datum extract_timestamptz(FunctionCallInfo);
717:	Datum float8_timestamptz(FunctionCallInfo);
5745:	Datum generate_series_timestamp(FunctionCallInfo);
5825:	Datum generate_series_timestamptz(FunctionCallInfo);
3380:	Datum in_range_interval_interval(FunctionCallInfo);
3349:	Datum in_range_timestamp_interval(FunctionCallInfo);
3318:	Datum in_range_timestamptz_interval(FunctionCallInfo);
1966:	int interval2tm(Interval, struct pg_tm *, fsec_t *);
3422:	Datum interval_accum(FunctionCallInfo);
3506:	Datum interval_accum_inv(FunctionCallInfo);
3541:	Datum interval_avg(FunctionCallInfo);
2440:	Datum interval_cmp(FunctionCallInfo);
3457:	Datum interval_combine(FunctionCallInfo);
3266:	Datum interval_div(FunctionCallInfo);
2386:	Datum interval_eq(FunctionCallInfo);
2037:	Datum interval_finite(FunctionCallInfo);
2431:	Datum interval_ge(FunctionCallInfo);
2413:	Datum interval_gt(FunctionCallInfo);
2456:	Datum interval_hash(FunctionCallInfo);
2474:	Datum interval_hash_extended(FunctionCallInfo);
882:	Datum interval_in(FunctionCallInfo);
2801:	Datum interval_justify_days(FunctionCallInfo);
2766:	Datum interval_justify_hours(FunctionCallInfo);
2711:	Datum interval_justify_interval(FunctionCallInfo);
3091:	Datum interval_larger(FunctionCallInfo);
2422:	Datum interval_le(FunctionCallInfo);
2404:	Datum interval_lt(FunctionCallInfo);
3139:	Datum interval_mi(FunctionCallInfo);
3179:	Datum interval_mul(FunctionCallInfo);
2395:	Datum interval_ne(FunctionCallInfo);
958:	Datum interval_out(FunctionCallInfo);
5350:	Datum interval_part(FunctionCallInfo);
3105:	Datum interval_pl(FunctionCallInfo);
980:	Datum interval_recv(FunctionCallInfo);
1311:	Datum interval_scale(FunctionCallInfo);
1005:	Datum interval_send(FunctionCallInfo);
3076:	Datum interval_smaller(FunctionCallInfo);
1248:	Datum interval_support(FunctionCallInfo);
4277:	Datum interval_trunc(FunctionCallInfo);
3047:	Datum interval_um(FunctionCallInfo);
1030:	Datum intervaltypmodin(FunctionCallInfo);
1109:	Datum intervaltypmodout(FunctionCallInfo);
4401:	void isoweek2date(int, int *, int *, int *);
4381:	int isoweek2j(int, int);
4414:	void isoweekdate2date(int, int, int *, int *, int *);
1497:	Datum make_interval(FunctionCallInfo);
636:	Datum make_timestamp(FunctionCallInfo);
656:	Datum make_timestamptz(FunctionCallInfo);
677:	Datum make_timestamptz_at_timezone(FunctionCallInfo);
3256:	Datum mul_d_interval(FunctionCallInfo);
1544:	Datum now(FunctionCallInfo);
2494:	Datum overlaps_timestamp(FunctionCallInfo);
1568:	Datum pg_conf_load_time(FunctionCallInfo);
1562:	Datum pg_postmaster_start_time(FunctionCallInfo);
1550:	Datum statement_timestamp(FunctionCallInfo);
1732:	TimestampTz time_t_to_timestamptz(pg_time_t);
1626:	Datum timeofday(FunctionCallInfo);
5527:	TimestampTz timestamp2timestamptz_opt_overflow(Timestamp, int *);
1822:	int timestamp2tm(Timestamp, int *, struct pg_tm *, fsec_t *, const char **, pg_tz *);
3575:	Datum timestamp_age(FunctionCallInfo);
3821:	Datum timestamp_bin(FunctionCallInfo);
2150:	Datum timestamp_cmp(FunctionCallInfo);
2090:	int timestamp_cmp_internal(Timestamp, Timestamp);
2269:	Datum timestamp_cmp_timestamptz(FunctionCallInfo);
2194:	int32 timestamp_cmp_timestamptz_internal(Timestamp, TimestampTz);
2096:	Datum timestamp_eq(FunctionCallInfo);
2215:	Datum timestamp_eq_timestamptz(FunctionCallInfo);
2029:	Datum timestamp_finite(FunctionCallInfo);
2141:	Datum timestamp_ge(FunctionCallInfo);
2260:	Datum timestamp_ge_timestamptz(FunctionCallInfo);
2123:	Datum timestamp_gt(FunctionCallInfo);
2242:	Datum timestamp_gt_timestamptz(FunctionCallInfo);
2178:	Datum timestamp_hash(FunctionCallInfo);
2184:	Datum timestamp_hash_extended(FunctionCallInfo);
145:	Datum timestamp_in(FunctionCallInfo);
5459:	Datum timestamp_izone(FunctionCallInfo);
2634:	Datum timestamp_larger(FunctionCallInfo);
2132:	Datum timestamp_le(FunctionCallInfo);
2251:	Datum timestamp_le_timestamptz(FunctionCallInfo);
2114:	Datum timestamp_lt(FunctionCallInfo);
2233:	Datum timestamp_lt_timestamptz(FunctionCallInfo);
2649:	Datum timestamp_mi(FunctionCallInfo);
2920:	Datum timestamp_mi_interval(FunctionCallInfo);
2105:	Datum timestamp_ne(FunctionCallInfo);
2224:	Datum timestamp_ne_timestamptz(FunctionCallInfo);
208:	Datum timestamp_out(FunctionCallInfo);
4888:	Datum timestamp_part(FunctionCallInfo);
2841:	Datum timestamp_pl_interval(FunctionCallInfo);
234:	Datum timestamp_recv(FunctionCallInfo);
321:	Datum timestamp_scale(FunctionCallInfo);
267:	Datum timestamp_send(FunctionCallInfo);
2619:	Datum timestamp_smaller(FunctionCallInfo);
2169:	Datum timestamp_sortsupport(FunctionCallInfo);
301:	Datum timestamp_support(FunctionCallInfo);
5509:	Datum timestamp_timestamptz(FunctionCallInfo);
3870:	Datum timestamp_trunc(FunctionCallInfo);
5371:	Datum timestamp_zone(FunctionCallInfo);
278:	Datum timestamptypmodin(FunctionCallInfo);
286:	Datum timestamptypmodout(FunctionCallInfo);
3694:	Datum timestamptz_age(FunctionCallInfo);
4004:	Datum timestamptz_bin(FunctionCallInfo);
2332:	Datum timestamptz_cmp_timestamp(FunctionCallInfo);
2278:	Datum timestamptz_eq_timestamp(FunctionCallInfo);
2323:	Datum timestamptz_ge_timestamp(FunctionCallInfo);
2305:	Datum timestamptz_gt_timestamp(FunctionCallInfo);
403:	Datum timestamptz_in(FunctionCallInfo);
5712:	Datum timestamptz_izone(FunctionCallInfo);
2314:	Datum timestamptz_le_timestamp(FunctionCallInfo);
2296:	Datum timestamptz_lt_timestamp(FunctionCallInfo);
3030:	Datum timestamptz_mi_interval(FunctionCallInfo);
2287:	Datum timestamptz_ne_timestamp(FunctionCallInfo);
767:	Datum timestamptz_out(FunctionCallInfo);
5161:	Datum timestamptz_part(FunctionCallInfo);
2946:	Datum timestamptz_pl_interval(FunctionCallInfo);
795:	Datum timestamptz_recv(FunctionCallInfo);
861:	Datum timestamptz_scale(FunctionCallInfo);
829:	Datum timestamptz_send(FunctionCallInfo);
5588:	Datum timestamptz_timestamp(FunctionCallInfo);
1774:	const char *timestamptz_to_str(TimestampTz);
1754:	pg_time_t timestamptz_to_time_t(TimestampTz);
4200:	Datum timestamptz_trunc(FunctionCallInfo);
4218:	Datum timestamptz_trunc_zone(FunctionCallInfo);
5625:	Datum timestamptz_zone(FunctionCallInfo);
840:	Datum timestamptztypmodin(FunctionCallInfo);
848:	Datum timestamptztypmodout(FunctionCallInfo);
1994:	int tm2interval(struct pg_tm *, fsec_t, Interval *);
1918:	int tm2timestamp(struct pg_tm *, fsec_t, int *, Timestamp *);
1330:	static void AdjustIntervalForTypmod(Interval *, int32);
4561:	static float8 NonFiniteTimestampTzPart(int, int, char *, _Bool, _Bool);
83:	static int32 anytimestamp_typmodin(_Bool, ArrayType *);
126:	static char *anytimestamp_typmodout(_Bool, int32);
2016:	static Timestamp dt2local(Timestamp, int);
2377:	static int interval_cmp_internal(Interval *, Interval *);
2352:	static INT128 interval_cmp_value(const Interval *);
5177:	static Datum interval_part_common(FunctionCallInfo, _Bool);
1195:	static int intervaltypmodleastfield(int32);
554:	static Timestamp make_timestamp_internal(int, int, int, int, int, double);
470:	static int parse_sane_timezone(struct pg_tm *, text *);
2010:	static TimeOffset time2t(const int, const int, const int, const fsec_t);
5579:	static TimestampTz timestamp2timestamptz(Timestamp);
2160:	static int timestamp_fastcmp(Datum, Datum, SortSupport);
4630:	static Datum timestamp_part_common(FunctionCallInfo, _Bool);
5596:	static Timestamp timestamptz2timestamp(TimestampTz);
4903:	static Datum timestamptz_part_common(FunctionCallInfo, _Bool);
4056:	static TimestampTz timestamptz_trunc_internal(text *, TimestampTz, pg_tz *);

File tlist.c:
695:	void add_column_to_pathtarget(PathTarget *, Expr *, Index);
741:	void add_new_column_to_pathtarget(PathTarget *, Expr *);
752:	void add_new_columns_to_pathtarget(PathTarget *, List *);
132:	List *add_to_flat_tlist(List *, List *);
774:	void apply_pathtarget_labeling_to_tlist(List *, PathTarget *);
318:	void apply_tlist_labeling(List *, List *);
657:	PathTarget *copy_pathtarget(PathTarget *);
186:	int count_nonjunk_tlist_entries(List *);
681:	PathTarget *create_empty_pathtarget(void);
489:	Oid *extract_grouping_collations(List *, List *);
514:	AttrNumber *extract_grouping_cols(List *, List *);
463:	Oid *extract_grouping_ops(List *);
379:	Node *get_sortgroupclause_expr(SortGroupClause *, List *);
367:	TargetEntry *get_sortgroupclause_tle(SortGroupClause *, List *);
392:	List *get_sortgrouplist_exprs(List *, List *);
422:	SortGroupClause *get_sortgroupref_clause(Index, List *);
443:	SortGroupClause *get_sortgroupref_clause_noerr(Index, List *);
345:	TargetEntry *get_sortgroupref_tle(Index, List *);
163:	List *get_tlist_exprs(List *, _Bool);
560:	_Bool grouping_is_hashable(List *);
540:	_Bool grouping_is_sortable(List *);
591:	PathTarget *make_pathtarget_from_tlist(List *);
624:	List *make_tlist_from_pathtarget(PathTarget *);
881:	void split_pathtarget_at_srfs(PlannerInfo *, PathTarget *, PathTarget *, List **, List **);
79:	TargetEntry *tlist_member(Expr *, List *);
282:	_Bool tlist_same_collations(List *, List *, _Bool);
248:	_Bool tlist_same_datatypes(List *, List *, _Bool);
218:	_Bool tlist_same_exprs(List *, List *);
1202:	static void add_sp_item_to_pathtarget(PathTarget *, split_pathtarget_item *);
1248:	static void add_sp_items_to_pathtarget(PathTarget *, List *);
1077:	static _Bool split_pathtarget_walker(Node *, split_pathtarget_context *);
102:	static TargetEntry *tlist_member_match_var(Var *, List *);

File tmpfile.c:
35:	FILE *__new_tmpfile(void);

File tmpnam.c:
27:	char *tmpnam(char *);

File tmpnam_r.c:
23:	char *tmpnam_r(char *);

File to_tsany.c:
49:	Datum get_current_ts_config(FunctionCallInfo);
392:	Datum json_string_to_tsvector(FunctionCallInfo);
379:	Datum json_string_to_tsvector_byid(FunctionCallInfo);
422:	Datum json_to_tsvector(FunctionCallInfo);
406:	Datum json_to_tsvector_byid(FunctionCallInfo);
313:	Datum jsonb_string_to_tsvector(FunctionCallInfo);
300:	Datum jsonb_string_to_tsvector_byid(FunctionCallInfo);
343:	Datum jsonb_to_tsvector(FunctionCallInfo);
327:	Datum jsonb_to_tsvector_byid(FunctionCallInfo);
166:	TSVector make_tsvector(ParsedText *);
677:	Datum phraseto_tsquery(FunctionCallInfo);
653:	Datum phraseto_tsquery_byid(FunctionCallInfo);
640:	Datum plainto_tsquery(FunctionCallInfo);
616:	Datum plainto_tsquery_byid(FunctionCallInfo);
604:	Datum to_tsquery(FunctionCallInfo);
579:	Datum to_tsquery_byid(FunctionCallInfo);
269:	Datum to_tsvector(FunctionCallInfo);
244:	Datum to_tsvector_byid(FunctionCallInfo);
714:	Datum websearch_to_tsquery(FunctionCallInfo);
689:	Datum websearch_to_tsquery_byid(FunctionCallInfo);
442:	static void add_to_tsvector(void *, char *, int);
58:	static int compareWORD(const void *, const void *);
363:	static TSVector json_to_tsvector_worker(Oid, text *, uint32);
284:	static TSVector jsonb_to_tsvector_worker(Oid, Jsonb *, uint32);
491:	static void pushval_morph(Datum, TSQueryParserState, char *, int, int16, _Bool);
78:	static int uniqueWORD(ParsedWord *, int32);

File toast_compression.c:
287:	char CompressionNameToMethod(const char *);
306:	const char *GetCompressionMethodName(char);
141:	struct varlena *lz4_compress_datum(const struct varlena *);
184:	struct varlena *lz4_decompress_datum(const struct varlena *);
217:	struct varlena *lz4_decompress_datum_slice(const struct varlena *, int32);
42:	struct varlena *pglz_compress_datum(const struct varlena *);
84:	struct varlena *pglz_decompress_datum(const struct varlena *);
111:	struct varlena *pglz_decompress_datum_slice(const struct varlena *, int32);
256:	ToastCompressionId toast_get_compression_id(struct varlena *);

File toast_helper.c:
318:	void toast_delete_external(Relation, Datum *, _Bool *, _Bool);
275:	void toast_tuple_cleanup(ToastTupleContext *);
256:	void toast_tuple_externalize(ToastTupleContext *, int, int);
181:	int toast_tuple_find_biggest_attribute(ToastTupleContext *, _Bool, _Bool);
41:	void toast_tuple_init(ToastTupleContext *);
227:	void toast_tuple_try_compression(ToastTupleContext *, int);

File toast_internals.c:
643:	void init_toast_snapshot(Snapshot);
624:	void toast_close_indexes(Relation *, int, LOCKMODE);
47:	Datum toast_compress_datum(Datum, char);
386:	void toast_delete_datum(Relation, Datum, _Bool);
531:	Oid toast_get_valid_index(Oid, LOCKMODE);
565:	int toast_open_indexes(Relation, LOCKMODE, Relation **, int *);
120:	Datum toast_save_datum(Relation, Datum, struct varlena *, int);
510:	static _Bool toastid_valueid_exists(Oid, Oid);
462:	static _Bool toastrel_valueid_exists(Relation, Oid);

File toasting.c:
60:	void AlterTableCreateToastTable(Oid, Datum, LOCKMODE);
100:	void BootstrapToastTable(char *, Oid, Oid);
66:	void NewHeapCreateToastTable(Oid, Datum, LOCKMODE, Oid);
73:	void NewRelationCreateToastTable(Oid, Datum);
80:	static void CheckAndCreateToastTable(Oid, Datum, LOCKMODE, _Bool, Oid);
131:	static _Bool create_toast_table(Relation, Oid, Oid, Datum, LOCKMODE, _Bool, Oid);
388:	static _Bool needs_toast_table(Relation);

File towctrans.c:
25:	wint_t __GI___towctrans(wint_t, wctrans_t);

File towctrans_l.c:
26:	wint_t __towctrans_l(wint_t, wctrans_t, locale_t);

File tpp.c:
43:	void __init_sched_fifo_prio(void);
160:	int __pthread_current_priority(void);
52:	int __pthread_tpp_change_priority(int, int);

File tqueue.c:
119:	DestReceiver *CreateTupleQueueDestReceiver(shm_mq_handle *);
139:	TupleQueueReader *CreateTupleQueueReader(shm_mq_handle *);
155:	void DestroyTupleQueueReader(TupleQueueReader *);
176:	MinimalTuple TupleQueueReaderNext(TupleQueueReader *, _Bool, _Bool *);
105:	static void tqueueDestroyReceiver(DestReceiver *);
54:	static _Bool tqueueReceiveSlot(TupleTableSlot *, DestReceiver *);
92:	static void tqueueShutdownReceiver(DestReceiver *);
83:	static void tqueueStartupReceiver(DestReceiver *, int, TupleDesc);

File transam.c:
295:	void TransactionIdAbortTree(TransactionId, int, TransactionId *);
277:	void TransactionIdAsyncCommitTree(TransactionId, int, TransactionId *, XLogRecPtr);
265:	void TransactionIdCommitTree(TransactionId, int, TransactionId *);
181:	_Bool TransactionIdDidAbort(TransactionId);
125:	_Bool TransactionIdDidCommit(TransactionId);
339:	_Bool TransactionIdFollows(TransactionId, TransactionId);
354:	_Bool TransactionIdFollowsOrEquals(TransactionId, TransactionId);
407:	XLogRecPtr TransactionIdGetCommitLSN(TransactionId);
243:	_Bool TransactionIdIsKnownCompleted(TransactionId);
370:	TransactionId TransactionIdLatest(TransactionId, int, const TransactionId *);
305:	_Bool TransactionIdPrecedes(TransactionId, TransactionId);
324:	_Bool TransactionIdPrecedesOrEquals(TransactionId, TransactionId);
52:	static XidStatus TransactionLogFetch(TransactionId);

File trigfuncs.c:
29:	Datum suppress_redundant_updates_trigger(FunctionCallInfo);

File trigger.c:
4584:	void AfterTriggerBeginQuery(void);
4859:	void AfterTriggerBeginSubXact(void);
4552:	void AfterTriggerBeginXact(void);
4604:	void AfterTriggerEndQuery(EState *);
4907:	void AfterTriggerEndSubXact(_Bool);
4811:	void AfterTriggerEndXact(_Bool);
4755:	void AfterTriggerFireDeferred(void);
5446:	_Bool AfterTriggerPendingOnRel(Oid);
5131:	void AfterTriggerSetState(ConstraintsSetStmt *);
1926:	TriggerDesc *CopyTriggerDesc(TriggerDesc *);
150:	ObjectAddress CreateTrigger(CreateTrigStmt *, const char *, Oid, Oid, Oid, Oid, Oid, Oid, Node *, _Bool, _Bool);
167:	ObjectAddress CreateTriggerFiringOn(CreateTrigStmt *, const char *, Oid, Oid, Oid, Oid, Oid, Oid, Node *, _Bool, _Bool, char);
1677:	void EnableDisableTrigger(Relation, const char *, char, _Bool, LOCKMODE);
1553:	void EnableDisableTriggerNew(Relation, const char *, char, _Bool, _Bool, LOCKMODE);
2603:	void ExecARDeleteTriggers(EState *, ResultRelInfo *, ItemPointer, HeapTuple, TransitionCaptureState *);
2373:	void ExecARInsertTriggers(EState *, ResultRelInfo *, TupleTableSlot *, List *, TransitionCaptureState *);
2887:	void ExecARUpdateTriggers(EState *, ResultRelInfo *, ItemPointer, HeapTuple, TupleTableSlot *, List *, TransitionCaptureState *);
2500:	void ExecASDeleteTriggers(EState *, ResultRelInfo *, TransitionCaptureState *);
2286:	void ExecASInsertTriggers(EState *, ResultRelInfo *, TransitionCaptureState *);
3043:	void ExecASTruncateTriggers(EState *, ResultRelInfo *);
2739:	void ExecASUpdateTriggers(EState *, ResultRelInfo *, TransitionCaptureState *);
2518:	_Bool ExecBRDeleteTriggers(EState *, EPQState *, ResultRelInfo *, ItemPointer, HeapTuple, TupleTableSlot **);
2297:	_Bool ExecBRInsertTriggers(EState *, ResultRelInfo *, TupleTableSlot *);
2755:	_Bool ExecBRUpdateTriggers(EState *, EPQState *, ResultRelInfo *, ItemPointer, HeapTuple, TupleTableSlot *);
2449:	void ExecBSDeleteTriggers(EState *, ResultRelInfo *);
2235:	void ExecBSInsertTriggers(EState *, ResultRelInfo *);
2996:	void ExecBSTruncateTriggers(EState *, ResultRelInfo *);
2681:	void ExecBSUpdateTriggers(EState *, ResultRelInfo *);
2634:	_Bool ExecIRDeleteTriggers(EState *, ResultRelInfo *, HeapTuple);
2388:	_Bool ExecIRInsertTriggers(EState *, ResultRelInfo *, TupleTableSlot *);
2930:	_Bool ExecIRUpdateTriggers(EState *, ResultRelInfo *, HeapTuple, TupleTableSlot *);
2113:	const char *FindTriggerIncompatibleWithInheritance(TriggerDesc *);
1981:	void FreeTriggerDesc(TriggerDesc *);
4462:	TransitionCaptureState *MakeTransitionCaptureState(TriggerDesc *, Oid, CmdType);
1697:	void RelationBuildTriggers(Relation);
1244:	void RemoveTriggerById(Oid);
1322:	Oid get_trigger_oid(Oid, const char *, _Bool);
5955:	Datum pg_trigger_depth(FunctionCallInfo);
1418:	ObjectAddress renametrig(RenameStmt *);
5009:	static void AfterTriggerEnlargeQueryState(void);
3932:	static void AfterTriggerExecute(EState *, AfterTriggerEvent, ResultRelInfo *, TriggerDesc *, FmgrInfo *, Instrumentation *, MemoryContext, TupleTableSlot *, TupleTableSlot *);
4695:	static void AfterTriggerFreeQuery(AfterTriggersQueryData *);
5516:	static void AfterTriggerSaveEvent(EState *, ResultRelInfo *, int, _Bool, TupleTableSlot *, TupleTableSlot *, List *, Bitmapset *, TransitionCaptureState *);
2143:	static HeapTuple ExecCallTriggerFunc(TriggerData *, int, FmgrInfo *, Instrumentation *, MemoryContext);
4413:	static TupleTableSlot *GetAfterTriggersStoreSlot(AfterTriggersTableData *, TupleDesc);
4376:	static AfterTriggersTableData *GetAfterTriggersTableData(Oid, CmdType);
3619:	static Tuplestorestate *GetCurrentFDWTuplestore(void);
3057:	static _Bool GetTupleForTrigger(EState *, EPQState *, ResultRelInfo *, ItemPointer, LockTupleMode, TupleTableSlot *, TupleTableSlot **);
1372:	static void RangeVarCallbackForRenameTrigger(const RangeVar *, Oid, Oid, void *);
5101:	static SetConstraintState SetConstraintStateAddItem(SetConstraintState, Oid, _Bool);
5081:	static SetConstraintState SetConstraintStateCopy(SetConstraintState);
5056:	static SetConstraintState SetConstraintStateCreate(int);
1849:	static void SetTriggerFlags(TriggerDesc *, Trigger *);
3173:	static _Bool TriggerEnabled(EState *, ResultRelInfo *, Trigger *, TriggerEvent, Bitmapset *, TupleTableSlot *, TupleTableSlot *);
3701:	static void afterTriggerAddEvent(AfterTriggerEventList *, AfterTriggerEvent, AfterTriggerShared);
3655:	static _Bool afterTriggerCheckState(AfterTriggerShared);
3878:	static void afterTriggerDeleteHeadEventChunk(AfterTriggersQueryData *);
3817:	static void afterTriggerFreeEventList(AfterTriggerEventList *);
4230:	static _Bool afterTriggerInvokeEvents(AfterTriggerEventList *, CommandId, EState *, _Bool);
4146:	static _Bool afterTriggerMarkEvents(AfterTriggerEventList *, AfterTriggerEventList *, _Bool);
3838:	static void afterTriggerRestoreEventList(AfterTriggerEventList *, const AfterTriggerEventList *);
5834:	static _Bool before_stmt_triggers_fired(Oid, CmdType);
5880:	static void cancel_prior_stmt_triggers(Oid, CmdType, int);

File ts_cache.c:
648:	void assign_TSCurrentConfig(const char *, void *);
587:	_Bool check_TSCurrentConfig(char **, void **, GucSource);
556:	Oid getTSCurrentConfig(_Bool);
385:	TSConfigCacheEntry *lookup_ts_config_cache(Oid);
208:	TSDictionaryCacheEntry *lookup_ts_dictionary_cache(Oid);
111:	TSParserCacheEntry *lookup_ts_parser_cache(Oid);
92:	static void InvalidateTSCacheCallBack(Datum, int, uint32);
362:	static void init_ts_config_cache(void);

File ts_locale.c:
244:	char *lowerstr(const char *);
257:	char *lowerstr_with_len(const char *, int);
69:	int t_isalpha(const char *);
37:	int t_isdigit(const char *);
85:	int t_isprint(const char *);
53:	int t_isspace(const char *);
148:	char *tsearch_readline(tsearch_readline_state *);
125:	_Bool tsearch_readline_begin(tsearch_readline_state *, const char *);
193:	void tsearch_readline_end(tsearch_readline_state *);
216:	static void tsearch_readline_callback(void *);

File ts_parse.c:
607:	text *generateHeadline(HeadlineParsedText *);
539:	void hlparsetext(Oid, HeadlineParsedText *, TSQuery, char *, int);
354:	void parsetext(Oid, ParsedText *, char *, int);
72:	static void LPLAddTail(ListParsedLex *, ParsedLex *);
85:	static ParsedLex *LPLRemoveHead(ListParsedLex *);
99:	static void LexizeAddLemm(LexizeData *, int, char *, int);
172:	static TSLexeme *LexizeExec(LexizeData *, ParsedLex **);
60:	static void LexizeInit(LexizeData *, TSConfigCacheEntry *);
111:	static void RemoveHead(LexizeData *);
498:	static void addHLParsedLex(HeadlineParsedText *, TSQuery, ParsedLex *, TSLexeme *);
439:	static void hladdword(HeadlineParsedText *, char *, int, int);
463:	static void hlfinditem(HeadlineParsedText *, TSQuery, int32, char *, int);
141:	static void moveToWaste(LexizeData *, ParsedLex *);
119:	static void setCorrLex(LexizeData *, ParsedLex **);
157:	static void setNewTmpRes(LexizeData *, ParsedLex *, TSLexeme *);

File ts_selfuncs.c:
140:	Datum tsmatchjoinsel(FunctionCallInfo);
68:	Datum tsmatchsel(FunctionCallInfo);
435:	static int compare_lexeme_textfreq(const void *, const void *);
208:	static Selectivity mcelem_tsquery_selec(TSQuery, Datum *, int, float4 *, int);
279:	static Selectivity tsquery_opr_selec(QueryItem *, char *, TextFreq *, int, float4);
151:	static Selectivity tsquerysel(VariableStatData *, Datum);

File ts_typanalyze.c:
57:	Datum ts_typanalyze(FunctionCallInfo);
142:	static void compute_tsvector_stats(VacAttrStats *, AnalyzeAttrFetchFunc, int, double);
500:	static int lexeme_compare(const void *, const void *);
478:	static uint32 lexeme_hash(const void *, Size);
490:	static int lexeme_match(const void *, const void *, Size);
453:	static void prune_lexemes_hashtable(HTAB *, int);
518:	static int trackitem_compare_frequencies_desc(const void *, const void *, void *);
530:	static int trackitem_compare_lexemes(const void *, const void *, void *);

File ts_utils.c:
33:	char *get_tsearch_config_filename(const char *, const char *);
68:	void readstoplist(const char *, StopList *, char *(*)(const char *));
141:	_Bool searchstoplist(StopList *, char *);

File tsearch.c:
404:	void *__GI___tdelete(const void *, void **, __compar_fn_t);
773:	void __GI___tdestroy(void *, __free_fn_t);
372:	void *__GI___tfind(const void *, void * const *, __compar_fn_t);
291:	void *__GI___tsearch(const void *, void **, __compar_fn_t);
710:	void __GI___twalk(const void *, __action_fn_t);
745:	void __GI___twalk_r(const void *, void (*)(const void *, VISIT, void *), void *);
761:	static void tdestroy_recurse(node, __free_fn_t);
687:	static void trecurse(const void *, __action_fn_t, int);
725:	static void trecurse_r(const void *, void (*)(const void *, VISIT, void *), void *);

File tsearchcmds.c:
1109:	ObjectAddress AlterTSConfiguration(AlterTSConfigurationStmt *);
487:	ObjectAddress AlterTSDictionary(AlterTSDictionaryStmt *);
893:	ObjectAddress DefineTSConfiguration(List *, List *, ObjectAddress *);
391:	ObjectAddress DefineTSDictionary(List *, List *);
178:	ObjectAddress DefineTSParser(List *, List *);
684:	ObjectAddress DefineTSTemplate(List *, List *);
1061:	void RemoveTSConfigurationById(Oid);
1510:	List *deserialize_deflist(Datum);
1454:	text *serialize_deflist(List *);
1376:	static void DropConfigurationMapping(AlterTSConfigurationStmt *, HeapTuple, Relation);
781:	static HeapTuple GetTSConfigTuple(List *);
1212:	static void MakeConfigurationMapping(AlterTSConfigurationStmt *, HeapTuple, Relation);
1723:	static DefElem *buildDefItem(const char *, const char *, _Bool);
1157:	static int *getTokenTypes(Oid, List *);
68:	static Datum get_ts_parser_func(DefElem *, int);
603:	static Datum get_ts_template_func(DefElem *, int);
806:	static ObjectAddress makeConfigurationDependencies(HeapTuple, _Bool, Relation);
301:	static ObjectAddress makeDictionaryDependencies(HeapTuple);
131:	static ObjectAddress makeParserDependencies(HeapTuple);
646:	static ObjectAddress makeTSTemplateDependencies(HeapTuple);
336:	static void verify_dictoptions(Oid, List *);

File tsginidx.c:
41:	Datum gin_cmp_prefix(FunctionCallInfo);
25:	Datum gin_cmp_tslexeme(FunctionCallInfo);
95:	Datum gin_extract_tsquery(FunctionCallInfo);
319:	Datum gin_extract_tsquery_5args(FunctionCallInfo);
343:	Datum gin_extract_tsquery_oldsig(FunctionCallInfo);
65:	Datum gin_extract_tsvector(FunctionCallInfo);
307:	Datum gin_extract_tsvector_2args(FunctionCallInfo);
215:	Datum gin_tsquery_consistent(FunctionCallInfo);
331:	Datum gin_tsquery_consistent_6args(FunctionCallInfo);
353:	Datum gin_tsquery_consistent_oldsig(FunctionCallInfo);
266:	Datum gin_tsquery_triconsistent(FunctionCallInfo);
184:	static TSTernaryValue checkcondition_gin(void *, QueryOperand *, ExecPhraseData *);

File tsgistidx.c:
166:	Datum gtsvector_compress(FunctionCallInfo);
328:	Datum gtsvector_consistent(FunctionCallInfo);
800:	Datum gtsvector_consistent_oldsig(FunctionCallInfo);
246:	Datum gtsvector_decompress(FunctionCallInfo);
806:	Datum gtsvector_options(FunctionCallInfo);
527:	Datum gtsvector_penalty(FunctionCallInfo);
618:	Datum gtsvector_picksplit(FunctionCallInfo);
423:	Datum gtsvector_same(FunctionCallInfo);
396:	Datum gtsvector_union(FunctionCallInfo);
88:	Datum gtsvectorin(FunctionCallInfo);
103:	Datum gtsvectorout(FunctionCallInfo);
279:	static TSTernaryValue checkcondition_arr(void *, QueryOperand *, ExecPhraseData *);
311:	static TSTernaryValue checkcondition_bit(void *, QueryOperand *, ExecPhraseData *);
589:	static int comparecost(const void *, const void *);
127:	static int compareint(const void *, const void *);
570:	static void fillcache(CACHESIGN *, SignTSVector *, int);
150:	static SignTSVector *gtsvector_alloc(int, int, BITVECP);
506:	static int hemdist(SignTSVector *, SignTSVector *);
602:	static int hemdistcache(CACHESIGN *, CACHESIGN *, int);
490:	static int hemdistsign(BITVECP, BITVECP, int);
138:	static void makesign(BITVECP, SignTSVector *, int);
484:	static int32 sizebitvec(BITVECP, int);
368:	static int32 unionkey(BITVECP, SignTSVector *, int);

File tsquery.c:
783:	TSQuery parse_tsquery(char *, PushFunction, Datum, int);
511:	void pushOperator(TSQueryParserState, int8, int16);
596:	void pushStop(TSQueryParserState);
560:	void pushValue(TSQueryParserState, char *, int, int16, _Bool);
908:	Datum tsqueryin(FunctionCallInfo);
1097:	Datum tsqueryout(FunctionCallInfo);
1177:	Datum tsqueryrecv(FunctionCallInfo);
1139:	Datum tsquerysend(FunctionCallInfo);
1313:	Datum tsquerytree(FunctionCallInfo);
628:	static void cleanOpStack(TSQueryParserState, OperatorElement *, int *, int8);
758:	static void findoprnd(QueryItem *, int, _Bool *);
700:	static void findoprnd_recurse(QueryItem *, uint32 *, int, _Bool *);
103:	static char *get_modifiers(char *, int16 *, _Bool *);
490:	static ts_tokentype gettoken_query_plain(TSQueryParserState, int8 *, int *, char **, int16 *, _Bool *);
275:	static ts_tokentype gettoken_query_standard(TSQueryParserState, int8 *, int *, char **, int16 *, _Bool *);
379:	static ts_tokentype gettoken_query_websearch(TSQueryParserState, int8 *, int *, char **, int16 *, _Bool *);
942:	static void infix(INFIX *, int, _Bool);
652:	static void makepol(TSQueryParserState, PushFunction, Datum);
233:	static _Bool parse_or_operator(TSQueryParserState);
154:	static _Bool parse_phrase_operator(TSQueryParserState, int16 *);
616:	static void pushOpStack(OperatorElement *, int *, int8, int16);
527:	static void pushValue_internal(TSQueryParserState, pg_crc32, int, int, int, _Bool);
898:	static void pushval_asis(Datum, TSQueryParserState, char *, int, int16, _Bool);

File tsquery_cleanup.c:
189:	QueryItem *clean_NOT(QueryItem *, int *);
386:	TSQuery cleanup_tsquery_stopwords(TSQuery);
362:	static int32 calcstrlen(NODE *);
135:	static NODE *clean_NOT_intree(NODE *);
237:	static NODE *clean_stopword_intree(NODE *, int *, int *);
114:	static void freetree(NODE *);
32:	static NODE *maketree(QueryItem *);
61:	static void plainnode(PLAINTREE *, NODE *);
96:	static QueryItem *plaintree(NODE *, int *);

File tsquery_gist.c:
26:	Datum gtsquery_compress(FunctionCallInfo);
52:	Datum gtsquery_consistent(FunctionCallInfo);
274:	Datum gtsquery_consistent_oldsig(FunctionCallInfo);
138:	Datum gtsquery_penalty(FunctionCallInfo);
168:	Datum gtsquery_picksplit(FunctionCallInfo);
106:	Datum gtsquery_same(FunctionCallInfo);
88:	Datum gtsquery_union(FunctionCallInfo);
157:	static int comparecost(const void *, const void *);
130:	static int hemdist(TSQuerySign, TSQuerySign);
118:	static int sizebitvec(TSQuerySign);

File tsquery_op.c:
249:	TSQuerySign makeTSQuerySign(TSQuery);
353:	Datum tsq_mcontained(FunctionCallInfo);
306:	Datum tsq_mcontains(FunctionCallInfo);
53:	Datum tsquery_and(FunctionCallInfo);
214:	Datum tsquery_cmp(FunctionCallInfo);
243:	Datum tsquery_eq(FunctionCallInfo);
244:	Datum tsquery_ge(FunctionCallInfo);
245:	Datum tsquery_gt(FunctionCallInfo);
242:	Datum tsquery_le(FunctionCallInfo);
241:	Datum tsquery_lt(FunctionCallInfo);
246:	Datum tsquery_ne(FunctionCallInfo);
158:	Datum tsquery_not(FunctionCallInfo);
22:	Datum tsquery_numnode(FunctionCallInfo);
83:	Datum tsquery_or(FunctionCallInfo);
149:	Datum tsquery_phrase(FunctionCallInfo);
113:	Datum tsquery_phrase_distance(FunctionCallInfo);
188:	static int CompareTSQ(TSQuery, TSQuery);
297:	static int cmp_string(const void *, const void *);
266:	static char **collectTSQueryValues(TSQuery, int *);
32:	static QTNode *join_tsqueries(TSQuery, TSQuery, int8, uint16);

File tsquery_rewrite.c:
267:	QTNode *findsubquery(QTNode *, QTNode *, QTNode *, _Bool *);
410:	Datum tsquery_rewrite(FunctionCallInfo);
280:	Datum tsquery_rewrite_query(FunctionCallInfo);
206:	static QTNode *dofindsubquery(QTNode *, QTNode *, QTNode *, _Bool *);
35:	static QTNode *findeq(QTNode *, QTNode *, QTNode *, _Bool *);

File tsquery_util.c:
24:	QTNode *QT2QTN(QueryItem *, char *);
362:	TSQuery QTN2QT(QTNode *);
249:	void QTNBinary(QTNode *);
433:	void QTNClearFlags(QTNode *, uint32);
395:	QTNode *QTNCopy(QTNode *);
182:	_Bool QTNEq(QTNode *, QTNode *);
63:	void QTNFree(QTNode *);
162:	void QTNSort(QTNode *);
200:	void QTNTernary(QTNode *);
96:	int QTNodeCompare(QTNode *, QTNode *);
152:	static int cmpQTN(const void *, const void *);
291:	static void cntsize(QTNode *, int *, int *);
322:	static void fillQT(QTN2QTState *, QTNode *);

File tsrank.c:
486:	Datum ts_rank_tt(FunctionCallInfo);
471:	Datum ts_rank_ttf(FunctionCallInfo);
455:	Datum ts_rank_wtt(FunctionCallInfo);
438:	Datum ts_rank_wttf(FunctionCallInfo);
1001:	Datum ts_rankcd_tt(FunctionCallInfo);
986:	Datum ts_rankcd_ttf(FunctionCallInfo);
970:	Datum ts_rankcd_wtt(FunctionCallInfo);
953:	Datum ts_rankcd_wttf(FunctionCallInfo);
646:	static _Bool Cover(DocRepresentation *, int, QueryRepresentation *, CoverExt *);
154:	static QueryOperand **SortAndUniqItems(TSQuery, int *);
357:	static float calc_rank(const float *, TSVector, TSQuery, int32);
200:	static float calc_rank_and(const float *, TSVector, TSQuery);
850:	static float4 calc_rank_cd(const float4 *, TSVector, TSQuery, int);
283:	static float calc_rank_or(const float *, TSVector, TSQuery);
563:	static TSTernaryValue checkcondition_QueryOperand(void *, QueryOperand *, ExecPhraseData *);
53:	static int cnt_length(TSVector);
519:	static int compareDocR(const void *, const void *);
135:	static int compareQueryOperand(const void *, const void *, void *);
606:	static void fillQueryRepresentationData(QueryRepresentation *, DocRepresentation *);
86:	static WordEntry *find_wordentry(TSVector, TSQuery, QueryOperand *, int32 *);
400:	static const float *getWeights(ArrayType *);
727:	static DocRepresentation *get_docrep(TSVector, QueryRepresentation *, int *);
593:	static void resetQueryRepresentation(QueryRepresentation *, _Bool);
44:	static float4 word_distance(int32);

File tss_create.c:
22:	int tss_create(tss_t *, tss_dtor_t);

File tss_delete.c:
22:	void tss_delete(tss_t);

File tss_get.c:
22:	void *tss_get(tss_t);

File tss_set.c:
22:	int tss_set(tss_t, void *);

File tstoreReceiver.c:
238:	DestReceiver *CreateTuplestoreDestReceiver(void);
266:	void SetTuplestoreDestReceiverParams(DestReceiver *, Tuplestorestate *, MemoryContext, _Bool, TupleDesc, const char *);
229:	static void tstoreDestroyReceiver(DestReceiver *);
136:	static _Bool tstoreReceiveSlot_detoast(TupleTableSlot *, DestReceiver *);
122:	static _Bool tstoreReceiveSlot_notoast(TupleTableSlot *, DestReceiver *);
192:	static _Bool tstoreReceiveSlot_tupmap(TupleTableSlot *, DestReceiver *);
206:	static void tstoreShutdownReceiver(DestReceiver *);
56:	static void tstoreStartupReceiver(DestReceiver *, int, TupleDesc);

File tsvector.c:
33:	int compareWordEntryPos(const void *, const void *);
178:	Datum tsvectorin(FunctionCallInfo);
311:	Datum tsvectorout(FunctionCallInfo);
443:	Datum tsvectorrecv(FunctionCallInfo);
404:	Datum tsvectorsend(FunctionCallInfo);
171:	static int WordEntryCMP(WordEntry *, WordEntry *, char *);
83:	static int compareentry(const void *, const void *, void *);
51:	static int uniquePos(WordEntryPos *, int);
99:	static int uniqueentry(WordEntryIN *, int, char *, int *);

File tsvector_op.c:
1849:	_Bool TS_execute(QueryItem *, void *, uint32, TSExecuteCallback);
1866:	TSTernaryValue TS_execute_ternary(QueryItem *, void *, uint32, TSExecuteCallback);
749:	Datum array_to_tsvector(FunctionCallInfo);
1147:	int32 tsCompareString(char *, int, char *, int, _Bool);
2030:	Datum ts_match_qv(FunctionCallInfo);
2090:	Datum ts_match_tq(FunctionCallInfo);
2068:	Datum ts_match_tt(FunctionCallInfo);
2038:	Datum ts_match_vq(FunctionCallInfo);
2494:	Datum ts_stat1(FunctionCallInfo);
2519:	Datum ts_stat2(FunctionCallInfo);
1980:	_Bool tsquery_requires_match(QueryItem *);
161:	Datum tsvector_cmp(FunctionCallInfo);
920:	Datum tsvector_concat(FunctionCallInfo);
578:	Datum tsvector_delete_arr(FunctionCallInfo);
554:	Datum tsvector_delete_str(FunctionCallInfo);
157:	Datum tsvector_eq(FunctionCallInfo);
813:	Datum tsvector_filter(FunctionCallInfo);
158:	Datum tsvector_ge(FunctionCallInfo);
159:	Datum tsvector_gt(FunctionCallInfo);
156:	Datum tsvector_le(FunctionCallInfo);
197:	Datum tsvector_length(FunctionCallInfo);
155:	Datum tsvector_lt(FunctionCallInfo);
160:	Datum tsvector_ne(FunctionCallInfo);
207:	Datum tsvector_setweight(FunctionCallInfo);
269:	Datum tsvector_setweight_by_filter(FunctionCallInfo);
164:	Datum tsvector_strip(FunctionCallInfo);
722:	Datum tsvector_to_array(FunctionCallInfo);
634:	Datum tsvector_unnest(FunctionCallInfo);
2563:	Datum tsvector_update_trigger_bycolumn(FunctionCallInfo);
2557:	Datum tsvector_update_trigger_byid(FunctionCallInfo);
1878:	static TSTernaryValue TS_execute_recurse(QueryItem *, void *, uint32, TSExecuteCallback);
1604:	static TSTernaryValue TS_phrase_execute(QueryItem *, void *, uint32, TSExecuteCallback, ExecPhraseData *);
1463:	static TSTernaryValue TS_phrase_output(ExecPhraseData *, ExecPhraseData *, ExecPhraseData *, int, int, int, int);
362:	static int32 add_pos(TSVector, WordEntry *, TSVector, WordEntry *, int32);
2119:	static int check_weight(TSVector, WordEntry *, int8);
1184:	static TSTernaryValue checkclass_str(CHKVAL *, WordEntry *, QueryOperand *, ExecPhraseData *);
1290:	static TSTernaryValue checkcondition_str(void *, QueryOperand *, ExecPhraseData *);
2206:	static void chooseNextStatEntry(MemoryContext, TSVectorStat *, TSVector, uint32, uint32, uint32);
431:	static int compare_int(const void *, const void *);
442:	static int compare_text_lexemes(const void *, const void *);
2140:	static void insertStatEntry(MemoryContext, TSVectorStat *, TSVector, uint32);
82:	static int silly_cmp_tsvector(const TSVector, const TSVector);
2238:	static TSVectorStat *ts_accum(MemoryContext, TSVectorStat *, Datum);
2365:	static Datum ts_process_call(FuncCallContext *);
2273:	static void ts_setup_firstcall(FunctionCallInfo, FuncCallContext *, TSVectorStat *);
2405:	static TSVectorStat *ts_stat_sql(MemoryContext, text *, text *);
398:	static int tsvector_bsearch(const TSVector, char *, int);
464:	static TSVector tsvector_delete_by_indices(TSVector, int *, int);
2569:	static Datum tsvector_update_trigger(FunctionCallInfo, _Bool);
2319:	static StatEntry *walkStatEntryTree(TSVectorStat *);

File tsvector_parser.c:
76:	void close_tsvector_parser(TSVectorParseState);
155:	_Bool gettoken_tsvector(TSVectorParseState, char **, int *, WordEntryPos **, int *, char **);
46:	TSVectorParseState init_tsvector_parser(char *, int);
67:	void reset_tsvector_parser(TSVectorParseState, char *);
128:	static void prssyntaxerror(TSVectorParseState);

File ttyname_r_chk.c:
22:	int __ttyname_r_chk(int, char *, size_t, size_t);

File ttyslot.c:
41:	int ttyslot(void);

File tupconvert.c:
102:	TupleConversionMap *convert_tuples_by_name(TupleDesc, TupleDesc);
59:	TupleConversionMap *convert_tuples_by_position(TupleDesc, TupleDesc, const char *);
237:	Bitmapset *execute_attr_map_cols(AttrMap *, Bitmapset *);
177:	TupleTableSlot *execute_attr_map_slot(AttrMap *, TupleTableSlot *, TupleTableSlot *);
139:	HeapTuple execute_attr_map_tuple(HeapTuple, TupleConversionMap *);
284:	void free_conversion_map(TupleConversionMap *);

File tupdesc.c:
777:	TupleDesc BuildDescForRelation(List *);
877:	TupleDesc BuildDescFromLists(List *, List *, List *, List *);
45:	TupleDesc CreateTemplateTupleDesc(int);
90:	TupleDesc CreateTupleDesc(int, Form_pg_attribute *);
111:	TupleDesc CreateTupleDescCopy(TupleDesc);
151:	TupleDesc CreateTupleDescCopyConstr(TupleDesc);
384:	void DecrTupleDescRefCount(TupleDesc);
309:	void FreeTupleDesc(TupleDesc);
366:	void IncrTupleDescRefCount(TupleDesc);
229:	void TupleDescCopy(TupleDesc, TupleDesc);
267:	void TupleDescCopyEntry(TupleDesc, AttrNumber, TupleDesc, AttrNumber);
657:	void TupleDescInitBuiltinEntry(TupleDesc, AttrNumber, const char *, Oid, int32, int);
583:	void TupleDescInitEntry(TupleDesc, AttrNumber, const char *, Oid, int32, int);
754:	void TupleDescInitEntryCollation(TupleDesc, AttrNumber, Oid);
402:	_Bool equalTupleDescs(TupleDesc, TupleDesc);
554:	uint32 hashTupleDesc(TupleDesc);

File tuplesort.c:
4603:	void tuplesort_attach_shared(Sharedsort *, dsm_segment *);
971:	Tuplesortstate *tuplesort_begin_cluster(TupleDesc, Relation, int, SortCoordinate, _Bool);
1249:	Tuplesortstate *tuplesort_begin_datum(Oid, Oid, Oid, _Bool, int, SortCoordinate, _Bool);
897:	Tuplesortstate *tuplesort_begin_heap(TupleDesc, int, AttrNumber *, Oid *, Oid *, _Bool *, int, SortCoordinate, _Bool);
1068:	Tuplesortstate *tuplesort_begin_index_btree(Relation, Relation, _Bool, int, SortCoordinate, _Bool);
1192:	Tuplesortstate *tuplesort_begin_index_gist(Relation, Relation, int, SortCoordinate, _Bool);
1146:	Tuplesortstate *tuplesort_begin_index_hash(Relation, Relation, uint32, uint32, uint32, int, SortCoordinate, _Bool);
1466:	void tuplesort_end(Tuplesortstate *);
4559:	Size tuplesort_estimate_shared(int);
3380:	void tuplesort_get_stats(Tuplesortstate *, TuplesortInstrumentation *);
2496:	_Bool tuplesort_getdatum(Tuplesortstate *, _Bool, Datum *, _Bool *, Datum *);
2447:	HeapTuple tuplesort_getheaptuple(Tuplesortstate *, _Bool);
2467:	IndexTuple tuplesort_getindextuple(Tuplesortstate *, _Bool);
2410:	_Bool tuplesort_gettupleslot(Tuplesortstate *, _Bool, _Bool, TupleTableSlot *, Datum *);
4580:	void tuplesort_initialize_shared(Sharedsort *, int, dsm_segment *);
3314:	void tuplesort_markpos(Tuplesortstate *);
2604:	int tuplesort_merge_order(int64);
3424:	const char *tuplesort_method_name(TuplesortMethod);
2042:	void tuplesort_performsort(Tuplesortstate *);
1807:	void tuplesort_putdatum(Tuplesortstate *, Datum, _Bool);
1708:	void tuplesort_putheaptuple(Tuplesortstate *, HeapTuple);
1729:	void tuplesort_putindextuplevalues(Tuplesortstate *, Relation, ItemPointer, Datum *, _Bool *);
1686:	void tuplesort_puttupleslot(Tuplesortstate *, TupleTableSlot *);
3279:	void tuplesort_rescan(Tuplesortstate *);
1534:	void tuplesort_reset(Tuplesortstate *);
3346:	void tuplesort_restorepos(Tuplesortstate *);
1336:	void tuplesort_set_bound(Tuplesortstate *, int64);
2536:	_Bool tuplesort_skiptuples(Tuplesortstate *, int64, _Bool);
3447:	const char *tuplesort_space_type_name(TuplesortSpaceType);
1382:	_Bool tuplesort_used_bound(Tuplesortstate *);
3103:	static void beginmerge(Tuplesortstate *);
3956:	static int comparetup_cluster(const SortTuple *, const SortTuple *, Tuplesortstate *);
4443:	static int comparetup_datum(const SortTuple *, const SortTuple *, Tuplesortstate *);
3757:	static int comparetup_heap(const SortTuple *, const SortTuple *, Tuplesortstate *);
4202:	static int comparetup_index_btree(const SortTuple *, const SortTuple *, Tuplesortstate *);
4335:	static int comparetup_index_hash(const SortTuple *, const SortTuple *, Tuplesortstate *);
1998:	static _Bool consider_abort_common(Tuplesortstate *);
4067:	static void copytup_cluster(Tuplesortstate *, SortTuple *, void *);
4464:	static void copytup_datum(Tuplesortstate *, SortTuple *, void *);
3819:	static void copytup_heap(Tuplesortstate *, SortTuple *, void *);
4390:	static void copytup_index(Tuplesortstate *, SortTuple *, void *);
3176:	static void dumptuples(Tuplesortstate *, _Bool);
4776:	static void free_sort_tuple(Tuplesortstate *, SortTuple *);
3702:	static unsigned int getlen(Tuplesortstate *, int, _Bool);
1567:	static _Bool grow_memtuples(Tuplesortstate *);
2777:	static void init_slab_allocator(Tuplesortstate *, int);
2644:	static void inittapes(Tuplesortstate *, _Bool);
2701:	static void inittapestate(Tuplesortstate *, int);
4710:	static void leader_takeover_tapes(Tuplesortstate *);
3468:	static void make_bounded_heap(Tuplesortstate *);
3715:	static void markrunend(Tuplesortstate *, int);
3040:	static void mergeonerun(Tuplesortstate *);
3151:	static _Bool mergereadnext(Tuplesortstate *, int, SortTuple *);
2813:	static void mergeruns(Tuplesortstate *);
1889:	static void puttuple_common(Tuplesortstate *, SortTuple *);
3729:	static void *readtup_alloc(Tuplesortstate *, Size);
4164:	static void readtup_cluster(Tuplesortstate *, SortTuple *, int, unsigned int);
4512:	static void readtup_datum(Tuplesortstate *, SortTuple *, int, unsigned int);
3924:	static void readtup_heap(Tuplesortstate *, SortTuple *, int, unsigned int);
4419:	static void readtup_index(Tuplesortstate *, SortTuple *, int, unsigned int);
3684:	static void reversedirection(Tuplesortstate *);
2745:	static void selectnewtape(Tuplesortstate *);
3517:	static void sort_bounded_heap(Tuplesortstate *);
833:	static void tuplesort_begin_batch(Tuplesortstate *);
721:	static Tuplesortstate *tuplesort_begin_common(int, SortCoordinate, _Bool);
1393:	static void tuplesort_free(Tuplesortstate *);
2153:	static _Bool tuplesort_gettuple_common(Tuplesortstate *, _Bool, SortTuple *);
3620:	static void tuplesort_heap_delete_top(Tuplesortstate *);
3585:	static void tuplesort_heap_insert(Tuplesortstate *, SortTuple *);
3644:	static void tuplesort_heap_replace_top(Tuplesortstate *, SortTuple *);
3557:	static void tuplesort_sort_memtuples(Tuplesortstate *);
1483:	static void tuplesort_updatemax(Tuplesortstate *);
4651:	static void worker_freeze_result_tape(Tuplesortstate *);
4623:	static int worker_get_identifier(Tuplesortstate *);
4689:	static void worker_nomergeruns(Tuplesortstate *);
4140:	static void writetup_cluster(Tuplesortstate *, int, SortTuple *);
4471:	static void writetup_datum(Tuplesortstate *, int, SortTuple *);
3897:	static void writetup_heap(Tuplesortstate *, int, SortTuple *);
4397:	static void writetup_index(Tuplesortstate *, int, SortTuple *);

File tuplestore.c:
1110:	_Bool tuplestore_advance(Tuplestorestate *, _Bool);
383:	int tuplestore_alloc_read_pointer(Tuplestorestate *, int);
557:	_Bool tuplestore_ateof(Tuplestorestate *);
318:	Tuplestorestate *tuplestore_begin_heap(_Bool, _Bool, int);
418:	void tuplestore_clear(Tuplestorestate *);
1268:	void tuplestore_copy_read_pointer(Tuplestorestate *, int, int);
453:	void tuplestore_end(Tuplestorestate *);
1078:	_Bool tuplestore_gettupleslot(Tuplestorestate *, _Bool, _Bool, TupleTableSlot *);
1455:	_Bool tuplestore_in_memory(Tuplestorestate *);
730:	void tuplestore_puttuple(Tuplestorestate *, HeapTuple);
708:	void tuplestore_puttupleslot(Tuplestorestate *, TupleTableSlot *);
750:	void tuplestore_putvalues(Tuplestorestate *, TupleDesc, Datum *, _Bool *);
1233:	void tuplestore_rescan(Tuplestorestate *);
473:	void tuplestore_select_read_pointer(Tuplestorestate *, int);
359:	void tuplestore_set_eflags(Tuplestorestate *, int);
1135:	_Bool tuplestore_skiptuples(Tuplestorestate *, int64, _Bool);
1360:	void tuplestore_trim(Tuplestorestate *);
546:	int64 tuplestore_tuple_count(Tuplestorestate *);
1494:	static void *copytup_heap(Tuplestorestate *, void *);
1206:	static void dumptuples(Tuplestorestate *);
1466:	static unsigned int getlen(Tuplestorestate *, _Bool);
578:	static _Bool grow_memtuples(Tuplestorestate *);
1525:	static void *readtup_heap(Tuplestorestate *, unsigned int);
253:	static Tuplestorestate *tuplestore_begin_common(int, _Bool, int);
903:	static void *tuplestore_gettuple(Tuplestorestate *, _Bool, _Bool *);
765:	static void tuplestore_puttuple_common(Tuplestorestate *, void *);
1504:	static void writetup_heap(Tuplestorestate *, void *);

File twophase.c:
317:	void AtAbort_Twophase(void);
1769:	void CheckPointTwoPhase(XLogRecPtr);
1113:	void EndPrepare(GlobalTransaction);
1475:	void FinishPreparedTransaction(const char *, _Bool);
372:	GlobalTransaction MarkAsPreparing(TransactionId, const char *, TimestampTz, Oid, Oid);
357:	void PostPrepare_Twophase(void);
2423:	void PrepareRedoAdd(char *, XLogRecPtr, XLogRecPtr, RepOriginId);
2493:	void PrepareRedoRemove(TransactionId, _Bool);
1913:	TransactionId PrescanPreparedTransactions(TransactionId **, int *);
2035:	void RecoverPreparedTransactions(void);
1240:	void RegisterTwoPhaseRecord(TwoPhaseRmgrId, uint16, const void *, uint32);
1994:	void StandbyRecoverPreparedTransactions(void);
1447:	_Bool StandbyTransactionIdIsPrepared(TransactionId);
1041:	void StartPrepare(GlobalTransaction);
917:	BackendId TwoPhaseGetDummyBackendId(TransactionId, _Bool);
932:	PGPROC *TwoPhaseGetDummyProc(TransactionId, _Bool);
869:	TransactionId TwoPhaseGetXidByVirtualXID(VirtualTransactionId, _Bool *);
252:	void TwoPhaseShmemInit(void);
236:	Size TwoPhaseShmemSize(void);
726:	Datum pg_prepared_xact(FunctionCallInfo);
1851:	void restoreTwoPhaseData(void);
307:	static void AtProcExit_Twophase(int, Datum);
519:	static void GXactLoadSubxactData(GlobalTransaction, int, TransactionId *);
681:	static int GetPreparedTransactionList(GlobalTransaction *);
567:	static GlobalTransaction LockGXact(const char *, Oid);
545:	static void MarkAsPrepared(GlobalTransaction, _Bool);
446:	static void MarkAsPreparingGuts(GlobalTransaction, TransactionId, const char *, TimestampTz, Oid, Oid);
1642:	static void ProcessRecords(char *, TransactionId, const TwoPhaseCallback *);
2136:	static char *ProcessTwoPhaseBuffer(TransactionId, XLogRecPtr, _Bool, _Bool, _Bool);
1263:	static char *ReadTwoPhaseFile(TransactionId, _Bool);
2351:	static void RecordTransactionAbortPrepared(TransactionId, int, TransactionId *, int, RelFileNode *, const char *);
2256:	static void RecordTransactionCommitPrepared(TransactionId, int, TransactionId *, int, RelFileNode *, int, SharedInvalidationMessage *, _Bool, const char *);
1689:	static void RecreateTwoPhaseFile(TransactionId, void *, int);
643:	static void RemoveGXact(GlobalTransaction);
1670:	static void RemoveTwoPhaseFile(TransactionId, _Bool);
817:	static GlobalTransaction TwoPhaseGetGXact(TransactionId, _Bool);
1384:	static void XlogReadTwoPhaseData(XLogRecPtr, char **, int *);
1013:	static void save_state_data(const void *, uint32);

File typcache.c:
1391:	_Bool DomainHasConstraints(Oid);
1304:	void InitDomainConstraintRef(Oid, DomainConstraintRef *, MemoryContext, _Bool);
2203:	void SharedRecordTypmodRegistryAttach(SharedRecordTypmodRegistry *);
2082:	size_t SharedRecordTypmodRegistryEstimate(void);
2104:	void SharedRecordTypmodRegistryInit(SharedRecordTypmodRegistry *, dsm_segment *, dsa_area *);
1342:	void UpdateDomainConstraintRef(DomainConstraintRef *);
2041:	uint64 assign_record_type_identifier(Oid, int32);
1949:	void assign_record_type_typmod(TupleDesc);
2473:	int compare_values_of_enum(TypeCacheEntry *, Oid, Oid);
1829:	TupleDesc lookup_rowtype_tupdesc(Oid, int32);
1863:	TupleDesc lookup_rowtype_tupdesc_copy(Oid, int32);
1885:	TupleDesc lookup_rowtype_tupdesc_domain(Oid, int32, _Bool);
1846:	TupleDesc lookup_rowtype_tupdesc_noerror(Oid, int32, _Bool);
338:	TypeCacheEntry *lookup_type_cache(Oid, int);
2420:	static void TypeCacheConstrCallback(Datum, int, uint32);
2391:	static void TypeCacheOpcCallback(Datum, int, uint32);
2286:	static void TypeCacheRelCallback(Datum, Oid);
2351:	static void TypeCacheTypCallback(Datum, int, uint32);
1426:	static _Bool array_element_has_compare(TypeCacheEntry *);
1418:	static _Bool array_element_has_equality(TypeCacheEntry *);
1442:	static _Bool array_element_has_extended_hashing(TypeCacheEntry *);
1434:	static _Bool array_element_has_hashing(TypeCacheEntry *);
1450:	static void cache_array_element_properties(TypeCacheEntry *);
1673:	static void cache_multirange_element_properties(TypeCacheEntry *);
1633:	static void cache_range_element_properties(TypeCacheEntry *);
1512:	static void cache_record_field_properties(TypeCacheEntry *);
1245:	static void dccref_deletion_callback(void *);
1221:	static int dcs_cmp(const void *, const void *);
1234:	static void decr_dcc_refcount(DomainConstraintCache *);
1701:	static void ensure_record_cache_typmod_slot_exists(int32);
2444:	static _Bool enum_known_sorted(TypeCacheEnumData *, Oid);
2718:	static int enum_oid_cmp(const void *, const void *);
2701:	static EnumItem *find_enumitem(TypeCacheEnumData *, Oid);
2757:	static TupleDesc find_or_make_matching_shared_tupledesc(TupleDesc);
985:	static void load_domaintype_info(TypeCacheEntry *);
2546:	static void load_enum_cache_data(TypeCacheEntry *);
963:	static void load_multirangetype_info(TypeCacheEntry *);
906:	static void load_rangetype_info(TypeCacheEntry *);
872:	static void load_typcache_tupdesc(TypeCacheEntry *);
1738:	static TupleDesc lookup_rowtype_tupdesc_internal(Oid, int32, _Bool);
1665:	static _Bool multirange_element_has_extended_hashing(TypeCacheEntry *);
1657:	static _Bool multirange_element_has_hashing(TypeCacheEntry *);
1266:	static List *prep_domain_constraints(List *, MemoryContext);
1625:	static _Bool range_element_has_extended_hashing(TypeCacheEntry *);
1617:	static _Bool range_element_has_hashing(TypeCacheEntry *);
1488:	static _Bool record_fields_have_compare(TypeCacheEntry *);
1480:	static _Bool record_fields_have_equality(TypeCacheEntry *);
1504:	static _Bool record_fields_have_extended_hashing(TypeCacheEntry *);
1496:	static _Bool record_fields_have_hashing(TypeCacheEntry *);
1933:	static int record_type_typmod_compare(const void *, const void *, size_t);
1922:	static uint32 record_type_typmod_hash(const void *, size_t);
2736:	static dsa_pointer share_tupledesc(dsa_area *, TupleDesc, uint32);
214:	static int shared_record_table_compare(const void *, const void *, size_t, void *);
240:	static uint32 shared_record_table_hash(const void *, size_t, void *);
2869:	static void shared_record_typmod_registry_detach(dsm_segment *, Datum);

File typecmds.c:
2933:	ObjectAddress AlterDomainAddConstraint(List *, Node *, ObjectAddress *);
2582:	ObjectAddress AlterDomainDefault(List *, Node *);
2834:	ObjectAddress AlterDomainDropConstraint(List *, const char *, DropBehavior, _Bool);
2714:	ObjectAddress AlterDomainNotNull(List *, _Bool);
3049:	ObjectAddress AlterDomainValidateConstraint(List *, const char *);
1264:	ObjectAddress AlterEnum(AlterEnumStmt *);
4113:	ObjectAddress AlterType(AlterTypeStmt *);
3895:	ObjectAddress AlterTypeNamespace(List *, const char *, ObjectType, Oid *);
3970:	Oid AlterTypeNamespaceInternal(Oid, Oid, _Bool, _Bool, ObjectAddresses *);
3932:	Oid AlterTypeNamespace_oid(Oid, Oid, ObjectAddresses *);
3692:	ObjectAddress AlterTypeOwner(List *, Oid, ObjectType);
3840:	void AlterTypeOwnerInternal(Oid, Oid);
3800:	void AlterTypeOwner_oid(Oid, Oid, _Bool);
2416:	Oid AssignTypeArrayOid(void);
2482:	Oid AssignTypeMultirangeArrayOid(void);
2449:	Oid AssignTypeMultirangeOid(void);
2524:	ObjectAddress DefineCompositeType(RangeVar *, List *);
696:	ObjectAddress DefineDomain(CreateDomainStmt *);
1140:	ObjectAddress DefineEnum(CreateEnumStmt *);
1339:	ObjectAddress DefineRange(CreateRangeStmt *);
148:	ObjectAddress DefineType(ParseState *, List *, List *);
656:	void RemoveTypeById(Oid);
3615:	ObjectAddress RenameType(RenameStmt *);
3440:	void checkDomainOwner(HeapTuple);
4364:	static void AlterTypeRecurse(Oid, _Bool, HeapTuple, Relation, AlterTypeRecurseParams *);
1312:	static void checkEnumOwner(HeapTuple);
3460:	static char *domainAddConstraint(Oid, Oid, Oid, int, Constraint *, const char *, ObjectAddress *);
2327:	static Oid findRangeCanonicalFunction(List *, Oid);
2288:	static Oid findRangeSubOpclass(List *, Oid);
2368:	static Oid findRangeSubtypeDiffFunction(List *, Oid);
2214:	static Oid findTypeAnalyzeFunction(List *, Oid);
1959:	static Oid findTypeInputFunction(List *, Oid);
2022:	static Oid findTypeOutputFunction(List *, Oid);
2057:	static Oid findTypeReceiveFunction(List *, Oid);
2111:	static Oid findTypeSendFunction(List *, Oid);
2241:	static Oid findTypeSubscriptingFunction(List *, Oid);
2146:	static Oid findTypeTypmodinFunction(List *);
2180:	static Oid findTypeTypmodoutFunction(List *);
3271:	static List *get_rels_with_domain(Oid, LOCKMODE);
1814:	static void makeMultirangeConstructors(const char *, Oid, Oid, Oid, Oid, Oid *);
1740:	static void makeRangeConstructors(const char *, Oid, Oid, Oid);
3583:	static Node *replace_domain_constraint_value(ParseState *, ColumnRef *);
3151:	static void validateDomainConstraint(Oid, char *);

File tzfile.c:
579:	void __tzfile_compute(time_t, int, long *, int *, struct tm *);
491:	void __tzfile_default(const char *, const char *, int, int);
101:	void __tzfile_read(const char *, size_t, char **);

File tzparser.c:
446:	TimeZoneAbbrevTable *load_tzoffsets(const char *);
275:	static int ParseTzFile(const char *, int, tzEntry **, int *, int);
187:	static int addToArray(tzEntry **, int *, int, tzEntry *, _Bool);
97:	static _Bool splitTzLine(const char *, int, char *, tzEntry *);
51:	static _Bool validateTzEntry(tzEntry *);

File tzset.c:
518:	void __tz_compute(time_t, struct tm *, int);
567:	struct tm *__tz_convert(time_t, int, struct tm *);
547:	void __tzset(void);
321:	void __tzset_parse_tz(const char *);
119:	char *__tzstring(const char *);
430:	static void compute_change(tz_rule *, int);
613:	static void free_mem(void);
189:	static _Bool parse_offset(const char **, int);
229:	static _Bool parse_rule(const char **, int);
152:	static _Bool parse_tzname(const char **, int);
367:	static void tzset_internal(int);

File unicode_norm.c:
598:	UnicodeNormalizationQC unicode_is_normalized_quickcheck(UnicodeNormalizationForm, const pg_wchar *);
402:	pg_wchar *unicode_normalize(UnicodeNormalizationForm, const pg_wchar *);
321:	static void decompose_code(pg_wchar, _Bool, pg_wchar **, int *);
112:	static uint8 get_canonical_class(pg_wchar);
134:	static const pg_wchar *get_code_decomposition(const pg_unicode_decomposition *, int *);
72:	static const pg_unicode_decomposition *get_code_entry(pg_wchar);
159:	static int get_decomposed_size(pg_wchar, _Bool);
543:	static const pg_unicode_normprops *qc_hash_lookup(pg_wchar, const pg_unicode_norminfo *);
574:	static UnicodeNormalizationQC qc_is_allowed(UnicodeNormalizationForm, pg_wchar);
218:	static _Bool recompose_code(uint32, uint32, uint32 *);

File unwind.c:
111:	void __GI___pthread_unwind(__pthread_unwind_buf_t *);
132:	void __GI___pthread_unwind_next(__pthread_unwind_buf_t *);
101:	static void unwind_cleanup(_Unwind_Reason_Code, struct _Unwind_Exception *);
39:	static _Unwind_Reason_Code unwind_stop(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, struct _Unwind_Context *, void *);

File updwtmpx.c:
23:	void updwtmpx(const char *, const struct utmpx *);

File uselocale.c:
29:	locale_t __GI___uselocale(locale_t);

File user.c:
531:	Oid AlterRole(AlterRoleStmt *);
915:	Oid AlterRoleSet(AlterRoleSetStmt *);
71:	Oid CreateRole(ParseState *, CreateRoleStmt *);
1373:	void DropOwnedObjects(DropOwnedStmt *);
996:	void DropRole(DropRoleStmt *);
1314:	void GrantRole(GrantRoleStmt *);
1399:	void ReassignOwnedObjects(ReassignOwnedStmt *);
1174:	ObjectAddress RenameRole(const char *, const char *);
1436:	List *roleSpecsToIds(List *);
1463:	static void AddRoleMems(const char *, Oid, List *, List *, Oid, _Bool);
1641:	static void DelRoleMems(const char *, Oid, List *, List *, _Bool);
61:	static _Bool have_createrole_privilege(void);

File username.c:
31:	const char *get_user_name(char **);
74:	const char *get_user_name_or_exit(const char *);

File utility.c:
100:	_Bool CommandIsReadOnly(PlannedStmt *);
2341:	CommandTag CreateCommandTag(Node *);
3220:	Quit
Detaching from program: /home/karthikeya/Desktop/6th_sem/dbms/lab6/postgresql/install/bin/postgres, process 100764
[Inferior 1 (process 100764) detached]
No breakpoints or watchpoints.
Detaching from program: /home/karthikeya/Desktop/6th_sem/dbms/lab6/postgresql/install/bin/postgres, process 100764
[Inferior 1 (process 100764) detached]
